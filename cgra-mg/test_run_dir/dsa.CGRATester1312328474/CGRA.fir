;buildInfoPackage: chisel3, version: 3.3.1, scalaVersion: 2.12.11, sbtVersion: 1.3.10
circuit CGRA : 
  module IOB : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<12>, flip cfg_data : UInt<32>, flip in : UInt<32>[1], out : UInt<32>[1]}
    
    io.out[0] <= io.in[0] @[IOB.scala 53:42]
    
  module IOB_1 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<12>, flip cfg_data : UInt<32>, flip in : UInt<32>[1], out : UInt<32>[1]}
    
    io.out[0] <= io.in[0] @[IOB.scala 53:42]
    
  module IOB_2 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<12>, flip cfg_data : UInt<32>, flip in : UInt<32>[1], out : UInt<32>[1]}
    
    io.out[0] <= io.in[0] @[IOB.scala 53:42]
    
  module IOB_3 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<12>, flip cfg_data : UInt<32>, flip in : UInt<32>[1], out : UInt<32>[1]}
    
    io.out[0] <= io.in[0] @[IOB.scala 53:42]
    
  module IOB_4 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<12>, flip cfg_data : UInt<32>, flip in : UInt<32>[1], out : UInt<32>[1]}
    
    io.out[0] <= io.in[0] @[IOB.scala 53:42]
    
  module IOB_5 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<12>, flip cfg_data : UInt<32>, flip in : UInt<32>[1], out : UInt<32>[1]}
    
    io.out[0] <= io.in[0] @[IOB.scala 53:42]
    
  module IOB_6 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<12>, flip cfg_data : UInt<32>, flip in : UInt<32>[1], out : UInt<32>[1]}
    
    io.out[0] <= io.in[0] @[IOB.scala 53:42]
    
  module IOB_7 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<12>, flip cfg_data : UInt<32>, flip in : UInt<32>[1], out : UInt<32>[1]}
    
    io.out[0] <= io.in[0] @[IOB.scala 53:42]
    
  module IOB_8 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<12>, flip cfg_data : UInt<32>, flip in : UInt<32>[1], out : UInt<32>[1]}
    
    io.out[0] <= io.in[0] @[IOB.scala 53:42]
    
  module IOB_9 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<12>, flip cfg_data : UInt<32>, flip in : UInt<32>[1], out : UInt<32>[1]}
    
    io.out[0] <= io.in[0] @[IOB.scala 53:42]
    
  module IOB_10 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<12>, flip cfg_data : UInt<32>, flip in : UInt<32>[1], out : UInt<32>[1]}
    
    io.out[0] <= io.in[0] @[IOB.scala 53:42]
    
  module IOB_11 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<12>, flip cfg_data : UInt<32>, flip in : UInt<32>[1], out : UInt<32>[1]}
    
    io.out[0] <= io.in[0] @[IOB.scala 53:42]
    
  module IOB_12 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<12>, flip cfg_data : UInt<32>, flip in : UInt<32>[1], out : UInt<32>[1]}
    
    io.out[0] <= io.in[0] @[IOB.scala 53:42]
    
  module IOB_13 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<12>, flip cfg_data : UInt<32>, flip in : UInt<32>[1], out : UInt<32>[1]}
    
    io.out[0] <= io.in[0] @[IOB.scala 53:42]
    
  module IOB_14 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<12>, flip cfg_data : UInt<32>, flip in : UInt<32>[1], out : UInt<32>[1]}
    
    io.out[0] <= io.in[0] @[IOB.scala 53:42]
    
  module IOB_15 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<12>, flip cfg_data : UInt<32>, flip in : UInt<32>[1], out : UInt<32>[1]}
    
    io.out[0] <= io.in[0] @[IOB.scala 53:42]
    
  module Muxn : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<1>, flip in : UInt<32>[2], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    io.out <= _T_1 @[Multiplexer.scala 20:10]
    
  module ConfigMem : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<0>, flip cfg_data : UInt<32>, out : UInt<1>[1]}
    
    wire _T : UInt<1>[1] @[ConfigMem.scala 27:29]
    _T[0] <= UInt<1>("h00") @[ConfigMem.scala 27:29]
    reg regs : UInt<1>[1], clock with : (reset => (reset, _T)) @[ConfigMem.scala 27:21]
    node _T_1 = eq(io.cfg_addr, UInt<1>("h00")) @[ConfigMem.scala 32:38]
    node _T_2 = and(io.cfg_en, _T_1) @[ConfigMem.scala 32:22]
    when _T_2 : @[ConfigMem.scala 32:54]
      node _T_3 = bits(io.cfg_data, 0, 0) @[ConfigMem.scala 33:31]
      regs[0] <= _T_3 @[ConfigMem.scala 33:17]
      skip @[ConfigMem.scala 32:54]
    io.out[0] <= regs[0] @[ConfigMem.scala 52:45]
    
  module IOB_16 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<12>, flip cfg_data : UInt<32>, flip in : UInt<32>[2], out : UInt<32>[1]}
    
    inst Muxn of Muxn @[IOB.scala 36:41]
    Muxn.clock <= clock
    Muxn.reset <= reset
    inst ConfigMem of ConfigMem @[IOB.scala 37:21]
    ConfigMem.clock <= clock
    ConfigMem.reset <= reset
    node _T = bits(io.cfg_addr, 11, 2) @[IOB.scala 38:65]
    node _T_1 = eq(UInt<4>("h0a"), _T) @[IOB.scala 38:50]
    node _T_2 = and(io.cfg_en, _T_1) @[IOB.scala 38:32]
    ConfigMem.io.cfg_en <= _T_2 @[IOB.scala 38:19]
    node _T_3 = bits(io.cfg_addr, 1, 0) @[IOB.scala 39:35]
    ConfigMem.io.cfg_addr <= _T_3 @[IOB.scala 39:21]
    ConfigMem.io.cfg_data <= io.cfg_data @[IOB.scala 40:21]
    Muxn.io.in[0] <= io.in[0] @[IOB.scala 46:23]
    Muxn.io.in[1] <= io.in[1] @[IOB.scala 46:23]
    io.out[0] <= Muxn.io.out @[IOB.scala 48:17]
    node _T_4 = bits(ConfigMem.io.out[0], 0, 0) @[IOB.scala 49:38]
    Muxn.io.config <= _T_4 @[IOB.scala 49:22]
    
  module Muxn_1 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<1>, flip in : UInt<32>[2], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    io.out <= _T_1 @[Multiplexer.scala 20:10]
    
  module ConfigMem_1 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<0>, flip cfg_data : UInt<32>, out : UInt<1>[1]}
    
    wire _T : UInt<1>[1] @[ConfigMem.scala 27:29]
    _T[0] <= UInt<1>("h00") @[ConfigMem.scala 27:29]
    reg regs : UInt<1>[1], clock with : (reset => (reset, _T)) @[ConfigMem.scala 27:21]
    node _T_1 = eq(io.cfg_addr, UInt<1>("h00")) @[ConfigMem.scala 32:38]
    node _T_2 = and(io.cfg_en, _T_1) @[ConfigMem.scala 32:22]
    when _T_2 : @[ConfigMem.scala 32:54]
      node _T_3 = bits(io.cfg_data, 0, 0) @[ConfigMem.scala 33:31]
      regs[0] <= _T_3 @[ConfigMem.scala 33:17]
      skip @[ConfigMem.scala 32:54]
    io.out[0] <= regs[0] @[ConfigMem.scala 52:45]
    
  module IOB_17 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<12>, flip cfg_data : UInt<32>, flip in : UInt<32>[2], out : UInt<32>[1]}
    
    inst Muxn of Muxn_1 @[IOB.scala 36:41]
    Muxn.clock <= clock
    Muxn.reset <= reset
    inst ConfigMem of ConfigMem_1 @[IOB.scala 37:21]
    ConfigMem.clock <= clock
    ConfigMem.reset <= reset
    node _T = bits(io.cfg_addr, 11, 2) @[IOB.scala 38:65]
    node _T_1 = eq(UInt<4>("h0b"), _T) @[IOB.scala 38:50]
    node _T_2 = and(io.cfg_en, _T_1) @[IOB.scala 38:32]
    ConfigMem.io.cfg_en <= _T_2 @[IOB.scala 38:19]
    node _T_3 = bits(io.cfg_addr, 1, 0) @[IOB.scala 39:35]
    ConfigMem.io.cfg_addr <= _T_3 @[IOB.scala 39:21]
    ConfigMem.io.cfg_data <= io.cfg_data @[IOB.scala 40:21]
    Muxn.io.in[0] <= io.in[0] @[IOB.scala 46:23]
    Muxn.io.in[1] <= io.in[1] @[IOB.scala 46:23]
    io.out[0] <= Muxn.io.out @[IOB.scala 48:17]
    node _T_4 = bits(ConfigMem.io.out[0], 0, 0) @[IOB.scala 49:38]
    Muxn.io.config <= _T_4 @[IOB.scala 49:22]
    
  module Muxn_2 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<1>, flip in : UInt<32>[2], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    io.out <= _T_1 @[Multiplexer.scala 20:10]
    
  module ConfigMem_2 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<0>, flip cfg_data : UInt<32>, out : UInt<1>[1]}
    
    wire _T : UInt<1>[1] @[ConfigMem.scala 27:29]
    _T[0] <= UInt<1>("h00") @[ConfigMem.scala 27:29]
    reg regs : UInt<1>[1], clock with : (reset => (reset, _T)) @[ConfigMem.scala 27:21]
    node _T_1 = eq(io.cfg_addr, UInt<1>("h00")) @[ConfigMem.scala 32:38]
    node _T_2 = and(io.cfg_en, _T_1) @[ConfigMem.scala 32:22]
    when _T_2 : @[ConfigMem.scala 32:54]
      node _T_3 = bits(io.cfg_data, 0, 0) @[ConfigMem.scala 33:31]
      regs[0] <= _T_3 @[ConfigMem.scala 33:17]
      skip @[ConfigMem.scala 32:54]
    io.out[0] <= regs[0] @[ConfigMem.scala 52:45]
    
  module IOB_18 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<12>, flip cfg_data : UInt<32>, flip in : UInt<32>[2], out : UInt<32>[1]}
    
    inst Muxn of Muxn_2 @[IOB.scala 36:41]
    Muxn.clock <= clock
    Muxn.reset <= reset
    inst ConfigMem of ConfigMem_2 @[IOB.scala 37:21]
    ConfigMem.clock <= clock
    ConfigMem.reset <= reset
    node _T = bits(io.cfg_addr, 11, 2) @[IOB.scala 38:65]
    node _T_1 = eq(UInt<4>("h0c"), _T) @[IOB.scala 38:50]
    node _T_2 = and(io.cfg_en, _T_1) @[IOB.scala 38:32]
    ConfigMem.io.cfg_en <= _T_2 @[IOB.scala 38:19]
    node _T_3 = bits(io.cfg_addr, 1, 0) @[IOB.scala 39:35]
    ConfigMem.io.cfg_addr <= _T_3 @[IOB.scala 39:21]
    ConfigMem.io.cfg_data <= io.cfg_data @[IOB.scala 40:21]
    Muxn.io.in[0] <= io.in[0] @[IOB.scala 46:23]
    Muxn.io.in[1] <= io.in[1] @[IOB.scala 46:23]
    io.out[0] <= Muxn.io.out @[IOB.scala 48:17]
    node _T_4 = bits(ConfigMem.io.out[0], 0, 0) @[IOB.scala 49:38]
    Muxn.io.config <= _T_4 @[IOB.scala 49:22]
    
  module Muxn_3 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<1>, flip in : UInt<32>[2], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    io.out <= _T_1 @[Multiplexer.scala 20:10]
    
  module ConfigMem_3 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<0>, flip cfg_data : UInt<32>, out : UInt<1>[1]}
    
    wire _T : UInt<1>[1] @[ConfigMem.scala 27:29]
    _T[0] <= UInt<1>("h00") @[ConfigMem.scala 27:29]
    reg regs : UInt<1>[1], clock with : (reset => (reset, _T)) @[ConfigMem.scala 27:21]
    node _T_1 = eq(io.cfg_addr, UInt<1>("h00")) @[ConfigMem.scala 32:38]
    node _T_2 = and(io.cfg_en, _T_1) @[ConfigMem.scala 32:22]
    when _T_2 : @[ConfigMem.scala 32:54]
      node _T_3 = bits(io.cfg_data, 0, 0) @[ConfigMem.scala 33:31]
      regs[0] <= _T_3 @[ConfigMem.scala 33:17]
      skip @[ConfigMem.scala 32:54]
    io.out[0] <= regs[0] @[ConfigMem.scala 52:45]
    
  module IOB_19 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<12>, flip cfg_data : UInt<32>, flip in : UInt<32>[2], out : UInt<32>[1]}
    
    inst Muxn of Muxn_3 @[IOB.scala 36:41]
    Muxn.clock <= clock
    Muxn.reset <= reset
    inst ConfigMem of ConfigMem_3 @[IOB.scala 37:21]
    ConfigMem.clock <= clock
    ConfigMem.reset <= reset
    node _T = bits(io.cfg_addr, 11, 2) @[IOB.scala 38:65]
    node _T_1 = eq(UInt<4>("h0d"), _T) @[IOB.scala 38:50]
    node _T_2 = and(io.cfg_en, _T_1) @[IOB.scala 38:32]
    ConfigMem.io.cfg_en <= _T_2 @[IOB.scala 38:19]
    node _T_3 = bits(io.cfg_addr, 1, 0) @[IOB.scala 39:35]
    ConfigMem.io.cfg_addr <= _T_3 @[IOB.scala 39:21]
    ConfigMem.io.cfg_data <= io.cfg_data @[IOB.scala 40:21]
    Muxn.io.in[0] <= io.in[0] @[IOB.scala 46:23]
    Muxn.io.in[1] <= io.in[1] @[IOB.scala 46:23]
    io.out[0] <= Muxn.io.out @[IOB.scala 48:17]
    node _T_4 = bits(ConfigMem.io.out[0], 0, 0) @[IOB.scala 49:38]
    Muxn.io.config <= _T_4 @[IOB.scala 49:22]
    
  module Muxn_4 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<1>, flip in : UInt<32>[2], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    io.out <= _T_1 @[Multiplexer.scala 20:10]
    
  module ConfigMem_4 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<0>, flip cfg_data : UInt<32>, out : UInt<1>[1]}
    
    wire _T : UInt<1>[1] @[ConfigMem.scala 27:29]
    _T[0] <= UInt<1>("h00") @[ConfigMem.scala 27:29]
    reg regs : UInt<1>[1], clock with : (reset => (reset, _T)) @[ConfigMem.scala 27:21]
    node _T_1 = eq(io.cfg_addr, UInt<1>("h00")) @[ConfigMem.scala 32:38]
    node _T_2 = and(io.cfg_en, _T_1) @[ConfigMem.scala 32:22]
    when _T_2 : @[ConfigMem.scala 32:54]
      node _T_3 = bits(io.cfg_data, 0, 0) @[ConfigMem.scala 33:31]
      regs[0] <= _T_3 @[ConfigMem.scala 33:17]
      skip @[ConfigMem.scala 32:54]
    io.out[0] <= regs[0] @[ConfigMem.scala 52:45]
    
  module IOB_20 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<12>, flip cfg_data : UInt<32>, flip in : UInt<32>[2], out : UInt<32>[1]}
    
    inst Muxn of Muxn_4 @[IOB.scala 36:41]
    Muxn.clock <= clock
    Muxn.reset <= reset
    inst ConfigMem of ConfigMem_4 @[IOB.scala 37:21]
    ConfigMem.clock <= clock
    ConfigMem.reset <= reset
    node _T = bits(io.cfg_addr, 11, 2) @[IOB.scala 38:65]
    node _T_1 = eq(UInt<4>("h0e"), _T) @[IOB.scala 38:50]
    node _T_2 = and(io.cfg_en, _T_1) @[IOB.scala 38:32]
    ConfigMem.io.cfg_en <= _T_2 @[IOB.scala 38:19]
    node _T_3 = bits(io.cfg_addr, 1, 0) @[IOB.scala 39:35]
    ConfigMem.io.cfg_addr <= _T_3 @[IOB.scala 39:21]
    ConfigMem.io.cfg_data <= io.cfg_data @[IOB.scala 40:21]
    Muxn.io.in[0] <= io.in[0] @[IOB.scala 46:23]
    Muxn.io.in[1] <= io.in[1] @[IOB.scala 46:23]
    io.out[0] <= Muxn.io.out @[IOB.scala 48:17]
    node _T_4 = bits(ConfigMem.io.out[0], 0, 0) @[IOB.scala 49:38]
    Muxn.io.config <= _T_4 @[IOB.scala 49:22]
    
  module Muxn_5 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<1>, flip in : UInt<32>[2], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    io.out <= _T_1 @[Multiplexer.scala 20:10]
    
  module ConfigMem_5 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<0>, flip cfg_data : UInt<32>, out : UInt<1>[1]}
    
    wire _T : UInt<1>[1] @[ConfigMem.scala 27:29]
    _T[0] <= UInt<1>("h00") @[ConfigMem.scala 27:29]
    reg regs : UInt<1>[1], clock with : (reset => (reset, _T)) @[ConfigMem.scala 27:21]
    node _T_1 = eq(io.cfg_addr, UInt<1>("h00")) @[ConfigMem.scala 32:38]
    node _T_2 = and(io.cfg_en, _T_1) @[ConfigMem.scala 32:22]
    when _T_2 : @[ConfigMem.scala 32:54]
      node _T_3 = bits(io.cfg_data, 0, 0) @[ConfigMem.scala 33:31]
      regs[0] <= _T_3 @[ConfigMem.scala 33:17]
      skip @[ConfigMem.scala 32:54]
    io.out[0] <= regs[0] @[ConfigMem.scala 52:45]
    
  module IOB_21 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<12>, flip cfg_data : UInt<32>, flip in : UInt<32>[2], out : UInt<32>[1]}
    
    inst Muxn of Muxn_5 @[IOB.scala 36:41]
    Muxn.clock <= clock
    Muxn.reset <= reset
    inst ConfigMem of ConfigMem_5 @[IOB.scala 37:21]
    ConfigMem.clock <= clock
    ConfigMem.reset <= reset
    node _T = bits(io.cfg_addr, 11, 2) @[IOB.scala 38:65]
    node _T_1 = eq(UInt<4>("h0f"), _T) @[IOB.scala 38:50]
    node _T_2 = and(io.cfg_en, _T_1) @[IOB.scala 38:32]
    ConfigMem.io.cfg_en <= _T_2 @[IOB.scala 38:19]
    node _T_3 = bits(io.cfg_addr, 1, 0) @[IOB.scala 39:35]
    ConfigMem.io.cfg_addr <= _T_3 @[IOB.scala 39:21]
    ConfigMem.io.cfg_data <= io.cfg_data @[IOB.scala 40:21]
    Muxn.io.in[0] <= io.in[0] @[IOB.scala 46:23]
    Muxn.io.in[1] <= io.in[1] @[IOB.scala 46:23]
    io.out[0] <= Muxn.io.out @[IOB.scala 48:17]
    node _T_4 = bits(ConfigMem.io.out[0], 0, 0) @[IOB.scala 49:38]
    Muxn.io.config <= _T_4 @[IOB.scala 49:22]
    
  module Muxn_6 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<1>, flip in : UInt<32>[2], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    io.out <= _T_1 @[Multiplexer.scala 20:10]
    
  module ConfigMem_6 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<0>, flip cfg_data : UInt<32>, out : UInt<1>[1]}
    
    wire _T : UInt<1>[1] @[ConfigMem.scala 27:29]
    _T[0] <= UInt<1>("h00") @[ConfigMem.scala 27:29]
    reg regs : UInt<1>[1], clock with : (reset => (reset, _T)) @[ConfigMem.scala 27:21]
    node _T_1 = eq(io.cfg_addr, UInt<1>("h00")) @[ConfigMem.scala 32:38]
    node _T_2 = and(io.cfg_en, _T_1) @[ConfigMem.scala 32:22]
    when _T_2 : @[ConfigMem.scala 32:54]
      node _T_3 = bits(io.cfg_data, 0, 0) @[ConfigMem.scala 33:31]
      regs[0] <= _T_3 @[ConfigMem.scala 33:17]
      skip @[ConfigMem.scala 32:54]
    io.out[0] <= regs[0] @[ConfigMem.scala 52:45]
    
  module IOB_22 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<12>, flip cfg_data : UInt<32>, flip in : UInt<32>[2], out : UInt<32>[1]}
    
    inst Muxn of Muxn_6 @[IOB.scala 36:41]
    Muxn.clock <= clock
    Muxn.reset <= reset
    inst ConfigMem of ConfigMem_6 @[IOB.scala 37:21]
    ConfigMem.clock <= clock
    ConfigMem.reset <= reset
    node _T = bits(io.cfg_addr, 11, 2) @[IOB.scala 38:65]
    node _T_1 = eq(UInt<5>("h010"), _T) @[IOB.scala 38:50]
    node _T_2 = and(io.cfg_en, _T_1) @[IOB.scala 38:32]
    ConfigMem.io.cfg_en <= _T_2 @[IOB.scala 38:19]
    node _T_3 = bits(io.cfg_addr, 1, 0) @[IOB.scala 39:35]
    ConfigMem.io.cfg_addr <= _T_3 @[IOB.scala 39:21]
    ConfigMem.io.cfg_data <= io.cfg_data @[IOB.scala 40:21]
    Muxn.io.in[0] <= io.in[0] @[IOB.scala 46:23]
    Muxn.io.in[1] <= io.in[1] @[IOB.scala 46:23]
    io.out[0] <= Muxn.io.out @[IOB.scala 48:17]
    node _T_4 = bits(ConfigMem.io.out[0], 0, 0) @[IOB.scala 49:38]
    Muxn.io.config <= _T_4 @[IOB.scala 49:22]
    
  module Muxn_7 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<1>, flip in : UInt<32>[2], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    io.out <= _T_1 @[Multiplexer.scala 20:10]
    
  module ConfigMem_7 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<0>, flip cfg_data : UInt<32>, out : UInt<1>[1]}
    
    wire _T : UInt<1>[1] @[ConfigMem.scala 27:29]
    _T[0] <= UInt<1>("h00") @[ConfigMem.scala 27:29]
    reg regs : UInt<1>[1], clock with : (reset => (reset, _T)) @[ConfigMem.scala 27:21]
    node _T_1 = eq(io.cfg_addr, UInt<1>("h00")) @[ConfigMem.scala 32:38]
    node _T_2 = and(io.cfg_en, _T_1) @[ConfigMem.scala 32:22]
    when _T_2 : @[ConfigMem.scala 32:54]
      node _T_3 = bits(io.cfg_data, 0, 0) @[ConfigMem.scala 33:31]
      regs[0] <= _T_3 @[ConfigMem.scala 33:17]
      skip @[ConfigMem.scala 32:54]
    io.out[0] <= regs[0] @[ConfigMem.scala 52:45]
    
  module IOB_23 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<12>, flip cfg_data : UInt<32>, flip in : UInt<32>[2], out : UInt<32>[1]}
    
    inst Muxn of Muxn_7 @[IOB.scala 36:41]
    Muxn.clock <= clock
    Muxn.reset <= reset
    inst ConfigMem of ConfigMem_7 @[IOB.scala 37:21]
    ConfigMem.clock <= clock
    ConfigMem.reset <= reset
    node _T = bits(io.cfg_addr, 11, 2) @[IOB.scala 38:65]
    node _T_1 = eq(UInt<5>("h011"), _T) @[IOB.scala 38:50]
    node _T_2 = and(io.cfg_en, _T_1) @[IOB.scala 38:32]
    ConfigMem.io.cfg_en <= _T_2 @[IOB.scala 38:19]
    node _T_3 = bits(io.cfg_addr, 1, 0) @[IOB.scala 39:35]
    ConfigMem.io.cfg_addr <= _T_3 @[IOB.scala 39:21]
    ConfigMem.io.cfg_data <= io.cfg_data @[IOB.scala 40:21]
    Muxn.io.in[0] <= io.in[0] @[IOB.scala 46:23]
    Muxn.io.in[1] <= io.in[1] @[IOB.scala 46:23]
    io.out[0] <= Muxn.io.out @[IOB.scala 48:17]
    node _T_4 = bits(ConfigMem.io.out[0], 0, 0) @[IOB.scala 49:38]
    Muxn.io.config <= _T_4 @[IOB.scala 49:22]
    
  module Muxn_8 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<1>, flip in : UInt<32>[2], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    io.out <= _T_1 @[Multiplexer.scala 20:10]
    
  module ConfigMem_8 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<0>, flip cfg_data : UInt<32>, out : UInt<1>[1]}
    
    wire _T : UInt<1>[1] @[ConfigMem.scala 27:29]
    _T[0] <= UInt<1>("h00") @[ConfigMem.scala 27:29]
    reg regs : UInt<1>[1], clock with : (reset => (reset, _T)) @[ConfigMem.scala 27:21]
    node _T_1 = eq(io.cfg_addr, UInt<1>("h00")) @[ConfigMem.scala 32:38]
    node _T_2 = and(io.cfg_en, _T_1) @[ConfigMem.scala 32:22]
    when _T_2 : @[ConfigMem.scala 32:54]
      node _T_3 = bits(io.cfg_data, 0, 0) @[ConfigMem.scala 33:31]
      regs[0] <= _T_3 @[ConfigMem.scala 33:17]
      skip @[ConfigMem.scala 32:54]
    io.out[0] <= regs[0] @[ConfigMem.scala 52:45]
    
  module IOB_24 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<12>, flip cfg_data : UInt<32>, flip in : UInt<32>[2], out : UInt<32>[1]}
    
    inst Muxn of Muxn_8 @[IOB.scala 36:41]
    Muxn.clock <= clock
    Muxn.reset <= reset
    inst ConfigMem of ConfigMem_8 @[IOB.scala 37:21]
    ConfigMem.clock <= clock
    ConfigMem.reset <= reset
    node _T = bits(io.cfg_addr, 11, 2) @[IOB.scala 38:65]
    node _T_1 = eq(UInt<8>("h0b5"), _T) @[IOB.scala 38:50]
    node _T_2 = and(io.cfg_en, _T_1) @[IOB.scala 38:32]
    ConfigMem.io.cfg_en <= _T_2 @[IOB.scala 38:19]
    node _T_3 = bits(io.cfg_addr, 1, 0) @[IOB.scala 39:35]
    ConfigMem.io.cfg_addr <= _T_3 @[IOB.scala 39:21]
    ConfigMem.io.cfg_data <= io.cfg_data @[IOB.scala 40:21]
    Muxn.io.in[0] <= io.in[0] @[IOB.scala 46:23]
    Muxn.io.in[1] <= io.in[1] @[IOB.scala 46:23]
    io.out[0] <= Muxn.io.out @[IOB.scala 48:17]
    node _T_4 = bits(ConfigMem.io.out[0], 0, 0) @[IOB.scala 49:38]
    Muxn.io.config <= _T_4 @[IOB.scala 49:22]
    
  module Muxn_9 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<1>, flip in : UInt<32>[2], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    io.out <= _T_1 @[Multiplexer.scala 20:10]
    
  module ConfigMem_9 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<0>, flip cfg_data : UInt<32>, out : UInt<1>[1]}
    
    wire _T : UInt<1>[1] @[ConfigMem.scala 27:29]
    _T[0] <= UInt<1>("h00") @[ConfigMem.scala 27:29]
    reg regs : UInt<1>[1], clock with : (reset => (reset, _T)) @[ConfigMem.scala 27:21]
    node _T_1 = eq(io.cfg_addr, UInt<1>("h00")) @[ConfigMem.scala 32:38]
    node _T_2 = and(io.cfg_en, _T_1) @[ConfigMem.scala 32:22]
    when _T_2 : @[ConfigMem.scala 32:54]
      node _T_3 = bits(io.cfg_data, 0, 0) @[ConfigMem.scala 33:31]
      regs[0] <= _T_3 @[ConfigMem.scala 33:17]
      skip @[ConfigMem.scala 32:54]
    io.out[0] <= regs[0] @[ConfigMem.scala 52:45]
    
  module IOB_25 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<12>, flip cfg_data : UInt<32>, flip in : UInt<32>[2], out : UInt<32>[1]}
    
    inst Muxn of Muxn_9 @[IOB.scala 36:41]
    Muxn.clock <= clock
    Muxn.reset <= reset
    inst ConfigMem of ConfigMem_9 @[IOB.scala 37:21]
    ConfigMem.clock <= clock
    ConfigMem.reset <= reset
    node _T = bits(io.cfg_addr, 11, 2) @[IOB.scala 38:65]
    node _T_1 = eq(UInt<8>("h0b6"), _T) @[IOB.scala 38:50]
    node _T_2 = and(io.cfg_en, _T_1) @[IOB.scala 38:32]
    ConfigMem.io.cfg_en <= _T_2 @[IOB.scala 38:19]
    node _T_3 = bits(io.cfg_addr, 1, 0) @[IOB.scala 39:35]
    ConfigMem.io.cfg_addr <= _T_3 @[IOB.scala 39:21]
    ConfigMem.io.cfg_data <= io.cfg_data @[IOB.scala 40:21]
    Muxn.io.in[0] <= io.in[0] @[IOB.scala 46:23]
    Muxn.io.in[1] <= io.in[1] @[IOB.scala 46:23]
    io.out[0] <= Muxn.io.out @[IOB.scala 48:17]
    node _T_4 = bits(ConfigMem.io.out[0], 0, 0) @[IOB.scala 49:38]
    Muxn.io.config <= _T_4 @[IOB.scala 49:22]
    
  module Muxn_10 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<1>, flip in : UInt<32>[2], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    io.out <= _T_1 @[Multiplexer.scala 20:10]
    
  module ConfigMem_10 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<0>, flip cfg_data : UInt<32>, out : UInt<1>[1]}
    
    wire _T : UInt<1>[1] @[ConfigMem.scala 27:29]
    _T[0] <= UInt<1>("h00") @[ConfigMem.scala 27:29]
    reg regs : UInt<1>[1], clock with : (reset => (reset, _T)) @[ConfigMem.scala 27:21]
    node _T_1 = eq(io.cfg_addr, UInt<1>("h00")) @[ConfigMem.scala 32:38]
    node _T_2 = and(io.cfg_en, _T_1) @[ConfigMem.scala 32:22]
    when _T_2 : @[ConfigMem.scala 32:54]
      node _T_3 = bits(io.cfg_data, 0, 0) @[ConfigMem.scala 33:31]
      regs[0] <= _T_3 @[ConfigMem.scala 33:17]
      skip @[ConfigMem.scala 32:54]
    io.out[0] <= regs[0] @[ConfigMem.scala 52:45]
    
  module IOB_26 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<12>, flip cfg_data : UInt<32>, flip in : UInt<32>[2], out : UInt<32>[1]}
    
    inst Muxn of Muxn_10 @[IOB.scala 36:41]
    Muxn.clock <= clock
    Muxn.reset <= reset
    inst ConfigMem of ConfigMem_10 @[IOB.scala 37:21]
    ConfigMem.clock <= clock
    ConfigMem.reset <= reset
    node _T = bits(io.cfg_addr, 11, 2) @[IOB.scala 38:65]
    node _T_1 = eq(UInt<8>("h0b7"), _T) @[IOB.scala 38:50]
    node _T_2 = and(io.cfg_en, _T_1) @[IOB.scala 38:32]
    ConfigMem.io.cfg_en <= _T_2 @[IOB.scala 38:19]
    node _T_3 = bits(io.cfg_addr, 1, 0) @[IOB.scala 39:35]
    ConfigMem.io.cfg_addr <= _T_3 @[IOB.scala 39:21]
    ConfigMem.io.cfg_data <= io.cfg_data @[IOB.scala 40:21]
    Muxn.io.in[0] <= io.in[0] @[IOB.scala 46:23]
    Muxn.io.in[1] <= io.in[1] @[IOB.scala 46:23]
    io.out[0] <= Muxn.io.out @[IOB.scala 48:17]
    node _T_4 = bits(ConfigMem.io.out[0], 0, 0) @[IOB.scala 49:38]
    Muxn.io.config <= _T_4 @[IOB.scala 49:22]
    
  module Muxn_11 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<1>, flip in : UInt<32>[2], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    io.out <= _T_1 @[Multiplexer.scala 20:10]
    
  module ConfigMem_11 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<0>, flip cfg_data : UInt<32>, out : UInt<1>[1]}
    
    wire _T : UInt<1>[1] @[ConfigMem.scala 27:29]
    _T[0] <= UInt<1>("h00") @[ConfigMem.scala 27:29]
    reg regs : UInt<1>[1], clock with : (reset => (reset, _T)) @[ConfigMem.scala 27:21]
    node _T_1 = eq(io.cfg_addr, UInt<1>("h00")) @[ConfigMem.scala 32:38]
    node _T_2 = and(io.cfg_en, _T_1) @[ConfigMem.scala 32:22]
    when _T_2 : @[ConfigMem.scala 32:54]
      node _T_3 = bits(io.cfg_data, 0, 0) @[ConfigMem.scala 33:31]
      regs[0] <= _T_3 @[ConfigMem.scala 33:17]
      skip @[ConfigMem.scala 32:54]
    io.out[0] <= regs[0] @[ConfigMem.scala 52:45]
    
  module IOB_27 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<12>, flip cfg_data : UInt<32>, flip in : UInt<32>[2], out : UInt<32>[1]}
    
    inst Muxn of Muxn_11 @[IOB.scala 36:41]
    Muxn.clock <= clock
    Muxn.reset <= reset
    inst ConfigMem of ConfigMem_11 @[IOB.scala 37:21]
    ConfigMem.clock <= clock
    ConfigMem.reset <= reset
    node _T = bits(io.cfg_addr, 11, 2) @[IOB.scala 38:65]
    node _T_1 = eq(UInt<8>("h0b8"), _T) @[IOB.scala 38:50]
    node _T_2 = and(io.cfg_en, _T_1) @[IOB.scala 38:32]
    ConfigMem.io.cfg_en <= _T_2 @[IOB.scala 38:19]
    node _T_3 = bits(io.cfg_addr, 1, 0) @[IOB.scala 39:35]
    ConfigMem.io.cfg_addr <= _T_3 @[IOB.scala 39:21]
    ConfigMem.io.cfg_data <= io.cfg_data @[IOB.scala 40:21]
    Muxn.io.in[0] <= io.in[0] @[IOB.scala 46:23]
    Muxn.io.in[1] <= io.in[1] @[IOB.scala 46:23]
    io.out[0] <= Muxn.io.out @[IOB.scala 48:17]
    node _T_4 = bits(ConfigMem.io.out[0], 0, 0) @[IOB.scala 49:38]
    Muxn.io.config <= _T_4 @[IOB.scala 49:22]
    
  module Muxn_12 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<1>, flip in : UInt<32>[2], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    io.out <= _T_1 @[Multiplexer.scala 20:10]
    
  module ConfigMem_12 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<0>, flip cfg_data : UInt<32>, out : UInt<1>[1]}
    
    wire _T : UInt<1>[1] @[ConfigMem.scala 27:29]
    _T[0] <= UInt<1>("h00") @[ConfigMem.scala 27:29]
    reg regs : UInt<1>[1], clock with : (reset => (reset, _T)) @[ConfigMem.scala 27:21]
    node _T_1 = eq(io.cfg_addr, UInt<1>("h00")) @[ConfigMem.scala 32:38]
    node _T_2 = and(io.cfg_en, _T_1) @[ConfigMem.scala 32:22]
    when _T_2 : @[ConfigMem.scala 32:54]
      node _T_3 = bits(io.cfg_data, 0, 0) @[ConfigMem.scala 33:31]
      regs[0] <= _T_3 @[ConfigMem.scala 33:17]
      skip @[ConfigMem.scala 32:54]
    io.out[0] <= regs[0] @[ConfigMem.scala 52:45]
    
  module IOB_28 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<12>, flip cfg_data : UInt<32>, flip in : UInt<32>[2], out : UInt<32>[1]}
    
    inst Muxn of Muxn_12 @[IOB.scala 36:41]
    Muxn.clock <= clock
    Muxn.reset <= reset
    inst ConfigMem of ConfigMem_12 @[IOB.scala 37:21]
    ConfigMem.clock <= clock
    ConfigMem.reset <= reset
    node _T = bits(io.cfg_addr, 11, 2) @[IOB.scala 38:65]
    node _T_1 = eq(UInt<8>("h0b9"), _T) @[IOB.scala 38:50]
    node _T_2 = and(io.cfg_en, _T_1) @[IOB.scala 38:32]
    ConfigMem.io.cfg_en <= _T_2 @[IOB.scala 38:19]
    node _T_3 = bits(io.cfg_addr, 1, 0) @[IOB.scala 39:35]
    ConfigMem.io.cfg_addr <= _T_3 @[IOB.scala 39:21]
    ConfigMem.io.cfg_data <= io.cfg_data @[IOB.scala 40:21]
    Muxn.io.in[0] <= io.in[0] @[IOB.scala 46:23]
    Muxn.io.in[1] <= io.in[1] @[IOB.scala 46:23]
    io.out[0] <= Muxn.io.out @[IOB.scala 48:17]
    node _T_4 = bits(ConfigMem.io.out[0], 0, 0) @[IOB.scala 49:38]
    Muxn.io.config <= _T_4 @[IOB.scala 49:22]
    
  module Muxn_13 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<1>, flip in : UInt<32>[2], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    io.out <= _T_1 @[Multiplexer.scala 20:10]
    
  module ConfigMem_13 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<0>, flip cfg_data : UInt<32>, out : UInt<1>[1]}
    
    wire _T : UInt<1>[1] @[ConfigMem.scala 27:29]
    _T[0] <= UInt<1>("h00") @[ConfigMem.scala 27:29]
    reg regs : UInt<1>[1], clock with : (reset => (reset, _T)) @[ConfigMem.scala 27:21]
    node _T_1 = eq(io.cfg_addr, UInt<1>("h00")) @[ConfigMem.scala 32:38]
    node _T_2 = and(io.cfg_en, _T_1) @[ConfigMem.scala 32:22]
    when _T_2 : @[ConfigMem.scala 32:54]
      node _T_3 = bits(io.cfg_data, 0, 0) @[ConfigMem.scala 33:31]
      regs[0] <= _T_3 @[ConfigMem.scala 33:17]
      skip @[ConfigMem.scala 32:54]
    io.out[0] <= regs[0] @[ConfigMem.scala 52:45]
    
  module IOB_29 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<12>, flip cfg_data : UInt<32>, flip in : UInt<32>[2], out : UInt<32>[1]}
    
    inst Muxn of Muxn_13 @[IOB.scala 36:41]
    Muxn.clock <= clock
    Muxn.reset <= reset
    inst ConfigMem of ConfigMem_13 @[IOB.scala 37:21]
    ConfigMem.clock <= clock
    ConfigMem.reset <= reset
    node _T = bits(io.cfg_addr, 11, 2) @[IOB.scala 38:65]
    node _T_1 = eq(UInt<8>("h0ba"), _T) @[IOB.scala 38:50]
    node _T_2 = and(io.cfg_en, _T_1) @[IOB.scala 38:32]
    ConfigMem.io.cfg_en <= _T_2 @[IOB.scala 38:19]
    node _T_3 = bits(io.cfg_addr, 1, 0) @[IOB.scala 39:35]
    ConfigMem.io.cfg_addr <= _T_3 @[IOB.scala 39:21]
    ConfigMem.io.cfg_data <= io.cfg_data @[IOB.scala 40:21]
    Muxn.io.in[0] <= io.in[0] @[IOB.scala 46:23]
    Muxn.io.in[1] <= io.in[1] @[IOB.scala 46:23]
    io.out[0] <= Muxn.io.out @[IOB.scala 48:17]
    node _T_4 = bits(ConfigMem.io.out[0], 0, 0) @[IOB.scala 49:38]
    Muxn.io.config <= _T_4 @[IOB.scala 49:22]
    
  module Muxn_14 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<1>, flip in : UInt<32>[2], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    io.out <= _T_1 @[Multiplexer.scala 20:10]
    
  module ConfigMem_14 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<0>, flip cfg_data : UInt<32>, out : UInt<1>[1]}
    
    wire _T : UInt<1>[1] @[ConfigMem.scala 27:29]
    _T[0] <= UInt<1>("h00") @[ConfigMem.scala 27:29]
    reg regs : UInt<1>[1], clock with : (reset => (reset, _T)) @[ConfigMem.scala 27:21]
    node _T_1 = eq(io.cfg_addr, UInt<1>("h00")) @[ConfigMem.scala 32:38]
    node _T_2 = and(io.cfg_en, _T_1) @[ConfigMem.scala 32:22]
    when _T_2 : @[ConfigMem.scala 32:54]
      node _T_3 = bits(io.cfg_data, 0, 0) @[ConfigMem.scala 33:31]
      regs[0] <= _T_3 @[ConfigMem.scala 33:17]
      skip @[ConfigMem.scala 32:54]
    io.out[0] <= regs[0] @[ConfigMem.scala 52:45]
    
  module IOB_30 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<12>, flip cfg_data : UInt<32>, flip in : UInt<32>[2], out : UInt<32>[1]}
    
    inst Muxn of Muxn_14 @[IOB.scala 36:41]
    Muxn.clock <= clock
    Muxn.reset <= reset
    inst ConfigMem of ConfigMem_14 @[IOB.scala 37:21]
    ConfigMem.clock <= clock
    ConfigMem.reset <= reset
    node _T = bits(io.cfg_addr, 11, 2) @[IOB.scala 38:65]
    node _T_1 = eq(UInt<8>("h0bb"), _T) @[IOB.scala 38:50]
    node _T_2 = and(io.cfg_en, _T_1) @[IOB.scala 38:32]
    ConfigMem.io.cfg_en <= _T_2 @[IOB.scala 38:19]
    node _T_3 = bits(io.cfg_addr, 1, 0) @[IOB.scala 39:35]
    ConfigMem.io.cfg_addr <= _T_3 @[IOB.scala 39:21]
    ConfigMem.io.cfg_data <= io.cfg_data @[IOB.scala 40:21]
    Muxn.io.in[0] <= io.in[0] @[IOB.scala 46:23]
    Muxn.io.in[1] <= io.in[1] @[IOB.scala 46:23]
    io.out[0] <= Muxn.io.out @[IOB.scala 48:17]
    node _T_4 = bits(ConfigMem.io.out[0], 0, 0) @[IOB.scala 49:38]
    Muxn.io.config <= _T_4 @[IOB.scala 49:22]
    
  module Muxn_15 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<1>, flip in : UInt<32>[2], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    io.out <= _T_1 @[Multiplexer.scala 20:10]
    
  module ConfigMem_15 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<0>, flip cfg_data : UInt<32>, out : UInt<1>[1]}
    
    wire _T : UInt<1>[1] @[ConfigMem.scala 27:29]
    _T[0] <= UInt<1>("h00") @[ConfigMem.scala 27:29]
    reg regs : UInt<1>[1], clock with : (reset => (reset, _T)) @[ConfigMem.scala 27:21]
    node _T_1 = eq(io.cfg_addr, UInt<1>("h00")) @[ConfigMem.scala 32:38]
    node _T_2 = and(io.cfg_en, _T_1) @[ConfigMem.scala 32:22]
    when _T_2 : @[ConfigMem.scala 32:54]
      node _T_3 = bits(io.cfg_data, 0, 0) @[ConfigMem.scala 33:31]
      regs[0] <= _T_3 @[ConfigMem.scala 33:17]
      skip @[ConfigMem.scala 32:54]
    io.out[0] <= regs[0] @[ConfigMem.scala 52:45]
    
  module IOB_31 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<12>, flip cfg_data : UInt<32>, flip in : UInt<32>[2], out : UInt<32>[1]}
    
    inst Muxn of Muxn_15 @[IOB.scala 36:41]
    Muxn.clock <= clock
    Muxn.reset <= reset
    inst ConfigMem of ConfigMem_15 @[IOB.scala 37:21]
    ConfigMem.clock <= clock
    ConfigMem.reset <= reset
    node _T = bits(io.cfg_addr, 11, 2) @[IOB.scala 38:65]
    node _T_1 = eq(UInt<8>("h0bc"), _T) @[IOB.scala 38:50]
    node _T_2 = and(io.cfg_en, _T_1) @[IOB.scala 38:32]
    ConfigMem.io.cfg_en <= _T_2 @[IOB.scala 38:19]
    node _T_3 = bits(io.cfg_addr, 1, 0) @[IOB.scala 39:35]
    ConfigMem.io.cfg_addr <= _T_3 @[IOB.scala 39:21]
    ConfigMem.io.cfg_data <= io.cfg_data @[IOB.scala 40:21]
    Muxn.io.in[0] <= io.in[0] @[IOB.scala 46:23]
    Muxn.io.in[1] <= io.in[1] @[IOB.scala 46:23]
    io.out[0] <= Muxn.io.out @[IOB.scala 48:17]
    node _T_4 = bits(ConfigMem.io.out[0], 0, 0) @[IOB.scala 49:38]
    Muxn.io.config <= _T_4 @[IOB.scala 49:22]
    
  module ALU : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<4>, flip in : UInt<32>[2], out : UInt<32>}
    
    node _T = bits(io.in[0], 31, 0) @[Operations.scala 122:31]
    node _T_1 = bits(io.in[0], 31, 0) @[Operations.scala 124:31]
    node _T_2 = bits(io.in[1], 31, 0) @[Operations.scala 124:49]
    node _T_3 = add(_T_1, _T_2) @[Operations.scala 124:41]
    node _T_4 = tail(_T_3, 1) @[Operations.scala 124:41]
    node _T_5 = bits(io.in[0], 31, 0) @[Operations.scala 126:31]
    node _T_6 = bits(io.in[1], 31, 0) @[Operations.scala 126:49]
    node _T_7 = sub(_T_5, _T_6) @[Operations.scala 126:41]
    node _T_8 = tail(_T_7, 1) @[Operations.scala 126:41]
    node _T_9 = bits(io.in[0], 31, 0) @[Operations.scala 128:31]
    node _T_10 = bits(io.in[1], 31, 0) @[Operations.scala 128:49]
    node _T_11 = mul(_T_9, _T_10) @[Operations.scala 128:41]
    node _T_12 = bits(io.in[0], 31, 0) @[Operations.scala 138:31]
    node _T_13 = bits(io.in[1], 31, 0) @[Operations.scala 138:49]
    node _T_14 = and(_T_12, _T_13) @[Operations.scala 138:41]
    node _T_15 = bits(io.in[0], 31, 0) @[Operations.scala 140:31]
    node _T_16 = bits(io.in[1], 31, 0) @[Operations.scala 140:49]
    node _T_17 = or(_T_15, _T_16) @[Operations.scala 140:41]
    node _T_18 = bits(io.in[0], 31, 0) @[Operations.scala 142:31]
    node _T_19 = bits(io.in[1], 31, 0) @[Operations.scala 142:49]
    node _T_20 = xor(_T_18, _T_19) @[Operations.scala 142:41]
    node _T_21 = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_22 = mux(_T_21, _T, UInt<1>("h00")) @[Mux.scala 80:57]
    node _T_23 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_24 = mux(_T_23, _T_4, _T_22) @[Mux.scala 80:57]
    node _T_25 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_26 = mux(_T_25, _T_8, _T_24) @[Mux.scala 80:57]
    node _T_27 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_28 = mux(_T_27, _T_11, _T_26) @[Mux.scala 80:57]
    node _T_29 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_30 = mux(_T_29, _T_14, _T_28) @[Mux.scala 80:57]
    node _T_31 = eq(UInt<3>("h05"), io.config) @[Mux.scala 80:60]
    node _T_32 = mux(_T_31, _T_17, _T_30) @[Mux.scala 80:57]
    node _T_33 = eq(UInt<3>("h06"), io.config) @[Mux.scala 80:60]
    node _T_34 = mux(_T_33, _T_20, _T_32) @[Mux.scala 80:57]
    io.out <= _T_34 @[ALU.scala 25:10]
    
  module RF : 
    input clock : Clock
    input reset : Reset
    output io : {flip en : UInt<1>, flip config : UInt<0>, flip in : UInt<32>[1], out : UInt<32>[2]}
    
    wire _T : UInt<32>[1] @[RegFile.scala 24:29]
    _T[0] <= UInt<32>("h00") @[RegFile.scala 24:29]
    reg regs : UInt<32>[1], clock with : (reset => (reset, _T)) @[RegFile.scala 24:21]
    when io.en : @[RegFile.scala 34:16]
      regs[0] <= io.in[0] @[RegFile.scala 35:41]
      skip @[RegFile.scala 34:16]
    io.out[0] <= regs[0] @[RegFile.scala 37:42]
    io.out[1] <= regs[0] @[RegFile.scala 37:42]
    
  module DelayPipe : 
    input clock : Clock
    input reset : Reset
    output io : {flip en : UInt<1>, flip config : UInt<3>, flip in : UInt<32>, out : UInt<32>}
    
    wire _T : UInt<32>[5] @[DelayPipe.scala 22:29]
    _T[0] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[1] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[2] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[3] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[4] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    reg regs : UInt<32>[5], clock with : (reset => (reset, _T)) @[DelayPipe.scala 22:21]
    reg wptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 23:21]
    reg rptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 24:21]
    node _T_1 = lt(wptr, UInt<3>("h04")) @[DelayPipe.scala 26:23]
    node _T_2 = and(io.en, _T_1) @[DelayPipe.scala 26:14]
    when _T_2 : @[DelayPipe.scala 26:37]
      node _T_3 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 27:17]
      node _T_4 = tail(_T_3, 1) @[DelayPipe.scala 27:17]
      wptr <= _T_4 @[DelayPipe.scala 27:10]
      skip @[DelayPipe.scala 26:37]
    else : @[DelayPipe.scala 28:14]
      wptr <= UInt<1>("h00") @[DelayPipe.scala 29:10]
      skip @[DelayPipe.scala 28:14]
    node _T_5 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 32:12]
    node _T_6 = tail(_T_5, 1) @[DelayPipe.scala 32:12]
    node _T_7 = geq(_T_6, io.config) @[DelayPipe.scala 32:17]
    when _T_7 : @[DelayPipe.scala 32:30]
      node _T_8 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 33:18]
      node _T_9 = tail(_T_8, 1) @[DelayPipe.scala 33:18]
      node _T_10 = sub(_T_9, io.config) @[DelayPipe.scala 33:24]
      node _T_11 = tail(_T_10, 1) @[DelayPipe.scala 33:24]
      rptr <= _T_11 @[DelayPipe.scala 33:10]
      skip @[DelayPipe.scala 32:30]
    else : @[DelayPipe.scala 34:14]
      node _T_12 = add(UInt<3>("h06"), wptr) @[DelayPipe.scala 35:30]
      node _T_13 = tail(_T_12, 1) @[DelayPipe.scala 35:30]
      node _T_14 = sub(_T_13, io.config) @[DelayPipe.scala 35:37]
      node _T_15 = tail(_T_14, 1) @[DelayPipe.scala 35:37]
      rptr <= _T_15 @[DelayPipe.scala 35:10]
      skip @[DelayPipe.scala 34:14]
    node _T_16 = gt(io.config, UInt<1>("h00")) @[DelayPipe.scala 39:28]
    node _T_17 = and(io.en, _T_16) @[DelayPipe.scala 39:14]
    when _T_17 : @[DelayPipe.scala 39:35]
      regs[wptr] <= io.in @[DelayPipe.scala 40:16]
      skip @[DelayPipe.scala 39:35]
    reg cnt : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 43:20]
    node _T_18 = eq(io.en, UInt<1>("h00")) @[DelayPipe.scala 44:8]
    when _T_18 : @[DelayPipe.scala 44:15]
      cnt <= UInt<1>("h00") @[DelayPipe.scala 45:9]
      skip @[DelayPipe.scala 44:15]
    else : @[DelayPipe.scala 46:30]
      node _T_19 = lt(cnt, io.config) @[DelayPipe.scala 46:18]
      when _T_19 : @[DelayPipe.scala 46:30]
        node _T_20 = add(cnt, UInt<1>("h01")) @[DelayPipe.scala 47:16]
        node _T_21 = tail(_T_20, 1) @[DelayPipe.scala 47:16]
        cnt <= _T_21 @[DelayPipe.scala 47:9]
        skip @[DelayPipe.scala 46:30]
    node _T_22 = eq(UInt<1>("h00"), io.config) @[DelayPipe.scala 50:22]
    node _T_23 = and(io.en, _T_22) @[DelayPipe.scala 50:14]
    when _T_23 : @[DelayPipe.scala 50:37]
      io.out <= io.in @[DelayPipe.scala 51:12]
      skip @[DelayPipe.scala 50:37]
    else : @[DelayPipe.scala 52:43]
      node _T_24 = eq(cnt, io.config) @[DelayPipe.scala 52:28]
      node _T_25 = and(io.en, _T_24) @[DelayPipe.scala 52:20]
      when _T_25 : @[DelayPipe.scala 52:43]
        io.out <= regs[rptr] @[DelayPipe.scala 53:12]
        skip @[DelayPipe.scala 52:43]
      else : @[DelayPipe.scala 54:14]
        io.out <= UInt<1>("h00") @[DelayPipe.scala 55:12]
        skip @[DelayPipe.scala 54:14]
    
  module DelayPipe_1 : 
    input clock : Clock
    input reset : Reset
    output io : {flip en : UInt<1>, flip config : UInt<3>, flip in : UInt<32>, out : UInt<32>}
    
    wire _T : UInt<32>[5] @[DelayPipe.scala 22:29]
    _T[0] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[1] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[2] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[3] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[4] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    reg regs : UInt<32>[5], clock with : (reset => (reset, _T)) @[DelayPipe.scala 22:21]
    reg wptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 23:21]
    reg rptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 24:21]
    node _T_1 = lt(wptr, UInt<3>("h04")) @[DelayPipe.scala 26:23]
    node _T_2 = and(io.en, _T_1) @[DelayPipe.scala 26:14]
    when _T_2 : @[DelayPipe.scala 26:37]
      node _T_3 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 27:17]
      node _T_4 = tail(_T_3, 1) @[DelayPipe.scala 27:17]
      wptr <= _T_4 @[DelayPipe.scala 27:10]
      skip @[DelayPipe.scala 26:37]
    else : @[DelayPipe.scala 28:14]
      wptr <= UInt<1>("h00") @[DelayPipe.scala 29:10]
      skip @[DelayPipe.scala 28:14]
    node _T_5 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 32:12]
    node _T_6 = tail(_T_5, 1) @[DelayPipe.scala 32:12]
    node _T_7 = geq(_T_6, io.config) @[DelayPipe.scala 32:17]
    when _T_7 : @[DelayPipe.scala 32:30]
      node _T_8 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 33:18]
      node _T_9 = tail(_T_8, 1) @[DelayPipe.scala 33:18]
      node _T_10 = sub(_T_9, io.config) @[DelayPipe.scala 33:24]
      node _T_11 = tail(_T_10, 1) @[DelayPipe.scala 33:24]
      rptr <= _T_11 @[DelayPipe.scala 33:10]
      skip @[DelayPipe.scala 32:30]
    else : @[DelayPipe.scala 34:14]
      node _T_12 = add(UInt<3>("h06"), wptr) @[DelayPipe.scala 35:30]
      node _T_13 = tail(_T_12, 1) @[DelayPipe.scala 35:30]
      node _T_14 = sub(_T_13, io.config) @[DelayPipe.scala 35:37]
      node _T_15 = tail(_T_14, 1) @[DelayPipe.scala 35:37]
      rptr <= _T_15 @[DelayPipe.scala 35:10]
      skip @[DelayPipe.scala 34:14]
    node _T_16 = gt(io.config, UInt<1>("h00")) @[DelayPipe.scala 39:28]
    node _T_17 = and(io.en, _T_16) @[DelayPipe.scala 39:14]
    when _T_17 : @[DelayPipe.scala 39:35]
      regs[wptr] <= io.in @[DelayPipe.scala 40:16]
      skip @[DelayPipe.scala 39:35]
    reg cnt : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 43:20]
    node _T_18 = eq(io.en, UInt<1>("h00")) @[DelayPipe.scala 44:8]
    when _T_18 : @[DelayPipe.scala 44:15]
      cnt <= UInt<1>("h00") @[DelayPipe.scala 45:9]
      skip @[DelayPipe.scala 44:15]
    else : @[DelayPipe.scala 46:30]
      node _T_19 = lt(cnt, io.config) @[DelayPipe.scala 46:18]
      when _T_19 : @[DelayPipe.scala 46:30]
        node _T_20 = add(cnt, UInt<1>("h01")) @[DelayPipe.scala 47:16]
        node _T_21 = tail(_T_20, 1) @[DelayPipe.scala 47:16]
        cnt <= _T_21 @[DelayPipe.scala 47:9]
        skip @[DelayPipe.scala 46:30]
    node _T_22 = eq(UInt<1>("h00"), io.config) @[DelayPipe.scala 50:22]
    node _T_23 = and(io.en, _T_22) @[DelayPipe.scala 50:14]
    when _T_23 : @[DelayPipe.scala 50:37]
      io.out <= io.in @[DelayPipe.scala 51:12]
      skip @[DelayPipe.scala 50:37]
    else : @[DelayPipe.scala 52:43]
      node _T_24 = eq(cnt, io.config) @[DelayPipe.scala 52:28]
      node _T_25 = and(io.en, _T_24) @[DelayPipe.scala 52:20]
      when _T_25 : @[DelayPipe.scala 52:43]
        io.out <= regs[rptr] @[DelayPipe.scala 53:12]
        skip @[DelayPipe.scala 52:43]
      else : @[DelayPipe.scala 54:14]
        io.out <= UInt<1>("h00") @[DelayPipe.scala 55:12]
        skip @[DelayPipe.scala 54:14]
    
  module Muxn_16 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[6], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    node _T_10 = eq(UInt<3>("h05"), io.config) @[Mux.scala 80:60]
    node _T_11 = mux(_T_10, io.in[5], _T_9) @[Mux.scala 80:57]
    io.out <= _T_11 @[Multiplexer.scala 20:10]
    
  module Muxn_17 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[6], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    node _T_10 = eq(UInt<3>("h05"), io.config) @[Mux.scala 80:60]
    node _T_11 = mux(_T_10, io.in[5], _T_9) @[Mux.scala 80:57]
    io.out <= _T_11 @[Multiplexer.scala 20:10]
    
  module ConfigMem_16 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<1>, flip cfg_data : UInt<32>, out : UInt<48>[1]}
    
    wire _T : UInt<48>[1] @[ConfigMem.scala 27:29]
    _T[0] <= UInt<48>("h00") @[ConfigMem.scala 27:29]
    reg regs : UInt<48>[1], clock with : (reset => (reset, _T)) @[ConfigMem.scala 27:21]
    node _T_1 = eq(io.cfg_addr, UInt<1>("h00")) @[ConfigMem.scala 39:38]
    node _T_2 = and(io.cfg_en, _T_1) @[ConfigMem.scala 39:22]
    when _T_2 : @[ConfigMem.scala 39:47]
      node _T_3 = bits(regs[0], 47, 32) @[ConfigMem.scala 41:33]
      node _T_4 = cat(_T_3, io.cfg_data) @[Cat.scala 29:58]
      regs[0] <= _T_4 @[ConfigMem.scala 41:19]
      skip @[ConfigMem.scala 39:47]
    node _T_5 = eq(io.cfg_addr, UInt<1>("h01")) @[ConfigMem.scala 39:38]
    node _T_6 = and(io.cfg_en, _T_5) @[ConfigMem.scala 39:22]
    when _T_6 : @[ConfigMem.scala 39:47]
      node _T_7 = bits(regs[0], 31, 0) @[ConfigMem.scala 43:46]
      node _T_8 = cat(io.cfg_data, _T_7) @[Cat.scala 29:58]
      regs[0] <= _T_8 @[ConfigMem.scala 43:19]
      skip @[ConfigMem.scala 39:47]
    io.out[0] <= regs[0] @[ConfigMem.scala 52:45]
    
  module GPE : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<12>, flip cfg_data : UInt<32>, flip en : UInt<1>, flip in : UInt<32>[8], out : UInt<32>[1]}
    
    inst alu of ALU @[PE.scala 50:19]
    alu.clock <= clock
    alu.reset <= reset
    inst rf of RF @[PE.scala 51:18]
    rf.clock <= clock
    rf.reset <= reset
    inst DelayPipe of DelayPipe @[PE.scala 52:54]
    DelayPipe.clock <= clock
    DelayPipe.reset <= reset
    inst DelayPipe_1 of DelayPipe_1 @[PE.scala 52:54]
    DelayPipe_1.clock <= clock
    DelayPipe_1.reset <= reset
    wire const : UInt<32> @[PE.scala 54:19]
    inst Muxn of Muxn_16 @[PE.scala 55:49]
    Muxn.clock <= clock
    Muxn.reset <= reset
    inst Muxn_1 of Muxn_17 @[PE.scala 55:49]
    Muxn_1.clock <= clock
    Muxn_1.reset <= reset
    Muxn.io.in[0] <= io.in[0] @[PE.scala 62:12]
    Muxn.io.in[1] <= io.in[1] @[PE.scala 62:12]
    Muxn.io.in[2] <= io.in[2] @[PE.scala 62:12]
    Muxn.io.in[3] <= io.in[3] @[PE.scala 62:12]
    Muxn.io.in[4] <= const @[PE.scala 64:12]
    Muxn.io.in[5] <= rf.io.out[1] @[PE.scala 66:12]
    DelayPipe.io.en <= io.en @[PE.scala 69:23]
    DelayPipe.io.in <= Muxn.io.out @[PE.scala 70:23]
    alu.io.in[0] <= DelayPipe.io.out @[PE.scala 71:18]
    Muxn_1.io.in[0] <= io.in[4] @[PE.scala 62:12]
    Muxn_1.io.in[1] <= io.in[5] @[PE.scala 62:12]
    Muxn_1.io.in[2] <= io.in[6] @[PE.scala 62:12]
    Muxn_1.io.in[3] <= io.in[7] @[PE.scala 62:12]
    Muxn_1.io.in[4] <= const @[PE.scala 64:12]
    Muxn_1.io.in[5] <= rf.io.out[1] @[PE.scala 66:12]
    DelayPipe_1.io.en <= io.en @[PE.scala 69:23]
    DelayPipe_1.io.in <= Muxn_1.io.out @[PE.scala 70:23]
    alu.io.in[1] <= DelayPipe_1.io.out @[PE.scala 71:18]
    rf.io.en <= io.en @[PE.scala 75:12]
    rf.io.in[0] <= alu.io.out @[PE.scala 76:15]
    io.out[0] <= rf.io.out[0] @[PE.scala 77:13]
    inst cfg of ConfigMem_16 @[PE.scala 89:19]
    cfg.clock <= clock
    cfg.reset <= reset
    node _T = bits(io.cfg_addr, 11, 2) @[PE.scala 90:63]
    node _T_1 = eq(UInt<5>("h01c"), _T) @[PE.scala 90:48]
    node _T_2 = and(io.cfg_en, _T_1) @[PE.scala 90:30]
    cfg.io.cfg_en <= _T_2 @[PE.scala 90:17]
    node _T_3 = bits(io.cfg_addr, 1, 0) @[PE.scala 91:33]
    cfg.io.cfg_addr <= _T_3 @[PE.scala 91:19]
    cfg.io.cfg_data <= io.cfg_data @[PE.scala 92:19]
    wire cfgOut : UInt<48> @[PE.scala 96:20]
    cfgOut <= cfg.io.out[0] @[PE.scala 97:10]
    node _T_4 = bits(cfgOut, 31, 0) @[PE.scala 98:18]
    const <= _T_4 @[PE.scala 98:9]
    node _T_5 = bits(cfgOut, 35, 32) @[PE.scala 100:28]
    alu.io.config <= _T_5 @[PE.scala 100:19]
    rf.io.config is invalid @[PE.scala 107:18]
    node _T_6 = bits(cfgOut, 38, 36) @[PE.scala 113:38]
    DelayPipe.io.config <= _T_6 @[PE.scala 113:29]
    node _T_7 = bits(cfgOut, 41, 39) @[PE.scala 113:38]
    DelayPipe_1.io.config <= _T_7 @[PE.scala 113:29]
    node _T_8 = bits(cfgOut, 44, 42) @[PE.scala 121:32]
    Muxn.io.config <= _T_8 @[PE.scala 121:23]
    node _T_9 = bits(cfgOut, 47, 45) @[PE.scala 121:32]
    Muxn_1.io.config <= _T_9 @[PE.scala 121:23]
    
  module ALU_1 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<4>, flip in : UInt<32>[2], out : UInt<32>}
    
    node _T = bits(io.in[0], 31, 0) @[Operations.scala 122:31]
    node _T_1 = bits(io.in[0], 31, 0) @[Operations.scala 124:31]
    node _T_2 = bits(io.in[1], 31, 0) @[Operations.scala 124:49]
    node _T_3 = add(_T_1, _T_2) @[Operations.scala 124:41]
    node _T_4 = tail(_T_3, 1) @[Operations.scala 124:41]
    node _T_5 = bits(io.in[0], 31, 0) @[Operations.scala 126:31]
    node _T_6 = bits(io.in[1], 31, 0) @[Operations.scala 126:49]
    node _T_7 = sub(_T_5, _T_6) @[Operations.scala 126:41]
    node _T_8 = tail(_T_7, 1) @[Operations.scala 126:41]
    node _T_9 = bits(io.in[0], 31, 0) @[Operations.scala 128:31]
    node _T_10 = bits(io.in[1], 31, 0) @[Operations.scala 128:49]
    node _T_11 = mul(_T_9, _T_10) @[Operations.scala 128:41]
    node _T_12 = bits(io.in[0], 31, 0) @[Operations.scala 138:31]
    node _T_13 = bits(io.in[1], 31, 0) @[Operations.scala 138:49]
    node _T_14 = and(_T_12, _T_13) @[Operations.scala 138:41]
    node _T_15 = bits(io.in[0], 31, 0) @[Operations.scala 140:31]
    node _T_16 = bits(io.in[1], 31, 0) @[Operations.scala 140:49]
    node _T_17 = or(_T_15, _T_16) @[Operations.scala 140:41]
    node _T_18 = bits(io.in[0], 31, 0) @[Operations.scala 142:31]
    node _T_19 = bits(io.in[1], 31, 0) @[Operations.scala 142:49]
    node _T_20 = xor(_T_18, _T_19) @[Operations.scala 142:41]
    node _T_21 = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_22 = mux(_T_21, _T, UInt<1>("h00")) @[Mux.scala 80:57]
    node _T_23 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_24 = mux(_T_23, _T_4, _T_22) @[Mux.scala 80:57]
    node _T_25 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_26 = mux(_T_25, _T_8, _T_24) @[Mux.scala 80:57]
    node _T_27 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_28 = mux(_T_27, _T_11, _T_26) @[Mux.scala 80:57]
    node _T_29 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_30 = mux(_T_29, _T_14, _T_28) @[Mux.scala 80:57]
    node _T_31 = eq(UInt<3>("h05"), io.config) @[Mux.scala 80:60]
    node _T_32 = mux(_T_31, _T_17, _T_30) @[Mux.scala 80:57]
    node _T_33 = eq(UInt<3>("h06"), io.config) @[Mux.scala 80:60]
    node _T_34 = mux(_T_33, _T_20, _T_32) @[Mux.scala 80:57]
    io.out <= _T_34 @[ALU.scala 25:10]
    
  module RF_1 : 
    input clock : Clock
    input reset : Reset
    output io : {flip en : UInt<1>, flip config : UInt<0>, flip in : UInt<32>[1], out : UInt<32>[2]}
    
    wire _T : UInt<32>[1] @[RegFile.scala 24:29]
    _T[0] <= UInt<32>("h00") @[RegFile.scala 24:29]
    reg regs : UInt<32>[1], clock with : (reset => (reset, _T)) @[RegFile.scala 24:21]
    when io.en : @[RegFile.scala 34:16]
      regs[0] <= io.in[0] @[RegFile.scala 35:41]
      skip @[RegFile.scala 34:16]
    io.out[0] <= regs[0] @[RegFile.scala 37:42]
    io.out[1] <= regs[0] @[RegFile.scala 37:42]
    
  module DelayPipe_2 : 
    input clock : Clock
    input reset : Reset
    output io : {flip en : UInt<1>, flip config : UInt<3>, flip in : UInt<32>, out : UInt<32>}
    
    wire _T : UInt<32>[5] @[DelayPipe.scala 22:29]
    _T[0] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[1] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[2] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[3] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[4] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    reg regs : UInt<32>[5], clock with : (reset => (reset, _T)) @[DelayPipe.scala 22:21]
    reg wptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 23:21]
    reg rptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 24:21]
    node _T_1 = lt(wptr, UInt<3>("h04")) @[DelayPipe.scala 26:23]
    node _T_2 = and(io.en, _T_1) @[DelayPipe.scala 26:14]
    when _T_2 : @[DelayPipe.scala 26:37]
      node _T_3 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 27:17]
      node _T_4 = tail(_T_3, 1) @[DelayPipe.scala 27:17]
      wptr <= _T_4 @[DelayPipe.scala 27:10]
      skip @[DelayPipe.scala 26:37]
    else : @[DelayPipe.scala 28:14]
      wptr <= UInt<1>("h00") @[DelayPipe.scala 29:10]
      skip @[DelayPipe.scala 28:14]
    node _T_5 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 32:12]
    node _T_6 = tail(_T_5, 1) @[DelayPipe.scala 32:12]
    node _T_7 = geq(_T_6, io.config) @[DelayPipe.scala 32:17]
    when _T_7 : @[DelayPipe.scala 32:30]
      node _T_8 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 33:18]
      node _T_9 = tail(_T_8, 1) @[DelayPipe.scala 33:18]
      node _T_10 = sub(_T_9, io.config) @[DelayPipe.scala 33:24]
      node _T_11 = tail(_T_10, 1) @[DelayPipe.scala 33:24]
      rptr <= _T_11 @[DelayPipe.scala 33:10]
      skip @[DelayPipe.scala 32:30]
    else : @[DelayPipe.scala 34:14]
      node _T_12 = add(UInt<3>("h06"), wptr) @[DelayPipe.scala 35:30]
      node _T_13 = tail(_T_12, 1) @[DelayPipe.scala 35:30]
      node _T_14 = sub(_T_13, io.config) @[DelayPipe.scala 35:37]
      node _T_15 = tail(_T_14, 1) @[DelayPipe.scala 35:37]
      rptr <= _T_15 @[DelayPipe.scala 35:10]
      skip @[DelayPipe.scala 34:14]
    node _T_16 = gt(io.config, UInt<1>("h00")) @[DelayPipe.scala 39:28]
    node _T_17 = and(io.en, _T_16) @[DelayPipe.scala 39:14]
    when _T_17 : @[DelayPipe.scala 39:35]
      regs[wptr] <= io.in @[DelayPipe.scala 40:16]
      skip @[DelayPipe.scala 39:35]
    reg cnt : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 43:20]
    node _T_18 = eq(io.en, UInt<1>("h00")) @[DelayPipe.scala 44:8]
    when _T_18 : @[DelayPipe.scala 44:15]
      cnt <= UInt<1>("h00") @[DelayPipe.scala 45:9]
      skip @[DelayPipe.scala 44:15]
    else : @[DelayPipe.scala 46:30]
      node _T_19 = lt(cnt, io.config) @[DelayPipe.scala 46:18]
      when _T_19 : @[DelayPipe.scala 46:30]
        node _T_20 = add(cnt, UInt<1>("h01")) @[DelayPipe.scala 47:16]
        node _T_21 = tail(_T_20, 1) @[DelayPipe.scala 47:16]
        cnt <= _T_21 @[DelayPipe.scala 47:9]
        skip @[DelayPipe.scala 46:30]
    node _T_22 = eq(UInt<1>("h00"), io.config) @[DelayPipe.scala 50:22]
    node _T_23 = and(io.en, _T_22) @[DelayPipe.scala 50:14]
    when _T_23 : @[DelayPipe.scala 50:37]
      io.out <= io.in @[DelayPipe.scala 51:12]
      skip @[DelayPipe.scala 50:37]
    else : @[DelayPipe.scala 52:43]
      node _T_24 = eq(cnt, io.config) @[DelayPipe.scala 52:28]
      node _T_25 = and(io.en, _T_24) @[DelayPipe.scala 52:20]
      when _T_25 : @[DelayPipe.scala 52:43]
        io.out <= regs[rptr] @[DelayPipe.scala 53:12]
        skip @[DelayPipe.scala 52:43]
      else : @[DelayPipe.scala 54:14]
        io.out <= UInt<1>("h00") @[DelayPipe.scala 55:12]
        skip @[DelayPipe.scala 54:14]
    
  module DelayPipe_3 : 
    input clock : Clock
    input reset : Reset
    output io : {flip en : UInt<1>, flip config : UInt<3>, flip in : UInt<32>, out : UInt<32>}
    
    wire _T : UInt<32>[5] @[DelayPipe.scala 22:29]
    _T[0] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[1] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[2] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[3] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[4] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    reg regs : UInt<32>[5], clock with : (reset => (reset, _T)) @[DelayPipe.scala 22:21]
    reg wptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 23:21]
    reg rptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 24:21]
    node _T_1 = lt(wptr, UInt<3>("h04")) @[DelayPipe.scala 26:23]
    node _T_2 = and(io.en, _T_1) @[DelayPipe.scala 26:14]
    when _T_2 : @[DelayPipe.scala 26:37]
      node _T_3 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 27:17]
      node _T_4 = tail(_T_3, 1) @[DelayPipe.scala 27:17]
      wptr <= _T_4 @[DelayPipe.scala 27:10]
      skip @[DelayPipe.scala 26:37]
    else : @[DelayPipe.scala 28:14]
      wptr <= UInt<1>("h00") @[DelayPipe.scala 29:10]
      skip @[DelayPipe.scala 28:14]
    node _T_5 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 32:12]
    node _T_6 = tail(_T_5, 1) @[DelayPipe.scala 32:12]
    node _T_7 = geq(_T_6, io.config) @[DelayPipe.scala 32:17]
    when _T_7 : @[DelayPipe.scala 32:30]
      node _T_8 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 33:18]
      node _T_9 = tail(_T_8, 1) @[DelayPipe.scala 33:18]
      node _T_10 = sub(_T_9, io.config) @[DelayPipe.scala 33:24]
      node _T_11 = tail(_T_10, 1) @[DelayPipe.scala 33:24]
      rptr <= _T_11 @[DelayPipe.scala 33:10]
      skip @[DelayPipe.scala 32:30]
    else : @[DelayPipe.scala 34:14]
      node _T_12 = add(UInt<3>("h06"), wptr) @[DelayPipe.scala 35:30]
      node _T_13 = tail(_T_12, 1) @[DelayPipe.scala 35:30]
      node _T_14 = sub(_T_13, io.config) @[DelayPipe.scala 35:37]
      node _T_15 = tail(_T_14, 1) @[DelayPipe.scala 35:37]
      rptr <= _T_15 @[DelayPipe.scala 35:10]
      skip @[DelayPipe.scala 34:14]
    node _T_16 = gt(io.config, UInt<1>("h00")) @[DelayPipe.scala 39:28]
    node _T_17 = and(io.en, _T_16) @[DelayPipe.scala 39:14]
    when _T_17 : @[DelayPipe.scala 39:35]
      regs[wptr] <= io.in @[DelayPipe.scala 40:16]
      skip @[DelayPipe.scala 39:35]
    reg cnt : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 43:20]
    node _T_18 = eq(io.en, UInt<1>("h00")) @[DelayPipe.scala 44:8]
    when _T_18 : @[DelayPipe.scala 44:15]
      cnt <= UInt<1>("h00") @[DelayPipe.scala 45:9]
      skip @[DelayPipe.scala 44:15]
    else : @[DelayPipe.scala 46:30]
      node _T_19 = lt(cnt, io.config) @[DelayPipe.scala 46:18]
      when _T_19 : @[DelayPipe.scala 46:30]
        node _T_20 = add(cnt, UInt<1>("h01")) @[DelayPipe.scala 47:16]
        node _T_21 = tail(_T_20, 1) @[DelayPipe.scala 47:16]
        cnt <= _T_21 @[DelayPipe.scala 47:9]
        skip @[DelayPipe.scala 46:30]
    node _T_22 = eq(UInt<1>("h00"), io.config) @[DelayPipe.scala 50:22]
    node _T_23 = and(io.en, _T_22) @[DelayPipe.scala 50:14]
    when _T_23 : @[DelayPipe.scala 50:37]
      io.out <= io.in @[DelayPipe.scala 51:12]
      skip @[DelayPipe.scala 50:37]
    else : @[DelayPipe.scala 52:43]
      node _T_24 = eq(cnt, io.config) @[DelayPipe.scala 52:28]
      node _T_25 = and(io.en, _T_24) @[DelayPipe.scala 52:20]
      when _T_25 : @[DelayPipe.scala 52:43]
        io.out <= regs[rptr] @[DelayPipe.scala 53:12]
        skip @[DelayPipe.scala 52:43]
      else : @[DelayPipe.scala 54:14]
        io.out <= UInt<1>("h00") @[DelayPipe.scala 55:12]
        skip @[DelayPipe.scala 54:14]
    
  module Muxn_18 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[6], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    node _T_10 = eq(UInt<3>("h05"), io.config) @[Mux.scala 80:60]
    node _T_11 = mux(_T_10, io.in[5], _T_9) @[Mux.scala 80:57]
    io.out <= _T_11 @[Multiplexer.scala 20:10]
    
  module Muxn_19 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[6], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    node _T_10 = eq(UInt<3>("h05"), io.config) @[Mux.scala 80:60]
    node _T_11 = mux(_T_10, io.in[5], _T_9) @[Mux.scala 80:57]
    io.out <= _T_11 @[Multiplexer.scala 20:10]
    
  module ConfigMem_17 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<1>, flip cfg_data : UInt<32>, out : UInt<48>[1]}
    
    wire _T : UInt<48>[1] @[ConfigMem.scala 27:29]
    _T[0] <= UInt<48>("h00") @[ConfigMem.scala 27:29]
    reg regs : UInt<48>[1], clock with : (reset => (reset, _T)) @[ConfigMem.scala 27:21]
    node _T_1 = eq(io.cfg_addr, UInt<1>("h00")) @[ConfigMem.scala 39:38]
    node _T_2 = and(io.cfg_en, _T_1) @[ConfigMem.scala 39:22]
    when _T_2 : @[ConfigMem.scala 39:47]
      node _T_3 = bits(regs[0], 47, 32) @[ConfigMem.scala 41:33]
      node _T_4 = cat(_T_3, io.cfg_data) @[Cat.scala 29:58]
      regs[0] <= _T_4 @[ConfigMem.scala 41:19]
      skip @[ConfigMem.scala 39:47]
    node _T_5 = eq(io.cfg_addr, UInt<1>("h01")) @[ConfigMem.scala 39:38]
    node _T_6 = and(io.cfg_en, _T_5) @[ConfigMem.scala 39:22]
    when _T_6 : @[ConfigMem.scala 39:47]
      node _T_7 = bits(regs[0], 31, 0) @[ConfigMem.scala 43:46]
      node _T_8 = cat(io.cfg_data, _T_7) @[Cat.scala 29:58]
      regs[0] <= _T_8 @[ConfigMem.scala 43:19]
      skip @[ConfigMem.scala 39:47]
    io.out[0] <= regs[0] @[ConfigMem.scala 52:45]
    
  module GPE_1 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<12>, flip cfg_data : UInt<32>, flip en : UInt<1>, flip in : UInt<32>[8], out : UInt<32>[1]}
    
    inst alu of ALU_1 @[PE.scala 50:19]
    alu.clock <= clock
    alu.reset <= reset
    inst rf of RF_1 @[PE.scala 51:18]
    rf.clock <= clock
    rf.reset <= reset
    inst DelayPipe of DelayPipe_2 @[PE.scala 52:54]
    DelayPipe.clock <= clock
    DelayPipe.reset <= reset
    inst DelayPipe_1 of DelayPipe_3 @[PE.scala 52:54]
    DelayPipe_1.clock <= clock
    DelayPipe_1.reset <= reset
    wire const : UInt<32> @[PE.scala 54:19]
    inst Muxn of Muxn_18 @[PE.scala 55:49]
    Muxn.clock <= clock
    Muxn.reset <= reset
    inst Muxn_1 of Muxn_19 @[PE.scala 55:49]
    Muxn_1.clock <= clock
    Muxn_1.reset <= reset
    Muxn.io.in[0] <= io.in[0] @[PE.scala 62:12]
    Muxn.io.in[1] <= io.in[1] @[PE.scala 62:12]
    Muxn.io.in[2] <= io.in[2] @[PE.scala 62:12]
    Muxn.io.in[3] <= io.in[3] @[PE.scala 62:12]
    Muxn.io.in[4] <= const @[PE.scala 64:12]
    Muxn.io.in[5] <= rf.io.out[1] @[PE.scala 66:12]
    DelayPipe.io.en <= io.en @[PE.scala 69:23]
    DelayPipe.io.in <= Muxn.io.out @[PE.scala 70:23]
    alu.io.in[0] <= DelayPipe.io.out @[PE.scala 71:18]
    Muxn_1.io.in[0] <= io.in[4] @[PE.scala 62:12]
    Muxn_1.io.in[1] <= io.in[5] @[PE.scala 62:12]
    Muxn_1.io.in[2] <= io.in[6] @[PE.scala 62:12]
    Muxn_1.io.in[3] <= io.in[7] @[PE.scala 62:12]
    Muxn_1.io.in[4] <= const @[PE.scala 64:12]
    Muxn_1.io.in[5] <= rf.io.out[1] @[PE.scala 66:12]
    DelayPipe_1.io.en <= io.en @[PE.scala 69:23]
    DelayPipe_1.io.in <= Muxn_1.io.out @[PE.scala 70:23]
    alu.io.in[1] <= DelayPipe_1.io.out @[PE.scala 71:18]
    rf.io.en <= io.en @[PE.scala 75:12]
    rf.io.in[0] <= alu.io.out @[PE.scala 76:15]
    io.out[0] <= rf.io.out[0] @[PE.scala 77:13]
    inst cfg of ConfigMem_17 @[PE.scala 89:19]
    cfg.clock <= clock
    cfg.reset <= reset
    node _T = bits(io.cfg_addr, 11, 2) @[PE.scala 90:63]
    node _T_1 = eq(UInt<5>("h01d"), _T) @[PE.scala 90:48]
    node _T_2 = and(io.cfg_en, _T_1) @[PE.scala 90:30]
    cfg.io.cfg_en <= _T_2 @[PE.scala 90:17]
    node _T_3 = bits(io.cfg_addr, 1, 0) @[PE.scala 91:33]
    cfg.io.cfg_addr <= _T_3 @[PE.scala 91:19]
    cfg.io.cfg_data <= io.cfg_data @[PE.scala 92:19]
    wire cfgOut : UInt<48> @[PE.scala 96:20]
    cfgOut <= cfg.io.out[0] @[PE.scala 97:10]
    node _T_4 = bits(cfgOut, 31, 0) @[PE.scala 98:18]
    const <= _T_4 @[PE.scala 98:9]
    node _T_5 = bits(cfgOut, 35, 32) @[PE.scala 100:28]
    alu.io.config <= _T_5 @[PE.scala 100:19]
    rf.io.config is invalid @[PE.scala 107:18]
    node _T_6 = bits(cfgOut, 38, 36) @[PE.scala 113:38]
    DelayPipe.io.config <= _T_6 @[PE.scala 113:29]
    node _T_7 = bits(cfgOut, 41, 39) @[PE.scala 113:38]
    DelayPipe_1.io.config <= _T_7 @[PE.scala 113:29]
    node _T_8 = bits(cfgOut, 44, 42) @[PE.scala 121:32]
    Muxn.io.config <= _T_8 @[PE.scala 121:23]
    node _T_9 = bits(cfgOut, 47, 45) @[PE.scala 121:32]
    Muxn_1.io.config <= _T_9 @[PE.scala 121:23]
    
  module ALU_2 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<4>, flip in : UInt<32>[2], out : UInt<32>}
    
    node _T = bits(io.in[0], 31, 0) @[Operations.scala 122:31]
    node _T_1 = bits(io.in[0], 31, 0) @[Operations.scala 124:31]
    node _T_2 = bits(io.in[1], 31, 0) @[Operations.scala 124:49]
    node _T_3 = add(_T_1, _T_2) @[Operations.scala 124:41]
    node _T_4 = tail(_T_3, 1) @[Operations.scala 124:41]
    node _T_5 = bits(io.in[0], 31, 0) @[Operations.scala 126:31]
    node _T_6 = bits(io.in[1], 31, 0) @[Operations.scala 126:49]
    node _T_7 = sub(_T_5, _T_6) @[Operations.scala 126:41]
    node _T_8 = tail(_T_7, 1) @[Operations.scala 126:41]
    node _T_9 = bits(io.in[0], 31, 0) @[Operations.scala 128:31]
    node _T_10 = bits(io.in[1], 31, 0) @[Operations.scala 128:49]
    node _T_11 = mul(_T_9, _T_10) @[Operations.scala 128:41]
    node _T_12 = bits(io.in[0], 31, 0) @[Operations.scala 138:31]
    node _T_13 = bits(io.in[1], 31, 0) @[Operations.scala 138:49]
    node _T_14 = and(_T_12, _T_13) @[Operations.scala 138:41]
    node _T_15 = bits(io.in[0], 31, 0) @[Operations.scala 140:31]
    node _T_16 = bits(io.in[1], 31, 0) @[Operations.scala 140:49]
    node _T_17 = or(_T_15, _T_16) @[Operations.scala 140:41]
    node _T_18 = bits(io.in[0], 31, 0) @[Operations.scala 142:31]
    node _T_19 = bits(io.in[1], 31, 0) @[Operations.scala 142:49]
    node _T_20 = xor(_T_18, _T_19) @[Operations.scala 142:41]
    node _T_21 = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_22 = mux(_T_21, _T, UInt<1>("h00")) @[Mux.scala 80:57]
    node _T_23 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_24 = mux(_T_23, _T_4, _T_22) @[Mux.scala 80:57]
    node _T_25 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_26 = mux(_T_25, _T_8, _T_24) @[Mux.scala 80:57]
    node _T_27 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_28 = mux(_T_27, _T_11, _T_26) @[Mux.scala 80:57]
    node _T_29 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_30 = mux(_T_29, _T_14, _T_28) @[Mux.scala 80:57]
    node _T_31 = eq(UInt<3>("h05"), io.config) @[Mux.scala 80:60]
    node _T_32 = mux(_T_31, _T_17, _T_30) @[Mux.scala 80:57]
    node _T_33 = eq(UInt<3>("h06"), io.config) @[Mux.scala 80:60]
    node _T_34 = mux(_T_33, _T_20, _T_32) @[Mux.scala 80:57]
    io.out <= _T_34 @[ALU.scala 25:10]
    
  module RF_2 : 
    input clock : Clock
    input reset : Reset
    output io : {flip en : UInt<1>, flip config : UInt<0>, flip in : UInt<32>[1], out : UInt<32>[2]}
    
    wire _T : UInt<32>[1] @[RegFile.scala 24:29]
    _T[0] <= UInt<32>("h00") @[RegFile.scala 24:29]
    reg regs : UInt<32>[1], clock with : (reset => (reset, _T)) @[RegFile.scala 24:21]
    when io.en : @[RegFile.scala 34:16]
      regs[0] <= io.in[0] @[RegFile.scala 35:41]
      skip @[RegFile.scala 34:16]
    io.out[0] <= regs[0] @[RegFile.scala 37:42]
    io.out[1] <= regs[0] @[RegFile.scala 37:42]
    
  module DelayPipe_4 : 
    input clock : Clock
    input reset : Reset
    output io : {flip en : UInt<1>, flip config : UInt<3>, flip in : UInt<32>, out : UInt<32>}
    
    wire _T : UInt<32>[5] @[DelayPipe.scala 22:29]
    _T[0] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[1] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[2] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[3] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[4] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    reg regs : UInt<32>[5], clock with : (reset => (reset, _T)) @[DelayPipe.scala 22:21]
    reg wptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 23:21]
    reg rptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 24:21]
    node _T_1 = lt(wptr, UInt<3>("h04")) @[DelayPipe.scala 26:23]
    node _T_2 = and(io.en, _T_1) @[DelayPipe.scala 26:14]
    when _T_2 : @[DelayPipe.scala 26:37]
      node _T_3 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 27:17]
      node _T_4 = tail(_T_3, 1) @[DelayPipe.scala 27:17]
      wptr <= _T_4 @[DelayPipe.scala 27:10]
      skip @[DelayPipe.scala 26:37]
    else : @[DelayPipe.scala 28:14]
      wptr <= UInt<1>("h00") @[DelayPipe.scala 29:10]
      skip @[DelayPipe.scala 28:14]
    node _T_5 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 32:12]
    node _T_6 = tail(_T_5, 1) @[DelayPipe.scala 32:12]
    node _T_7 = geq(_T_6, io.config) @[DelayPipe.scala 32:17]
    when _T_7 : @[DelayPipe.scala 32:30]
      node _T_8 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 33:18]
      node _T_9 = tail(_T_8, 1) @[DelayPipe.scala 33:18]
      node _T_10 = sub(_T_9, io.config) @[DelayPipe.scala 33:24]
      node _T_11 = tail(_T_10, 1) @[DelayPipe.scala 33:24]
      rptr <= _T_11 @[DelayPipe.scala 33:10]
      skip @[DelayPipe.scala 32:30]
    else : @[DelayPipe.scala 34:14]
      node _T_12 = add(UInt<3>("h06"), wptr) @[DelayPipe.scala 35:30]
      node _T_13 = tail(_T_12, 1) @[DelayPipe.scala 35:30]
      node _T_14 = sub(_T_13, io.config) @[DelayPipe.scala 35:37]
      node _T_15 = tail(_T_14, 1) @[DelayPipe.scala 35:37]
      rptr <= _T_15 @[DelayPipe.scala 35:10]
      skip @[DelayPipe.scala 34:14]
    node _T_16 = gt(io.config, UInt<1>("h00")) @[DelayPipe.scala 39:28]
    node _T_17 = and(io.en, _T_16) @[DelayPipe.scala 39:14]
    when _T_17 : @[DelayPipe.scala 39:35]
      regs[wptr] <= io.in @[DelayPipe.scala 40:16]
      skip @[DelayPipe.scala 39:35]
    reg cnt : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 43:20]
    node _T_18 = eq(io.en, UInt<1>("h00")) @[DelayPipe.scala 44:8]
    when _T_18 : @[DelayPipe.scala 44:15]
      cnt <= UInt<1>("h00") @[DelayPipe.scala 45:9]
      skip @[DelayPipe.scala 44:15]
    else : @[DelayPipe.scala 46:30]
      node _T_19 = lt(cnt, io.config) @[DelayPipe.scala 46:18]
      when _T_19 : @[DelayPipe.scala 46:30]
        node _T_20 = add(cnt, UInt<1>("h01")) @[DelayPipe.scala 47:16]
        node _T_21 = tail(_T_20, 1) @[DelayPipe.scala 47:16]
        cnt <= _T_21 @[DelayPipe.scala 47:9]
        skip @[DelayPipe.scala 46:30]
    node _T_22 = eq(UInt<1>("h00"), io.config) @[DelayPipe.scala 50:22]
    node _T_23 = and(io.en, _T_22) @[DelayPipe.scala 50:14]
    when _T_23 : @[DelayPipe.scala 50:37]
      io.out <= io.in @[DelayPipe.scala 51:12]
      skip @[DelayPipe.scala 50:37]
    else : @[DelayPipe.scala 52:43]
      node _T_24 = eq(cnt, io.config) @[DelayPipe.scala 52:28]
      node _T_25 = and(io.en, _T_24) @[DelayPipe.scala 52:20]
      when _T_25 : @[DelayPipe.scala 52:43]
        io.out <= regs[rptr] @[DelayPipe.scala 53:12]
        skip @[DelayPipe.scala 52:43]
      else : @[DelayPipe.scala 54:14]
        io.out <= UInt<1>("h00") @[DelayPipe.scala 55:12]
        skip @[DelayPipe.scala 54:14]
    
  module DelayPipe_5 : 
    input clock : Clock
    input reset : Reset
    output io : {flip en : UInt<1>, flip config : UInt<3>, flip in : UInt<32>, out : UInt<32>}
    
    wire _T : UInt<32>[5] @[DelayPipe.scala 22:29]
    _T[0] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[1] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[2] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[3] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[4] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    reg regs : UInt<32>[5], clock with : (reset => (reset, _T)) @[DelayPipe.scala 22:21]
    reg wptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 23:21]
    reg rptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 24:21]
    node _T_1 = lt(wptr, UInt<3>("h04")) @[DelayPipe.scala 26:23]
    node _T_2 = and(io.en, _T_1) @[DelayPipe.scala 26:14]
    when _T_2 : @[DelayPipe.scala 26:37]
      node _T_3 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 27:17]
      node _T_4 = tail(_T_3, 1) @[DelayPipe.scala 27:17]
      wptr <= _T_4 @[DelayPipe.scala 27:10]
      skip @[DelayPipe.scala 26:37]
    else : @[DelayPipe.scala 28:14]
      wptr <= UInt<1>("h00") @[DelayPipe.scala 29:10]
      skip @[DelayPipe.scala 28:14]
    node _T_5 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 32:12]
    node _T_6 = tail(_T_5, 1) @[DelayPipe.scala 32:12]
    node _T_7 = geq(_T_6, io.config) @[DelayPipe.scala 32:17]
    when _T_7 : @[DelayPipe.scala 32:30]
      node _T_8 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 33:18]
      node _T_9 = tail(_T_8, 1) @[DelayPipe.scala 33:18]
      node _T_10 = sub(_T_9, io.config) @[DelayPipe.scala 33:24]
      node _T_11 = tail(_T_10, 1) @[DelayPipe.scala 33:24]
      rptr <= _T_11 @[DelayPipe.scala 33:10]
      skip @[DelayPipe.scala 32:30]
    else : @[DelayPipe.scala 34:14]
      node _T_12 = add(UInt<3>("h06"), wptr) @[DelayPipe.scala 35:30]
      node _T_13 = tail(_T_12, 1) @[DelayPipe.scala 35:30]
      node _T_14 = sub(_T_13, io.config) @[DelayPipe.scala 35:37]
      node _T_15 = tail(_T_14, 1) @[DelayPipe.scala 35:37]
      rptr <= _T_15 @[DelayPipe.scala 35:10]
      skip @[DelayPipe.scala 34:14]
    node _T_16 = gt(io.config, UInt<1>("h00")) @[DelayPipe.scala 39:28]
    node _T_17 = and(io.en, _T_16) @[DelayPipe.scala 39:14]
    when _T_17 : @[DelayPipe.scala 39:35]
      regs[wptr] <= io.in @[DelayPipe.scala 40:16]
      skip @[DelayPipe.scala 39:35]
    reg cnt : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 43:20]
    node _T_18 = eq(io.en, UInt<1>("h00")) @[DelayPipe.scala 44:8]
    when _T_18 : @[DelayPipe.scala 44:15]
      cnt <= UInt<1>("h00") @[DelayPipe.scala 45:9]
      skip @[DelayPipe.scala 44:15]
    else : @[DelayPipe.scala 46:30]
      node _T_19 = lt(cnt, io.config) @[DelayPipe.scala 46:18]
      when _T_19 : @[DelayPipe.scala 46:30]
        node _T_20 = add(cnt, UInt<1>("h01")) @[DelayPipe.scala 47:16]
        node _T_21 = tail(_T_20, 1) @[DelayPipe.scala 47:16]
        cnt <= _T_21 @[DelayPipe.scala 47:9]
        skip @[DelayPipe.scala 46:30]
    node _T_22 = eq(UInt<1>("h00"), io.config) @[DelayPipe.scala 50:22]
    node _T_23 = and(io.en, _T_22) @[DelayPipe.scala 50:14]
    when _T_23 : @[DelayPipe.scala 50:37]
      io.out <= io.in @[DelayPipe.scala 51:12]
      skip @[DelayPipe.scala 50:37]
    else : @[DelayPipe.scala 52:43]
      node _T_24 = eq(cnt, io.config) @[DelayPipe.scala 52:28]
      node _T_25 = and(io.en, _T_24) @[DelayPipe.scala 52:20]
      when _T_25 : @[DelayPipe.scala 52:43]
        io.out <= regs[rptr] @[DelayPipe.scala 53:12]
        skip @[DelayPipe.scala 52:43]
      else : @[DelayPipe.scala 54:14]
        io.out <= UInt<1>("h00") @[DelayPipe.scala 55:12]
        skip @[DelayPipe.scala 54:14]
    
  module Muxn_20 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[6], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    node _T_10 = eq(UInt<3>("h05"), io.config) @[Mux.scala 80:60]
    node _T_11 = mux(_T_10, io.in[5], _T_9) @[Mux.scala 80:57]
    io.out <= _T_11 @[Multiplexer.scala 20:10]
    
  module Muxn_21 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[6], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    node _T_10 = eq(UInt<3>("h05"), io.config) @[Mux.scala 80:60]
    node _T_11 = mux(_T_10, io.in[5], _T_9) @[Mux.scala 80:57]
    io.out <= _T_11 @[Multiplexer.scala 20:10]
    
  module ConfigMem_18 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<1>, flip cfg_data : UInt<32>, out : UInt<48>[1]}
    
    wire _T : UInt<48>[1] @[ConfigMem.scala 27:29]
    _T[0] <= UInt<48>("h00") @[ConfigMem.scala 27:29]
    reg regs : UInt<48>[1], clock with : (reset => (reset, _T)) @[ConfigMem.scala 27:21]
    node _T_1 = eq(io.cfg_addr, UInt<1>("h00")) @[ConfigMem.scala 39:38]
    node _T_2 = and(io.cfg_en, _T_1) @[ConfigMem.scala 39:22]
    when _T_2 : @[ConfigMem.scala 39:47]
      node _T_3 = bits(regs[0], 47, 32) @[ConfigMem.scala 41:33]
      node _T_4 = cat(_T_3, io.cfg_data) @[Cat.scala 29:58]
      regs[0] <= _T_4 @[ConfigMem.scala 41:19]
      skip @[ConfigMem.scala 39:47]
    node _T_5 = eq(io.cfg_addr, UInt<1>("h01")) @[ConfigMem.scala 39:38]
    node _T_6 = and(io.cfg_en, _T_5) @[ConfigMem.scala 39:22]
    when _T_6 : @[ConfigMem.scala 39:47]
      node _T_7 = bits(regs[0], 31, 0) @[ConfigMem.scala 43:46]
      node _T_8 = cat(io.cfg_data, _T_7) @[Cat.scala 29:58]
      regs[0] <= _T_8 @[ConfigMem.scala 43:19]
      skip @[ConfigMem.scala 39:47]
    io.out[0] <= regs[0] @[ConfigMem.scala 52:45]
    
  module GPE_2 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<12>, flip cfg_data : UInt<32>, flip en : UInt<1>, flip in : UInt<32>[8], out : UInt<32>[1]}
    
    inst alu of ALU_2 @[PE.scala 50:19]
    alu.clock <= clock
    alu.reset <= reset
    inst rf of RF_2 @[PE.scala 51:18]
    rf.clock <= clock
    rf.reset <= reset
    inst DelayPipe of DelayPipe_4 @[PE.scala 52:54]
    DelayPipe.clock <= clock
    DelayPipe.reset <= reset
    inst DelayPipe_1 of DelayPipe_5 @[PE.scala 52:54]
    DelayPipe_1.clock <= clock
    DelayPipe_1.reset <= reset
    wire const : UInt<32> @[PE.scala 54:19]
    inst Muxn of Muxn_20 @[PE.scala 55:49]
    Muxn.clock <= clock
    Muxn.reset <= reset
    inst Muxn_1 of Muxn_21 @[PE.scala 55:49]
    Muxn_1.clock <= clock
    Muxn_1.reset <= reset
    Muxn.io.in[0] <= io.in[0] @[PE.scala 62:12]
    Muxn.io.in[1] <= io.in[1] @[PE.scala 62:12]
    Muxn.io.in[2] <= io.in[2] @[PE.scala 62:12]
    Muxn.io.in[3] <= io.in[3] @[PE.scala 62:12]
    Muxn.io.in[4] <= const @[PE.scala 64:12]
    Muxn.io.in[5] <= rf.io.out[1] @[PE.scala 66:12]
    DelayPipe.io.en <= io.en @[PE.scala 69:23]
    DelayPipe.io.in <= Muxn.io.out @[PE.scala 70:23]
    alu.io.in[0] <= DelayPipe.io.out @[PE.scala 71:18]
    Muxn_1.io.in[0] <= io.in[4] @[PE.scala 62:12]
    Muxn_1.io.in[1] <= io.in[5] @[PE.scala 62:12]
    Muxn_1.io.in[2] <= io.in[6] @[PE.scala 62:12]
    Muxn_1.io.in[3] <= io.in[7] @[PE.scala 62:12]
    Muxn_1.io.in[4] <= const @[PE.scala 64:12]
    Muxn_1.io.in[5] <= rf.io.out[1] @[PE.scala 66:12]
    DelayPipe_1.io.en <= io.en @[PE.scala 69:23]
    DelayPipe_1.io.in <= Muxn_1.io.out @[PE.scala 70:23]
    alu.io.in[1] <= DelayPipe_1.io.out @[PE.scala 71:18]
    rf.io.en <= io.en @[PE.scala 75:12]
    rf.io.in[0] <= alu.io.out @[PE.scala 76:15]
    io.out[0] <= rf.io.out[0] @[PE.scala 77:13]
    inst cfg of ConfigMem_18 @[PE.scala 89:19]
    cfg.clock <= clock
    cfg.reset <= reset
    node _T = bits(io.cfg_addr, 11, 2) @[PE.scala 90:63]
    node _T_1 = eq(UInt<5>("h01e"), _T) @[PE.scala 90:48]
    node _T_2 = and(io.cfg_en, _T_1) @[PE.scala 90:30]
    cfg.io.cfg_en <= _T_2 @[PE.scala 90:17]
    node _T_3 = bits(io.cfg_addr, 1, 0) @[PE.scala 91:33]
    cfg.io.cfg_addr <= _T_3 @[PE.scala 91:19]
    cfg.io.cfg_data <= io.cfg_data @[PE.scala 92:19]
    wire cfgOut : UInt<48> @[PE.scala 96:20]
    cfgOut <= cfg.io.out[0] @[PE.scala 97:10]
    node _T_4 = bits(cfgOut, 31, 0) @[PE.scala 98:18]
    const <= _T_4 @[PE.scala 98:9]
    node _T_5 = bits(cfgOut, 35, 32) @[PE.scala 100:28]
    alu.io.config <= _T_5 @[PE.scala 100:19]
    rf.io.config is invalid @[PE.scala 107:18]
    node _T_6 = bits(cfgOut, 38, 36) @[PE.scala 113:38]
    DelayPipe.io.config <= _T_6 @[PE.scala 113:29]
    node _T_7 = bits(cfgOut, 41, 39) @[PE.scala 113:38]
    DelayPipe_1.io.config <= _T_7 @[PE.scala 113:29]
    node _T_8 = bits(cfgOut, 44, 42) @[PE.scala 121:32]
    Muxn.io.config <= _T_8 @[PE.scala 121:23]
    node _T_9 = bits(cfgOut, 47, 45) @[PE.scala 121:32]
    Muxn_1.io.config <= _T_9 @[PE.scala 121:23]
    
  module ALU_3 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<4>, flip in : UInt<32>[2], out : UInt<32>}
    
    node _T = bits(io.in[0], 31, 0) @[Operations.scala 122:31]
    node _T_1 = bits(io.in[0], 31, 0) @[Operations.scala 124:31]
    node _T_2 = bits(io.in[1], 31, 0) @[Operations.scala 124:49]
    node _T_3 = add(_T_1, _T_2) @[Operations.scala 124:41]
    node _T_4 = tail(_T_3, 1) @[Operations.scala 124:41]
    node _T_5 = bits(io.in[0], 31, 0) @[Operations.scala 126:31]
    node _T_6 = bits(io.in[1], 31, 0) @[Operations.scala 126:49]
    node _T_7 = sub(_T_5, _T_6) @[Operations.scala 126:41]
    node _T_8 = tail(_T_7, 1) @[Operations.scala 126:41]
    node _T_9 = bits(io.in[0], 31, 0) @[Operations.scala 128:31]
    node _T_10 = bits(io.in[1], 31, 0) @[Operations.scala 128:49]
    node _T_11 = mul(_T_9, _T_10) @[Operations.scala 128:41]
    node _T_12 = bits(io.in[0], 31, 0) @[Operations.scala 138:31]
    node _T_13 = bits(io.in[1], 31, 0) @[Operations.scala 138:49]
    node _T_14 = and(_T_12, _T_13) @[Operations.scala 138:41]
    node _T_15 = bits(io.in[0], 31, 0) @[Operations.scala 140:31]
    node _T_16 = bits(io.in[1], 31, 0) @[Operations.scala 140:49]
    node _T_17 = or(_T_15, _T_16) @[Operations.scala 140:41]
    node _T_18 = bits(io.in[0], 31, 0) @[Operations.scala 142:31]
    node _T_19 = bits(io.in[1], 31, 0) @[Operations.scala 142:49]
    node _T_20 = xor(_T_18, _T_19) @[Operations.scala 142:41]
    node _T_21 = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_22 = mux(_T_21, _T, UInt<1>("h00")) @[Mux.scala 80:57]
    node _T_23 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_24 = mux(_T_23, _T_4, _T_22) @[Mux.scala 80:57]
    node _T_25 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_26 = mux(_T_25, _T_8, _T_24) @[Mux.scala 80:57]
    node _T_27 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_28 = mux(_T_27, _T_11, _T_26) @[Mux.scala 80:57]
    node _T_29 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_30 = mux(_T_29, _T_14, _T_28) @[Mux.scala 80:57]
    node _T_31 = eq(UInt<3>("h05"), io.config) @[Mux.scala 80:60]
    node _T_32 = mux(_T_31, _T_17, _T_30) @[Mux.scala 80:57]
    node _T_33 = eq(UInt<3>("h06"), io.config) @[Mux.scala 80:60]
    node _T_34 = mux(_T_33, _T_20, _T_32) @[Mux.scala 80:57]
    io.out <= _T_34 @[ALU.scala 25:10]
    
  module RF_3 : 
    input clock : Clock
    input reset : Reset
    output io : {flip en : UInt<1>, flip config : UInt<0>, flip in : UInt<32>[1], out : UInt<32>[2]}
    
    wire _T : UInt<32>[1] @[RegFile.scala 24:29]
    _T[0] <= UInt<32>("h00") @[RegFile.scala 24:29]
    reg regs : UInt<32>[1], clock with : (reset => (reset, _T)) @[RegFile.scala 24:21]
    when io.en : @[RegFile.scala 34:16]
      regs[0] <= io.in[0] @[RegFile.scala 35:41]
      skip @[RegFile.scala 34:16]
    io.out[0] <= regs[0] @[RegFile.scala 37:42]
    io.out[1] <= regs[0] @[RegFile.scala 37:42]
    
  module DelayPipe_6 : 
    input clock : Clock
    input reset : Reset
    output io : {flip en : UInt<1>, flip config : UInt<3>, flip in : UInt<32>, out : UInt<32>}
    
    wire _T : UInt<32>[5] @[DelayPipe.scala 22:29]
    _T[0] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[1] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[2] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[3] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[4] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    reg regs : UInt<32>[5], clock with : (reset => (reset, _T)) @[DelayPipe.scala 22:21]
    reg wptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 23:21]
    reg rptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 24:21]
    node _T_1 = lt(wptr, UInt<3>("h04")) @[DelayPipe.scala 26:23]
    node _T_2 = and(io.en, _T_1) @[DelayPipe.scala 26:14]
    when _T_2 : @[DelayPipe.scala 26:37]
      node _T_3 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 27:17]
      node _T_4 = tail(_T_3, 1) @[DelayPipe.scala 27:17]
      wptr <= _T_4 @[DelayPipe.scala 27:10]
      skip @[DelayPipe.scala 26:37]
    else : @[DelayPipe.scala 28:14]
      wptr <= UInt<1>("h00") @[DelayPipe.scala 29:10]
      skip @[DelayPipe.scala 28:14]
    node _T_5 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 32:12]
    node _T_6 = tail(_T_5, 1) @[DelayPipe.scala 32:12]
    node _T_7 = geq(_T_6, io.config) @[DelayPipe.scala 32:17]
    when _T_7 : @[DelayPipe.scala 32:30]
      node _T_8 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 33:18]
      node _T_9 = tail(_T_8, 1) @[DelayPipe.scala 33:18]
      node _T_10 = sub(_T_9, io.config) @[DelayPipe.scala 33:24]
      node _T_11 = tail(_T_10, 1) @[DelayPipe.scala 33:24]
      rptr <= _T_11 @[DelayPipe.scala 33:10]
      skip @[DelayPipe.scala 32:30]
    else : @[DelayPipe.scala 34:14]
      node _T_12 = add(UInt<3>("h06"), wptr) @[DelayPipe.scala 35:30]
      node _T_13 = tail(_T_12, 1) @[DelayPipe.scala 35:30]
      node _T_14 = sub(_T_13, io.config) @[DelayPipe.scala 35:37]
      node _T_15 = tail(_T_14, 1) @[DelayPipe.scala 35:37]
      rptr <= _T_15 @[DelayPipe.scala 35:10]
      skip @[DelayPipe.scala 34:14]
    node _T_16 = gt(io.config, UInt<1>("h00")) @[DelayPipe.scala 39:28]
    node _T_17 = and(io.en, _T_16) @[DelayPipe.scala 39:14]
    when _T_17 : @[DelayPipe.scala 39:35]
      regs[wptr] <= io.in @[DelayPipe.scala 40:16]
      skip @[DelayPipe.scala 39:35]
    reg cnt : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 43:20]
    node _T_18 = eq(io.en, UInt<1>("h00")) @[DelayPipe.scala 44:8]
    when _T_18 : @[DelayPipe.scala 44:15]
      cnt <= UInt<1>("h00") @[DelayPipe.scala 45:9]
      skip @[DelayPipe.scala 44:15]
    else : @[DelayPipe.scala 46:30]
      node _T_19 = lt(cnt, io.config) @[DelayPipe.scala 46:18]
      when _T_19 : @[DelayPipe.scala 46:30]
        node _T_20 = add(cnt, UInt<1>("h01")) @[DelayPipe.scala 47:16]
        node _T_21 = tail(_T_20, 1) @[DelayPipe.scala 47:16]
        cnt <= _T_21 @[DelayPipe.scala 47:9]
        skip @[DelayPipe.scala 46:30]
    node _T_22 = eq(UInt<1>("h00"), io.config) @[DelayPipe.scala 50:22]
    node _T_23 = and(io.en, _T_22) @[DelayPipe.scala 50:14]
    when _T_23 : @[DelayPipe.scala 50:37]
      io.out <= io.in @[DelayPipe.scala 51:12]
      skip @[DelayPipe.scala 50:37]
    else : @[DelayPipe.scala 52:43]
      node _T_24 = eq(cnt, io.config) @[DelayPipe.scala 52:28]
      node _T_25 = and(io.en, _T_24) @[DelayPipe.scala 52:20]
      when _T_25 : @[DelayPipe.scala 52:43]
        io.out <= regs[rptr] @[DelayPipe.scala 53:12]
        skip @[DelayPipe.scala 52:43]
      else : @[DelayPipe.scala 54:14]
        io.out <= UInt<1>("h00") @[DelayPipe.scala 55:12]
        skip @[DelayPipe.scala 54:14]
    
  module DelayPipe_7 : 
    input clock : Clock
    input reset : Reset
    output io : {flip en : UInt<1>, flip config : UInt<3>, flip in : UInt<32>, out : UInt<32>}
    
    wire _T : UInt<32>[5] @[DelayPipe.scala 22:29]
    _T[0] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[1] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[2] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[3] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[4] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    reg regs : UInt<32>[5], clock with : (reset => (reset, _T)) @[DelayPipe.scala 22:21]
    reg wptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 23:21]
    reg rptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 24:21]
    node _T_1 = lt(wptr, UInt<3>("h04")) @[DelayPipe.scala 26:23]
    node _T_2 = and(io.en, _T_1) @[DelayPipe.scala 26:14]
    when _T_2 : @[DelayPipe.scala 26:37]
      node _T_3 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 27:17]
      node _T_4 = tail(_T_3, 1) @[DelayPipe.scala 27:17]
      wptr <= _T_4 @[DelayPipe.scala 27:10]
      skip @[DelayPipe.scala 26:37]
    else : @[DelayPipe.scala 28:14]
      wptr <= UInt<1>("h00") @[DelayPipe.scala 29:10]
      skip @[DelayPipe.scala 28:14]
    node _T_5 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 32:12]
    node _T_6 = tail(_T_5, 1) @[DelayPipe.scala 32:12]
    node _T_7 = geq(_T_6, io.config) @[DelayPipe.scala 32:17]
    when _T_7 : @[DelayPipe.scala 32:30]
      node _T_8 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 33:18]
      node _T_9 = tail(_T_8, 1) @[DelayPipe.scala 33:18]
      node _T_10 = sub(_T_9, io.config) @[DelayPipe.scala 33:24]
      node _T_11 = tail(_T_10, 1) @[DelayPipe.scala 33:24]
      rptr <= _T_11 @[DelayPipe.scala 33:10]
      skip @[DelayPipe.scala 32:30]
    else : @[DelayPipe.scala 34:14]
      node _T_12 = add(UInt<3>("h06"), wptr) @[DelayPipe.scala 35:30]
      node _T_13 = tail(_T_12, 1) @[DelayPipe.scala 35:30]
      node _T_14 = sub(_T_13, io.config) @[DelayPipe.scala 35:37]
      node _T_15 = tail(_T_14, 1) @[DelayPipe.scala 35:37]
      rptr <= _T_15 @[DelayPipe.scala 35:10]
      skip @[DelayPipe.scala 34:14]
    node _T_16 = gt(io.config, UInt<1>("h00")) @[DelayPipe.scala 39:28]
    node _T_17 = and(io.en, _T_16) @[DelayPipe.scala 39:14]
    when _T_17 : @[DelayPipe.scala 39:35]
      regs[wptr] <= io.in @[DelayPipe.scala 40:16]
      skip @[DelayPipe.scala 39:35]
    reg cnt : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 43:20]
    node _T_18 = eq(io.en, UInt<1>("h00")) @[DelayPipe.scala 44:8]
    when _T_18 : @[DelayPipe.scala 44:15]
      cnt <= UInt<1>("h00") @[DelayPipe.scala 45:9]
      skip @[DelayPipe.scala 44:15]
    else : @[DelayPipe.scala 46:30]
      node _T_19 = lt(cnt, io.config) @[DelayPipe.scala 46:18]
      when _T_19 : @[DelayPipe.scala 46:30]
        node _T_20 = add(cnt, UInt<1>("h01")) @[DelayPipe.scala 47:16]
        node _T_21 = tail(_T_20, 1) @[DelayPipe.scala 47:16]
        cnt <= _T_21 @[DelayPipe.scala 47:9]
        skip @[DelayPipe.scala 46:30]
    node _T_22 = eq(UInt<1>("h00"), io.config) @[DelayPipe.scala 50:22]
    node _T_23 = and(io.en, _T_22) @[DelayPipe.scala 50:14]
    when _T_23 : @[DelayPipe.scala 50:37]
      io.out <= io.in @[DelayPipe.scala 51:12]
      skip @[DelayPipe.scala 50:37]
    else : @[DelayPipe.scala 52:43]
      node _T_24 = eq(cnt, io.config) @[DelayPipe.scala 52:28]
      node _T_25 = and(io.en, _T_24) @[DelayPipe.scala 52:20]
      when _T_25 : @[DelayPipe.scala 52:43]
        io.out <= regs[rptr] @[DelayPipe.scala 53:12]
        skip @[DelayPipe.scala 52:43]
      else : @[DelayPipe.scala 54:14]
        io.out <= UInt<1>("h00") @[DelayPipe.scala 55:12]
        skip @[DelayPipe.scala 54:14]
    
  module Muxn_22 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[6], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    node _T_10 = eq(UInt<3>("h05"), io.config) @[Mux.scala 80:60]
    node _T_11 = mux(_T_10, io.in[5], _T_9) @[Mux.scala 80:57]
    io.out <= _T_11 @[Multiplexer.scala 20:10]
    
  module Muxn_23 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[6], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    node _T_10 = eq(UInt<3>("h05"), io.config) @[Mux.scala 80:60]
    node _T_11 = mux(_T_10, io.in[5], _T_9) @[Mux.scala 80:57]
    io.out <= _T_11 @[Multiplexer.scala 20:10]
    
  module ConfigMem_19 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<1>, flip cfg_data : UInt<32>, out : UInt<48>[1]}
    
    wire _T : UInt<48>[1] @[ConfigMem.scala 27:29]
    _T[0] <= UInt<48>("h00") @[ConfigMem.scala 27:29]
    reg regs : UInt<48>[1], clock with : (reset => (reset, _T)) @[ConfigMem.scala 27:21]
    node _T_1 = eq(io.cfg_addr, UInt<1>("h00")) @[ConfigMem.scala 39:38]
    node _T_2 = and(io.cfg_en, _T_1) @[ConfigMem.scala 39:22]
    when _T_2 : @[ConfigMem.scala 39:47]
      node _T_3 = bits(regs[0], 47, 32) @[ConfigMem.scala 41:33]
      node _T_4 = cat(_T_3, io.cfg_data) @[Cat.scala 29:58]
      regs[0] <= _T_4 @[ConfigMem.scala 41:19]
      skip @[ConfigMem.scala 39:47]
    node _T_5 = eq(io.cfg_addr, UInt<1>("h01")) @[ConfigMem.scala 39:38]
    node _T_6 = and(io.cfg_en, _T_5) @[ConfigMem.scala 39:22]
    when _T_6 : @[ConfigMem.scala 39:47]
      node _T_7 = bits(regs[0], 31, 0) @[ConfigMem.scala 43:46]
      node _T_8 = cat(io.cfg_data, _T_7) @[Cat.scala 29:58]
      regs[0] <= _T_8 @[ConfigMem.scala 43:19]
      skip @[ConfigMem.scala 39:47]
    io.out[0] <= regs[0] @[ConfigMem.scala 52:45]
    
  module GPE_3 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<12>, flip cfg_data : UInt<32>, flip en : UInt<1>, flip in : UInt<32>[8], out : UInt<32>[1]}
    
    inst alu of ALU_3 @[PE.scala 50:19]
    alu.clock <= clock
    alu.reset <= reset
    inst rf of RF_3 @[PE.scala 51:18]
    rf.clock <= clock
    rf.reset <= reset
    inst DelayPipe of DelayPipe_6 @[PE.scala 52:54]
    DelayPipe.clock <= clock
    DelayPipe.reset <= reset
    inst DelayPipe_1 of DelayPipe_7 @[PE.scala 52:54]
    DelayPipe_1.clock <= clock
    DelayPipe_1.reset <= reset
    wire const : UInt<32> @[PE.scala 54:19]
    inst Muxn of Muxn_22 @[PE.scala 55:49]
    Muxn.clock <= clock
    Muxn.reset <= reset
    inst Muxn_1 of Muxn_23 @[PE.scala 55:49]
    Muxn_1.clock <= clock
    Muxn_1.reset <= reset
    Muxn.io.in[0] <= io.in[0] @[PE.scala 62:12]
    Muxn.io.in[1] <= io.in[1] @[PE.scala 62:12]
    Muxn.io.in[2] <= io.in[2] @[PE.scala 62:12]
    Muxn.io.in[3] <= io.in[3] @[PE.scala 62:12]
    Muxn.io.in[4] <= const @[PE.scala 64:12]
    Muxn.io.in[5] <= rf.io.out[1] @[PE.scala 66:12]
    DelayPipe.io.en <= io.en @[PE.scala 69:23]
    DelayPipe.io.in <= Muxn.io.out @[PE.scala 70:23]
    alu.io.in[0] <= DelayPipe.io.out @[PE.scala 71:18]
    Muxn_1.io.in[0] <= io.in[4] @[PE.scala 62:12]
    Muxn_1.io.in[1] <= io.in[5] @[PE.scala 62:12]
    Muxn_1.io.in[2] <= io.in[6] @[PE.scala 62:12]
    Muxn_1.io.in[3] <= io.in[7] @[PE.scala 62:12]
    Muxn_1.io.in[4] <= const @[PE.scala 64:12]
    Muxn_1.io.in[5] <= rf.io.out[1] @[PE.scala 66:12]
    DelayPipe_1.io.en <= io.en @[PE.scala 69:23]
    DelayPipe_1.io.in <= Muxn_1.io.out @[PE.scala 70:23]
    alu.io.in[1] <= DelayPipe_1.io.out @[PE.scala 71:18]
    rf.io.en <= io.en @[PE.scala 75:12]
    rf.io.in[0] <= alu.io.out @[PE.scala 76:15]
    io.out[0] <= rf.io.out[0] @[PE.scala 77:13]
    inst cfg of ConfigMem_19 @[PE.scala 89:19]
    cfg.clock <= clock
    cfg.reset <= reset
    node _T = bits(io.cfg_addr, 11, 2) @[PE.scala 90:63]
    node _T_1 = eq(UInt<5>("h01f"), _T) @[PE.scala 90:48]
    node _T_2 = and(io.cfg_en, _T_1) @[PE.scala 90:30]
    cfg.io.cfg_en <= _T_2 @[PE.scala 90:17]
    node _T_3 = bits(io.cfg_addr, 1, 0) @[PE.scala 91:33]
    cfg.io.cfg_addr <= _T_3 @[PE.scala 91:19]
    cfg.io.cfg_data <= io.cfg_data @[PE.scala 92:19]
    wire cfgOut : UInt<48> @[PE.scala 96:20]
    cfgOut <= cfg.io.out[0] @[PE.scala 97:10]
    node _T_4 = bits(cfgOut, 31, 0) @[PE.scala 98:18]
    const <= _T_4 @[PE.scala 98:9]
    node _T_5 = bits(cfgOut, 35, 32) @[PE.scala 100:28]
    alu.io.config <= _T_5 @[PE.scala 100:19]
    rf.io.config is invalid @[PE.scala 107:18]
    node _T_6 = bits(cfgOut, 38, 36) @[PE.scala 113:38]
    DelayPipe.io.config <= _T_6 @[PE.scala 113:29]
    node _T_7 = bits(cfgOut, 41, 39) @[PE.scala 113:38]
    DelayPipe_1.io.config <= _T_7 @[PE.scala 113:29]
    node _T_8 = bits(cfgOut, 44, 42) @[PE.scala 121:32]
    Muxn.io.config <= _T_8 @[PE.scala 121:23]
    node _T_9 = bits(cfgOut, 47, 45) @[PE.scala 121:32]
    Muxn_1.io.config <= _T_9 @[PE.scala 121:23]
    
  module ALU_4 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<4>, flip in : UInt<32>[2], out : UInt<32>}
    
    node _T = bits(io.in[0], 31, 0) @[Operations.scala 122:31]
    node _T_1 = bits(io.in[0], 31, 0) @[Operations.scala 124:31]
    node _T_2 = bits(io.in[1], 31, 0) @[Operations.scala 124:49]
    node _T_3 = add(_T_1, _T_2) @[Operations.scala 124:41]
    node _T_4 = tail(_T_3, 1) @[Operations.scala 124:41]
    node _T_5 = bits(io.in[0], 31, 0) @[Operations.scala 126:31]
    node _T_6 = bits(io.in[1], 31, 0) @[Operations.scala 126:49]
    node _T_7 = sub(_T_5, _T_6) @[Operations.scala 126:41]
    node _T_8 = tail(_T_7, 1) @[Operations.scala 126:41]
    node _T_9 = bits(io.in[0], 31, 0) @[Operations.scala 128:31]
    node _T_10 = bits(io.in[1], 31, 0) @[Operations.scala 128:49]
    node _T_11 = mul(_T_9, _T_10) @[Operations.scala 128:41]
    node _T_12 = bits(io.in[0], 31, 0) @[Operations.scala 138:31]
    node _T_13 = bits(io.in[1], 31, 0) @[Operations.scala 138:49]
    node _T_14 = and(_T_12, _T_13) @[Operations.scala 138:41]
    node _T_15 = bits(io.in[0], 31, 0) @[Operations.scala 140:31]
    node _T_16 = bits(io.in[1], 31, 0) @[Operations.scala 140:49]
    node _T_17 = or(_T_15, _T_16) @[Operations.scala 140:41]
    node _T_18 = bits(io.in[0], 31, 0) @[Operations.scala 142:31]
    node _T_19 = bits(io.in[1], 31, 0) @[Operations.scala 142:49]
    node _T_20 = xor(_T_18, _T_19) @[Operations.scala 142:41]
    node _T_21 = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_22 = mux(_T_21, _T, UInt<1>("h00")) @[Mux.scala 80:57]
    node _T_23 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_24 = mux(_T_23, _T_4, _T_22) @[Mux.scala 80:57]
    node _T_25 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_26 = mux(_T_25, _T_8, _T_24) @[Mux.scala 80:57]
    node _T_27 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_28 = mux(_T_27, _T_11, _T_26) @[Mux.scala 80:57]
    node _T_29 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_30 = mux(_T_29, _T_14, _T_28) @[Mux.scala 80:57]
    node _T_31 = eq(UInt<3>("h05"), io.config) @[Mux.scala 80:60]
    node _T_32 = mux(_T_31, _T_17, _T_30) @[Mux.scala 80:57]
    node _T_33 = eq(UInt<3>("h06"), io.config) @[Mux.scala 80:60]
    node _T_34 = mux(_T_33, _T_20, _T_32) @[Mux.scala 80:57]
    io.out <= _T_34 @[ALU.scala 25:10]
    
  module RF_4 : 
    input clock : Clock
    input reset : Reset
    output io : {flip en : UInt<1>, flip config : UInt<0>, flip in : UInt<32>[1], out : UInt<32>[2]}
    
    wire _T : UInt<32>[1] @[RegFile.scala 24:29]
    _T[0] <= UInt<32>("h00") @[RegFile.scala 24:29]
    reg regs : UInt<32>[1], clock with : (reset => (reset, _T)) @[RegFile.scala 24:21]
    when io.en : @[RegFile.scala 34:16]
      regs[0] <= io.in[0] @[RegFile.scala 35:41]
      skip @[RegFile.scala 34:16]
    io.out[0] <= regs[0] @[RegFile.scala 37:42]
    io.out[1] <= regs[0] @[RegFile.scala 37:42]
    
  module DelayPipe_8 : 
    input clock : Clock
    input reset : Reset
    output io : {flip en : UInt<1>, flip config : UInt<3>, flip in : UInt<32>, out : UInt<32>}
    
    wire _T : UInt<32>[5] @[DelayPipe.scala 22:29]
    _T[0] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[1] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[2] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[3] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[4] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    reg regs : UInt<32>[5], clock with : (reset => (reset, _T)) @[DelayPipe.scala 22:21]
    reg wptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 23:21]
    reg rptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 24:21]
    node _T_1 = lt(wptr, UInt<3>("h04")) @[DelayPipe.scala 26:23]
    node _T_2 = and(io.en, _T_1) @[DelayPipe.scala 26:14]
    when _T_2 : @[DelayPipe.scala 26:37]
      node _T_3 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 27:17]
      node _T_4 = tail(_T_3, 1) @[DelayPipe.scala 27:17]
      wptr <= _T_4 @[DelayPipe.scala 27:10]
      skip @[DelayPipe.scala 26:37]
    else : @[DelayPipe.scala 28:14]
      wptr <= UInt<1>("h00") @[DelayPipe.scala 29:10]
      skip @[DelayPipe.scala 28:14]
    node _T_5 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 32:12]
    node _T_6 = tail(_T_5, 1) @[DelayPipe.scala 32:12]
    node _T_7 = geq(_T_6, io.config) @[DelayPipe.scala 32:17]
    when _T_7 : @[DelayPipe.scala 32:30]
      node _T_8 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 33:18]
      node _T_9 = tail(_T_8, 1) @[DelayPipe.scala 33:18]
      node _T_10 = sub(_T_9, io.config) @[DelayPipe.scala 33:24]
      node _T_11 = tail(_T_10, 1) @[DelayPipe.scala 33:24]
      rptr <= _T_11 @[DelayPipe.scala 33:10]
      skip @[DelayPipe.scala 32:30]
    else : @[DelayPipe.scala 34:14]
      node _T_12 = add(UInt<3>("h06"), wptr) @[DelayPipe.scala 35:30]
      node _T_13 = tail(_T_12, 1) @[DelayPipe.scala 35:30]
      node _T_14 = sub(_T_13, io.config) @[DelayPipe.scala 35:37]
      node _T_15 = tail(_T_14, 1) @[DelayPipe.scala 35:37]
      rptr <= _T_15 @[DelayPipe.scala 35:10]
      skip @[DelayPipe.scala 34:14]
    node _T_16 = gt(io.config, UInt<1>("h00")) @[DelayPipe.scala 39:28]
    node _T_17 = and(io.en, _T_16) @[DelayPipe.scala 39:14]
    when _T_17 : @[DelayPipe.scala 39:35]
      regs[wptr] <= io.in @[DelayPipe.scala 40:16]
      skip @[DelayPipe.scala 39:35]
    reg cnt : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 43:20]
    node _T_18 = eq(io.en, UInt<1>("h00")) @[DelayPipe.scala 44:8]
    when _T_18 : @[DelayPipe.scala 44:15]
      cnt <= UInt<1>("h00") @[DelayPipe.scala 45:9]
      skip @[DelayPipe.scala 44:15]
    else : @[DelayPipe.scala 46:30]
      node _T_19 = lt(cnt, io.config) @[DelayPipe.scala 46:18]
      when _T_19 : @[DelayPipe.scala 46:30]
        node _T_20 = add(cnt, UInt<1>("h01")) @[DelayPipe.scala 47:16]
        node _T_21 = tail(_T_20, 1) @[DelayPipe.scala 47:16]
        cnt <= _T_21 @[DelayPipe.scala 47:9]
        skip @[DelayPipe.scala 46:30]
    node _T_22 = eq(UInt<1>("h00"), io.config) @[DelayPipe.scala 50:22]
    node _T_23 = and(io.en, _T_22) @[DelayPipe.scala 50:14]
    when _T_23 : @[DelayPipe.scala 50:37]
      io.out <= io.in @[DelayPipe.scala 51:12]
      skip @[DelayPipe.scala 50:37]
    else : @[DelayPipe.scala 52:43]
      node _T_24 = eq(cnt, io.config) @[DelayPipe.scala 52:28]
      node _T_25 = and(io.en, _T_24) @[DelayPipe.scala 52:20]
      when _T_25 : @[DelayPipe.scala 52:43]
        io.out <= regs[rptr] @[DelayPipe.scala 53:12]
        skip @[DelayPipe.scala 52:43]
      else : @[DelayPipe.scala 54:14]
        io.out <= UInt<1>("h00") @[DelayPipe.scala 55:12]
        skip @[DelayPipe.scala 54:14]
    
  module DelayPipe_9 : 
    input clock : Clock
    input reset : Reset
    output io : {flip en : UInt<1>, flip config : UInt<3>, flip in : UInt<32>, out : UInt<32>}
    
    wire _T : UInt<32>[5] @[DelayPipe.scala 22:29]
    _T[0] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[1] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[2] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[3] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[4] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    reg regs : UInt<32>[5], clock with : (reset => (reset, _T)) @[DelayPipe.scala 22:21]
    reg wptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 23:21]
    reg rptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 24:21]
    node _T_1 = lt(wptr, UInt<3>("h04")) @[DelayPipe.scala 26:23]
    node _T_2 = and(io.en, _T_1) @[DelayPipe.scala 26:14]
    when _T_2 : @[DelayPipe.scala 26:37]
      node _T_3 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 27:17]
      node _T_4 = tail(_T_3, 1) @[DelayPipe.scala 27:17]
      wptr <= _T_4 @[DelayPipe.scala 27:10]
      skip @[DelayPipe.scala 26:37]
    else : @[DelayPipe.scala 28:14]
      wptr <= UInt<1>("h00") @[DelayPipe.scala 29:10]
      skip @[DelayPipe.scala 28:14]
    node _T_5 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 32:12]
    node _T_6 = tail(_T_5, 1) @[DelayPipe.scala 32:12]
    node _T_7 = geq(_T_6, io.config) @[DelayPipe.scala 32:17]
    when _T_7 : @[DelayPipe.scala 32:30]
      node _T_8 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 33:18]
      node _T_9 = tail(_T_8, 1) @[DelayPipe.scala 33:18]
      node _T_10 = sub(_T_9, io.config) @[DelayPipe.scala 33:24]
      node _T_11 = tail(_T_10, 1) @[DelayPipe.scala 33:24]
      rptr <= _T_11 @[DelayPipe.scala 33:10]
      skip @[DelayPipe.scala 32:30]
    else : @[DelayPipe.scala 34:14]
      node _T_12 = add(UInt<3>("h06"), wptr) @[DelayPipe.scala 35:30]
      node _T_13 = tail(_T_12, 1) @[DelayPipe.scala 35:30]
      node _T_14 = sub(_T_13, io.config) @[DelayPipe.scala 35:37]
      node _T_15 = tail(_T_14, 1) @[DelayPipe.scala 35:37]
      rptr <= _T_15 @[DelayPipe.scala 35:10]
      skip @[DelayPipe.scala 34:14]
    node _T_16 = gt(io.config, UInt<1>("h00")) @[DelayPipe.scala 39:28]
    node _T_17 = and(io.en, _T_16) @[DelayPipe.scala 39:14]
    when _T_17 : @[DelayPipe.scala 39:35]
      regs[wptr] <= io.in @[DelayPipe.scala 40:16]
      skip @[DelayPipe.scala 39:35]
    reg cnt : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 43:20]
    node _T_18 = eq(io.en, UInt<1>("h00")) @[DelayPipe.scala 44:8]
    when _T_18 : @[DelayPipe.scala 44:15]
      cnt <= UInt<1>("h00") @[DelayPipe.scala 45:9]
      skip @[DelayPipe.scala 44:15]
    else : @[DelayPipe.scala 46:30]
      node _T_19 = lt(cnt, io.config) @[DelayPipe.scala 46:18]
      when _T_19 : @[DelayPipe.scala 46:30]
        node _T_20 = add(cnt, UInt<1>("h01")) @[DelayPipe.scala 47:16]
        node _T_21 = tail(_T_20, 1) @[DelayPipe.scala 47:16]
        cnt <= _T_21 @[DelayPipe.scala 47:9]
        skip @[DelayPipe.scala 46:30]
    node _T_22 = eq(UInt<1>("h00"), io.config) @[DelayPipe.scala 50:22]
    node _T_23 = and(io.en, _T_22) @[DelayPipe.scala 50:14]
    when _T_23 : @[DelayPipe.scala 50:37]
      io.out <= io.in @[DelayPipe.scala 51:12]
      skip @[DelayPipe.scala 50:37]
    else : @[DelayPipe.scala 52:43]
      node _T_24 = eq(cnt, io.config) @[DelayPipe.scala 52:28]
      node _T_25 = and(io.en, _T_24) @[DelayPipe.scala 52:20]
      when _T_25 : @[DelayPipe.scala 52:43]
        io.out <= regs[rptr] @[DelayPipe.scala 53:12]
        skip @[DelayPipe.scala 52:43]
      else : @[DelayPipe.scala 54:14]
        io.out <= UInt<1>("h00") @[DelayPipe.scala 55:12]
        skip @[DelayPipe.scala 54:14]
    
  module Muxn_24 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[6], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    node _T_10 = eq(UInt<3>("h05"), io.config) @[Mux.scala 80:60]
    node _T_11 = mux(_T_10, io.in[5], _T_9) @[Mux.scala 80:57]
    io.out <= _T_11 @[Multiplexer.scala 20:10]
    
  module Muxn_25 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[6], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    node _T_10 = eq(UInt<3>("h05"), io.config) @[Mux.scala 80:60]
    node _T_11 = mux(_T_10, io.in[5], _T_9) @[Mux.scala 80:57]
    io.out <= _T_11 @[Multiplexer.scala 20:10]
    
  module ConfigMem_20 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<1>, flip cfg_data : UInt<32>, out : UInt<48>[1]}
    
    wire _T : UInt<48>[1] @[ConfigMem.scala 27:29]
    _T[0] <= UInt<48>("h00") @[ConfigMem.scala 27:29]
    reg regs : UInt<48>[1], clock with : (reset => (reset, _T)) @[ConfigMem.scala 27:21]
    node _T_1 = eq(io.cfg_addr, UInt<1>("h00")) @[ConfigMem.scala 39:38]
    node _T_2 = and(io.cfg_en, _T_1) @[ConfigMem.scala 39:22]
    when _T_2 : @[ConfigMem.scala 39:47]
      node _T_3 = bits(regs[0], 47, 32) @[ConfigMem.scala 41:33]
      node _T_4 = cat(_T_3, io.cfg_data) @[Cat.scala 29:58]
      regs[0] <= _T_4 @[ConfigMem.scala 41:19]
      skip @[ConfigMem.scala 39:47]
    node _T_5 = eq(io.cfg_addr, UInt<1>("h01")) @[ConfigMem.scala 39:38]
    node _T_6 = and(io.cfg_en, _T_5) @[ConfigMem.scala 39:22]
    when _T_6 : @[ConfigMem.scala 39:47]
      node _T_7 = bits(regs[0], 31, 0) @[ConfigMem.scala 43:46]
      node _T_8 = cat(io.cfg_data, _T_7) @[Cat.scala 29:58]
      regs[0] <= _T_8 @[ConfigMem.scala 43:19]
      skip @[ConfigMem.scala 39:47]
    io.out[0] <= regs[0] @[ConfigMem.scala 52:45]
    
  module GPE_4 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<12>, flip cfg_data : UInt<32>, flip en : UInt<1>, flip in : UInt<32>[8], out : UInt<32>[1]}
    
    inst alu of ALU_4 @[PE.scala 50:19]
    alu.clock <= clock
    alu.reset <= reset
    inst rf of RF_4 @[PE.scala 51:18]
    rf.clock <= clock
    rf.reset <= reset
    inst DelayPipe of DelayPipe_8 @[PE.scala 52:54]
    DelayPipe.clock <= clock
    DelayPipe.reset <= reset
    inst DelayPipe_1 of DelayPipe_9 @[PE.scala 52:54]
    DelayPipe_1.clock <= clock
    DelayPipe_1.reset <= reset
    wire const : UInt<32> @[PE.scala 54:19]
    inst Muxn of Muxn_24 @[PE.scala 55:49]
    Muxn.clock <= clock
    Muxn.reset <= reset
    inst Muxn_1 of Muxn_25 @[PE.scala 55:49]
    Muxn_1.clock <= clock
    Muxn_1.reset <= reset
    Muxn.io.in[0] <= io.in[0] @[PE.scala 62:12]
    Muxn.io.in[1] <= io.in[1] @[PE.scala 62:12]
    Muxn.io.in[2] <= io.in[2] @[PE.scala 62:12]
    Muxn.io.in[3] <= io.in[3] @[PE.scala 62:12]
    Muxn.io.in[4] <= const @[PE.scala 64:12]
    Muxn.io.in[5] <= rf.io.out[1] @[PE.scala 66:12]
    DelayPipe.io.en <= io.en @[PE.scala 69:23]
    DelayPipe.io.in <= Muxn.io.out @[PE.scala 70:23]
    alu.io.in[0] <= DelayPipe.io.out @[PE.scala 71:18]
    Muxn_1.io.in[0] <= io.in[4] @[PE.scala 62:12]
    Muxn_1.io.in[1] <= io.in[5] @[PE.scala 62:12]
    Muxn_1.io.in[2] <= io.in[6] @[PE.scala 62:12]
    Muxn_1.io.in[3] <= io.in[7] @[PE.scala 62:12]
    Muxn_1.io.in[4] <= const @[PE.scala 64:12]
    Muxn_1.io.in[5] <= rf.io.out[1] @[PE.scala 66:12]
    DelayPipe_1.io.en <= io.en @[PE.scala 69:23]
    DelayPipe_1.io.in <= Muxn_1.io.out @[PE.scala 70:23]
    alu.io.in[1] <= DelayPipe_1.io.out @[PE.scala 71:18]
    rf.io.en <= io.en @[PE.scala 75:12]
    rf.io.in[0] <= alu.io.out @[PE.scala 76:15]
    io.out[0] <= rf.io.out[0] @[PE.scala 77:13]
    inst cfg of ConfigMem_20 @[PE.scala 89:19]
    cfg.clock <= clock
    cfg.reset <= reset
    node _T = bits(io.cfg_addr, 11, 2) @[PE.scala 90:63]
    node _T_1 = eq(UInt<6>("h020"), _T) @[PE.scala 90:48]
    node _T_2 = and(io.cfg_en, _T_1) @[PE.scala 90:30]
    cfg.io.cfg_en <= _T_2 @[PE.scala 90:17]
    node _T_3 = bits(io.cfg_addr, 1, 0) @[PE.scala 91:33]
    cfg.io.cfg_addr <= _T_3 @[PE.scala 91:19]
    cfg.io.cfg_data <= io.cfg_data @[PE.scala 92:19]
    wire cfgOut : UInt<48> @[PE.scala 96:20]
    cfgOut <= cfg.io.out[0] @[PE.scala 97:10]
    node _T_4 = bits(cfgOut, 31, 0) @[PE.scala 98:18]
    const <= _T_4 @[PE.scala 98:9]
    node _T_5 = bits(cfgOut, 35, 32) @[PE.scala 100:28]
    alu.io.config <= _T_5 @[PE.scala 100:19]
    rf.io.config is invalid @[PE.scala 107:18]
    node _T_6 = bits(cfgOut, 38, 36) @[PE.scala 113:38]
    DelayPipe.io.config <= _T_6 @[PE.scala 113:29]
    node _T_7 = bits(cfgOut, 41, 39) @[PE.scala 113:38]
    DelayPipe_1.io.config <= _T_7 @[PE.scala 113:29]
    node _T_8 = bits(cfgOut, 44, 42) @[PE.scala 121:32]
    Muxn.io.config <= _T_8 @[PE.scala 121:23]
    node _T_9 = bits(cfgOut, 47, 45) @[PE.scala 121:32]
    Muxn_1.io.config <= _T_9 @[PE.scala 121:23]
    
  module ALU_5 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<4>, flip in : UInt<32>[2], out : UInt<32>}
    
    node _T = bits(io.in[0], 31, 0) @[Operations.scala 122:31]
    node _T_1 = bits(io.in[0], 31, 0) @[Operations.scala 124:31]
    node _T_2 = bits(io.in[1], 31, 0) @[Operations.scala 124:49]
    node _T_3 = add(_T_1, _T_2) @[Operations.scala 124:41]
    node _T_4 = tail(_T_3, 1) @[Operations.scala 124:41]
    node _T_5 = bits(io.in[0], 31, 0) @[Operations.scala 126:31]
    node _T_6 = bits(io.in[1], 31, 0) @[Operations.scala 126:49]
    node _T_7 = sub(_T_5, _T_6) @[Operations.scala 126:41]
    node _T_8 = tail(_T_7, 1) @[Operations.scala 126:41]
    node _T_9 = bits(io.in[0], 31, 0) @[Operations.scala 128:31]
    node _T_10 = bits(io.in[1], 31, 0) @[Operations.scala 128:49]
    node _T_11 = mul(_T_9, _T_10) @[Operations.scala 128:41]
    node _T_12 = bits(io.in[0], 31, 0) @[Operations.scala 138:31]
    node _T_13 = bits(io.in[1], 31, 0) @[Operations.scala 138:49]
    node _T_14 = and(_T_12, _T_13) @[Operations.scala 138:41]
    node _T_15 = bits(io.in[0], 31, 0) @[Operations.scala 140:31]
    node _T_16 = bits(io.in[1], 31, 0) @[Operations.scala 140:49]
    node _T_17 = or(_T_15, _T_16) @[Operations.scala 140:41]
    node _T_18 = bits(io.in[0], 31, 0) @[Operations.scala 142:31]
    node _T_19 = bits(io.in[1], 31, 0) @[Operations.scala 142:49]
    node _T_20 = xor(_T_18, _T_19) @[Operations.scala 142:41]
    node _T_21 = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_22 = mux(_T_21, _T, UInt<1>("h00")) @[Mux.scala 80:57]
    node _T_23 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_24 = mux(_T_23, _T_4, _T_22) @[Mux.scala 80:57]
    node _T_25 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_26 = mux(_T_25, _T_8, _T_24) @[Mux.scala 80:57]
    node _T_27 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_28 = mux(_T_27, _T_11, _T_26) @[Mux.scala 80:57]
    node _T_29 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_30 = mux(_T_29, _T_14, _T_28) @[Mux.scala 80:57]
    node _T_31 = eq(UInt<3>("h05"), io.config) @[Mux.scala 80:60]
    node _T_32 = mux(_T_31, _T_17, _T_30) @[Mux.scala 80:57]
    node _T_33 = eq(UInt<3>("h06"), io.config) @[Mux.scala 80:60]
    node _T_34 = mux(_T_33, _T_20, _T_32) @[Mux.scala 80:57]
    io.out <= _T_34 @[ALU.scala 25:10]
    
  module RF_5 : 
    input clock : Clock
    input reset : Reset
    output io : {flip en : UInt<1>, flip config : UInt<0>, flip in : UInt<32>[1], out : UInt<32>[2]}
    
    wire _T : UInt<32>[1] @[RegFile.scala 24:29]
    _T[0] <= UInt<32>("h00") @[RegFile.scala 24:29]
    reg regs : UInt<32>[1], clock with : (reset => (reset, _T)) @[RegFile.scala 24:21]
    when io.en : @[RegFile.scala 34:16]
      regs[0] <= io.in[0] @[RegFile.scala 35:41]
      skip @[RegFile.scala 34:16]
    io.out[0] <= regs[0] @[RegFile.scala 37:42]
    io.out[1] <= regs[0] @[RegFile.scala 37:42]
    
  module DelayPipe_10 : 
    input clock : Clock
    input reset : Reset
    output io : {flip en : UInt<1>, flip config : UInt<3>, flip in : UInt<32>, out : UInt<32>}
    
    wire _T : UInt<32>[5] @[DelayPipe.scala 22:29]
    _T[0] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[1] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[2] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[3] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[4] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    reg regs : UInt<32>[5], clock with : (reset => (reset, _T)) @[DelayPipe.scala 22:21]
    reg wptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 23:21]
    reg rptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 24:21]
    node _T_1 = lt(wptr, UInt<3>("h04")) @[DelayPipe.scala 26:23]
    node _T_2 = and(io.en, _T_1) @[DelayPipe.scala 26:14]
    when _T_2 : @[DelayPipe.scala 26:37]
      node _T_3 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 27:17]
      node _T_4 = tail(_T_3, 1) @[DelayPipe.scala 27:17]
      wptr <= _T_4 @[DelayPipe.scala 27:10]
      skip @[DelayPipe.scala 26:37]
    else : @[DelayPipe.scala 28:14]
      wptr <= UInt<1>("h00") @[DelayPipe.scala 29:10]
      skip @[DelayPipe.scala 28:14]
    node _T_5 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 32:12]
    node _T_6 = tail(_T_5, 1) @[DelayPipe.scala 32:12]
    node _T_7 = geq(_T_6, io.config) @[DelayPipe.scala 32:17]
    when _T_7 : @[DelayPipe.scala 32:30]
      node _T_8 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 33:18]
      node _T_9 = tail(_T_8, 1) @[DelayPipe.scala 33:18]
      node _T_10 = sub(_T_9, io.config) @[DelayPipe.scala 33:24]
      node _T_11 = tail(_T_10, 1) @[DelayPipe.scala 33:24]
      rptr <= _T_11 @[DelayPipe.scala 33:10]
      skip @[DelayPipe.scala 32:30]
    else : @[DelayPipe.scala 34:14]
      node _T_12 = add(UInt<3>("h06"), wptr) @[DelayPipe.scala 35:30]
      node _T_13 = tail(_T_12, 1) @[DelayPipe.scala 35:30]
      node _T_14 = sub(_T_13, io.config) @[DelayPipe.scala 35:37]
      node _T_15 = tail(_T_14, 1) @[DelayPipe.scala 35:37]
      rptr <= _T_15 @[DelayPipe.scala 35:10]
      skip @[DelayPipe.scala 34:14]
    node _T_16 = gt(io.config, UInt<1>("h00")) @[DelayPipe.scala 39:28]
    node _T_17 = and(io.en, _T_16) @[DelayPipe.scala 39:14]
    when _T_17 : @[DelayPipe.scala 39:35]
      regs[wptr] <= io.in @[DelayPipe.scala 40:16]
      skip @[DelayPipe.scala 39:35]
    reg cnt : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 43:20]
    node _T_18 = eq(io.en, UInt<1>("h00")) @[DelayPipe.scala 44:8]
    when _T_18 : @[DelayPipe.scala 44:15]
      cnt <= UInt<1>("h00") @[DelayPipe.scala 45:9]
      skip @[DelayPipe.scala 44:15]
    else : @[DelayPipe.scala 46:30]
      node _T_19 = lt(cnt, io.config) @[DelayPipe.scala 46:18]
      when _T_19 : @[DelayPipe.scala 46:30]
        node _T_20 = add(cnt, UInt<1>("h01")) @[DelayPipe.scala 47:16]
        node _T_21 = tail(_T_20, 1) @[DelayPipe.scala 47:16]
        cnt <= _T_21 @[DelayPipe.scala 47:9]
        skip @[DelayPipe.scala 46:30]
    node _T_22 = eq(UInt<1>("h00"), io.config) @[DelayPipe.scala 50:22]
    node _T_23 = and(io.en, _T_22) @[DelayPipe.scala 50:14]
    when _T_23 : @[DelayPipe.scala 50:37]
      io.out <= io.in @[DelayPipe.scala 51:12]
      skip @[DelayPipe.scala 50:37]
    else : @[DelayPipe.scala 52:43]
      node _T_24 = eq(cnt, io.config) @[DelayPipe.scala 52:28]
      node _T_25 = and(io.en, _T_24) @[DelayPipe.scala 52:20]
      when _T_25 : @[DelayPipe.scala 52:43]
        io.out <= regs[rptr] @[DelayPipe.scala 53:12]
        skip @[DelayPipe.scala 52:43]
      else : @[DelayPipe.scala 54:14]
        io.out <= UInt<1>("h00") @[DelayPipe.scala 55:12]
        skip @[DelayPipe.scala 54:14]
    
  module DelayPipe_11 : 
    input clock : Clock
    input reset : Reset
    output io : {flip en : UInt<1>, flip config : UInt<3>, flip in : UInt<32>, out : UInt<32>}
    
    wire _T : UInt<32>[5] @[DelayPipe.scala 22:29]
    _T[0] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[1] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[2] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[3] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[4] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    reg regs : UInt<32>[5], clock with : (reset => (reset, _T)) @[DelayPipe.scala 22:21]
    reg wptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 23:21]
    reg rptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 24:21]
    node _T_1 = lt(wptr, UInt<3>("h04")) @[DelayPipe.scala 26:23]
    node _T_2 = and(io.en, _T_1) @[DelayPipe.scala 26:14]
    when _T_2 : @[DelayPipe.scala 26:37]
      node _T_3 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 27:17]
      node _T_4 = tail(_T_3, 1) @[DelayPipe.scala 27:17]
      wptr <= _T_4 @[DelayPipe.scala 27:10]
      skip @[DelayPipe.scala 26:37]
    else : @[DelayPipe.scala 28:14]
      wptr <= UInt<1>("h00") @[DelayPipe.scala 29:10]
      skip @[DelayPipe.scala 28:14]
    node _T_5 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 32:12]
    node _T_6 = tail(_T_5, 1) @[DelayPipe.scala 32:12]
    node _T_7 = geq(_T_6, io.config) @[DelayPipe.scala 32:17]
    when _T_7 : @[DelayPipe.scala 32:30]
      node _T_8 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 33:18]
      node _T_9 = tail(_T_8, 1) @[DelayPipe.scala 33:18]
      node _T_10 = sub(_T_9, io.config) @[DelayPipe.scala 33:24]
      node _T_11 = tail(_T_10, 1) @[DelayPipe.scala 33:24]
      rptr <= _T_11 @[DelayPipe.scala 33:10]
      skip @[DelayPipe.scala 32:30]
    else : @[DelayPipe.scala 34:14]
      node _T_12 = add(UInt<3>("h06"), wptr) @[DelayPipe.scala 35:30]
      node _T_13 = tail(_T_12, 1) @[DelayPipe.scala 35:30]
      node _T_14 = sub(_T_13, io.config) @[DelayPipe.scala 35:37]
      node _T_15 = tail(_T_14, 1) @[DelayPipe.scala 35:37]
      rptr <= _T_15 @[DelayPipe.scala 35:10]
      skip @[DelayPipe.scala 34:14]
    node _T_16 = gt(io.config, UInt<1>("h00")) @[DelayPipe.scala 39:28]
    node _T_17 = and(io.en, _T_16) @[DelayPipe.scala 39:14]
    when _T_17 : @[DelayPipe.scala 39:35]
      regs[wptr] <= io.in @[DelayPipe.scala 40:16]
      skip @[DelayPipe.scala 39:35]
    reg cnt : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 43:20]
    node _T_18 = eq(io.en, UInt<1>("h00")) @[DelayPipe.scala 44:8]
    when _T_18 : @[DelayPipe.scala 44:15]
      cnt <= UInt<1>("h00") @[DelayPipe.scala 45:9]
      skip @[DelayPipe.scala 44:15]
    else : @[DelayPipe.scala 46:30]
      node _T_19 = lt(cnt, io.config) @[DelayPipe.scala 46:18]
      when _T_19 : @[DelayPipe.scala 46:30]
        node _T_20 = add(cnt, UInt<1>("h01")) @[DelayPipe.scala 47:16]
        node _T_21 = tail(_T_20, 1) @[DelayPipe.scala 47:16]
        cnt <= _T_21 @[DelayPipe.scala 47:9]
        skip @[DelayPipe.scala 46:30]
    node _T_22 = eq(UInt<1>("h00"), io.config) @[DelayPipe.scala 50:22]
    node _T_23 = and(io.en, _T_22) @[DelayPipe.scala 50:14]
    when _T_23 : @[DelayPipe.scala 50:37]
      io.out <= io.in @[DelayPipe.scala 51:12]
      skip @[DelayPipe.scala 50:37]
    else : @[DelayPipe.scala 52:43]
      node _T_24 = eq(cnt, io.config) @[DelayPipe.scala 52:28]
      node _T_25 = and(io.en, _T_24) @[DelayPipe.scala 52:20]
      when _T_25 : @[DelayPipe.scala 52:43]
        io.out <= regs[rptr] @[DelayPipe.scala 53:12]
        skip @[DelayPipe.scala 52:43]
      else : @[DelayPipe.scala 54:14]
        io.out <= UInt<1>("h00") @[DelayPipe.scala 55:12]
        skip @[DelayPipe.scala 54:14]
    
  module Muxn_26 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[6], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    node _T_10 = eq(UInt<3>("h05"), io.config) @[Mux.scala 80:60]
    node _T_11 = mux(_T_10, io.in[5], _T_9) @[Mux.scala 80:57]
    io.out <= _T_11 @[Multiplexer.scala 20:10]
    
  module Muxn_27 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[6], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    node _T_10 = eq(UInt<3>("h05"), io.config) @[Mux.scala 80:60]
    node _T_11 = mux(_T_10, io.in[5], _T_9) @[Mux.scala 80:57]
    io.out <= _T_11 @[Multiplexer.scala 20:10]
    
  module ConfigMem_21 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<1>, flip cfg_data : UInt<32>, out : UInt<48>[1]}
    
    wire _T : UInt<48>[1] @[ConfigMem.scala 27:29]
    _T[0] <= UInt<48>("h00") @[ConfigMem.scala 27:29]
    reg regs : UInt<48>[1], clock with : (reset => (reset, _T)) @[ConfigMem.scala 27:21]
    node _T_1 = eq(io.cfg_addr, UInt<1>("h00")) @[ConfigMem.scala 39:38]
    node _T_2 = and(io.cfg_en, _T_1) @[ConfigMem.scala 39:22]
    when _T_2 : @[ConfigMem.scala 39:47]
      node _T_3 = bits(regs[0], 47, 32) @[ConfigMem.scala 41:33]
      node _T_4 = cat(_T_3, io.cfg_data) @[Cat.scala 29:58]
      regs[0] <= _T_4 @[ConfigMem.scala 41:19]
      skip @[ConfigMem.scala 39:47]
    node _T_5 = eq(io.cfg_addr, UInt<1>("h01")) @[ConfigMem.scala 39:38]
    node _T_6 = and(io.cfg_en, _T_5) @[ConfigMem.scala 39:22]
    when _T_6 : @[ConfigMem.scala 39:47]
      node _T_7 = bits(regs[0], 31, 0) @[ConfigMem.scala 43:46]
      node _T_8 = cat(io.cfg_data, _T_7) @[Cat.scala 29:58]
      regs[0] <= _T_8 @[ConfigMem.scala 43:19]
      skip @[ConfigMem.scala 39:47]
    io.out[0] <= regs[0] @[ConfigMem.scala 52:45]
    
  module GPE_5 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<12>, flip cfg_data : UInt<32>, flip en : UInt<1>, flip in : UInt<32>[8], out : UInt<32>[1]}
    
    inst alu of ALU_5 @[PE.scala 50:19]
    alu.clock <= clock
    alu.reset <= reset
    inst rf of RF_5 @[PE.scala 51:18]
    rf.clock <= clock
    rf.reset <= reset
    inst DelayPipe of DelayPipe_10 @[PE.scala 52:54]
    DelayPipe.clock <= clock
    DelayPipe.reset <= reset
    inst DelayPipe_1 of DelayPipe_11 @[PE.scala 52:54]
    DelayPipe_1.clock <= clock
    DelayPipe_1.reset <= reset
    wire const : UInt<32> @[PE.scala 54:19]
    inst Muxn of Muxn_26 @[PE.scala 55:49]
    Muxn.clock <= clock
    Muxn.reset <= reset
    inst Muxn_1 of Muxn_27 @[PE.scala 55:49]
    Muxn_1.clock <= clock
    Muxn_1.reset <= reset
    Muxn.io.in[0] <= io.in[0] @[PE.scala 62:12]
    Muxn.io.in[1] <= io.in[1] @[PE.scala 62:12]
    Muxn.io.in[2] <= io.in[2] @[PE.scala 62:12]
    Muxn.io.in[3] <= io.in[3] @[PE.scala 62:12]
    Muxn.io.in[4] <= const @[PE.scala 64:12]
    Muxn.io.in[5] <= rf.io.out[1] @[PE.scala 66:12]
    DelayPipe.io.en <= io.en @[PE.scala 69:23]
    DelayPipe.io.in <= Muxn.io.out @[PE.scala 70:23]
    alu.io.in[0] <= DelayPipe.io.out @[PE.scala 71:18]
    Muxn_1.io.in[0] <= io.in[4] @[PE.scala 62:12]
    Muxn_1.io.in[1] <= io.in[5] @[PE.scala 62:12]
    Muxn_1.io.in[2] <= io.in[6] @[PE.scala 62:12]
    Muxn_1.io.in[3] <= io.in[7] @[PE.scala 62:12]
    Muxn_1.io.in[4] <= const @[PE.scala 64:12]
    Muxn_1.io.in[5] <= rf.io.out[1] @[PE.scala 66:12]
    DelayPipe_1.io.en <= io.en @[PE.scala 69:23]
    DelayPipe_1.io.in <= Muxn_1.io.out @[PE.scala 70:23]
    alu.io.in[1] <= DelayPipe_1.io.out @[PE.scala 71:18]
    rf.io.en <= io.en @[PE.scala 75:12]
    rf.io.in[0] <= alu.io.out @[PE.scala 76:15]
    io.out[0] <= rf.io.out[0] @[PE.scala 77:13]
    inst cfg of ConfigMem_21 @[PE.scala 89:19]
    cfg.clock <= clock
    cfg.reset <= reset
    node _T = bits(io.cfg_addr, 11, 2) @[PE.scala 90:63]
    node _T_1 = eq(UInt<6>("h021"), _T) @[PE.scala 90:48]
    node _T_2 = and(io.cfg_en, _T_1) @[PE.scala 90:30]
    cfg.io.cfg_en <= _T_2 @[PE.scala 90:17]
    node _T_3 = bits(io.cfg_addr, 1, 0) @[PE.scala 91:33]
    cfg.io.cfg_addr <= _T_3 @[PE.scala 91:19]
    cfg.io.cfg_data <= io.cfg_data @[PE.scala 92:19]
    wire cfgOut : UInt<48> @[PE.scala 96:20]
    cfgOut <= cfg.io.out[0] @[PE.scala 97:10]
    node _T_4 = bits(cfgOut, 31, 0) @[PE.scala 98:18]
    const <= _T_4 @[PE.scala 98:9]
    node _T_5 = bits(cfgOut, 35, 32) @[PE.scala 100:28]
    alu.io.config <= _T_5 @[PE.scala 100:19]
    rf.io.config is invalid @[PE.scala 107:18]
    node _T_6 = bits(cfgOut, 38, 36) @[PE.scala 113:38]
    DelayPipe.io.config <= _T_6 @[PE.scala 113:29]
    node _T_7 = bits(cfgOut, 41, 39) @[PE.scala 113:38]
    DelayPipe_1.io.config <= _T_7 @[PE.scala 113:29]
    node _T_8 = bits(cfgOut, 44, 42) @[PE.scala 121:32]
    Muxn.io.config <= _T_8 @[PE.scala 121:23]
    node _T_9 = bits(cfgOut, 47, 45) @[PE.scala 121:32]
    Muxn_1.io.config <= _T_9 @[PE.scala 121:23]
    
  module ALU_6 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<4>, flip in : UInt<32>[2], out : UInt<32>}
    
    node _T = bits(io.in[0], 31, 0) @[Operations.scala 122:31]
    node _T_1 = bits(io.in[0], 31, 0) @[Operations.scala 124:31]
    node _T_2 = bits(io.in[1], 31, 0) @[Operations.scala 124:49]
    node _T_3 = add(_T_1, _T_2) @[Operations.scala 124:41]
    node _T_4 = tail(_T_3, 1) @[Operations.scala 124:41]
    node _T_5 = bits(io.in[0], 31, 0) @[Operations.scala 126:31]
    node _T_6 = bits(io.in[1], 31, 0) @[Operations.scala 126:49]
    node _T_7 = sub(_T_5, _T_6) @[Operations.scala 126:41]
    node _T_8 = tail(_T_7, 1) @[Operations.scala 126:41]
    node _T_9 = bits(io.in[0], 31, 0) @[Operations.scala 128:31]
    node _T_10 = bits(io.in[1], 31, 0) @[Operations.scala 128:49]
    node _T_11 = mul(_T_9, _T_10) @[Operations.scala 128:41]
    node _T_12 = bits(io.in[0], 31, 0) @[Operations.scala 138:31]
    node _T_13 = bits(io.in[1], 31, 0) @[Operations.scala 138:49]
    node _T_14 = and(_T_12, _T_13) @[Operations.scala 138:41]
    node _T_15 = bits(io.in[0], 31, 0) @[Operations.scala 140:31]
    node _T_16 = bits(io.in[1], 31, 0) @[Operations.scala 140:49]
    node _T_17 = or(_T_15, _T_16) @[Operations.scala 140:41]
    node _T_18 = bits(io.in[0], 31, 0) @[Operations.scala 142:31]
    node _T_19 = bits(io.in[1], 31, 0) @[Operations.scala 142:49]
    node _T_20 = xor(_T_18, _T_19) @[Operations.scala 142:41]
    node _T_21 = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_22 = mux(_T_21, _T, UInt<1>("h00")) @[Mux.scala 80:57]
    node _T_23 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_24 = mux(_T_23, _T_4, _T_22) @[Mux.scala 80:57]
    node _T_25 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_26 = mux(_T_25, _T_8, _T_24) @[Mux.scala 80:57]
    node _T_27 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_28 = mux(_T_27, _T_11, _T_26) @[Mux.scala 80:57]
    node _T_29 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_30 = mux(_T_29, _T_14, _T_28) @[Mux.scala 80:57]
    node _T_31 = eq(UInt<3>("h05"), io.config) @[Mux.scala 80:60]
    node _T_32 = mux(_T_31, _T_17, _T_30) @[Mux.scala 80:57]
    node _T_33 = eq(UInt<3>("h06"), io.config) @[Mux.scala 80:60]
    node _T_34 = mux(_T_33, _T_20, _T_32) @[Mux.scala 80:57]
    io.out <= _T_34 @[ALU.scala 25:10]
    
  module RF_6 : 
    input clock : Clock
    input reset : Reset
    output io : {flip en : UInt<1>, flip config : UInt<0>, flip in : UInt<32>[1], out : UInt<32>[2]}
    
    wire _T : UInt<32>[1] @[RegFile.scala 24:29]
    _T[0] <= UInt<32>("h00") @[RegFile.scala 24:29]
    reg regs : UInt<32>[1], clock with : (reset => (reset, _T)) @[RegFile.scala 24:21]
    when io.en : @[RegFile.scala 34:16]
      regs[0] <= io.in[0] @[RegFile.scala 35:41]
      skip @[RegFile.scala 34:16]
    io.out[0] <= regs[0] @[RegFile.scala 37:42]
    io.out[1] <= regs[0] @[RegFile.scala 37:42]
    
  module DelayPipe_12 : 
    input clock : Clock
    input reset : Reset
    output io : {flip en : UInt<1>, flip config : UInt<3>, flip in : UInt<32>, out : UInt<32>}
    
    wire _T : UInt<32>[5] @[DelayPipe.scala 22:29]
    _T[0] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[1] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[2] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[3] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[4] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    reg regs : UInt<32>[5], clock with : (reset => (reset, _T)) @[DelayPipe.scala 22:21]
    reg wptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 23:21]
    reg rptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 24:21]
    node _T_1 = lt(wptr, UInt<3>("h04")) @[DelayPipe.scala 26:23]
    node _T_2 = and(io.en, _T_1) @[DelayPipe.scala 26:14]
    when _T_2 : @[DelayPipe.scala 26:37]
      node _T_3 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 27:17]
      node _T_4 = tail(_T_3, 1) @[DelayPipe.scala 27:17]
      wptr <= _T_4 @[DelayPipe.scala 27:10]
      skip @[DelayPipe.scala 26:37]
    else : @[DelayPipe.scala 28:14]
      wptr <= UInt<1>("h00") @[DelayPipe.scala 29:10]
      skip @[DelayPipe.scala 28:14]
    node _T_5 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 32:12]
    node _T_6 = tail(_T_5, 1) @[DelayPipe.scala 32:12]
    node _T_7 = geq(_T_6, io.config) @[DelayPipe.scala 32:17]
    when _T_7 : @[DelayPipe.scala 32:30]
      node _T_8 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 33:18]
      node _T_9 = tail(_T_8, 1) @[DelayPipe.scala 33:18]
      node _T_10 = sub(_T_9, io.config) @[DelayPipe.scala 33:24]
      node _T_11 = tail(_T_10, 1) @[DelayPipe.scala 33:24]
      rptr <= _T_11 @[DelayPipe.scala 33:10]
      skip @[DelayPipe.scala 32:30]
    else : @[DelayPipe.scala 34:14]
      node _T_12 = add(UInt<3>("h06"), wptr) @[DelayPipe.scala 35:30]
      node _T_13 = tail(_T_12, 1) @[DelayPipe.scala 35:30]
      node _T_14 = sub(_T_13, io.config) @[DelayPipe.scala 35:37]
      node _T_15 = tail(_T_14, 1) @[DelayPipe.scala 35:37]
      rptr <= _T_15 @[DelayPipe.scala 35:10]
      skip @[DelayPipe.scala 34:14]
    node _T_16 = gt(io.config, UInt<1>("h00")) @[DelayPipe.scala 39:28]
    node _T_17 = and(io.en, _T_16) @[DelayPipe.scala 39:14]
    when _T_17 : @[DelayPipe.scala 39:35]
      regs[wptr] <= io.in @[DelayPipe.scala 40:16]
      skip @[DelayPipe.scala 39:35]
    reg cnt : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 43:20]
    node _T_18 = eq(io.en, UInt<1>("h00")) @[DelayPipe.scala 44:8]
    when _T_18 : @[DelayPipe.scala 44:15]
      cnt <= UInt<1>("h00") @[DelayPipe.scala 45:9]
      skip @[DelayPipe.scala 44:15]
    else : @[DelayPipe.scala 46:30]
      node _T_19 = lt(cnt, io.config) @[DelayPipe.scala 46:18]
      when _T_19 : @[DelayPipe.scala 46:30]
        node _T_20 = add(cnt, UInt<1>("h01")) @[DelayPipe.scala 47:16]
        node _T_21 = tail(_T_20, 1) @[DelayPipe.scala 47:16]
        cnt <= _T_21 @[DelayPipe.scala 47:9]
        skip @[DelayPipe.scala 46:30]
    node _T_22 = eq(UInt<1>("h00"), io.config) @[DelayPipe.scala 50:22]
    node _T_23 = and(io.en, _T_22) @[DelayPipe.scala 50:14]
    when _T_23 : @[DelayPipe.scala 50:37]
      io.out <= io.in @[DelayPipe.scala 51:12]
      skip @[DelayPipe.scala 50:37]
    else : @[DelayPipe.scala 52:43]
      node _T_24 = eq(cnt, io.config) @[DelayPipe.scala 52:28]
      node _T_25 = and(io.en, _T_24) @[DelayPipe.scala 52:20]
      when _T_25 : @[DelayPipe.scala 52:43]
        io.out <= regs[rptr] @[DelayPipe.scala 53:12]
        skip @[DelayPipe.scala 52:43]
      else : @[DelayPipe.scala 54:14]
        io.out <= UInt<1>("h00") @[DelayPipe.scala 55:12]
        skip @[DelayPipe.scala 54:14]
    
  module DelayPipe_13 : 
    input clock : Clock
    input reset : Reset
    output io : {flip en : UInt<1>, flip config : UInt<3>, flip in : UInt<32>, out : UInt<32>}
    
    wire _T : UInt<32>[5] @[DelayPipe.scala 22:29]
    _T[0] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[1] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[2] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[3] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[4] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    reg regs : UInt<32>[5], clock with : (reset => (reset, _T)) @[DelayPipe.scala 22:21]
    reg wptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 23:21]
    reg rptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 24:21]
    node _T_1 = lt(wptr, UInt<3>("h04")) @[DelayPipe.scala 26:23]
    node _T_2 = and(io.en, _T_1) @[DelayPipe.scala 26:14]
    when _T_2 : @[DelayPipe.scala 26:37]
      node _T_3 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 27:17]
      node _T_4 = tail(_T_3, 1) @[DelayPipe.scala 27:17]
      wptr <= _T_4 @[DelayPipe.scala 27:10]
      skip @[DelayPipe.scala 26:37]
    else : @[DelayPipe.scala 28:14]
      wptr <= UInt<1>("h00") @[DelayPipe.scala 29:10]
      skip @[DelayPipe.scala 28:14]
    node _T_5 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 32:12]
    node _T_6 = tail(_T_5, 1) @[DelayPipe.scala 32:12]
    node _T_7 = geq(_T_6, io.config) @[DelayPipe.scala 32:17]
    when _T_7 : @[DelayPipe.scala 32:30]
      node _T_8 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 33:18]
      node _T_9 = tail(_T_8, 1) @[DelayPipe.scala 33:18]
      node _T_10 = sub(_T_9, io.config) @[DelayPipe.scala 33:24]
      node _T_11 = tail(_T_10, 1) @[DelayPipe.scala 33:24]
      rptr <= _T_11 @[DelayPipe.scala 33:10]
      skip @[DelayPipe.scala 32:30]
    else : @[DelayPipe.scala 34:14]
      node _T_12 = add(UInt<3>("h06"), wptr) @[DelayPipe.scala 35:30]
      node _T_13 = tail(_T_12, 1) @[DelayPipe.scala 35:30]
      node _T_14 = sub(_T_13, io.config) @[DelayPipe.scala 35:37]
      node _T_15 = tail(_T_14, 1) @[DelayPipe.scala 35:37]
      rptr <= _T_15 @[DelayPipe.scala 35:10]
      skip @[DelayPipe.scala 34:14]
    node _T_16 = gt(io.config, UInt<1>("h00")) @[DelayPipe.scala 39:28]
    node _T_17 = and(io.en, _T_16) @[DelayPipe.scala 39:14]
    when _T_17 : @[DelayPipe.scala 39:35]
      regs[wptr] <= io.in @[DelayPipe.scala 40:16]
      skip @[DelayPipe.scala 39:35]
    reg cnt : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 43:20]
    node _T_18 = eq(io.en, UInt<1>("h00")) @[DelayPipe.scala 44:8]
    when _T_18 : @[DelayPipe.scala 44:15]
      cnt <= UInt<1>("h00") @[DelayPipe.scala 45:9]
      skip @[DelayPipe.scala 44:15]
    else : @[DelayPipe.scala 46:30]
      node _T_19 = lt(cnt, io.config) @[DelayPipe.scala 46:18]
      when _T_19 : @[DelayPipe.scala 46:30]
        node _T_20 = add(cnt, UInt<1>("h01")) @[DelayPipe.scala 47:16]
        node _T_21 = tail(_T_20, 1) @[DelayPipe.scala 47:16]
        cnt <= _T_21 @[DelayPipe.scala 47:9]
        skip @[DelayPipe.scala 46:30]
    node _T_22 = eq(UInt<1>("h00"), io.config) @[DelayPipe.scala 50:22]
    node _T_23 = and(io.en, _T_22) @[DelayPipe.scala 50:14]
    when _T_23 : @[DelayPipe.scala 50:37]
      io.out <= io.in @[DelayPipe.scala 51:12]
      skip @[DelayPipe.scala 50:37]
    else : @[DelayPipe.scala 52:43]
      node _T_24 = eq(cnt, io.config) @[DelayPipe.scala 52:28]
      node _T_25 = and(io.en, _T_24) @[DelayPipe.scala 52:20]
      when _T_25 : @[DelayPipe.scala 52:43]
        io.out <= regs[rptr] @[DelayPipe.scala 53:12]
        skip @[DelayPipe.scala 52:43]
      else : @[DelayPipe.scala 54:14]
        io.out <= UInt<1>("h00") @[DelayPipe.scala 55:12]
        skip @[DelayPipe.scala 54:14]
    
  module Muxn_28 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[6], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    node _T_10 = eq(UInt<3>("h05"), io.config) @[Mux.scala 80:60]
    node _T_11 = mux(_T_10, io.in[5], _T_9) @[Mux.scala 80:57]
    io.out <= _T_11 @[Multiplexer.scala 20:10]
    
  module Muxn_29 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[6], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    node _T_10 = eq(UInt<3>("h05"), io.config) @[Mux.scala 80:60]
    node _T_11 = mux(_T_10, io.in[5], _T_9) @[Mux.scala 80:57]
    io.out <= _T_11 @[Multiplexer.scala 20:10]
    
  module ConfigMem_22 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<1>, flip cfg_data : UInt<32>, out : UInt<48>[1]}
    
    wire _T : UInt<48>[1] @[ConfigMem.scala 27:29]
    _T[0] <= UInt<48>("h00") @[ConfigMem.scala 27:29]
    reg regs : UInt<48>[1], clock with : (reset => (reset, _T)) @[ConfigMem.scala 27:21]
    node _T_1 = eq(io.cfg_addr, UInt<1>("h00")) @[ConfigMem.scala 39:38]
    node _T_2 = and(io.cfg_en, _T_1) @[ConfigMem.scala 39:22]
    when _T_2 : @[ConfigMem.scala 39:47]
      node _T_3 = bits(regs[0], 47, 32) @[ConfigMem.scala 41:33]
      node _T_4 = cat(_T_3, io.cfg_data) @[Cat.scala 29:58]
      regs[0] <= _T_4 @[ConfigMem.scala 41:19]
      skip @[ConfigMem.scala 39:47]
    node _T_5 = eq(io.cfg_addr, UInt<1>("h01")) @[ConfigMem.scala 39:38]
    node _T_6 = and(io.cfg_en, _T_5) @[ConfigMem.scala 39:22]
    when _T_6 : @[ConfigMem.scala 39:47]
      node _T_7 = bits(regs[0], 31, 0) @[ConfigMem.scala 43:46]
      node _T_8 = cat(io.cfg_data, _T_7) @[Cat.scala 29:58]
      regs[0] <= _T_8 @[ConfigMem.scala 43:19]
      skip @[ConfigMem.scala 39:47]
    io.out[0] <= regs[0] @[ConfigMem.scala 52:45]
    
  module GPE_6 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<12>, flip cfg_data : UInt<32>, flip en : UInt<1>, flip in : UInt<32>[8], out : UInt<32>[1]}
    
    inst alu of ALU_6 @[PE.scala 50:19]
    alu.clock <= clock
    alu.reset <= reset
    inst rf of RF_6 @[PE.scala 51:18]
    rf.clock <= clock
    rf.reset <= reset
    inst DelayPipe of DelayPipe_12 @[PE.scala 52:54]
    DelayPipe.clock <= clock
    DelayPipe.reset <= reset
    inst DelayPipe_1 of DelayPipe_13 @[PE.scala 52:54]
    DelayPipe_1.clock <= clock
    DelayPipe_1.reset <= reset
    wire const : UInt<32> @[PE.scala 54:19]
    inst Muxn of Muxn_28 @[PE.scala 55:49]
    Muxn.clock <= clock
    Muxn.reset <= reset
    inst Muxn_1 of Muxn_29 @[PE.scala 55:49]
    Muxn_1.clock <= clock
    Muxn_1.reset <= reset
    Muxn.io.in[0] <= io.in[0] @[PE.scala 62:12]
    Muxn.io.in[1] <= io.in[1] @[PE.scala 62:12]
    Muxn.io.in[2] <= io.in[2] @[PE.scala 62:12]
    Muxn.io.in[3] <= io.in[3] @[PE.scala 62:12]
    Muxn.io.in[4] <= const @[PE.scala 64:12]
    Muxn.io.in[5] <= rf.io.out[1] @[PE.scala 66:12]
    DelayPipe.io.en <= io.en @[PE.scala 69:23]
    DelayPipe.io.in <= Muxn.io.out @[PE.scala 70:23]
    alu.io.in[0] <= DelayPipe.io.out @[PE.scala 71:18]
    Muxn_1.io.in[0] <= io.in[4] @[PE.scala 62:12]
    Muxn_1.io.in[1] <= io.in[5] @[PE.scala 62:12]
    Muxn_1.io.in[2] <= io.in[6] @[PE.scala 62:12]
    Muxn_1.io.in[3] <= io.in[7] @[PE.scala 62:12]
    Muxn_1.io.in[4] <= const @[PE.scala 64:12]
    Muxn_1.io.in[5] <= rf.io.out[1] @[PE.scala 66:12]
    DelayPipe_1.io.en <= io.en @[PE.scala 69:23]
    DelayPipe_1.io.in <= Muxn_1.io.out @[PE.scala 70:23]
    alu.io.in[1] <= DelayPipe_1.io.out @[PE.scala 71:18]
    rf.io.en <= io.en @[PE.scala 75:12]
    rf.io.in[0] <= alu.io.out @[PE.scala 76:15]
    io.out[0] <= rf.io.out[0] @[PE.scala 77:13]
    inst cfg of ConfigMem_22 @[PE.scala 89:19]
    cfg.clock <= clock
    cfg.reset <= reset
    node _T = bits(io.cfg_addr, 11, 2) @[PE.scala 90:63]
    node _T_1 = eq(UInt<6>("h022"), _T) @[PE.scala 90:48]
    node _T_2 = and(io.cfg_en, _T_1) @[PE.scala 90:30]
    cfg.io.cfg_en <= _T_2 @[PE.scala 90:17]
    node _T_3 = bits(io.cfg_addr, 1, 0) @[PE.scala 91:33]
    cfg.io.cfg_addr <= _T_3 @[PE.scala 91:19]
    cfg.io.cfg_data <= io.cfg_data @[PE.scala 92:19]
    wire cfgOut : UInt<48> @[PE.scala 96:20]
    cfgOut <= cfg.io.out[0] @[PE.scala 97:10]
    node _T_4 = bits(cfgOut, 31, 0) @[PE.scala 98:18]
    const <= _T_4 @[PE.scala 98:9]
    node _T_5 = bits(cfgOut, 35, 32) @[PE.scala 100:28]
    alu.io.config <= _T_5 @[PE.scala 100:19]
    rf.io.config is invalid @[PE.scala 107:18]
    node _T_6 = bits(cfgOut, 38, 36) @[PE.scala 113:38]
    DelayPipe.io.config <= _T_6 @[PE.scala 113:29]
    node _T_7 = bits(cfgOut, 41, 39) @[PE.scala 113:38]
    DelayPipe_1.io.config <= _T_7 @[PE.scala 113:29]
    node _T_8 = bits(cfgOut, 44, 42) @[PE.scala 121:32]
    Muxn.io.config <= _T_8 @[PE.scala 121:23]
    node _T_9 = bits(cfgOut, 47, 45) @[PE.scala 121:32]
    Muxn_1.io.config <= _T_9 @[PE.scala 121:23]
    
  module ALU_7 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<4>, flip in : UInt<32>[2], out : UInt<32>}
    
    node _T = bits(io.in[0], 31, 0) @[Operations.scala 122:31]
    node _T_1 = bits(io.in[0], 31, 0) @[Operations.scala 124:31]
    node _T_2 = bits(io.in[1], 31, 0) @[Operations.scala 124:49]
    node _T_3 = add(_T_1, _T_2) @[Operations.scala 124:41]
    node _T_4 = tail(_T_3, 1) @[Operations.scala 124:41]
    node _T_5 = bits(io.in[0], 31, 0) @[Operations.scala 126:31]
    node _T_6 = bits(io.in[1], 31, 0) @[Operations.scala 126:49]
    node _T_7 = sub(_T_5, _T_6) @[Operations.scala 126:41]
    node _T_8 = tail(_T_7, 1) @[Operations.scala 126:41]
    node _T_9 = bits(io.in[0], 31, 0) @[Operations.scala 128:31]
    node _T_10 = bits(io.in[1], 31, 0) @[Operations.scala 128:49]
    node _T_11 = mul(_T_9, _T_10) @[Operations.scala 128:41]
    node _T_12 = bits(io.in[0], 31, 0) @[Operations.scala 138:31]
    node _T_13 = bits(io.in[1], 31, 0) @[Operations.scala 138:49]
    node _T_14 = and(_T_12, _T_13) @[Operations.scala 138:41]
    node _T_15 = bits(io.in[0], 31, 0) @[Operations.scala 140:31]
    node _T_16 = bits(io.in[1], 31, 0) @[Operations.scala 140:49]
    node _T_17 = or(_T_15, _T_16) @[Operations.scala 140:41]
    node _T_18 = bits(io.in[0], 31, 0) @[Operations.scala 142:31]
    node _T_19 = bits(io.in[1], 31, 0) @[Operations.scala 142:49]
    node _T_20 = xor(_T_18, _T_19) @[Operations.scala 142:41]
    node _T_21 = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_22 = mux(_T_21, _T, UInt<1>("h00")) @[Mux.scala 80:57]
    node _T_23 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_24 = mux(_T_23, _T_4, _T_22) @[Mux.scala 80:57]
    node _T_25 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_26 = mux(_T_25, _T_8, _T_24) @[Mux.scala 80:57]
    node _T_27 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_28 = mux(_T_27, _T_11, _T_26) @[Mux.scala 80:57]
    node _T_29 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_30 = mux(_T_29, _T_14, _T_28) @[Mux.scala 80:57]
    node _T_31 = eq(UInt<3>("h05"), io.config) @[Mux.scala 80:60]
    node _T_32 = mux(_T_31, _T_17, _T_30) @[Mux.scala 80:57]
    node _T_33 = eq(UInt<3>("h06"), io.config) @[Mux.scala 80:60]
    node _T_34 = mux(_T_33, _T_20, _T_32) @[Mux.scala 80:57]
    io.out <= _T_34 @[ALU.scala 25:10]
    
  module RF_7 : 
    input clock : Clock
    input reset : Reset
    output io : {flip en : UInt<1>, flip config : UInt<0>, flip in : UInt<32>[1], out : UInt<32>[2]}
    
    wire _T : UInt<32>[1] @[RegFile.scala 24:29]
    _T[0] <= UInt<32>("h00") @[RegFile.scala 24:29]
    reg regs : UInt<32>[1], clock with : (reset => (reset, _T)) @[RegFile.scala 24:21]
    when io.en : @[RegFile.scala 34:16]
      regs[0] <= io.in[0] @[RegFile.scala 35:41]
      skip @[RegFile.scala 34:16]
    io.out[0] <= regs[0] @[RegFile.scala 37:42]
    io.out[1] <= regs[0] @[RegFile.scala 37:42]
    
  module DelayPipe_14 : 
    input clock : Clock
    input reset : Reset
    output io : {flip en : UInt<1>, flip config : UInt<3>, flip in : UInt<32>, out : UInt<32>}
    
    wire _T : UInt<32>[5] @[DelayPipe.scala 22:29]
    _T[0] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[1] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[2] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[3] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[4] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    reg regs : UInt<32>[5], clock with : (reset => (reset, _T)) @[DelayPipe.scala 22:21]
    reg wptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 23:21]
    reg rptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 24:21]
    node _T_1 = lt(wptr, UInt<3>("h04")) @[DelayPipe.scala 26:23]
    node _T_2 = and(io.en, _T_1) @[DelayPipe.scala 26:14]
    when _T_2 : @[DelayPipe.scala 26:37]
      node _T_3 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 27:17]
      node _T_4 = tail(_T_3, 1) @[DelayPipe.scala 27:17]
      wptr <= _T_4 @[DelayPipe.scala 27:10]
      skip @[DelayPipe.scala 26:37]
    else : @[DelayPipe.scala 28:14]
      wptr <= UInt<1>("h00") @[DelayPipe.scala 29:10]
      skip @[DelayPipe.scala 28:14]
    node _T_5 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 32:12]
    node _T_6 = tail(_T_5, 1) @[DelayPipe.scala 32:12]
    node _T_7 = geq(_T_6, io.config) @[DelayPipe.scala 32:17]
    when _T_7 : @[DelayPipe.scala 32:30]
      node _T_8 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 33:18]
      node _T_9 = tail(_T_8, 1) @[DelayPipe.scala 33:18]
      node _T_10 = sub(_T_9, io.config) @[DelayPipe.scala 33:24]
      node _T_11 = tail(_T_10, 1) @[DelayPipe.scala 33:24]
      rptr <= _T_11 @[DelayPipe.scala 33:10]
      skip @[DelayPipe.scala 32:30]
    else : @[DelayPipe.scala 34:14]
      node _T_12 = add(UInt<3>("h06"), wptr) @[DelayPipe.scala 35:30]
      node _T_13 = tail(_T_12, 1) @[DelayPipe.scala 35:30]
      node _T_14 = sub(_T_13, io.config) @[DelayPipe.scala 35:37]
      node _T_15 = tail(_T_14, 1) @[DelayPipe.scala 35:37]
      rptr <= _T_15 @[DelayPipe.scala 35:10]
      skip @[DelayPipe.scala 34:14]
    node _T_16 = gt(io.config, UInt<1>("h00")) @[DelayPipe.scala 39:28]
    node _T_17 = and(io.en, _T_16) @[DelayPipe.scala 39:14]
    when _T_17 : @[DelayPipe.scala 39:35]
      regs[wptr] <= io.in @[DelayPipe.scala 40:16]
      skip @[DelayPipe.scala 39:35]
    reg cnt : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 43:20]
    node _T_18 = eq(io.en, UInt<1>("h00")) @[DelayPipe.scala 44:8]
    when _T_18 : @[DelayPipe.scala 44:15]
      cnt <= UInt<1>("h00") @[DelayPipe.scala 45:9]
      skip @[DelayPipe.scala 44:15]
    else : @[DelayPipe.scala 46:30]
      node _T_19 = lt(cnt, io.config) @[DelayPipe.scala 46:18]
      when _T_19 : @[DelayPipe.scala 46:30]
        node _T_20 = add(cnt, UInt<1>("h01")) @[DelayPipe.scala 47:16]
        node _T_21 = tail(_T_20, 1) @[DelayPipe.scala 47:16]
        cnt <= _T_21 @[DelayPipe.scala 47:9]
        skip @[DelayPipe.scala 46:30]
    node _T_22 = eq(UInt<1>("h00"), io.config) @[DelayPipe.scala 50:22]
    node _T_23 = and(io.en, _T_22) @[DelayPipe.scala 50:14]
    when _T_23 : @[DelayPipe.scala 50:37]
      io.out <= io.in @[DelayPipe.scala 51:12]
      skip @[DelayPipe.scala 50:37]
    else : @[DelayPipe.scala 52:43]
      node _T_24 = eq(cnt, io.config) @[DelayPipe.scala 52:28]
      node _T_25 = and(io.en, _T_24) @[DelayPipe.scala 52:20]
      when _T_25 : @[DelayPipe.scala 52:43]
        io.out <= regs[rptr] @[DelayPipe.scala 53:12]
        skip @[DelayPipe.scala 52:43]
      else : @[DelayPipe.scala 54:14]
        io.out <= UInt<1>("h00") @[DelayPipe.scala 55:12]
        skip @[DelayPipe.scala 54:14]
    
  module DelayPipe_15 : 
    input clock : Clock
    input reset : Reset
    output io : {flip en : UInt<1>, flip config : UInt<3>, flip in : UInt<32>, out : UInt<32>}
    
    wire _T : UInt<32>[5] @[DelayPipe.scala 22:29]
    _T[0] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[1] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[2] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[3] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[4] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    reg regs : UInt<32>[5], clock with : (reset => (reset, _T)) @[DelayPipe.scala 22:21]
    reg wptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 23:21]
    reg rptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 24:21]
    node _T_1 = lt(wptr, UInt<3>("h04")) @[DelayPipe.scala 26:23]
    node _T_2 = and(io.en, _T_1) @[DelayPipe.scala 26:14]
    when _T_2 : @[DelayPipe.scala 26:37]
      node _T_3 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 27:17]
      node _T_4 = tail(_T_3, 1) @[DelayPipe.scala 27:17]
      wptr <= _T_4 @[DelayPipe.scala 27:10]
      skip @[DelayPipe.scala 26:37]
    else : @[DelayPipe.scala 28:14]
      wptr <= UInt<1>("h00") @[DelayPipe.scala 29:10]
      skip @[DelayPipe.scala 28:14]
    node _T_5 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 32:12]
    node _T_6 = tail(_T_5, 1) @[DelayPipe.scala 32:12]
    node _T_7 = geq(_T_6, io.config) @[DelayPipe.scala 32:17]
    when _T_7 : @[DelayPipe.scala 32:30]
      node _T_8 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 33:18]
      node _T_9 = tail(_T_8, 1) @[DelayPipe.scala 33:18]
      node _T_10 = sub(_T_9, io.config) @[DelayPipe.scala 33:24]
      node _T_11 = tail(_T_10, 1) @[DelayPipe.scala 33:24]
      rptr <= _T_11 @[DelayPipe.scala 33:10]
      skip @[DelayPipe.scala 32:30]
    else : @[DelayPipe.scala 34:14]
      node _T_12 = add(UInt<3>("h06"), wptr) @[DelayPipe.scala 35:30]
      node _T_13 = tail(_T_12, 1) @[DelayPipe.scala 35:30]
      node _T_14 = sub(_T_13, io.config) @[DelayPipe.scala 35:37]
      node _T_15 = tail(_T_14, 1) @[DelayPipe.scala 35:37]
      rptr <= _T_15 @[DelayPipe.scala 35:10]
      skip @[DelayPipe.scala 34:14]
    node _T_16 = gt(io.config, UInt<1>("h00")) @[DelayPipe.scala 39:28]
    node _T_17 = and(io.en, _T_16) @[DelayPipe.scala 39:14]
    when _T_17 : @[DelayPipe.scala 39:35]
      regs[wptr] <= io.in @[DelayPipe.scala 40:16]
      skip @[DelayPipe.scala 39:35]
    reg cnt : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 43:20]
    node _T_18 = eq(io.en, UInt<1>("h00")) @[DelayPipe.scala 44:8]
    when _T_18 : @[DelayPipe.scala 44:15]
      cnt <= UInt<1>("h00") @[DelayPipe.scala 45:9]
      skip @[DelayPipe.scala 44:15]
    else : @[DelayPipe.scala 46:30]
      node _T_19 = lt(cnt, io.config) @[DelayPipe.scala 46:18]
      when _T_19 : @[DelayPipe.scala 46:30]
        node _T_20 = add(cnt, UInt<1>("h01")) @[DelayPipe.scala 47:16]
        node _T_21 = tail(_T_20, 1) @[DelayPipe.scala 47:16]
        cnt <= _T_21 @[DelayPipe.scala 47:9]
        skip @[DelayPipe.scala 46:30]
    node _T_22 = eq(UInt<1>("h00"), io.config) @[DelayPipe.scala 50:22]
    node _T_23 = and(io.en, _T_22) @[DelayPipe.scala 50:14]
    when _T_23 : @[DelayPipe.scala 50:37]
      io.out <= io.in @[DelayPipe.scala 51:12]
      skip @[DelayPipe.scala 50:37]
    else : @[DelayPipe.scala 52:43]
      node _T_24 = eq(cnt, io.config) @[DelayPipe.scala 52:28]
      node _T_25 = and(io.en, _T_24) @[DelayPipe.scala 52:20]
      when _T_25 : @[DelayPipe.scala 52:43]
        io.out <= regs[rptr] @[DelayPipe.scala 53:12]
        skip @[DelayPipe.scala 52:43]
      else : @[DelayPipe.scala 54:14]
        io.out <= UInt<1>("h00") @[DelayPipe.scala 55:12]
        skip @[DelayPipe.scala 54:14]
    
  module Muxn_30 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[6], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    node _T_10 = eq(UInt<3>("h05"), io.config) @[Mux.scala 80:60]
    node _T_11 = mux(_T_10, io.in[5], _T_9) @[Mux.scala 80:57]
    io.out <= _T_11 @[Multiplexer.scala 20:10]
    
  module Muxn_31 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[6], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    node _T_10 = eq(UInt<3>("h05"), io.config) @[Mux.scala 80:60]
    node _T_11 = mux(_T_10, io.in[5], _T_9) @[Mux.scala 80:57]
    io.out <= _T_11 @[Multiplexer.scala 20:10]
    
  module ConfigMem_23 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<1>, flip cfg_data : UInt<32>, out : UInt<48>[1]}
    
    wire _T : UInt<48>[1] @[ConfigMem.scala 27:29]
    _T[0] <= UInt<48>("h00") @[ConfigMem.scala 27:29]
    reg regs : UInt<48>[1], clock with : (reset => (reset, _T)) @[ConfigMem.scala 27:21]
    node _T_1 = eq(io.cfg_addr, UInt<1>("h00")) @[ConfigMem.scala 39:38]
    node _T_2 = and(io.cfg_en, _T_1) @[ConfigMem.scala 39:22]
    when _T_2 : @[ConfigMem.scala 39:47]
      node _T_3 = bits(regs[0], 47, 32) @[ConfigMem.scala 41:33]
      node _T_4 = cat(_T_3, io.cfg_data) @[Cat.scala 29:58]
      regs[0] <= _T_4 @[ConfigMem.scala 41:19]
      skip @[ConfigMem.scala 39:47]
    node _T_5 = eq(io.cfg_addr, UInt<1>("h01")) @[ConfigMem.scala 39:38]
    node _T_6 = and(io.cfg_en, _T_5) @[ConfigMem.scala 39:22]
    when _T_6 : @[ConfigMem.scala 39:47]
      node _T_7 = bits(regs[0], 31, 0) @[ConfigMem.scala 43:46]
      node _T_8 = cat(io.cfg_data, _T_7) @[Cat.scala 29:58]
      regs[0] <= _T_8 @[ConfigMem.scala 43:19]
      skip @[ConfigMem.scala 39:47]
    io.out[0] <= regs[0] @[ConfigMem.scala 52:45]
    
  module GPE_7 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<12>, flip cfg_data : UInt<32>, flip en : UInt<1>, flip in : UInt<32>[8], out : UInt<32>[1]}
    
    inst alu of ALU_7 @[PE.scala 50:19]
    alu.clock <= clock
    alu.reset <= reset
    inst rf of RF_7 @[PE.scala 51:18]
    rf.clock <= clock
    rf.reset <= reset
    inst DelayPipe of DelayPipe_14 @[PE.scala 52:54]
    DelayPipe.clock <= clock
    DelayPipe.reset <= reset
    inst DelayPipe_1 of DelayPipe_15 @[PE.scala 52:54]
    DelayPipe_1.clock <= clock
    DelayPipe_1.reset <= reset
    wire const : UInt<32> @[PE.scala 54:19]
    inst Muxn of Muxn_30 @[PE.scala 55:49]
    Muxn.clock <= clock
    Muxn.reset <= reset
    inst Muxn_1 of Muxn_31 @[PE.scala 55:49]
    Muxn_1.clock <= clock
    Muxn_1.reset <= reset
    Muxn.io.in[0] <= io.in[0] @[PE.scala 62:12]
    Muxn.io.in[1] <= io.in[1] @[PE.scala 62:12]
    Muxn.io.in[2] <= io.in[2] @[PE.scala 62:12]
    Muxn.io.in[3] <= io.in[3] @[PE.scala 62:12]
    Muxn.io.in[4] <= const @[PE.scala 64:12]
    Muxn.io.in[5] <= rf.io.out[1] @[PE.scala 66:12]
    DelayPipe.io.en <= io.en @[PE.scala 69:23]
    DelayPipe.io.in <= Muxn.io.out @[PE.scala 70:23]
    alu.io.in[0] <= DelayPipe.io.out @[PE.scala 71:18]
    Muxn_1.io.in[0] <= io.in[4] @[PE.scala 62:12]
    Muxn_1.io.in[1] <= io.in[5] @[PE.scala 62:12]
    Muxn_1.io.in[2] <= io.in[6] @[PE.scala 62:12]
    Muxn_1.io.in[3] <= io.in[7] @[PE.scala 62:12]
    Muxn_1.io.in[4] <= const @[PE.scala 64:12]
    Muxn_1.io.in[5] <= rf.io.out[1] @[PE.scala 66:12]
    DelayPipe_1.io.en <= io.en @[PE.scala 69:23]
    DelayPipe_1.io.in <= Muxn_1.io.out @[PE.scala 70:23]
    alu.io.in[1] <= DelayPipe_1.io.out @[PE.scala 71:18]
    rf.io.en <= io.en @[PE.scala 75:12]
    rf.io.in[0] <= alu.io.out @[PE.scala 76:15]
    io.out[0] <= rf.io.out[0] @[PE.scala 77:13]
    inst cfg of ConfigMem_23 @[PE.scala 89:19]
    cfg.clock <= clock
    cfg.reset <= reset
    node _T = bits(io.cfg_addr, 11, 2) @[PE.scala 90:63]
    node _T_1 = eq(UInt<6>("h023"), _T) @[PE.scala 90:48]
    node _T_2 = and(io.cfg_en, _T_1) @[PE.scala 90:30]
    cfg.io.cfg_en <= _T_2 @[PE.scala 90:17]
    node _T_3 = bits(io.cfg_addr, 1, 0) @[PE.scala 91:33]
    cfg.io.cfg_addr <= _T_3 @[PE.scala 91:19]
    cfg.io.cfg_data <= io.cfg_data @[PE.scala 92:19]
    wire cfgOut : UInt<48> @[PE.scala 96:20]
    cfgOut <= cfg.io.out[0] @[PE.scala 97:10]
    node _T_4 = bits(cfgOut, 31, 0) @[PE.scala 98:18]
    const <= _T_4 @[PE.scala 98:9]
    node _T_5 = bits(cfgOut, 35, 32) @[PE.scala 100:28]
    alu.io.config <= _T_5 @[PE.scala 100:19]
    rf.io.config is invalid @[PE.scala 107:18]
    node _T_6 = bits(cfgOut, 38, 36) @[PE.scala 113:38]
    DelayPipe.io.config <= _T_6 @[PE.scala 113:29]
    node _T_7 = bits(cfgOut, 41, 39) @[PE.scala 113:38]
    DelayPipe_1.io.config <= _T_7 @[PE.scala 113:29]
    node _T_8 = bits(cfgOut, 44, 42) @[PE.scala 121:32]
    Muxn.io.config <= _T_8 @[PE.scala 121:23]
    node _T_9 = bits(cfgOut, 47, 45) @[PE.scala 121:32]
    Muxn_1.io.config <= _T_9 @[PE.scala 121:23]
    
  module ALU_8 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<4>, flip in : UInt<32>[2], out : UInt<32>}
    
    node _T = bits(io.in[0], 31, 0) @[Operations.scala 122:31]
    node _T_1 = bits(io.in[0], 31, 0) @[Operations.scala 124:31]
    node _T_2 = bits(io.in[1], 31, 0) @[Operations.scala 124:49]
    node _T_3 = add(_T_1, _T_2) @[Operations.scala 124:41]
    node _T_4 = tail(_T_3, 1) @[Operations.scala 124:41]
    node _T_5 = bits(io.in[0], 31, 0) @[Operations.scala 126:31]
    node _T_6 = bits(io.in[1], 31, 0) @[Operations.scala 126:49]
    node _T_7 = sub(_T_5, _T_6) @[Operations.scala 126:41]
    node _T_8 = tail(_T_7, 1) @[Operations.scala 126:41]
    node _T_9 = bits(io.in[0], 31, 0) @[Operations.scala 128:31]
    node _T_10 = bits(io.in[1], 31, 0) @[Operations.scala 128:49]
    node _T_11 = mul(_T_9, _T_10) @[Operations.scala 128:41]
    node _T_12 = bits(io.in[0], 31, 0) @[Operations.scala 138:31]
    node _T_13 = bits(io.in[1], 31, 0) @[Operations.scala 138:49]
    node _T_14 = and(_T_12, _T_13) @[Operations.scala 138:41]
    node _T_15 = bits(io.in[0], 31, 0) @[Operations.scala 140:31]
    node _T_16 = bits(io.in[1], 31, 0) @[Operations.scala 140:49]
    node _T_17 = or(_T_15, _T_16) @[Operations.scala 140:41]
    node _T_18 = bits(io.in[0], 31, 0) @[Operations.scala 142:31]
    node _T_19 = bits(io.in[1], 31, 0) @[Operations.scala 142:49]
    node _T_20 = xor(_T_18, _T_19) @[Operations.scala 142:41]
    node _T_21 = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_22 = mux(_T_21, _T, UInt<1>("h00")) @[Mux.scala 80:57]
    node _T_23 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_24 = mux(_T_23, _T_4, _T_22) @[Mux.scala 80:57]
    node _T_25 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_26 = mux(_T_25, _T_8, _T_24) @[Mux.scala 80:57]
    node _T_27 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_28 = mux(_T_27, _T_11, _T_26) @[Mux.scala 80:57]
    node _T_29 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_30 = mux(_T_29, _T_14, _T_28) @[Mux.scala 80:57]
    node _T_31 = eq(UInt<3>("h05"), io.config) @[Mux.scala 80:60]
    node _T_32 = mux(_T_31, _T_17, _T_30) @[Mux.scala 80:57]
    node _T_33 = eq(UInt<3>("h06"), io.config) @[Mux.scala 80:60]
    node _T_34 = mux(_T_33, _T_20, _T_32) @[Mux.scala 80:57]
    io.out <= _T_34 @[ALU.scala 25:10]
    
  module RF_8 : 
    input clock : Clock
    input reset : Reset
    output io : {flip en : UInt<1>, flip config : UInt<0>, flip in : UInt<32>[1], out : UInt<32>[2]}
    
    wire _T : UInt<32>[1] @[RegFile.scala 24:29]
    _T[0] <= UInt<32>("h00") @[RegFile.scala 24:29]
    reg regs : UInt<32>[1], clock with : (reset => (reset, _T)) @[RegFile.scala 24:21]
    when io.en : @[RegFile.scala 34:16]
      regs[0] <= io.in[0] @[RegFile.scala 35:41]
      skip @[RegFile.scala 34:16]
    io.out[0] <= regs[0] @[RegFile.scala 37:42]
    io.out[1] <= regs[0] @[RegFile.scala 37:42]
    
  module DelayPipe_16 : 
    input clock : Clock
    input reset : Reset
    output io : {flip en : UInt<1>, flip config : UInt<3>, flip in : UInt<32>, out : UInt<32>}
    
    wire _T : UInt<32>[5] @[DelayPipe.scala 22:29]
    _T[0] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[1] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[2] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[3] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[4] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    reg regs : UInt<32>[5], clock with : (reset => (reset, _T)) @[DelayPipe.scala 22:21]
    reg wptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 23:21]
    reg rptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 24:21]
    node _T_1 = lt(wptr, UInt<3>("h04")) @[DelayPipe.scala 26:23]
    node _T_2 = and(io.en, _T_1) @[DelayPipe.scala 26:14]
    when _T_2 : @[DelayPipe.scala 26:37]
      node _T_3 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 27:17]
      node _T_4 = tail(_T_3, 1) @[DelayPipe.scala 27:17]
      wptr <= _T_4 @[DelayPipe.scala 27:10]
      skip @[DelayPipe.scala 26:37]
    else : @[DelayPipe.scala 28:14]
      wptr <= UInt<1>("h00") @[DelayPipe.scala 29:10]
      skip @[DelayPipe.scala 28:14]
    node _T_5 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 32:12]
    node _T_6 = tail(_T_5, 1) @[DelayPipe.scala 32:12]
    node _T_7 = geq(_T_6, io.config) @[DelayPipe.scala 32:17]
    when _T_7 : @[DelayPipe.scala 32:30]
      node _T_8 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 33:18]
      node _T_9 = tail(_T_8, 1) @[DelayPipe.scala 33:18]
      node _T_10 = sub(_T_9, io.config) @[DelayPipe.scala 33:24]
      node _T_11 = tail(_T_10, 1) @[DelayPipe.scala 33:24]
      rptr <= _T_11 @[DelayPipe.scala 33:10]
      skip @[DelayPipe.scala 32:30]
    else : @[DelayPipe.scala 34:14]
      node _T_12 = add(UInt<3>("h06"), wptr) @[DelayPipe.scala 35:30]
      node _T_13 = tail(_T_12, 1) @[DelayPipe.scala 35:30]
      node _T_14 = sub(_T_13, io.config) @[DelayPipe.scala 35:37]
      node _T_15 = tail(_T_14, 1) @[DelayPipe.scala 35:37]
      rptr <= _T_15 @[DelayPipe.scala 35:10]
      skip @[DelayPipe.scala 34:14]
    node _T_16 = gt(io.config, UInt<1>("h00")) @[DelayPipe.scala 39:28]
    node _T_17 = and(io.en, _T_16) @[DelayPipe.scala 39:14]
    when _T_17 : @[DelayPipe.scala 39:35]
      regs[wptr] <= io.in @[DelayPipe.scala 40:16]
      skip @[DelayPipe.scala 39:35]
    reg cnt : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 43:20]
    node _T_18 = eq(io.en, UInt<1>("h00")) @[DelayPipe.scala 44:8]
    when _T_18 : @[DelayPipe.scala 44:15]
      cnt <= UInt<1>("h00") @[DelayPipe.scala 45:9]
      skip @[DelayPipe.scala 44:15]
    else : @[DelayPipe.scala 46:30]
      node _T_19 = lt(cnt, io.config) @[DelayPipe.scala 46:18]
      when _T_19 : @[DelayPipe.scala 46:30]
        node _T_20 = add(cnt, UInt<1>("h01")) @[DelayPipe.scala 47:16]
        node _T_21 = tail(_T_20, 1) @[DelayPipe.scala 47:16]
        cnt <= _T_21 @[DelayPipe.scala 47:9]
        skip @[DelayPipe.scala 46:30]
    node _T_22 = eq(UInt<1>("h00"), io.config) @[DelayPipe.scala 50:22]
    node _T_23 = and(io.en, _T_22) @[DelayPipe.scala 50:14]
    when _T_23 : @[DelayPipe.scala 50:37]
      io.out <= io.in @[DelayPipe.scala 51:12]
      skip @[DelayPipe.scala 50:37]
    else : @[DelayPipe.scala 52:43]
      node _T_24 = eq(cnt, io.config) @[DelayPipe.scala 52:28]
      node _T_25 = and(io.en, _T_24) @[DelayPipe.scala 52:20]
      when _T_25 : @[DelayPipe.scala 52:43]
        io.out <= regs[rptr] @[DelayPipe.scala 53:12]
        skip @[DelayPipe.scala 52:43]
      else : @[DelayPipe.scala 54:14]
        io.out <= UInt<1>("h00") @[DelayPipe.scala 55:12]
        skip @[DelayPipe.scala 54:14]
    
  module DelayPipe_17 : 
    input clock : Clock
    input reset : Reset
    output io : {flip en : UInt<1>, flip config : UInt<3>, flip in : UInt<32>, out : UInt<32>}
    
    wire _T : UInt<32>[5] @[DelayPipe.scala 22:29]
    _T[0] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[1] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[2] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[3] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[4] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    reg regs : UInt<32>[5], clock with : (reset => (reset, _T)) @[DelayPipe.scala 22:21]
    reg wptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 23:21]
    reg rptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 24:21]
    node _T_1 = lt(wptr, UInt<3>("h04")) @[DelayPipe.scala 26:23]
    node _T_2 = and(io.en, _T_1) @[DelayPipe.scala 26:14]
    when _T_2 : @[DelayPipe.scala 26:37]
      node _T_3 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 27:17]
      node _T_4 = tail(_T_3, 1) @[DelayPipe.scala 27:17]
      wptr <= _T_4 @[DelayPipe.scala 27:10]
      skip @[DelayPipe.scala 26:37]
    else : @[DelayPipe.scala 28:14]
      wptr <= UInt<1>("h00") @[DelayPipe.scala 29:10]
      skip @[DelayPipe.scala 28:14]
    node _T_5 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 32:12]
    node _T_6 = tail(_T_5, 1) @[DelayPipe.scala 32:12]
    node _T_7 = geq(_T_6, io.config) @[DelayPipe.scala 32:17]
    when _T_7 : @[DelayPipe.scala 32:30]
      node _T_8 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 33:18]
      node _T_9 = tail(_T_8, 1) @[DelayPipe.scala 33:18]
      node _T_10 = sub(_T_9, io.config) @[DelayPipe.scala 33:24]
      node _T_11 = tail(_T_10, 1) @[DelayPipe.scala 33:24]
      rptr <= _T_11 @[DelayPipe.scala 33:10]
      skip @[DelayPipe.scala 32:30]
    else : @[DelayPipe.scala 34:14]
      node _T_12 = add(UInt<3>("h06"), wptr) @[DelayPipe.scala 35:30]
      node _T_13 = tail(_T_12, 1) @[DelayPipe.scala 35:30]
      node _T_14 = sub(_T_13, io.config) @[DelayPipe.scala 35:37]
      node _T_15 = tail(_T_14, 1) @[DelayPipe.scala 35:37]
      rptr <= _T_15 @[DelayPipe.scala 35:10]
      skip @[DelayPipe.scala 34:14]
    node _T_16 = gt(io.config, UInt<1>("h00")) @[DelayPipe.scala 39:28]
    node _T_17 = and(io.en, _T_16) @[DelayPipe.scala 39:14]
    when _T_17 : @[DelayPipe.scala 39:35]
      regs[wptr] <= io.in @[DelayPipe.scala 40:16]
      skip @[DelayPipe.scala 39:35]
    reg cnt : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 43:20]
    node _T_18 = eq(io.en, UInt<1>("h00")) @[DelayPipe.scala 44:8]
    when _T_18 : @[DelayPipe.scala 44:15]
      cnt <= UInt<1>("h00") @[DelayPipe.scala 45:9]
      skip @[DelayPipe.scala 44:15]
    else : @[DelayPipe.scala 46:30]
      node _T_19 = lt(cnt, io.config) @[DelayPipe.scala 46:18]
      when _T_19 : @[DelayPipe.scala 46:30]
        node _T_20 = add(cnt, UInt<1>("h01")) @[DelayPipe.scala 47:16]
        node _T_21 = tail(_T_20, 1) @[DelayPipe.scala 47:16]
        cnt <= _T_21 @[DelayPipe.scala 47:9]
        skip @[DelayPipe.scala 46:30]
    node _T_22 = eq(UInt<1>("h00"), io.config) @[DelayPipe.scala 50:22]
    node _T_23 = and(io.en, _T_22) @[DelayPipe.scala 50:14]
    when _T_23 : @[DelayPipe.scala 50:37]
      io.out <= io.in @[DelayPipe.scala 51:12]
      skip @[DelayPipe.scala 50:37]
    else : @[DelayPipe.scala 52:43]
      node _T_24 = eq(cnt, io.config) @[DelayPipe.scala 52:28]
      node _T_25 = and(io.en, _T_24) @[DelayPipe.scala 52:20]
      when _T_25 : @[DelayPipe.scala 52:43]
        io.out <= regs[rptr] @[DelayPipe.scala 53:12]
        skip @[DelayPipe.scala 52:43]
      else : @[DelayPipe.scala 54:14]
        io.out <= UInt<1>("h00") @[DelayPipe.scala 55:12]
        skip @[DelayPipe.scala 54:14]
    
  module Muxn_32 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[6], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    node _T_10 = eq(UInt<3>("h05"), io.config) @[Mux.scala 80:60]
    node _T_11 = mux(_T_10, io.in[5], _T_9) @[Mux.scala 80:57]
    io.out <= _T_11 @[Multiplexer.scala 20:10]
    
  module Muxn_33 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[6], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    node _T_10 = eq(UInt<3>("h05"), io.config) @[Mux.scala 80:60]
    node _T_11 = mux(_T_10, io.in[5], _T_9) @[Mux.scala 80:57]
    io.out <= _T_11 @[Multiplexer.scala 20:10]
    
  module ConfigMem_24 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<1>, flip cfg_data : UInt<32>, out : UInt<48>[1]}
    
    wire _T : UInt<48>[1] @[ConfigMem.scala 27:29]
    _T[0] <= UInt<48>("h00") @[ConfigMem.scala 27:29]
    reg regs : UInt<48>[1], clock with : (reset => (reset, _T)) @[ConfigMem.scala 27:21]
    node _T_1 = eq(io.cfg_addr, UInt<1>("h00")) @[ConfigMem.scala 39:38]
    node _T_2 = and(io.cfg_en, _T_1) @[ConfigMem.scala 39:22]
    when _T_2 : @[ConfigMem.scala 39:47]
      node _T_3 = bits(regs[0], 47, 32) @[ConfigMem.scala 41:33]
      node _T_4 = cat(_T_3, io.cfg_data) @[Cat.scala 29:58]
      regs[0] <= _T_4 @[ConfigMem.scala 41:19]
      skip @[ConfigMem.scala 39:47]
    node _T_5 = eq(io.cfg_addr, UInt<1>("h01")) @[ConfigMem.scala 39:38]
    node _T_6 = and(io.cfg_en, _T_5) @[ConfigMem.scala 39:22]
    when _T_6 : @[ConfigMem.scala 39:47]
      node _T_7 = bits(regs[0], 31, 0) @[ConfigMem.scala 43:46]
      node _T_8 = cat(io.cfg_data, _T_7) @[Cat.scala 29:58]
      regs[0] <= _T_8 @[ConfigMem.scala 43:19]
      skip @[ConfigMem.scala 39:47]
    io.out[0] <= regs[0] @[ConfigMem.scala 52:45]
    
  module GPE_8 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<12>, flip cfg_data : UInt<32>, flip en : UInt<1>, flip in : UInt<32>[8], out : UInt<32>[1]}
    
    inst alu of ALU_8 @[PE.scala 50:19]
    alu.clock <= clock
    alu.reset <= reset
    inst rf of RF_8 @[PE.scala 51:18]
    rf.clock <= clock
    rf.reset <= reset
    inst DelayPipe of DelayPipe_16 @[PE.scala 52:54]
    DelayPipe.clock <= clock
    DelayPipe.reset <= reset
    inst DelayPipe_1 of DelayPipe_17 @[PE.scala 52:54]
    DelayPipe_1.clock <= clock
    DelayPipe_1.reset <= reset
    wire const : UInt<32> @[PE.scala 54:19]
    inst Muxn of Muxn_32 @[PE.scala 55:49]
    Muxn.clock <= clock
    Muxn.reset <= reset
    inst Muxn_1 of Muxn_33 @[PE.scala 55:49]
    Muxn_1.clock <= clock
    Muxn_1.reset <= reset
    Muxn.io.in[0] <= io.in[0] @[PE.scala 62:12]
    Muxn.io.in[1] <= io.in[1] @[PE.scala 62:12]
    Muxn.io.in[2] <= io.in[2] @[PE.scala 62:12]
    Muxn.io.in[3] <= io.in[3] @[PE.scala 62:12]
    Muxn.io.in[4] <= const @[PE.scala 64:12]
    Muxn.io.in[5] <= rf.io.out[1] @[PE.scala 66:12]
    DelayPipe.io.en <= io.en @[PE.scala 69:23]
    DelayPipe.io.in <= Muxn.io.out @[PE.scala 70:23]
    alu.io.in[0] <= DelayPipe.io.out @[PE.scala 71:18]
    Muxn_1.io.in[0] <= io.in[4] @[PE.scala 62:12]
    Muxn_1.io.in[1] <= io.in[5] @[PE.scala 62:12]
    Muxn_1.io.in[2] <= io.in[6] @[PE.scala 62:12]
    Muxn_1.io.in[3] <= io.in[7] @[PE.scala 62:12]
    Muxn_1.io.in[4] <= const @[PE.scala 64:12]
    Muxn_1.io.in[5] <= rf.io.out[1] @[PE.scala 66:12]
    DelayPipe_1.io.en <= io.en @[PE.scala 69:23]
    DelayPipe_1.io.in <= Muxn_1.io.out @[PE.scala 70:23]
    alu.io.in[1] <= DelayPipe_1.io.out @[PE.scala 71:18]
    rf.io.en <= io.en @[PE.scala 75:12]
    rf.io.in[0] <= alu.io.out @[PE.scala 76:15]
    io.out[0] <= rf.io.out[0] @[PE.scala 77:13]
    inst cfg of ConfigMem_24 @[PE.scala 89:19]
    cfg.clock <= clock
    cfg.reset <= reset
    node _T = bits(io.cfg_addr, 11, 2) @[PE.scala 90:63]
    node _T_1 = eq(UInt<6>("h02e"), _T) @[PE.scala 90:48]
    node _T_2 = and(io.cfg_en, _T_1) @[PE.scala 90:30]
    cfg.io.cfg_en <= _T_2 @[PE.scala 90:17]
    node _T_3 = bits(io.cfg_addr, 1, 0) @[PE.scala 91:33]
    cfg.io.cfg_addr <= _T_3 @[PE.scala 91:19]
    cfg.io.cfg_data <= io.cfg_data @[PE.scala 92:19]
    wire cfgOut : UInt<48> @[PE.scala 96:20]
    cfgOut <= cfg.io.out[0] @[PE.scala 97:10]
    node _T_4 = bits(cfgOut, 31, 0) @[PE.scala 98:18]
    const <= _T_4 @[PE.scala 98:9]
    node _T_5 = bits(cfgOut, 35, 32) @[PE.scala 100:28]
    alu.io.config <= _T_5 @[PE.scala 100:19]
    rf.io.config is invalid @[PE.scala 107:18]
    node _T_6 = bits(cfgOut, 38, 36) @[PE.scala 113:38]
    DelayPipe.io.config <= _T_6 @[PE.scala 113:29]
    node _T_7 = bits(cfgOut, 41, 39) @[PE.scala 113:38]
    DelayPipe_1.io.config <= _T_7 @[PE.scala 113:29]
    node _T_8 = bits(cfgOut, 44, 42) @[PE.scala 121:32]
    Muxn.io.config <= _T_8 @[PE.scala 121:23]
    node _T_9 = bits(cfgOut, 47, 45) @[PE.scala 121:32]
    Muxn_1.io.config <= _T_9 @[PE.scala 121:23]
    
  module ALU_9 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<4>, flip in : UInt<32>[2], out : UInt<32>}
    
    node _T = bits(io.in[0], 31, 0) @[Operations.scala 122:31]
    node _T_1 = bits(io.in[0], 31, 0) @[Operations.scala 124:31]
    node _T_2 = bits(io.in[1], 31, 0) @[Operations.scala 124:49]
    node _T_3 = add(_T_1, _T_2) @[Operations.scala 124:41]
    node _T_4 = tail(_T_3, 1) @[Operations.scala 124:41]
    node _T_5 = bits(io.in[0], 31, 0) @[Operations.scala 126:31]
    node _T_6 = bits(io.in[1], 31, 0) @[Operations.scala 126:49]
    node _T_7 = sub(_T_5, _T_6) @[Operations.scala 126:41]
    node _T_8 = tail(_T_7, 1) @[Operations.scala 126:41]
    node _T_9 = bits(io.in[0], 31, 0) @[Operations.scala 128:31]
    node _T_10 = bits(io.in[1], 31, 0) @[Operations.scala 128:49]
    node _T_11 = mul(_T_9, _T_10) @[Operations.scala 128:41]
    node _T_12 = bits(io.in[0], 31, 0) @[Operations.scala 138:31]
    node _T_13 = bits(io.in[1], 31, 0) @[Operations.scala 138:49]
    node _T_14 = and(_T_12, _T_13) @[Operations.scala 138:41]
    node _T_15 = bits(io.in[0], 31, 0) @[Operations.scala 140:31]
    node _T_16 = bits(io.in[1], 31, 0) @[Operations.scala 140:49]
    node _T_17 = or(_T_15, _T_16) @[Operations.scala 140:41]
    node _T_18 = bits(io.in[0], 31, 0) @[Operations.scala 142:31]
    node _T_19 = bits(io.in[1], 31, 0) @[Operations.scala 142:49]
    node _T_20 = xor(_T_18, _T_19) @[Operations.scala 142:41]
    node _T_21 = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_22 = mux(_T_21, _T, UInt<1>("h00")) @[Mux.scala 80:57]
    node _T_23 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_24 = mux(_T_23, _T_4, _T_22) @[Mux.scala 80:57]
    node _T_25 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_26 = mux(_T_25, _T_8, _T_24) @[Mux.scala 80:57]
    node _T_27 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_28 = mux(_T_27, _T_11, _T_26) @[Mux.scala 80:57]
    node _T_29 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_30 = mux(_T_29, _T_14, _T_28) @[Mux.scala 80:57]
    node _T_31 = eq(UInt<3>("h05"), io.config) @[Mux.scala 80:60]
    node _T_32 = mux(_T_31, _T_17, _T_30) @[Mux.scala 80:57]
    node _T_33 = eq(UInt<3>("h06"), io.config) @[Mux.scala 80:60]
    node _T_34 = mux(_T_33, _T_20, _T_32) @[Mux.scala 80:57]
    io.out <= _T_34 @[ALU.scala 25:10]
    
  module RF_9 : 
    input clock : Clock
    input reset : Reset
    output io : {flip en : UInt<1>, flip config : UInt<0>, flip in : UInt<32>[1], out : UInt<32>[2]}
    
    wire _T : UInt<32>[1] @[RegFile.scala 24:29]
    _T[0] <= UInt<32>("h00") @[RegFile.scala 24:29]
    reg regs : UInt<32>[1], clock with : (reset => (reset, _T)) @[RegFile.scala 24:21]
    when io.en : @[RegFile.scala 34:16]
      regs[0] <= io.in[0] @[RegFile.scala 35:41]
      skip @[RegFile.scala 34:16]
    io.out[0] <= regs[0] @[RegFile.scala 37:42]
    io.out[1] <= regs[0] @[RegFile.scala 37:42]
    
  module DelayPipe_18 : 
    input clock : Clock
    input reset : Reset
    output io : {flip en : UInt<1>, flip config : UInt<3>, flip in : UInt<32>, out : UInt<32>}
    
    wire _T : UInt<32>[5] @[DelayPipe.scala 22:29]
    _T[0] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[1] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[2] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[3] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[4] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    reg regs : UInt<32>[5], clock with : (reset => (reset, _T)) @[DelayPipe.scala 22:21]
    reg wptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 23:21]
    reg rptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 24:21]
    node _T_1 = lt(wptr, UInt<3>("h04")) @[DelayPipe.scala 26:23]
    node _T_2 = and(io.en, _T_1) @[DelayPipe.scala 26:14]
    when _T_2 : @[DelayPipe.scala 26:37]
      node _T_3 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 27:17]
      node _T_4 = tail(_T_3, 1) @[DelayPipe.scala 27:17]
      wptr <= _T_4 @[DelayPipe.scala 27:10]
      skip @[DelayPipe.scala 26:37]
    else : @[DelayPipe.scala 28:14]
      wptr <= UInt<1>("h00") @[DelayPipe.scala 29:10]
      skip @[DelayPipe.scala 28:14]
    node _T_5 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 32:12]
    node _T_6 = tail(_T_5, 1) @[DelayPipe.scala 32:12]
    node _T_7 = geq(_T_6, io.config) @[DelayPipe.scala 32:17]
    when _T_7 : @[DelayPipe.scala 32:30]
      node _T_8 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 33:18]
      node _T_9 = tail(_T_8, 1) @[DelayPipe.scala 33:18]
      node _T_10 = sub(_T_9, io.config) @[DelayPipe.scala 33:24]
      node _T_11 = tail(_T_10, 1) @[DelayPipe.scala 33:24]
      rptr <= _T_11 @[DelayPipe.scala 33:10]
      skip @[DelayPipe.scala 32:30]
    else : @[DelayPipe.scala 34:14]
      node _T_12 = add(UInt<3>("h06"), wptr) @[DelayPipe.scala 35:30]
      node _T_13 = tail(_T_12, 1) @[DelayPipe.scala 35:30]
      node _T_14 = sub(_T_13, io.config) @[DelayPipe.scala 35:37]
      node _T_15 = tail(_T_14, 1) @[DelayPipe.scala 35:37]
      rptr <= _T_15 @[DelayPipe.scala 35:10]
      skip @[DelayPipe.scala 34:14]
    node _T_16 = gt(io.config, UInt<1>("h00")) @[DelayPipe.scala 39:28]
    node _T_17 = and(io.en, _T_16) @[DelayPipe.scala 39:14]
    when _T_17 : @[DelayPipe.scala 39:35]
      regs[wptr] <= io.in @[DelayPipe.scala 40:16]
      skip @[DelayPipe.scala 39:35]
    reg cnt : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 43:20]
    node _T_18 = eq(io.en, UInt<1>("h00")) @[DelayPipe.scala 44:8]
    when _T_18 : @[DelayPipe.scala 44:15]
      cnt <= UInt<1>("h00") @[DelayPipe.scala 45:9]
      skip @[DelayPipe.scala 44:15]
    else : @[DelayPipe.scala 46:30]
      node _T_19 = lt(cnt, io.config) @[DelayPipe.scala 46:18]
      when _T_19 : @[DelayPipe.scala 46:30]
        node _T_20 = add(cnt, UInt<1>("h01")) @[DelayPipe.scala 47:16]
        node _T_21 = tail(_T_20, 1) @[DelayPipe.scala 47:16]
        cnt <= _T_21 @[DelayPipe.scala 47:9]
        skip @[DelayPipe.scala 46:30]
    node _T_22 = eq(UInt<1>("h00"), io.config) @[DelayPipe.scala 50:22]
    node _T_23 = and(io.en, _T_22) @[DelayPipe.scala 50:14]
    when _T_23 : @[DelayPipe.scala 50:37]
      io.out <= io.in @[DelayPipe.scala 51:12]
      skip @[DelayPipe.scala 50:37]
    else : @[DelayPipe.scala 52:43]
      node _T_24 = eq(cnt, io.config) @[DelayPipe.scala 52:28]
      node _T_25 = and(io.en, _T_24) @[DelayPipe.scala 52:20]
      when _T_25 : @[DelayPipe.scala 52:43]
        io.out <= regs[rptr] @[DelayPipe.scala 53:12]
        skip @[DelayPipe.scala 52:43]
      else : @[DelayPipe.scala 54:14]
        io.out <= UInt<1>("h00") @[DelayPipe.scala 55:12]
        skip @[DelayPipe.scala 54:14]
    
  module DelayPipe_19 : 
    input clock : Clock
    input reset : Reset
    output io : {flip en : UInt<1>, flip config : UInt<3>, flip in : UInt<32>, out : UInt<32>}
    
    wire _T : UInt<32>[5] @[DelayPipe.scala 22:29]
    _T[0] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[1] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[2] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[3] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[4] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    reg regs : UInt<32>[5], clock with : (reset => (reset, _T)) @[DelayPipe.scala 22:21]
    reg wptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 23:21]
    reg rptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 24:21]
    node _T_1 = lt(wptr, UInt<3>("h04")) @[DelayPipe.scala 26:23]
    node _T_2 = and(io.en, _T_1) @[DelayPipe.scala 26:14]
    when _T_2 : @[DelayPipe.scala 26:37]
      node _T_3 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 27:17]
      node _T_4 = tail(_T_3, 1) @[DelayPipe.scala 27:17]
      wptr <= _T_4 @[DelayPipe.scala 27:10]
      skip @[DelayPipe.scala 26:37]
    else : @[DelayPipe.scala 28:14]
      wptr <= UInt<1>("h00") @[DelayPipe.scala 29:10]
      skip @[DelayPipe.scala 28:14]
    node _T_5 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 32:12]
    node _T_6 = tail(_T_5, 1) @[DelayPipe.scala 32:12]
    node _T_7 = geq(_T_6, io.config) @[DelayPipe.scala 32:17]
    when _T_7 : @[DelayPipe.scala 32:30]
      node _T_8 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 33:18]
      node _T_9 = tail(_T_8, 1) @[DelayPipe.scala 33:18]
      node _T_10 = sub(_T_9, io.config) @[DelayPipe.scala 33:24]
      node _T_11 = tail(_T_10, 1) @[DelayPipe.scala 33:24]
      rptr <= _T_11 @[DelayPipe.scala 33:10]
      skip @[DelayPipe.scala 32:30]
    else : @[DelayPipe.scala 34:14]
      node _T_12 = add(UInt<3>("h06"), wptr) @[DelayPipe.scala 35:30]
      node _T_13 = tail(_T_12, 1) @[DelayPipe.scala 35:30]
      node _T_14 = sub(_T_13, io.config) @[DelayPipe.scala 35:37]
      node _T_15 = tail(_T_14, 1) @[DelayPipe.scala 35:37]
      rptr <= _T_15 @[DelayPipe.scala 35:10]
      skip @[DelayPipe.scala 34:14]
    node _T_16 = gt(io.config, UInt<1>("h00")) @[DelayPipe.scala 39:28]
    node _T_17 = and(io.en, _T_16) @[DelayPipe.scala 39:14]
    when _T_17 : @[DelayPipe.scala 39:35]
      regs[wptr] <= io.in @[DelayPipe.scala 40:16]
      skip @[DelayPipe.scala 39:35]
    reg cnt : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 43:20]
    node _T_18 = eq(io.en, UInt<1>("h00")) @[DelayPipe.scala 44:8]
    when _T_18 : @[DelayPipe.scala 44:15]
      cnt <= UInt<1>("h00") @[DelayPipe.scala 45:9]
      skip @[DelayPipe.scala 44:15]
    else : @[DelayPipe.scala 46:30]
      node _T_19 = lt(cnt, io.config) @[DelayPipe.scala 46:18]
      when _T_19 : @[DelayPipe.scala 46:30]
        node _T_20 = add(cnt, UInt<1>("h01")) @[DelayPipe.scala 47:16]
        node _T_21 = tail(_T_20, 1) @[DelayPipe.scala 47:16]
        cnt <= _T_21 @[DelayPipe.scala 47:9]
        skip @[DelayPipe.scala 46:30]
    node _T_22 = eq(UInt<1>("h00"), io.config) @[DelayPipe.scala 50:22]
    node _T_23 = and(io.en, _T_22) @[DelayPipe.scala 50:14]
    when _T_23 : @[DelayPipe.scala 50:37]
      io.out <= io.in @[DelayPipe.scala 51:12]
      skip @[DelayPipe.scala 50:37]
    else : @[DelayPipe.scala 52:43]
      node _T_24 = eq(cnt, io.config) @[DelayPipe.scala 52:28]
      node _T_25 = and(io.en, _T_24) @[DelayPipe.scala 52:20]
      when _T_25 : @[DelayPipe.scala 52:43]
        io.out <= regs[rptr] @[DelayPipe.scala 53:12]
        skip @[DelayPipe.scala 52:43]
      else : @[DelayPipe.scala 54:14]
        io.out <= UInt<1>("h00") @[DelayPipe.scala 55:12]
        skip @[DelayPipe.scala 54:14]
    
  module Muxn_34 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[6], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    node _T_10 = eq(UInt<3>("h05"), io.config) @[Mux.scala 80:60]
    node _T_11 = mux(_T_10, io.in[5], _T_9) @[Mux.scala 80:57]
    io.out <= _T_11 @[Multiplexer.scala 20:10]
    
  module Muxn_35 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[6], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    node _T_10 = eq(UInt<3>("h05"), io.config) @[Mux.scala 80:60]
    node _T_11 = mux(_T_10, io.in[5], _T_9) @[Mux.scala 80:57]
    io.out <= _T_11 @[Multiplexer.scala 20:10]
    
  module ConfigMem_25 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<1>, flip cfg_data : UInt<32>, out : UInt<48>[1]}
    
    wire _T : UInt<48>[1] @[ConfigMem.scala 27:29]
    _T[0] <= UInt<48>("h00") @[ConfigMem.scala 27:29]
    reg regs : UInt<48>[1], clock with : (reset => (reset, _T)) @[ConfigMem.scala 27:21]
    node _T_1 = eq(io.cfg_addr, UInt<1>("h00")) @[ConfigMem.scala 39:38]
    node _T_2 = and(io.cfg_en, _T_1) @[ConfigMem.scala 39:22]
    when _T_2 : @[ConfigMem.scala 39:47]
      node _T_3 = bits(regs[0], 47, 32) @[ConfigMem.scala 41:33]
      node _T_4 = cat(_T_3, io.cfg_data) @[Cat.scala 29:58]
      regs[0] <= _T_4 @[ConfigMem.scala 41:19]
      skip @[ConfigMem.scala 39:47]
    node _T_5 = eq(io.cfg_addr, UInt<1>("h01")) @[ConfigMem.scala 39:38]
    node _T_6 = and(io.cfg_en, _T_5) @[ConfigMem.scala 39:22]
    when _T_6 : @[ConfigMem.scala 39:47]
      node _T_7 = bits(regs[0], 31, 0) @[ConfigMem.scala 43:46]
      node _T_8 = cat(io.cfg_data, _T_7) @[Cat.scala 29:58]
      regs[0] <= _T_8 @[ConfigMem.scala 43:19]
      skip @[ConfigMem.scala 39:47]
    io.out[0] <= regs[0] @[ConfigMem.scala 52:45]
    
  module GPE_9 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<12>, flip cfg_data : UInt<32>, flip en : UInt<1>, flip in : UInt<32>[8], out : UInt<32>[1]}
    
    inst alu of ALU_9 @[PE.scala 50:19]
    alu.clock <= clock
    alu.reset <= reset
    inst rf of RF_9 @[PE.scala 51:18]
    rf.clock <= clock
    rf.reset <= reset
    inst DelayPipe of DelayPipe_18 @[PE.scala 52:54]
    DelayPipe.clock <= clock
    DelayPipe.reset <= reset
    inst DelayPipe_1 of DelayPipe_19 @[PE.scala 52:54]
    DelayPipe_1.clock <= clock
    DelayPipe_1.reset <= reset
    wire const : UInt<32> @[PE.scala 54:19]
    inst Muxn of Muxn_34 @[PE.scala 55:49]
    Muxn.clock <= clock
    Muxn.reset <= reset
    inst Muxn_1 of Muxn_35 @[PE.scala 55:49]
    Muxn_1.clock <= clock
    Muxn_1.reset <= reset
    Muxn.io.in[0] <= io.in[0] @[PE.scala 62:12]
    Muxn.io.in[1] <= io.in[1] @[PE.scala 62:12]
    Muxn.io.in[2] <= io.in[2] @[PE.scala 62:12]
    Muxn.io.in[3] <= io.in[3] @[PE.scala 62:12]
    Muxn.io.in[4] <= const @[PE.scala 64:12]
    Muxn.io.in[5] <= rf.io.out[1] @[PE.scala 66:12]
    DelayPipe.io.en <= io.en @[PE.scala 69:23]
    DelayPipe.io.in <= Muxn.io.out @[PE.scala 70:23]
    alu.io.in[0] <= DelayPipe.io.out @[PE.scala 71:18]
    Muxn_1.io.in[0] <= io.in[4] @[PE.scala 62:12]
    Muxn_1.io.in[1] <= io.in[5] @[PE.scala 62:12]
    Muxn_1.io.in[2] <= io.in[6] @[PE.scala 62:12]
    Muxn_1.io.in[3] <= io.in[7] @[PE.scala 62:12]
    Muxn_1.io.in[4] <= const @[PE.scala 64:12]
    Muxn_1.io.in[5] <= rf.io.out[1] @[PE.scala 66:12]
    DelayPipe_1.io.en <= io.en @[PE.scala 69:23]
    DelayPipe_1.io.in <= Muxn_1.io.out @[PE.scala 70:23]
    alu.io.in[1] <= DelayPipe_1.io.out @[PE.scala 71:18]
    rf.io.en <= io.en @[PE.scala 75:12]
    rf.io.in[0] <= alu.io.out @[PE.scala 76:15]
    io.out[0] <= rf.io.out[0] @[PE.scala 77:13]
    inst cfg of ConfigMem_25 @[PE.scala 89:19]
    cfg.clock <= clock
    cfg.reset <= reset
    node _T = bits(io.cfg_addr, 11, 2) @[PE.scala 90:63]
    node _T_1 = eq(UInt<6>("h02f"), _T) @[PE.scala 90:48]
    node _T_2 = and(io.cfg_en, _T_1) @[PE.scala 90:30]
    cfg.io.cfg_en <= _T_2 @[PE.scala 90:17]
    node _T_3 = bits(io.cfg_addr, 1, 0) @[PE.scala 91:33]
    cfg.io.cfg_addr <= _T_3 @[PE.scala 91:19]
    cfg.io.cfg_data <= io.cfg_data @[PE.scala 92:19]
    wire cfgOut : UInt<48> @[PE.scala 96:20]
    cfgOut <= cfg.io.out[0] @[PE.scala 97:10]
    node _T_4 = bits(cfgOut, 31, 0) @[PE.scala 98:18]
    const <= _T_4 @[PE.scala 98:9]
    node _T_5 = bits(cfgOut, 35, 32) @[PE.scala 100:28]
    alu.io.config <= _T_5 @[PE.scala 100:19]
    rf.io.config is invalid @[PE.scala 107:18]
    node _T_6 = bits(cfgOut, 38, 36) @[PE.scala 113:38]
    DelayPipe.io.config <= _T_6 @[PE.scala 113:29]
    node _T_7 = bits(cfgOut, 41, 39) @[PE.scala 113:38]
    DelayPipe_1.io.config <= _T_7 @[PE.scala 113:29]
    node _T_8 = bits(cfgOut, 44, 42) @[PE.scala 121:32]
    Muxn.io.config <= _T_8 @[PE.scala 121:23]
    node _T_9 = bits(cfgOut, 47, 45) @[PE.scala 121:32]
    Muxn_1.io.config <= _T_9 @[PE.scala 121:23]
    
  module ALU_10 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<4>, flip in : UInt<32>[2], out : UInt<32>}
    
    node _T = bits(io.in[0], 31, 0) @[Operations.scala 122:31]
    node _T_1 = bits(io.in[0], 31, 0) @[Operations.scala 124:31]
    node _T_2 = bits(io.in[1], 31, 0) @[Operations.scala 124:49]
    node _T_3 = add(_T_1, _T_2) @[Operations.scala 124:41]
    node _T_4 = tail(_T_3, 1) @[Operations.scala 124:41]
    node _T_5 = bits(io.in[0], 31, 0) @[Operations.scala 126:31]
    node _T_6 = bits(io.in[1], 31, 0) @[Operations.scala 126:49]
    node _T_7 = sub(_T_5, _T_6) @[Operations.scala 126:41]
    node _T_8 = tail(_T_7, 1) @[Operations.scala 126:41]
    node _T_9 = bits(io.in[0], 31, 0) @[Operations.scala 128:31]
    node _T_10 = bits(io.in[1], 31, 0) @[Operations.scala 128:49]
    node _T_11 = mul(_T_9, _T_10) @[Operations.scala 128:41]
    node _T_12 = bits(io.in[0], 31, 0) @[Operations.scala 138:31]
    node _T_13 = bits(io.in[1], 31, 0) @[Operations.scala 138:49]
    node _T_14 = and(_T_12, _T_13) @[Operations.scala 138:41]
    node _T_15 = bits(io.in[0], 31, 0) @[Operations.scala 140:31]
    node _T_16 = bits(io.in[1], 31, 0) @[Operations.scala 140:49]
    node _T_17 = or(_T_15, _T_16) @[Operations.scala 140:41]
    node _T_18 = bits(io.in[0], 31, 0) @[Operations.scala 142:31]
    node _T_19 = bits(io.in[1], 31, 0) @[Operations.scala 142:49]
    node _T_20 = xor(_T_18, _T_19) @[Operations.scala 142:41]
    node _T_21 = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_22 = mux(_T_21, _T, UInt<1>("h00")) @[Mux.scala 80:57]
    node _T_23 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_24 = mux(_T_23, _T_4, _T_22) @[Mux.scala 80:57]
    node _T_25 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_26 = mux(_T_25, _T_8, _T_24) @[Mux.scala 80:57]
    node _T_27 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_28 = mux(_T_27, _T_11, _T_26) @[Mux.scala 80:57]
    node _T_29 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_30 = mux(_T_29, _T_14, _T_28) @[Mux.scala 80:57]
    node _T_31 = eq(UInt<3>("h05"), io.config) @[Mux.scala 80:60]
    node _T_32 = mux(_T_31, _T_17, _T_30) @[Mux.scala 80:57]
    node _T_33 = eq(UInt<3>("h06"), io.config) @[Mux.scala 80:60]
    node _T_34 = mux(_T_33, _T_20, _T_32) @[Mux.scala 80:57]
    io.out <= _T_34 @[ALU.scala 25:10]
    
  module RF_10 : 
    input clock : Clock
    input reset : Reset
    output io : {flip en : UInt<1>, flip config : UInt<0>, flip in : UInt<32>[1], out : UInt<32>[2]}
    
    wire _T : UInt<32>[1] @[RegFile.scala 24:29]
    _T[0] <= UInt<32>("h00") @[RegFile.scala 24:29]
    reg regs : UInt<32>[1], clock with : (reset => (reset, _T)) @[RegFile.scala 24:21]
    when io.en : @[RegFile.scala 34:16]
      regs[0] <= io.in[0] @[RegFile.scala 35:41]
      skip @[RegFile.scala 34:16]
    io.out[0] <= regs[0] @[RegFile.scala 37:42]
    io.out[1] <= regs[0] @[RegFile.scala 37:42]
    
  module DelayPipe_20 : 
    input clock : Clock
    input reset : Reset
    output io : {flip en : UInt<1>, flip config : UInt<3>, flip in : UInt<32>, out : UInt<32>}
    
    wire _T : UInt<32>[5] @[DelayPipe.scala 22:29]
    _T[0] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[1] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[2] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[3] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[4] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    reg regs : UInt<32>[5], clock with : (reset => (reset, _T)) @[DelayPipe.scala 22:21]
    reg wptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 23:21]
    reg rptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 24:21]
    node _T_1 = lt(wptr, UInt<3>("h04")) @[DelayPipe.scala 26:23]
    node _T_2 = and(io.en, _T_1) @[DelayPipe.scala 26:14]
    when _T_2 : @[DelayPipe.scala 26:37]
      node _T_3 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 27:17]
      node _T_4 = tail(_T_3, 1) @[DelayPipe.scala 27:17]
      wptr <= _T_4 @[DelayPipe.scala 27:10]
      skip @[DelayPipe.scala 26:37]
    else : @[DelayPipe.scala 28:14]
      wptr <= UInt<1>("h00") @[DelayPipe.scala 29:10]
      skip @[DelayPipe.scala 28:14]
    node _T_5 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 32:12]
    node _T_6 = tail(_T_5, 1) @[DelayPipe.scala 32:12]
    node _T_7 = geq(_T_6, io.config) @[DelayPipe.scala 32:17]
    when _T_7 : @[DelayPipe.scala 32:30]
      node _T_8 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 33:18]
      node _T_9 = tail(_T_8, 1) @[DelayPipe.scala 33:18]
      node _T_10 = sub(_T_9, io.config) @[DelayPipe.scala 33:24]
      node _T_11 = tail(_T_10, 1) @[DelayPipe.scala 33:24]
      rptr <= _T_11 @[DelayPipe.scala 33:10]
      skip @[DelayPipe.scala 32:30]
    else : @[DelayPipe.scala 34:14]
      node _T_12 = add(UInt<3>("h06"), wptr) @[DelayPipe.scala 35:30]
      node _T_13 = tail(_T_12, 1) @[DelayPipe.scala 35:30]
      node _T_14 = sub(_T_13, io.config) @[DelayPipe.scala 35:37]
      node _T_15 = tail(_T_14, 1) @[DelayPipe.scala 35:37]
      rptr <= _T_15 @[DelayPipe.scala 35:10]
      skip @[DelayPipe.scala 34:14]
    node _T_16 = gt(io.config, UInt<1>("h00")) @[DelayPipe.scala 39:28]
    node _T_17 = and(io.en, _T_16) @[DelayPipe.scala 39:14]
    when _T_17 : @[DelayPipe.scala 39:35]
      regs[wptr] <= io.in @[DelayPipe.scala 40:16]
      skip @[DelayPipe.scala 39:35]
    reg cnt : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 43:20]
    node _T_18 = eq(io.en, UInt<1>("h00")) @[DelayPipe.scala 44:8]
    when _T_18 : @[DelayPipe.scala 44:15]
      cnt <= UInt<1>("h00") @[DelayPipe.scala 45:9]
      skip @[DelayPipe.scala 44:15]
    else : @[DelayPipe.scala 46:30]
      node _T_19 = lt(cnt, io.config) @[DelayPipe.scala 46:18]
      when _T_19 : @[DelayPipe.scala 46:30]
        node _T_20 = add(cnt, UInt<1>("h01")) @[DelayPipe.scala 47:16]
        node _T_21 = tail(_T_20, 1) @[DelayPipe.scala 47:16]
        cnt <= _T_21 @[DelayPipe.scala 47:9]
        skip @[DelayPipe.scala 46:30]
    node _T_22 = eq(UInt<1>("h00"), io.config) @[DelayPipe.scala 50:22]
    node _T_23 = and(io.en, _T_22) @[DelayPipe.scala 50:14]
    when _T_23 : @[DelayPipe.scala 50:37]
      io.out <= io.in @[DelayPipe.scala 51:12]
      skip @[DelayPipe.scala 50:37]
    else : @[DelayPipe.scala 52:43]
      node _T_24 = eq(cnt, io.config) @[DelayPipe.scala 52:28]
      node _T_25 = and(io.en, _T_24) @[DelayPipe.scala 52:20]
      when _T_25 : @[DelayPipe.scala 52:43]
        io.out <= regs[rptr] @[DelayPipe.scala 53:12]
        skip @[DelayPipe.scala 52:43]
      else : @[DelayPipe.scala 54:14]
        io.out <= UInt<1>("h00") @[DelayPipe.scala 55:12]
        skip @[DelayPipe.scala 54:14]
    
  module DelayPipe_21 : 
    input clock : Clock
    input reset : Reset
    output io : {flip en : UInt<1>, flip config : UInt<3>, flip in : UInt<32>, out : UInt<32>}
    
    wire _T : UInt<32>[5] @[DelayPipe.scala 22:29]
    _T[0] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[1] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[2] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[3] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[4] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    reg regs : UInt<32>[5], clock with : (reset => (reset, _T)) @[DelayPipe.scala 22:21]
    reg wptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 23:21]
    reg rptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 24:21]
    node _T_1 = lt(wptr, UInt<3>("h04")) @[DelayPipe.scala 26:23]
    node _T_2 = and(io.en, _T_1) @[DelayPipe.scala 26:14]
    when _T_2 : @[DelayPipe.scala 26:37]
      node _T_3 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 27:17]
      node _T_4 = tail(_T_3, 1) @[DelayPipe.scala 27:17]
      wptr <= _T_4 @[DelayPipe.scala 27:10]
      skip @[DelayPipe.scala 26:37]
    else : @[DelayPipe.scala 28:14]
      wptr <= UInt<1>("h00") @[DelayPipe.scala 29:10]
      skip @[DelayPipe.scala 28:14]
    node _T_5 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 32:12]
    node _T_6 = tail(_T_5, 1) @[DelayPipe.scala 32:12]
    node _T_7 = geq(_T_6, io.config) @[DelayPipe.scala 32:17]
    when _T_7 : @[DelayPipe.scala 32:30]
      node _T_8 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 33:18]
      node _T_9 = tail(_T_8, 1) @[DelayPipe.scala 33:18]
      node _T_10 = sub(_T_9, io.config) @[DelayPipe.scala 33:24]
      node _T_11 = tail(_T_10, 1) @[DelayPipe.scala 33:24]
      rptr <= _T_11 @[DelayPipe.scala 33:10]
      skip @[DelayPipe.scala 32:30]
    else : @[DelayPipe.scala 34:14]
      node _T_12 = add(UInt<3>("h06"), wptr) @[DelayPipe.scala 35:30]
      node _T_13 = tail(_T_12, 1) @[DelayPipe.scala 35:30]
      node _T_14 = sub(_T_13, io.config) @[DelayPipe.scala 35:37]
      node _T_15 = tail(_T_14, 1) @[DelayPipe.scala 35:37]
      rptr <= _T_15 @[DelayPipe.scala 35:10]
      skip @[DelayPipe.scala 34:14]
    node _T_16 = gt(io.config, UInt<1>("h00")) @[DelayPipe.scala 39:28]
    node _T_17 = and(io.en, _T_16) @[DelayPipe.scala 39:14]
    when _T_17 : @[DelayPipe.scala 39:35]
      regs[wptr] <= io.in @[DelayPipe.scala 40:16]
      skip @[DelayPipe.scala 39:35]
    reg cnt : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 43:20]
    node _T_18 = eq(io.en, UInt<1>("h00")) @[DelayPipe.scala 44:8]
    when _T_18 : @[DelayPipe.scala 44:15]
      cnt <= UInt<1>("h00") @[DelayPipe.scala 45:9]
      skip @[DelayPipe.scala 44:15]
    else : @[DelayPipe.scala 46:30]
      node _T_19 = lt(cnt, io.config) @[DelayPipe.scala 46:18]
      when _T_19 : @[DelayPipe.scala 46:30]
        node _T_20 = add(cnt, UInt<1>("h01")) @[DelayPipe.scala 47:16]
        node _T_21 = tail(_T_20, 1) @[DelayPipe.scala 47:16]
        cnt <= _T_21 @[DelayPipe.scala 47:9]
        skip @[DelayPipe.scala 46:30]
    node _T_22 = eq(UInt<1>("h00"), io.config) @[DelayPipe.scala 50:22]
    node _T_23 = and(io.en, _T_22) @[DelayPipe.scala 50:14]
    when _T_23 : @[DelayPipe.scala 50:37]
      io.out <= io.in @[DelayPipe.scala 51:12]
      skip @[DelayPipe.scala 50:37]
    else : @[DelayPipe.scala 52:43]
      node _T_24 = eq(cnt, io.config) @[DelayPipe.scala 52:28]
      node _T_25 = and(io.en, _T_24) @[DelayPipe.scala 52:20]
      when _T_25 : @[DelayPipe.scala 52:43]
        io.out <= regs[rptr] @[DelayPipe.scala 53:12]
        skip @[DelayPipe.scala 52:43]
      else : @[DelayPipe.scala 54:14]
        io.out <= UInt<1>("h00") @[DelayPipe.scala 55:12]
        skip @[DelayPipe.scala 54:14]
    
  module Muxn_36 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[6], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    node _T_10 = eq(UInt<3>("h05"), io.config) @[Mux.scala 80:60]
    node _T_11 = mux(_T_10, io.in[5], _T_9) @[Mux.scala 80:57]
    io.out <= _T_11 @[Multiplexer.scala 20:10]
    
  module Muxn_37 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[6], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    node _T_10 = eq(UInt<3>("h05"), io.config) @[Mux.scala 80:60]
    node _T_11 = mux(_T_10, io.in[5], _T_9) @[Mux.scala 80:57]
    io.out <= _T_11 @[Multiplexer.scala 20:10]
    
  module ConfigMem_26 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<1>, flip cfg_data : UInt<32>, out : UInt<48>[1]}
    
    wire _T : UInt<48>[1] @[ConfigMem.scala 27:29]
    _T[0] <= UInt<48>("h00") @[ConfigMem.scala 27:29]
    reg regs : UInt<48>[1], clock with : (reset => (reset, _T)) @[ConfigMem.scala 27:21]
    node _T_1 = eq(io.cfg_addr, UInt<1>("h00")) @[ConfigMem.scala 39:38]
    node _T_2 = and(io.cfg_en, _T_1) @[ConfigMem.scala 39:22]
    when _T_2 : @[ConfigMem.scala 39:47]
      node _T_3 = bits(regs[0], 47, 32) @[ConfigMem.scala 41:33]
      node _T_4 = cat(_T_3, io.cfg_data) @[Cat.scala 29:58]
      regs[0] <= _T_4 @[ConfigMem.scala 41:19]
      skip @[ConfigMem.scala 39:47]
    node _T_5 = eq(io.cfg_addr, UInt<1>("h01")) @[ConfigMem.scala 39:38]
    node _T_6 = and(io.cfg_en, _T_5) @[ConfigMem.scala 39:22]
    when _T_6 : @[ConfigMem.scala 39:47]
      node _T_7 = bits(regs[0], 31, 0) @[ConfigMem.scala 43:46]
      node _T_8 = cat(io.cfg_data, _T_7) @[Cat.scala 29:58]
      regs[0] <= _T_8 @[ConfigMem.scala 43:19]
      skip @[ConfigMem.scala 39:47]
    io.out[0] <= regs[0] @[ConfigMem.scala 52:45]
    
  module GPE_10 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<12>, flip cfg_data : UInt<32>, flip en : UInt<1>, flip in : UInt<32>[8], out : UInt<32>[1]}
    
    inst alu of ALU_10 @[PE.scala 50:19]
    alu.clock <= clock
    alu.reset <= reset
    inst rf of RF_10 @[PE.scala 51:18]
    rf.clock <= clock
    rf.reset <= reset
    inst DelayPipe of DelayPipe_20 @[PE.scala 52:54]
    DelayPipe.clock <= clock
    DelayPipe.reset <= reset
    inst DelayPipe_1 of DelayPipe_21 @[PE.scala 52:54]
    DelayPipe_1.clock <= clock
    DelayPipe_1.reset <= reset
    wire const : UInt<32> @[PE.scala 54:19]
    inst Muxn of Muxn_36 @[PE.scala 55:49]
    Muxn.clock <= clock
    Muxn.reset <= reset
    inst Muxn_1 of Muxn_37 @[PE.scala 55:49]
    Muxn_1.clock <= clock
    Muxn_1.reset <= reset
    Muxn.io.in[0] <= io.in[0] @[PE.scala 62:12]
    Muxn.io.in[1] <= io.in[1] @[PE.scala 62:12]
    Muxn.io.in[2] <= io.in[2] @[PE.scala 62:12]
    Muxn.io.in[3] <= io.in[3] @[PE.scala 62:12]
    Muxn.io.in[4] <= const @[PE.scala 64:12]
    Muxn.io.in[5] <= rf.io.out[1] @[PE.scala 66:12]
    DelayPipe.io.en <= io.en @[PE.scala 69:23]
    DelayPipe.io.in <= Muxn.io.out @[PE.scala 70:23]
    alu.io.in[0] <= DelayPipe.io.out @[PE.scala 71:18]
    Muxn_1.io.in[0] <= io.in[4] @[PE.scala 62:12]
    Muxn_1.io.in[1] <= io.in[5] @[PE.scala 62:12]
    Muxn_1.io.in[2] <= io.in[6] @[PE.scala 62:12]
    Muxn_1.io.in[3] <= io.in[7] @[PE.scala 62:12]
    Muxn_1.io.in[4] <= const @[PE.scala 64:12]
    Muxn_1.io.in[5] <= rf.io.out[1] @[PE.scala 66:12]
    DelayPipe_1.io.en <= io.en @[PE.scala 69:23]
    DelayPipe_1.io.in <= Muxn_1.io.out @[PE.scala 70:23]
    alu.io.in[1] <= DelayPipe_1.io.out @[PE.scala 71:18]
    rf.io.en <= io.en @[PE.scala 75:12]
    rf.io.in[0] <= alu.io.out @[PE.scala 76:15]
    io.out[0] <= rf.io.out[0] @[PE.scala 77:13]
    inst cfg of ConfigMem_26 @[PE.scala 89:19]
    cfg.clock <= clock
    cfg.reset <= reset
    node _T = bits(io.cfg_addr, 11, 2) @[PE.scala 90:63]
    node _T_1 = eq(UInt<6>("h030"), _T) @[PE.scala 90:48]
    node _T_2 = and(io.cfg_en, _T_1) @[PE.scala 90:30]
    cfg.io.cfg_en <= _T_2 @[PE.scala 90:17]
    node _T_3 = bits(io.cfg_addr, 1, 0) @[PE.scala 91:33]
    cfg.io.cfg_addr <= _T_3 @[PE.scala 91:19]
    cfg.io.cfg_data <= io.cfg_data @[PE.scala 92:19]
    wire cfgOut : UInt<48> @[PE.scala 96:20]
    cfgOut <= cfg.io.out[0] @[PE.scala 97:10]
    node _T_4 = bits(cfgOut, 31, 0) @[PE.scala 98:18]
    const <= _T_4 @[PE.scala 98:9]
    node _T_5 = bits(cfgOut, 35, 32) @[PE.scala 100:28]
    alu.io.config <= _T_5 @[PE.scala 100:19]
    rf.io.config is invalid @[PE.scala 107:18]
    node _T_6 = bits(cfgOut, 38, 36) @[PE.scala 113:38]
    DelayPipe.io.config <= _T_6 @[PE.scala 113:29]
    node _T_7 = bits(cfgOut, 41, 39) @[PE.scala 113:38]
    DelayPipe_1.io.config <= _T_7 @[PE.scala 113:29]
    node _T_8 = bits(cfgOut, 44, 42) @[PE.scala 121:32]
    Muxn.io.config <= _T_8 @[PE.scala 121:23]
    node _T_9 = bits(cfgOut, 47, 45) @[PE.scala 121:32]
    Muxn_1.io.config <= _T_9 @[PE.scala 121:23]
    
  module ALU_11 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<4>, flip in : UInt<32>[2], out : UInt<32>}
    
    node _T = bits(io.in[0], 31, 0) @[Operations.scala 122:31]
    node _T_1 = bits(io.in[0], 31, 0) @[Operations.scala 124:31]
    node _T_2 = bits(io.in[1], 31, 0) @[Operations.scala 124:49]
    node _T_3 = add(_T_1, _T_2) @[Operations.scala 124:41]
    node _T_4 = tail(_T_3, 1) @[Operations.scala 124:41]
    node _T_5 = bits(io.in[0], 31, 0) @[Operations.scala 126:31]
    node _T_6 = bits(io.in[1], 31, 0) @[Operations.scala 126:49]
    node _T_7 = sub(_T_5, _T_6) @[Operations.scala 126:41]
    node _T_8 = tail(_T_7, 1) @[Operations.scala 126:41]
    node _T_9 = bits(io.in[0], 31, 0) @[Operations.scala 128:31]
    node _T_10 = bits(io.in[1], 31, 0) @[Operations.scala 128:49]
    node _T_11 = mul(_T_9, _T_10) @[Operations.scala 128:41]
    node _T_12 = bits(io.in[0], 31, 0) @[Operations.scala 138:31]
    node _T_13 = bits(io.in[1], 31, 0) @[Operations.scala 138:49]
    node _T_14 = and(_T_12, _T_13) @[Operations.scala 138:41]
    node _T_15 = bits(io.in[0], 31, 0) @[Operations.scala 140:31]
    node _T_16 = bits(io.in[1], 31, 0) @[Operations.scala 140:49]
    node _T_17 = or(_T_15, _T_16) @[Operations.scala 140:41]
    node _T_18 = bits(io.in[0], 31, 0) @[Operations.scala 142:31]
    node _T_19 = bits(io.in[1], 31, 0) @[Operations.scala 142:49]
    node _T_20 = xor(_T_18, _T_19) @[Operations.scala 142:41]
    node _T_21 = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_22 = mux(_T_21, _T, UInt<1>("h00")) @[Mux.scala 80:57]
    node _T_23 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_24 = mux(_T_23, _T_4, _T_22) @[Mux.scala 80:57]
    node _T_25 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_26 = mux(_T_25, _T_8, _T_24) @[Mux.scala 80:57]
    node _T_27 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_28 = mux(_T_27, _T_11, _T_26) @[Mux.scala 80:57]
    node _T_29 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_30 = mux(_T_29, _T_14, _T_28) @[Mux.scala 80:57]
    node _T_31 = eq(UInt<3>("h05"), io.config) @[Mux.scala 80:60]
    node _T_32 = mux(_T_31, _T_17, _T_30) @[Mux.scala 80:57]
    node _T_33 = eq(UInt<3>("h06"), io.config) @[Mux.scala 80:60]
    node _T_34 = mux(_T_33, _T_20, _T_32) @[Mux.scala 80:57]
    io.out <= _T_34 @[ALU.scala 25:10]
    
  module RF_11 : 
    input clock : Clock
    input reset : Reset
    output io : {flip en : UInt<1>, flip config : UInt<0>, flip in : UInt<32>[1], out : UInt<32>[2]}
    
    wire _T : UInt<32>[1] @[RegFile.scala 24:29]
    _T[0] <= UInt<32>("h00") @[RegFile.scala 24:29]
    reg regs : UInt<32>[1], clock with : (reset => (reset, _T)) @[RegFile.scala 24:21]
    when io.en : @[RegFile.scala 34:16]
      regs[0] <= io.in[0] @[RegFile.scala 35:41]
      skip @[RegFile.scala 34:16]
    io.out[0] <= regs[0] @[RegFile.scala 37:42]
    io.out[1] <= regs[0] @[RegFile.scala 37:42]
    
  module DelayPipe_22 : 
    input clock : Clock
    input reset : Reset
    output io : {flip en : UInt<1>, flip config : UInt<3>, flip in : UInt<32>, out : UInt<32>}
    
    wire _T : UInt<32>[5] @[DelayPipe.scala 22:29]
    _T[0] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[1] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[2] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[3] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[4] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    reg regs : UInt<32>[5], clock with : (reset => (reset, _T)) @[DelayPipe.scala 22:21]
    reg wptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 23:21]
    reg rptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 24:21]
    node _T_1 = lt(wptr, UInt<3>("h04")) @[DelayPipe.scala 26:23]
    node _T_2 = and(io.en, _T_1) @[DelayPipe.scala 26:14]
    when _T_2 : @[DelayPipe.scala 26:37]
      node _T_3 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 27:17]
      node _T_4 = tail(_T_3, 1) @[DelayPipe.scala 27:17]
      wptr <= _T_4 @[DelayPipe.scala 27:10]
      skip @[DelayPipe.scala 26:37]
    else : @[DelayPipe.scala 28:14]
      wptr <= UInt<1>("h00") @[DelayPipe.scala 29:10]
      skip @[DelayPipe.scala 28:14]
    node _T_5 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 32:12]
    node _T_6 = tail(_T_5, 1) @[DelayPipe.scala 32:12]
    node _T_7 = geq(_T_6, io.config) @[DelayPipe.scala 32:17]
    when _T_7 : @[DelayPipe.scala 32:30]
      node _T_8 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 33:18]
      node _T_9 = tail(_T_8, 1) @[DelayPipe.scala 33:18]
      node _T_10 = sub(_T_9, io.config) @[DelayPipe.scala 33:24]
      node _T_11 = tail(_T_10, 1) @[DelayPipe.scala 33:24]
      rptr <= _T_11 @[DelayPipe.scala 33:10]
      skip @[DelayPipe.scala 32:30]
    else : @[DelayPipe.scala 34:14]
      node _T_12 = add(UInt<3>("h06"), wptr) @[DelayPipe.scala 35:30]
      node _T_13 = tail(_T_12, 1) @[DelayPipe.scala 35:30]
      node _T_14 = sub(_T_13, io.config) @[DelayPipe.scala 35:37]
      node _T_15 = tail(_T_14, 1) @[DelayPipe.scala 35:37]
      rptr <= _T_15 @[DelayPipe.scala 35:10]
      skip @[DelayPipe.scala 34:14]
    node _T_16 = gt(io.config, UInt<1>("h00")) @[DelayPipe.scala 39:28]
    node _T_17 = and(io.en, _T_16) @[DelayPipe.scala 39:14]
    when _T_17 : @[DelayPipe.scala 39:35]
      regs[wptr] <= io.in @[DelayPipe.scala 40:16]
      skip @[DelayPipe.scala 39:35]
    reg cnt : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 43:20]
    node _T_18 = eq(io.en, UInt<1>("h00")) @[DelayPipe.scala 44:8]
    when _T_18 : @[DelayPipe.scala 44:15]
      cnt <= UInt<1>("h00") @[DelayPipe.scala 45:9]
      skip @[DelayPipe.scala 44:15]
    else : @[DelayPipe.scala 46:30]
      node _T_19 = lt(cnt, io.config) @[DelayPipe.scala 46:18]
      when _T_19 : @[DelayPipe.scala 46:30]
        node _T_20 = add(cnt, UInt<1>("h01")) @[DelayPipe.scala 47:16]
        node _T_21 = tail(_T_20, 1) @[DelayPipe.scala 47:16]
        cnt <= _T_21 @[DelayPipe.scala 47:9]
        skip @[DelayPipe.scala 46:30]
    node _T_22 = eq(UInt<1>("h00"), io.config) @[DelayPipe.scala 50:22]
    node _T_23 = and(io.en, _T_22) @[DelayPipe.scala 50:14]
    when _T_23 : @[DelayPipe.scala 50:37]
      io.out <= io.in @[DelayPipe.scala 51:12]
      skip @[DelayPipe.scala 50:37]
    else : @[DelayPipe.scala 52:43]
      node _T_24 = eq(cnt, io.config) @[DelayPipe.scala 52:28]
      node _T_25 = and(io.en, _T_24) @[DelayPipe.scala 52:20]
      when _T_25 : @[DelayPipe.scala 52:43]
        io.out <= regs[rptr] @[DelayPipe.scala 53:12]
        skip @[DelayPipe.scala 52:43]
      else : @[DelayPipe.scala 54:14]
        io.out <= UInt<1>("h00") @[DelayPipe.scala 55:12]
        skip @[DelayPipe.scala 54:14]
    
  module DelayPipe_23 : 
    input clock : Clock
    input reset : Reset
    output io : {flip en : UInt<1>, flip config : UInt<3>, flip in : UInt<32>, out : UInt<32>}
    
    wire _T : UInt<32>[5] @[DelayPipe.scala 22:29]
    _T[0] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[1] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[2] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[3] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[4] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    reg regs : UInt<32>[5], clock with : (reset => (reset, _T)) @[DelayPipe.scala 22:21]
    reg wptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 23:21]
    reg rptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 24:21]
    node _T_1 = lt(wptr, UInt<3>("h04")) @[DelayPipe.scala 26:23]
    node _T_2 = and(io.en, _T_1) @[DelayPipe.scala 26:14]
    when _T_2 : @[DelayPipe.scala 26:37]
      node _T_3 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 27:17]
      node _T_4 = tail(_T_3, 1) @[DelayPipe.scala 27:17]
      wptr <= _T_4 @[DelayPipe.scala 27:10]
      skip @[DelayPipe.scala 26:37]
    else : @[DelayPipe.scala 28:14]
      wptr <= UInt<1>("h00") @[DelayPipe.scala 29:10]
      skip @[DelayPipe.scala 28:14]
    node _T_5 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 32:12]
    node _T_6 = tail(_T_5, 1) @[DelayPipe.scala 32:12]
    node _T_7 = geq(_T_6, io.config) @[DelayPipe.scala 32:17]
    when _T_7 : @[DelayPipe.scala 32:30]
      node _T_8 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 33:18]
      node _T_9 = tail(_T_8, 1) @[DelayPipe.scala 33:18]
      node _T_10 = sub(_T_9, io.config) @[DelayPipe.scala 33:24]
      node _T_11 = tail(_T_10, 1) @[DelayPipe.scala 33:24]
      rptr <= _T_11 @[DelayPipe.scala 33:10]
      skip @[DelayPipe.scala 32:30]
    else : @[DelayPipe.scala 34:14]
      node _T_12 = add(UInt<3>("h06"), wptr) @[DelayPipe.scala 35:30]
      node _T_13 = tail(_T_12, 1) @[DelayPipe.scala 35:30]
      node _T_14 = sub(_T_13, io.config) @[DelayPipe.scala 35:37]
      node _T_15 = tail(_T_14, 1) @[DelayPipe.scala 35:37]
      rptr <= _T_15 @[DelayPipe.scala 35:10]
      skip @[DelayPipe.scala 34:14]
    node _T_16 = gt(io.config, UInt<1>("h00")) @[DelayPipe.scala 39:28]
    node _T_17 = and(io.en, _T_16) @[DelayPipe.scala 39:14]
    when _T_17 : @[DelayPipe.scala 39:35]
      regs[wptr] <= io.in @[DelayPipe.scala 40:16]
      skip @[DelayPipe.scala 39:35]
    reg cnt : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 43:20]
    node _T_18 = eq(io.en, UInt<1>("h00")) @[DelayPipe.scala 44:8]
    when _T_18 : @[DelayPipe.scala 44:15]
      cnt <= UInt<1>("h00") @[DelayPipe.scala 45:9]
      skip @[DelayPipe.scala 44:15]
    else : @[DelayPipe.scala 46:30]
      node _T_19 = lt(cnt, io.config) @[DelayPipe.scala 46:18]
      when _T_19 : @[DelayPipe.scala 46:30]
        node _T_20 = add(cnt, UInt<1>("h01")) @[DelayPipe.scala 47:16]
        node _T_21 = tail(_T_20, 1) @[DelayPipe.scala 47:16]
        cnt <= _T_21 @[DelayPipe.scala 47:9]
        skip @[DelayPipe.scala 46:30]
    node _T_22 = eq(UInt<1>("h00"), io.config) @[DelayPipe.scala 50:22]
    node _T_23 = and(io.en, _T_22) @[DelayPipe.scala 50:14]
    when _T_23 : @[DelayPipe.scala 50:37]
      io.out <= io.in @[DelayPipe.scala 51:12]
      skip @[DelayPipe.scala 50:37]
    else : @[DelayPipe.scala 52:43]
      node _T_24 = eq(cnt, io.config) @[DelayPipe.scala 52:28]
      node _T_25 = and(io.en, _T_24) @[DelayPipe.scala 52:20]
      when _T_25 : @[DelayPipe.scala 52:43]
        io.out <= regs[rptr] @[DelayPipe.scala 53:12]
        skip @[DelayPipe.scala 52:43]
      else : @[DelayPipe.scala 54:14]
        io.out <= UInt<1>("h00") @[DelayPipe.scala 55:12]
        skip @[DelayPipe.scala 54:14]
    
  module Muxn_38 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[6], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    node _T_10 = eq(UInt<3>("h05"), io.config) @[Mux.scala 80:60]
    node _T_11 = mux(_T_10, io.in[5], _T_9) @[Mux.scala 80:57]
    io.out <= _T_11 @[Multiplexer.scala 20:10]
    
  module Muxn_39 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[6], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    node _T_10 = eq(UInt<3>("h05"), io.config) @[Mux.scala 80:60]
    node _T_11 = mux(_T_10, io.in[5], _T_9) @[Mux.scala 80:57]
    io.out <= _T_11 @[Multiplexer.scala 20:10]
    
  module ConfigMem_27 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<1>, flip cfg_data : UInt<32>, out : UInt<48>[1]}
    
    wire _T : UInt<48>[1] @[ConfigMem.scala 27:29]
    _T[0] <= UInt<48>("h00") @[ConfigMem.scala 27:29]
    reg regs : UInt<48>[1], clock with : (reset => (reset, _T)) @[ConfigMem.scala 27:21]
    node _T_1 = eq(io.cfg_addr, UInt<1>("h00")) @[ConfigMem.scala 39:38]
    node _T_2 = and(io.cfg_en, _T_1) @[ConfigMem.scala 39:22]
    when _T_2 : @[ConfigMem.scala 39:47]
      node _T_3 = bits(regs[0], 47, 32) @[ConfigMem.scala 41:33]
      node _T_4 = cat(_T_3, io.cfg_data) @[Cat.scala 29:58]
      regs[0] <= _T_4 @[ConfigMem.scala 41:19]
      skip @[ConfigMem.scala 39:47]
    node _T_5 = eq(io.cfg_addr, UInt<1>("h01")) @[ConfigMem.scala 39:38]
    node _T_6 = and(io.cfg_en, _T_5) @[ConfigMem.scala 39:22]
    when _T_6 : @[ConfigMem.scala 39:47]
      node _T_7 = bits(regs[0], 31, 0) @[ConfigMem.scala 43:46]
      node _T_8 = cat(io.cfg_data, _T_7) @[Cat.scala 29:58]
      regs[0] <= _T_8 @[ConfigMem.scala 43:19]
      skip @[ConfigMem.scala 39:47]
    io.out[0] <= regs[0] @[ConfigMem.scala 52:45]
    
  module GPE_11 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<12>, flip cfg_data : UInt<32>, flip en : UInt<1>, flip in : UInt<32>[8], out : UInt<32>[1]}
    
    inst alu of ALU_11 @[PE.scala 50:19]
    alu.clock <= clock
    alu.reset <= reset
    inst rf of RF_11 @[PE.scala 51:18]
    rf.clock <= clock
    rf.reset <= reset
    inst DelayPipe of DelayPipe_22 @[PE.scala 52:54]
    DelayPipe.clock <= clock
    DelayPipe.reset <= reset
    inst DelayPipe_1 of DelayPipe_23 @[PE.scala 52:54]
    DelayPipe_1.clock <= clock
    DelayPipe_1.reset <= reset
    wire const : UInt<32> @[PE.scala 54:19]
    inst Muxn of Muxn_38 @[PE.scala 55:49]
    Muxn.clock <= clock
    Muxn.reset <= reset
    inst Muxn_1 of Muxn_39 @[PE.scala 55:49]
    Muxn_1.clock <= clock
    Muxn_1.reset <= reset
    Muxn.io.in[0] <= io.in[0] @[PE.scala 62:12]
    Muxn.io.in[1] <= io.in[1] @[PE.scala 62:12]
    Muxn.io.in[2] <= io.in[2] @[PE.scala 62:12]
    Muxn.io.in[3] <= io.in[3] @[PE.scala 62:12]
    Muxn.io.in[4] <= const @[PE.scala 64:12]
    Muxn.io.in[5] <= rf.io.out[1] @[PE.scala 66:12]
    DelayPipe.io.en <= io.en @[PE.scala 69:23]
    DelayPipe.io.in <= Muxn.io.out @[PE.scala 70:23]
    alu.io.in[0] <= DelayPipe.io.out @[PE.scala 71:18]
    Muxn_1.io.in[0] <= io.in[4] @[PE.scala 62:12]
    Muxn_1.io.in[1] <= io.in[5] @[PE.scala 62:12]
    Muxn_1.io.in[2] <= io.in[6] @[PE.scala 62:12]
    Muxn_1.io.in[3] <= io.in[7] @[PE.scala 62:12]
    Muxn_1.io.in[4] <= const @[PE.scala 64:12]
    Muxn_1.io.in[5] <= rf.io.out[1] @[PE.scala 66:12]
    DelayPipe_1.io.en <= io.en @[PE.scala 69:23]
    DelayPipe_1.io.in <= Muxn_1.io.out @[PE.scala 70:23]
    alu.io.in[1] <= DelayPipe_1.io.out @[PE.scala 71:18]
    rf.io.en <= io.en @[PE.scala 75:12]
    rf.io.in[0] <= alu.io.out @[PE.scala 76:15]
    io.out[0] <= rf.io.out[0] @[PE.scala 77:13]
    inst cfg of ConfigMem_27 @[PE.scala 89:19]
    cfg.clock <= clock
    cfg.reset <= reset
    node _T = bits(io.cfg_addr, 11, 2) @[PE.scala 90:63]
    node _T_1 = eq(UInt<6>("h031"), _T) @[PE.scala 90:48]
    node _T_2 = and(io.cfg_en, _T_1) @[PE.scala 90:30]
    cfg.io.cfg_en <= _T_2 @[PE.scala 90:17]
    node _T_3 = bits(io.cfg_addr, 1, 0) @[PE.scala 91:33]
    cfg.io.cfg_addr <= _T_3 @[PE.scala 91:19]
    cfg.io.cfg_data <= io.cfg_data @[PE.scala 92:19]
    wire cfgOut : UInt<48> @[PE.scala 96:20]
    cfgOut <= cfg.io.out[0] @[PE.scala 97:10]
    node _T_4 = bits(cfgOut, 31, 0) @[PE.scala 98:18]
    const <= _T_4 @[PE.scala 98:9]
    node _T_5 = bits(cfgOut, 35, 32) @[PE.scala 100:28]
    alu.io.config <= _T_5 @[PE.scala 100:19]
    rf.io.config is invalid @[PE.scala 107:18]
    node _T_6 = bits(cfgOut, 38, 36) @[PE.scala 113:38]
    DelayPipe.io.config <= _T_6 @[PE.scala 113:29]
    node _T_7 = bits(cfgOut, 41, 39) @[PE.scala 113:38]
    DelayPipe_1.io.config <= _T_7 @[PE.scala 113:29]
    node _T_8 = bits(cfgOut, 44, 42) @[PE.scala 121:32]
    Muxn.io.config <= _T_8 @[PE.scala 121:23]
    node _T_9 = bits(cfgOut, 47, 45) @[PE.scala 121:32]
    Muxn_1.io.config <= _T_9 @[PE.scala 121:23]
    
  module ALU_12 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<4>, flip in : UInt<32>[2], out : UInt<32>}
    
    node _T = bits(io.in[0], 31, 0) @[Operations.scala 122:31]
    node _T_1 = bits(io.in[0], 31, 0) @[Operations.scala 124:31]
    node _T_2 = bits(io.in[1], 31, 0) @[Operations.scala 124:49]
    node _T_3 = add(_T_1, _T_2) @[Operations.scala 124:41]
    node _T_4 = tail(_T_3, 1) @[Operations.scala 124:41]
    node _T_5 = bits(io.in[0], 31, 0) @[Operations.scala 126:31]
    node _T_6 = bits(io.in[1], 31, 0) @[Operations.scala 126:49]
    node _T_7 = sub(_T_5, _T_6) @[Operations.scala 126:41]
    node _T_8 = tail(_T_7, 1) @[Operations.scala 126:41]
    node _T_9 = bits(io.in[0], 31, 0) @[Operations.scala 128:31]
    node _T_10 = bits(io.in[1], 31, 0) @[Operations.scala 128:49]
    node _T_11 = mul(_T_9, _T_10) @[Operations.scala 128:41]
    node _T_12 = bits(io.in[0], 31, 0) @[Operations.scala 138:31]
    node _T_13 = bits(io.in[1], 31, 0) @[Operations.scala 138:49]
    node _T_14 = and(_T_12, _T_13) @[Operations.scala 138:41]
    node _T_15 = bits(io.in[0], 31, 0) @[Operations.scala 140:31]
    node _T_16 = bits(io.in[1], 31, 0) @[Operations.scala 140:49]
    node _T_17 = or(_T_15, _T_16) @[Operations.scala 140:41]
    node _T_18 = bits(io.in[0], 31, 0) @[Operations.scala 142:31]
    node _T_19 = bits(io.in[1], 31, 0) @[Operations.scala 142:49]
    node _T_20 = xor(_T_18, _T_19) @[Operations.scala 142:41]
    node _T_21 = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_22 = mux(_T_21, _T, UInt<1>("h00")) @[Mux.scala 80:57]
    node _T_23 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_24 = mux(_T_23, _T_4, _T_22) @[Mux.scala 80:57]
    node _T_25 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_26 = mux(_T_25, _T_8, _T_24) @[Mux.scala 80:57]
    node _T_27 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_28 = mux(_T_27, _T_11, _T_26) @[Mux.scala 80:57]
    node _T_29 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_30 = mux(_T_29, _T_14, _T_28) @[Mux.scala 80:57]
    node _T_31 = eq(UInt<3>("h05"), io.config) @[Mux.scala 80:60]
    node _T_32 = mux(_T_31, _T_17, _T_30) @[Mux.scala 80:57]
    node _T_33 = eq(UInt<3>("h06"), io.config) @[Mux.scala 80:60]
    node _T_34 = mux(_T_33, _T_20, _T_32) @[Mux.scala 80:57]
    io.out <= _T_34 @[ALU.scala 25:10]
    
  module RF_12 : 
    input clock : Clock
    input reset : Reset
    output io : {flip en : UInt<1>, flip config : UInt<0>, flip in : UInt<32>[1], out : UInt<32>[2]}
    
    wire _T : UInt<32>[1] @[RegFile.scala 24:29]
    _T[0] <= UInt<32>("h00") @[RegFile.scala 24:29]
    reg regs : UInt<32>[1], clock with : (reset => (reset, _T)) @[RegFile.scala 24:21]
    when io.en : @[RegFile.scala 34:16]
      regs[0] <= io.in[0] @[RegFile.scala 35:41]
      skip @[RegFile.scala 34:16]
    io.out[0] <= regs[0] @[RegFile.scala 37:42]
    io.out[1] <= regs[0] @[RegFile.scala 37:42]
    
  module DelayPipe_24 : 
    input clock : Clock
    input reset : Reset
    output io : {flip en : UInt<1>, flip config : UInt<3>, flip in : UInt<32>, out : UInt<32>}
    
    wire _T : UInt<32>[5] @[DelayPipe.scala 22:29]
    _T[0] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[1] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[2] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[3] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[4] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    reg regs : UInt<32>[5], clock with : (reset => (reset, _T)) @[DelayPipe.scala 22:21]
    reg wptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 23:21]
    reg rptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 24:21]
    node _T_1 = lt(wptr, UInt<3>("h04")) @[DelayPipe.scala 26:23]
    node _T_2 = and(io.en, _T_1) @[DelayPipe.scala 26:14]
    when _T_2 : @[DelayPipe.scala 26:37]
      node _T_3 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 27:17]
      node _T_4 = tail(_T_3, 1) @[DelayPipe.scala 27:17]
      wptr <= _T_4 @[DelayPipe.scala 27:10]
      skip @[DelayPipe.scala 26:37]
    else : @[DelayPipe.scala 28:14]
      wptr <= UInt<1>("h00") @[DelayPipe.scala 29:10]
      skip @[DelayPipe.scala 28:14]
    node _T_5 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 32:12]
    node _T_6 = tail(_T_5, 1) @[DelayPipe.scala 32:12]
    node _T_7 = geq(_T_6, io.config) @[DelayPipe.scala 32:17]
    when _T_7 : @[DelayPipe.scala 32:30]
      node _T_8 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 33:18]
      node _T_9 = tail(_T_8, 1) @[DelayPipe.scala 33:18]
      node _T_10 = sub(_T_9, io.config) @[DelayPipe.scala 33:24]
      node _T_11 = tail(_T_10, 1) @[DelayPipe.scala 33:24]
      rptr <= _T_11 @[DelayPipe.scala 33:10]
      skip @[DelayPipe.scala 32:30]
    else : @[DelayPipe.scala 34:14]
      node _T_12 = add(UInt<3>("h06"), wptr) @[DelayPipe.scala 35:30]
      node _T_13 = tail(_T_12, 1) @[DelayPipe.scala 35:30]
      node _T_14 = sub(_T_13, io.config) @[DelayPipe.scala 35:37]
      node _T_15 = tail(_T_14, 1) @[DelayPipe.scala 35:37]
      rptr <= _T_15 @[DelayPipe.scala 35:10]
      skip @[DelayPipe.scala 34:14]
    node _T_16 = gt(io.config, UInt<1>("h00")) @[DelayPipe.scala 39:28]
    node _T_17 = and(io.en, _T_16) @[DelayPipe.scala 39:14]
    when _T_17 : @[DelayPipe.scala 39:35]
      regs[wptr] <= io.in @[DelayPipe.scala 40:16]
      skip @[DelayPipe.scala 39:35]
    reg cnt : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 43:20]
    node _T_18 = eq(io.en, UInt<1>("h00")) @[DelayPipe.scala 44:8]
    when _T_18 : @[DelayPipe.scala 44:15]
      cnt <= UInt<1>("h00") @[DelayPipe.scala 45:9]
      skip @[DelayPipe.scala 44:15]
    else : @[DelayPipe.scala 46:30]
      node _T_19 = lt(cnt, io.config) @[DelayPipe.scala 46:18]
      when _T_19 : @[DelayPipe.scala 46:30]
        node _T_20 = add(cnt, UInt<1>("h01")) @[DelayPipe.scala 47:16]
        node _T_21 = tail(_T_20, 1) @[DelayPipe.scala 47:16]
        cnt <= _T_21 @[DelayPipe.scala 47:9]
        skip @[DelayPipe.scala 46:30]
    node _T_22 = eq(UInt<1>("h00"), io.config) @[DelayPipe.scala 50:22]
    node _T_23 = and(io.en, _T_22) @[DelayPipe.scala 50:14]
    when _T_23 : @[DelayPipe.scala 50:37]
      io.out <= io.in @[DelayPipe.scala 51:12]
      skip @[DelayPipe.scala 50:37]
    else : @[DelayPipe.scala 52:43]
      node _T_24 = eq(cnt, io.config) @[DelayPipe.scala 52:28]
      node _T_25 = and(io.en, _T_24) @[DelayPipe.scala 52:20]
      when _T_25 : @[DelayPipe.scala 52:43]
        io.out <= regs[rptr] @[DelayPipe.scala 53:12]
        skip @[DelayPipe.scala 52:43]
      else : @[DelayPipe.scala 54:14]
        io.out <= UInt<1>("h00") @[DelayPipe.scala 55:12]
        skip @[DelayPipe.scala 54:14]
    
  module DelayPipe_25 : 
    input clock : Clock
    input reset : Reset
    output io : {flip en : UInt<1>, flip config : UInt<3>, flip in : UInt<32>, out : UInt<32>}
    
    wire _T : UInt<32>[5] @[DelayPipe.scala 22:29]
    _T[0] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[1] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[2] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[3] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[4] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    reg regs : UInt<32>[5], clock with : (reset => (reset, _T)) @[DelayPipe.scala 22:21]
    reg wptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 23:21]
    reg rptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 24:21]
    node _T_1 = lt(wptr, UInt<3>("h04")) @[DelayPipe.scala 26:23]
    node _T_2 = and(io.en, _T_1) @[DelayPipe.scala 26:14]
    when _T_2 : @[DelayPipe.scala 26:37]
      node _T_3 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 27:17]
      node _T_4 = tail(_T_3, 1) @[DelayPipe.scala 27:17]
      wptr <= _T_4 @[DelayPipe.scala 27:10]
      skip @[DelayPipe.scala 26:37]
    else : @[DelayPipe.scala 28:14]
      wptr <= UInt<1>("h00") @[DelayPipe.scala 29:10]
      skip @[DelayPipe.scala 28:14]
    node _T_5 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 32:12]
    node _T_6 = tail(_T_5, 1) @[DelayPipe.scala 32:12]
    node _T_7 = geq(_T_6, io.config) @[DelayPipe.scala 32:17]
    when _T_7 : @[DelayPipe.scala 32:30]
      node _T_8 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 33:18]
      node _T_9 = tail(_T_8, 1) @[DelayPipe.scala 33:18]
      node _T_10 = sub(_T_9, io.config) @[DelayPipe.scala 33:24]
      node _T_11 = tail(_T_10, 1) @[DelayPipe.scala 33:24]
      rptr <= _T_11 @[DelayPipe.scala 33:10]
      skip @[DelayPipe.scala 32:30]
    else : @[DelayPipe.scala 34:14]
      node _T_12 = add(UInt<3>("h06"), wptr) @[DelayPipe.scala 35:30]
      node _T_13 = tail(_T_12, 1) @[DelayPipe.scala 35:30]
      node _T_14 = sub(_T_13, io.config) @[DelayPipe.scala 35:37]
      node _T_15 = tail(_T_14, 1) @[DelayPipe.scala 35:37]
      rptr <= _T_15 @[DelayPipe.scala 35:10]
      skip @[DelayPipe.scala 34:14]
    node _T_16 = gt(io.config, UInt<1>("h00")) @[DelayPipe.scala 39:28]
    node _T_17 = and(io.en, _T_16) @[DelayPipe.scala 39:14]
    when _T_17 : @[DelayPipe.scala 39:35]
      regs[wptr] <= io.in @[DelayPipe.scala 40:16]
      skip @[DelayPipe.scala 39:35]
    reg cnt : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 43:20]
    node _T_18 = eq(io.en, UInt<1>("h00")) @[DelayPipe.scala 44:8]
    when _T_18 : @[DelayPipe.scala 44:15]
      cnt <= UInt<1>("h00") @[DelayPipe.scala 45:9]
      skip @[DelayPipe.scala 44:15]
    else : @[DelayPipe.scala 46:30]
      node _T_19 = lt(cnt, io.config) @[DelayPipe.scala 46:18]
      when _T_19 : @[DelayPipe.scala 46:30]
        node _T_20 = add(cnt, UInt<1>("h01")) @[DelayPipe.scala 47:16]
        node _T_21 = tail(_T_20, 1) @[DelayPipe.scala 47:16]
        cnt <= _T_21 @[DelayPipe.scala 47:9]
        skip @[DelayPipe.scala 46:30]
    node _T_22 = eq(UInt<1>("h00"), io.config) @[DelayPipe.scala 50:22]
    node _T_23 = and(io.en, _T_22) @[DelayPipe.scala 50:14]
    when _T_23 : @[DelayPipe.scala 50:37]
      io.out <= io.in @[DelayPipe.scala 51:12]
      skip @[DelayPipe.scala 50:37]
    else : @[DelayPipe.scala 52:43]
      node _T_24 = eq(cnt, io.config) @[DelayPipe.scala 52:28]
      node _T_25 = and(io.en, _T_24) @[DelayPipe.scala 52:20]
      when _T_25 : @[DelayPipe.scala 52:43]
        io.out <= regs[rptr] @[DelayPipe.scala 53:12]
        skip @[DelayPipe.scala 52:43]
      else : @[DelayPipe.scala 54:14]
        io.out <= UInt<1>("h00") @[DelayPipe.scala 55:12]
        skip @[DelayPipe.scala 54:14]
    
  module Muxn_40 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[6], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    node _T_10 = eq(UInt<3>("h05"), io.config) @[Mux.scala 80:60]
    node _T_11 = mux(_T_10, io.in[5], _T_9) @[Mux.scala 80:57]
    io.out <= _T_11 @[Multiplexer.scala 20:10]
    
  module Muxn_41 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[6], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    node _T_10 = eq(UInt<3>("h05"), io.config) @[Mux.scala 80:60]
    node _T_11 = mux(_T_10, io.in[5], _T_9) @[Mux.scala 80:57]
    io.out <= _T_11 @[Multiplexer.scala 20:10]
    
  module ConfigMem_28 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<1>, flip cfg_data : UInt<32>, out : UInt<48>[1]}
    
    wire _T : UInt<48>[1] @[ConfigMem.scala 27:29]
    _T[0] <= UInt<48>("h00") @[ConfigMem.scala 27:29]
    reg regs : UInt<48>[1], clock with : (reset => (reset, _T)) @[ConfigMem.scala 27:21]
    node _T_1 = eq(io.cfg_addr, UInt<1>("h00")) @[ConfigMem.scala 39:38]
    node _T_2 = and(io.cfg_en, _T_1) @[ConfigMem.scala 39:22]
    when _T_2 : @[ConfigMem.scala 39:47]
      node _T_3 = bits(regs[0], 47, 32) @[ConfigMem.scala 41:33]
      node _T_4 = cat(_T_3, io.cfg_data) @[Cat.scala 29:58]
      regs[0] <= _T_4 @[ConfigMem.scala 41:19]
      skip @[ConfigMem.scala 39:47]
    node _T_5 = eq(io.cfg_addr, UInt<1>("h01")) @[ConfigMem.scala 39:38]
    node _T_6 = and(io.cfg_en, _T_5) @[ConfigMem.scala 39:22]
    when _T_6 : @[ConfigMem.scala 39:47]
      node _T_7 = bits(regs[0], 31, 0) @[ConfigMem.scala 43:46]
      node _T_8 = cat(io.cfg_data, _T_7) @[Cat.scala 29:58]
      regs[0] <= _T_8 @[ConfigMem.scala 43:19]
      skip @[ConfigMem.scala 39:47]
    io.out[0] <= regs[0] @[ConfigMem.scala 52:45]
    
  module GPE_12 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<12>, flip cfg_data : UInt<32>, flip en : UInt<1>, flip in : UInt<32>[8], out : UInt<32>[1]}
    
    inst alu of ALU_12 @[PE.scala 50:19]
    alu.clock <= clock
    alu.reset <= reset
    inst rf of RF_12 @[PE.scala 51:18]
    rf.clock <= clock
    rf.reset <= reset
    inst DelayPipe of DelayPipe_24 @[PE.scala 52:54]
    DelayPipe.clock <= clock
    DelayPipe.reset <= reset
    inst DelayPipe_1 of DelayPipe_25 @[PE.scala 52:54]
    DelayPipe_1.clock <= clock
    DelayPipe_1.reset <= reset
    wire const : UInt<32> @[PE.scala 54:19]
    inst Muxn of Muxn_40 @[PE.scala 55:49]
    Muxn.clock <= clock
    Muxn.reset <= reset
    inst Muxn_1 of Muxn_41 @[PE.scala 55:49]
    Muxn_1.clock <= clock
    Muxn_1.reset <= reset
    Muxn.io.in[0] <= io.in[0] @[PE.scala 62:12]
    Muxn.io.in[1] <= io.in[1] @[PE.scala 62:12]
    Muxn.io.in[2] <= io.in[2] @[PE.scala 62:12]
    Muxn.io.in[3] <= io.in[3] @[PE.scala 62:12]
    Muxn.io.in[4] <= const @[PE.scala 64:12]
    Muxn.io.in[5] <= rf.io.out[1] @[PE.scala 66:12]
    DelayPipe.io.en <= io.en @[PE.scala 69:23]
    DelayPipe.io.in <= Muxn.io.out @[PE.scala 70:23]
    alu.io.in[0] <= DelayPipe.io.out @[PE.scala 71:18]
    Muxn_1.io.in[0] <= io.in[4] @[PE.scala 62:12]
    Muxn_1.io.in[1] <= io.in[5] @[PE.scala 62:12]
    Muxn_1.io.in[2] <= io.in[6] @[PE.scala 62:12]
    Muxn_1.io.in[3] <= io.in[7] @[PE.scala 62:12]
    Muxn_1.io.in[4] <= const @[PE.scala 64:12]
    Muxn_1.io.in[5] <= rf.io.out[1] @[PE.scala 66:12]
    DelayPipe_1.io.en <= io.en @[PE.scala 69:23]
    DelayPipe_1.io.in <= Muxn_1.io.out @[PE.scala 70:23]
    alu.io.in[1] <= DelayPipe_1.io.out @[PE.scala 71:18]
    rf.io.en <= io.en @[PE.scala 75:12]
    rf.io.in[0] <= alu.io.out @[PE.scala 76:15]
    io.out[0] <= rf.io.out[0] @[PE.scala 77:13]
    inst cfg of ConfigMem_28 @[PE.scala 89:19]
    cfg.clock <= clock
    cfg.reset <= reset
    node _T = bits(io.cfg_addr, 11, 2) @[PE.scala 90:63]
    node _T_1 = eq(UInt<6>("h032"), _T) @[PE.scala 90:48]
    node _T_2 = and(io.cfg_en, _T_1) @[PE.scala 90:30]
    cfg.io.cfg_en <= _T_2 @[PE.scala 90:17]
    node _T_3 = bits(io.cfg_addr, 1, 0) @[PE.scala 91:33]
    cfg.io.cfg_addr <= _T_3 @[PE.scala 91:19]
    cfg.io.cfg_data <= io.cfg_data @[PE.scala 92:19]
    wire cfgOut : UInt<48> @[PE.scala 96:20]
    cfgOut <= cfg.io.out[0] @[PE.scala 97:10]
    node _T_4 = bits(cfgOut, 31, 0) @[PE.scala 98:18]
    const <= _T_4 @[PE.scala 98:9]
    node _T_5 = bits(cfgOut, 35, 32) @[PE.scala 100:28]
    alu.io.config <= _T_5 @[PE.scala 100:19]
    rf.io.config is invalid @[PE.scala 107:18]
    node _T_6 = bits(cfgOut, 38, 36) @[PE.scala 113:38]
    DelayPipe.io.config <= _T_6 @[PE.scala 113:29]
    node _T_7 = bits(cfgOut, 41, 39) @[PE.scala 113:38]
    DelayPipe_1.io.config <= _T_7 @[PE.scala 113:29]
    node _T_8 = bits(cfgOut, 44, 42) @[PE.scala 121:32]
    Muxn.io.config <= _T_8 @[PE.scala 121:23]
    node _T_9 = bits(cfgOut, 47, 45) @[PE.scala 121:32]
    Muxn_1.io.config <= _T_9 @[PE.scala 121:23]
    
  module ALU_13 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<4>, flip in : UInt<32>[2], out : UInt<32>}
    
    node _T = bits(io.in[0], 31, 0) @[Operations.scala 122:31]
    node _T_1 = bits(io.in[0], 31, 0) @[Operations.scala 124:31]
    node _T_2 = bits(io.in[1], 31, 0) @[Operations.scala 124:49]
    node _T_3 = add(_T_1, _T_2) @[Operations.scala 124:41]
    node _T_4 = tail(_T_3, 1) @[Operations.scala 124:41]
    node _T_5 = bits(io.in[0], 31, 0) @[Operations.scala 126:31]
    node _T_6 = bits(io.in[1], 31, 0) @[Operations.scala 126:49]
    node _T_7 = sub(_T_5, _T_6) @[Operations.scala 126:41]
    node _T_8 = tail(_T_7, 1) @[Operations.scala 126:41]
    node _T_9 = bits(io.in[0], 31, 0) @[Operations.scala 128:31]
    node _T_10 = bits(io.in[1], 31, 0) @[Operations.scala 128:49]
    node _T_11 = mul(_T_9, _T_10) @[Operations.scala 128:41]
    node _T_12 = bits(io.in[0], 31, 0) @[Operations.scala 138:31]
    node _T_13 = bits(io.in[1], 31, 0) @[Operations.scala 138:49]
    node _T_14 = and(_T_12, _T_13) @[Operations.scala 138:41]
    node _T_15 = bits(io.in[0], 31, 0) @[Operations.scala 140:31]
    node _T_16 = bits(io.in[1], 31, 0) @[Operations.scala 140:49]
    node _T_17 = or(_T_15, _T_16) @[Operations.scala 140:41]
    node _T_18 = bits(io.in[0], 31, 0) @[Operations.scala 142:31]
    node _T_19 = bits(io.in[1], 31, 0) @[Operations.scala 142:49]
    node _T_20 = xor(_T_18, _T_19) @[Operations.scala 142:41]
    node _T_21 = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_22 = mux(_T_21, _T, UInt<1>("h00")) @[Mux.scala 80:57]
    node _T_23 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_24 = mux(_T_23, _T_4, _T_22) @[Mux.scala 80:57]
    node _T_25 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_26 = mux(_T_25, _T_8, _T_24) @[Mux.scala 80:57]
    node _T_27 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_28 = mux(_T_27, _T_11, _T_26) @[Mux.scala 80:57]
    node _T_29 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_30 = mux(_T_29, _T_14, _T_28) @[Mux.scala 80:57]
    node _T_31 = eq(UInt<3>("h05"), io.config) @[Mux.scala 80:60]
    node _T_32 = mux(_T_31, _T_17, _T_30) @[Mux.scala 80:57]
    node _T_33 = eq(UInt<3>("h06"), io.config) @[Mux.scala 80:60]
    node _T_34 = mux(_T_33, _T_20, _T_32) @[Mux.scala 80:57]
    io.out <= _T_34 @[ALU.scala 25:10]
    
  module RF_13 : 
    input clock : Clock
    input reset : Reset
    output io : {flip en : UInt<1>, flip config : UInt<0>, flip in : UInt<32>[1], out : UInt<32>[2]}
    
    wire _T : UInt<32>[1] @[RegFile.scala 24:29]
    _T[0] <= UInt<32>("h00") @[RegFile.scala 24:29]
    reg regs : UInt<32>[1], clock with : (reset => (reset, _T)) @[RegFile.scala 24:21]
    when io.en : @[RegFile.scala 34:16]
      regs[0] <= io.in[0] @[RegFile.scala 35:41]
      skip @[RegFile.scala 34:16]
    io.out[0] <= regs[0] @[RegFile.scala 37:42]
    io.out[1] <= regs[0] @[RegFile.scala 37:42]
    
  module DelayPipe_26 : 
    input clock : Clock
    input reset : Reset
    output io : {flip en : UInt<1>, flip config : UInt<3>, flip in : UInt<32>, out : UInt<32>}
    
    wire _T : UInt<32>[5] @[DelayPipe.scala 22:29]
    _T[0] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[1] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[2] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[3] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[4] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    reg regs : UInt<32>[5], clock with : (reset => (reset, _T)) @[DelayPipe.scala 22:21]
    reg wptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 23:21]
    reg rptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 24:21]
    node _T_1 = lt(wptr, UInt<3>("h04")) @[DelayPipe.scala 26:23]
    node _T_2 = and(io.en, _T_1) @[DelayPipe.scala 26:14]
    when _T_2 : @[DelayPipe.scala 26:37]
      node _T_3 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 27:17]
      node _T_4 = tail(_T_3, 1) @[DelayPipe.scala 27:17]
      wptr <= _T_4 @[DelayPipe.scala 27:10]
      skip @[DelayPipe.scala 26:37]
    else : @[DelayPipe.scala 28:14]
      wptr <= UInt<1>("h00") @[DelayPipe.scala 29:10]
      skip @[DelayPipe.scala 28:14]
    node _T_5 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 32:12]
    node _T_6 = tail(_T_5, 1) @[DelayPipe.scala 32:12]
    node _T_7 = geq(_T_6, io.config) @[DelayPipe.scala 32:17]
    when _T_7 : @[DelayPipe.scala 32:30]
      node _T_8 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 33:18]
      node _T_9 = tail(_T_8, 1) @[DelayPipe.scala 33:18]
      node _T_10 = sub(_T_9, io.config) @[DelayPipe.scala 33:24]
      node _T_11 = tail(_T_10, 1) @[DelayPipe.scala 33:24]
      rptr <= _T_11 @[DelayPipe.scala 33:10]
      skip @[DelayPipe.scala 32:30]
    else : @[DelayPipe.scala 34:14]
      node _T_12 = add(UInt<3>("h06"), wptr) @[DelayPipe.scala 35:30]
      node _T_13 = tail(_T_12, 1) @[DelayPipe.scala 35:30]
      node _T_14 = sub(_T_13, io.config) @[DelayPipe.scala 35:37]
      node _T_15 = tail(_T_14, 1) @[DelayPipe.scala 35:37]
      rptr <= _T_15 @[DelayPipe.scala 35:10]
      skip @[DelayPipe.scala 34:14]
    node _T_16 = gt(io.config, UInt<1>("h00")) @[DelayPipe.scala 39:28]
    node _T_17 = and(io.en, _T_16) @[DelayPipe.scala 39:14]
    when _T_17 : @[DelayPipe.scala 39:35]
      regs[wptr] <= io.in @[DelayPipe.scala 40:16]
      skip @[DelayPipe.scala 39:35]
    reg cnt : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 43:20]
    node _T_18 = eq(io.en, UInt<1>("h00")) @[DelayPipe.scala 44:8]
    when _T_18 : @[DelayPipe.scala 44:15]
      cnt <= UInt<1>("h00") @[DelayPipe.scala 45:9]
      skip @[DelayPipe.scala 44:15]
    else : @[DelayPipe.scala 46:30]
      node _T_19 = lt(cnt, io.config) @[DelayPipe.scala 46:18]
      when _T_19 : @[DelayPipe.scala 46:30]
        node _T_20 = add(cnt, UInt<1>("h01")) @[DelayPipe.scala 47:16]
        node _T_21 = tail(_T_20, 1) @[DelayPipe.scala 47:16]
        cnt <= _T_21 @[DelayPipe.scala 47:9]
        skip @[DelayPipe.scala 46:30]
    node _T_22 = eq(UInt<1>("h00"), io.config) @[DelayPipe.scala 50:22]
    node _T_23 = and(io.en, _T_22) @[DelayPipe.scala 50:14]
    when _T_23 : @[DelayPipe.scala 50:37]
      io.out <= io.in @[DelayPipe.scala 51:12]
      skip @[DelayPipe.scala 50:37]
    else : @[DelayPipe.scala 52:43]
      node _T_24 = eq(cnt, io.config) @[DelayPipe.scala 52:28]
      node _T_25 = and(io.en, _T_24) @[DelayPipe.scala 52:20]
      when _T_25 : @[DelayPipe.scala 52:43]
        io.out <= regs[rptr] @[DelayPipe.scala 53:12]
        skip @[DelayPipe.scala 52:43]
      else : @[DelayPipe.scala 54:14]
        io.out <= UInt<1>("h00") @[DelayPipe.scala 55:12]
        skip @[DelayPipe.scala 54:14]
    
  module DelayPipe_27 : 
    input clock : Clock
    input reset : Reset
    output io : {flip en : UInt<1>, flip config : UInt<3>, flip in : UInt<32>, out : UInt<32>}
    
    wire _T : UInt<32>[5] @[DelayPipe.scala 22:29]
    _T[0] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[1] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[2] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[3] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[4] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    reg regs : UInt<32>[5], clock with : (reset => (reset, _T)) @[DelayPipe.scala 22:21]
    reg wptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 23:21]
    reg rptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 24:21]
    node _T_1 = lt(wptr, UInt<3>("h04")) @[DelayPipe.scala 26:23]
    node _T_2 = and(io.en, _T_1) @[DelayPipe.scala 26:14]
    when _T_2 : @[DelayPipe.scala 26:37]
      node _T_3 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 27:17]
      node _T_4 = tail(_T_3, 1) @[DelayPipe.scala 27:17]
      wptr <= _T_4 @[DelayPipe.scala 27:10]
      skip @[DelayPipe.scala 26:37]
    else : @[DelayPipe.scala 28:14]
      wptr <= UInt<1>("h00") @[DelayPipe.scala 29:10]
      skip @[DelayPipe.scala 28:14]
    node _T_5 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 32:12]
    node _T_6 = tail(_T_5, 1) @[DelayPipe.scala 32:12]
    node _T_7 = geq(_T_6, io.config) @[DelayPipe.scala 32:17]
    when _T_7 : @[DelayPipe.scala 32:30]
      node _T_8 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 33:18]
      node _T_9 = tail(_T_8, 1) @[DelayPipe.scala 33:18]
      node _T_10 = sub(_T_9, io.config) @[DelayPipe.scala 33:24]
      node _T_11 = tail(_T_10, 1) @[DelayPipe.scala 33:24]
      rptr <= _T_11 @[DelayPipe.scala 33:10]
      skip @[DelayPipe.scala 32:30]
    else : @[DelayPipe.scala 34:14]
      node _T_12 = add(UInt<3>("h06"), wptr) @[DelayPipe.scala 35:30]
      node _T_13 = tail(_T_12, 1) @[DelayPipe.scala 35:30]
      node _T_14 = sub(_T_13, io.config) @[DelayPipe.scala 35:37]
      node _T_15 = tail(_T_14, 1) @[DelayPipe.scala 35:37]
      rptr <= _T_15 @[DelayPipe.scala 35:10]
      skip @[DelayPipe.scala 34:14]
    node _T_16 = gt(io.config, UInt<1>("h00")) @[DelayPipe.scala 39:28]
    node _T_17 = and(io.en, _T_16) @[DelayPipe.scala 39:14]
    when _T_17 : @[DelayPipe.scala 39:35]
      regs[wptr] <= io.in @[DelayPipe.scala 40:16]
      skip @[DelayPipe.scala 39:35]
    reg cnt : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 43:20]
    node _T_18 = eq(io.en, UInt<1>("h00")) @[DelayPipe.scala 44:8]
    when _T_18 : @[DelayPipe.scala 44:15]
      cnt <= UInt<1>("h00") @[DelayPipe.scala 45:9]
      skip @[DelayPipe.scala 44:15]
    else : @[DelayPipe.scala 46:30]
      node _T_19 = lt(cnt, io.config) @[DelayPipe.scala 46:18]
      when _T_19 : @[DelayPipe.scala 46:30]
        node _T_20 = add(cnt, UInt<1>("h01")) @[DelayPipe.scala 47:16]
        node _T_21 = tail(_T_20, 1) @[DelayPipe.scala 47:16]
        cnt <= _T_21 @[DelayPipe.scala 47:9]
        skip @[DelayPipe.scala 46:30]
    node _T_22 = eq(UInt<1>("h00"), io.config) @[DelayPipe.scala 50:22]
    node _T_23 = and(io.en, _T_22) @[DelayPipe.scala 50:14]
    when _T_23 : @[DelayPipe.scala 50:37]
      io.out <= io.in @[DelayPipe.scala 51:12]
      skip @[DelayPipe.scala 50:37]
    else : @[DelayPipe.scala 52:43]
      node _T_24 = eq(cnt, io.config) @[DelayPipe.scala 52:28]
      node _T_25 = and(io.en, _T_24) @[DelayPipe.scala 52:20]
      when _T_25 : @[DelayPipe.scala 52:43]
        io.out <= regs[rptr] @[DelayPipe.scala 53:12]
        skip @[DelayPipe.scala 52:43]
      else : @[DelayPipe.scala 54:14]
        io.out <= UInt<1>("h00") @[DelayPipe.scala 55:12]
        skip @[DelayPipe.scala 54:14]
    
  module Muxn_42 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[6], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    node _T_10 = eq(UInt<3>("h05"), io.config) @[Mux.scala 80:60]
    node _T_11 = mux(_T_10, io.in[5], _T_9) @[Mux.scala 80:57]
    io.out <= _T_11 @[Multiplexer.scala 20:10]
    
  module Muxn_43 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[6], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    node _T_10 = eq(UInt<3>("h05"), io.config) @[Mux.scala 80:60]
    node _T_11 = mux(_T_10, io.in[5], _T_9) @[Mux.scala 80:57]
    io.out <= _T_11 @[Multiplexer.scala 20:10]
    
  module ConfigMem_29 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<1>, flip cfg_data : UInt<32>, out : UInt<48>[1]}
    
    wire _T : UInt<48>[1] @[ConfigMem.scala 27:29]
    _T[0] <= UInt<48>("h00") @[ConfigMem.scala 27:29]
    reg regs : UInt<48>[1], clock with : (reset => (reset, _T)) @[ConfigMem.scala 27:21]
    node _T_1 = eq(io.cfg_addr, UInt<1>("h00")) @[ConfigMem.scala 39:38]
    node _T_2 = and(io.cfg_en, _T_1) @[ConfigMem.scala 39:22]
    when _T_2 : @[ConfigMem.scala 39:47]
      node _T_3 = bits(regs[0], 47, 32) @[ConfigMem.scala 41:33]
      node _T_4 = cat(_T_3, io.cfg_data) @[Cat.scala 29:58]
      regs[0] <= _T_4 @[ConfigMem.scala 41:19]
      skip @[ConfigMem.scala 39:47]
    node _T_5 = eq(io.cfg_addr, UInt<1>("h01")) @[ConfigMem.scala 39:38]
    node _T_6 = and(io.cfg_en, _T_5) @[ConfigMem.scala 39:22]
    when _T_6 : @[ConfigMem.scala 39:47]
      node _T_7 = bits(regs[0], 31, 0) @[ConfigMem.scala 43:46]
      node _T_8 = cat(io.cfg_data, _T_7) @[Cat.scala 29:58]
      regs[0] <= _T_8 @[ConfigMem.scala 43:19]
      skip @[ConfigMem.scala 39:47]
    io.out[0] <= regs[0] @[ConfigMem.scala 52:45]
    
  module GPE_13 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<12>, flip cfg_data : UInt<32>, flip en : UInt<1>, flip in : UInt<32>[8], out : UInt<32>[1]}
    
    inst alu of ALU_13 @[PE.scala 50:19]
    alu.clock <= clock
    alu.reset <= reset
    inst rf of RF_13 @[PE.scala 51:18]
    rf.clock <= clock
    rf.reset <= reset
    inst DelayPipe of DelayPipe_26 @[PE.scala 52:54]
    DelayPipe.clock <= clock
    DelayPipe.reset <= reset
    inst DelayPipe_1 of DelayPipe_27 @[PE.scala 52:54]
    DelayPipe_1.clock <= clock
    DelayPipe_1.reset <= reset
    wire const : UInt<32> @[PE.scala 54:19]
    inst Muxn of Muxn_42 @[PE.scala 55:49]
    Muxn.clock <= clock
    Muxn.reset <= reset
    inst Muxn_1 of Muxn_43 @[PE.scala 55:49]
    Muxn_1.clock <= clock
    Muxn_1.reset <= reset
    Muxn.io.in[0] <= io.in[0] @[PE.scala 62:12]
    Muxn.io.in[1] <= io.in[1] @[PE.scala 62:12]
    Muxn.io.in[2] <= io.in[2] @[PE.scala 62:12]
    Muxn.io.in[3] <= io.in[3] @[PE.scala 62:12]
    Muxn.io.in[4] <= const @[PE.scala 64:12]
    Muxn.io.in[5] <= rf.io.out[1] @[PE.scala 66:12]
    DelayPipe.io.en <= io.en @[PE.scala 69:23]
    DelayPipe.io.in <= Muxn.io.out @[PE.scala 70:23]
    alu.io.in[0] <= DelayPipe.io.out @[PE.scala 71:18]
    Muxn_1.io.in[0] <= io.in[4] @[PE.scala 62:12]
    Muxn_1.io.in[1] <= io.in[5] @[PE.scala 62:12]
    Muxn_1.io.in[2] <= io.in[6] @[PE.scala 62:12]
    Muxn_1.io.in[3] <= io.in[7] @[PE.scala 62:12]
    Muxn_1.io.in[4] <= const @[PE.scala 64:12]
    Muxn_1.io.in[5] <= rf.io.out[1] @[PE.scala 66:12]
    DelayPipe_1.io.en <= io.en @[PE.scala 69:23]
    DelayPipe_1.io.in <= Muxn_1.io.out @[PE.scala 70:23]
    alu.io.in[1] <= DelayPipe_1.io.out @[PE.scala 71:18]
    rf.io.en <= io.en @[PE.scala 75:12]
    rf.io.in[0] <= alu.io.out @[PE.scala 76:15]
    io.out[0] <= rf.io.out[0] @[PE.scala 77:13]
    inst cfg of ConfigMem_29 @[PE.scala 89:19]
    cfg.clock <= clock
    cfg.reset <= reset
    node _T = bits(io.cfg_addr, 11, 2) @[PE.scala 90:63]
    node _T_1 = eq(UInt<6>("h033"), _T) @[PE.scala 90:48]
    node _T_2 = and(io.cfg_en, _T_1) @[PE.scala 90:30]
    cfg.io.cfg_en <= _T_2 @[PE.scala 90:17]
    node _T_3 = bits(io.cfg_addr, 1, 0) @[PE.scala 91:33]
    cfg.io.cfg_addr <= _T_3 @[PE.scala 91:19]
    cfg.io.cfg_data <= io.cfg_data @[PE.scala 92:19]
    wire cfgOut : UInt<48> @[PE.scala 96:20]
    cfgOut <= cfg.io.out[0] @[PE.scala 97:10]
    node _T_4 = bits(cfgOut, 31, 0) @[PE.scala 98:18]
    const <= _T_4 @[PE.scala 98:9]
    node _T_5 = bits(cfgOut, 35, 32) @[PE.scala 100:28]
    alu.io.config <= _T_5 @[PE.scala 100:19]
    rf.io.config is invalid @[PE.scala 107:18]
    node _T_6 = bits(cfgOut, 38, 36) @[PE.scala 113:38]
    DelayPipe.io.config <= _T_6 @[PE.scala 113:29]
    node _T_7 = bits(cfgOut, 41, 39) @[PE.scala 113:38]
    DelayPipe_1.io.config <= _T_7 @[PE.scala 113:29]
    node _T_8 = bits(cfgOut, 44, 42) @[PE.scala 121:32]
    Muxn.io.config <= _T_8 @[PE.scala 121:23]
    node _T_9 = bits(cfgOut, 47, 45) @[PE.scala 121:32]
    Muxn_1.io.config <= _T_9 @[PE.scala 121:23]
    
  module ALU_14 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<4>, flip in : UInt<32>[2], out : UInt<32>}
    
    node _T = bits(io.in[0], 31, 0) @[Operations.scala 122:31]
    node _T_1 = bits(io.in[0], 31, 0) @[Operations.scala 124:31]
    node _T_2 = bits(io.in[1], 31, 0) @[Operations.scala 124:49]
    node _T_3 = add(_T_1, _T_2) @[Operations.scala 124:41]
    node _T_4 = tail(_T_3, 1) @[Operations.scala 124:41]
    node _T_5 = bits(io.in[0], 31, 0) @[Operations.scala 126:31]
    node _T_6 = bits(io.in[1], 31, 0) @[Operations.scala 126:49]
    node _T_7 = sub(_T_5, _T_6) @[Operations.scala 126:41]
    node _T_8 = tail(_T_7, 1) @[Operations.scala 126:41]
    node _T_9 = bits(io.in[0], 31, 0) @[Operations.scala 128:31]
    node _T_10 = bits(io.in[1], 31, 0) @[Operations.scala 128:49]
    node _T_11 = mul(_T_9, _T_10) @[Operations.scala 128:41]
    node _T_12 = bits(io.in[0], 31, 0) @[Operations.scala 138:31]
    node _T_13 = bits(io.in[1], 31, 0) @[Operations.scala 138:49]
    node _T_14 = and(_T_12, _T_13) @[Operations.scala 138:41]
    node _T_15 = bits(io.in[0], 31, 0) @[Operations.scala 140:31]
    node _T_16 = bits(io.in[1], 31, 0) @[Operations.scala 140:49]
    node _T_17 = or(_T_15, _T_16) @[Operations.scala 140:41]
    node _T_18 = bits(io.in[0], 31, 0) @[Operations.scala 142:31]
    node _T_19 = bits(io.in[1], 31, 0) @[Operations.scala 142:49]
    node _T_20 = xor(_T_18, _T_19) @[Operations.scala 142:41]
    node _T_21 = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_22 = mux(_T_21, _T, UInt<1>("h00")) @[Mux.scala 80:57]
    node _T_23 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_24 = mux(_T_23, _T_4, _T_22) @[Mux.scala 80:57]
    node _T_25 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_26 = mux(_T_25, _T_8, _T_24) @[Mux.scala 80:57]
    node _T_27 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_28 = mux(_T_27, _T_11, _T_26) @[Mux.scala 80:57]
    node _T_29 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_30 = mux(_T_29, _T_14, _T_28) @[Mux.scala 80:57]
    node _T_31 = eq(UInt<3>("h05"), io.config) @[Mux.scala 80:60]
    node _T_32 = mux(_T_31, _T_17, _T_30) @[Mux.scala 80:57]
    node _T_33 = eq(UInt<3>("h06"), io.config) @[Mux.scala 80:60]
    node _T_34 = mux(_T_33, _T_20, _T_32) @[Mux.scala 80:57]
    io.out <= _T_34 @[ALU.scala 25:10]
    
  module RF_14 : 
    input clock : Clock
    input reset : Reset
    output io : {flip en : UInt<1>, flip config : UInt<0>, flip in : UInt<32>[1], out : UInt<32>[2]}
    
    wire _T : UInt<32>[1] @[RegFile.scala 24:29]
    _T[0] <= UInt<32>("h00") @[RegFile.scala 24:29]
    reg regs : UInt<32>[1], clock with : (reset => (reset, _T)) @[RegFile.scala 24:21]
    when io.en : @[RegFile.scala 34:16]
      regs[0] <= io.in[0] @[RegFile.scala 35:41]
      skip @[RegFile.scala 34:16]
    io.out[0] <= regs[0] @[RegFile.scala 37:42]
    io.out[1] <= regs[0] @[RegFile.scala 37:42]
    
  module DelayPipe_28 : 
    input clock : Clock
    input reset : Reset
    output io : {flip en : UInt<1>, flip config : UInt<3>, flip in : UInt<32>, out : UInt<32>}
    
    wire _T : UInt<32>[5] @[DelayPipe.scala 22:29]
    _T[0] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[1] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[2] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[3] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[4] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    reg regs : UInt<32>[5], clock with : (reset => (reset, _T)) @[DelayPipe.scala 22:21]
    reg wptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 23:21]
    reg rptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 24:21]
    node _T_1 = lt(wptr, UInt<3>("h04")) @[DelayPipe.scala 26:23]
    node _T_2 = and(io.en, _T_1) @[DelayPipe.scala 26:14]
    when _T_2 : @[DelayPipe.scala 26:37]
      node _T_3 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 27:17]
      node _T_4 = tail(_T_3, 1) @[DelayPipe.scala 27:17]
      wptr <= _T_4 @[DelayPipe.scala 27:10]
      skip @[DelayPipe.scala 26:37]
    else : @[DelayPipe.scala 28:14]
      wptr <= UInt<1>("h00") @[DelayPipe.scala 29:10]
      skip @[DelayPipe.scala 28:14]
    node _T_5 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 32:12]
    node _T_6 = tail(_T_5, 1) @[DelayPipe.scala 32:12]
    node _T_7 = geq(_T_6, io.config) @[DelayPipe.scala 32:17]
    when _T_7 : @[DelayPipe.scala 32:30]
      node _T_8 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 33:18]
      node _T_9 = tail(_T_8, 1) @[DelayPipe.scala 33:18]
      node _T_10 = sub(_T_9, io.config) @[DelayPipe.scala 33:24]
      node _T_11 = tail(_T_10, 1) @[DelayPipe.scala 33:24]
      rptr <= _T_11 @[DelayPipe.scala 33:10]
      skip @[DelayPipe.scala 32:30]
    else : @[DelayPipe.scala 34:14]
      node _T_12 = add(UInt<3>("h06"), wptr) @[DelayPipe.scala 35:30]
      node _T_13 = tail(_T_12, 1) @[DelayPipe.scala 35:30]
      node _T_14 = sub(_T_13, io.config) @[DelayPipe.scala 35:37]
      node _T_15 = tail(_T_14, 1) @[DelayPipe.scala 35:37]
      rptr <= _T_15 @[DelayPipe.scala 35:10]
      skip @[DelayPipe.scala 34:14]
    node _T_16 = gt(io.config, UInt<1>("h00")) @[DelayPipe.scala 39:28]
    node _T_17 = and(io.en, _T_16) @[DelayPipe.scala 39:14]
    when _T_17 : @[DelayPipe.scala 39:35]
      regs[wptr] <= io.in @[DelayPipe.scala 40:16]
      skip @[DelayPipe.scala 39:35]
    reg cnt : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 43:20]
    node _T_18 = eq(io.en, UInt<1>("h00")) @[DelayPipe.scala 44:8]
    when _T_18 : @[DelayPipe.scala 44:15]
      cnt <= UInt<1>("h00") @[DelayPipe.scala 45:9]
      skip @[DelayPipe.scala 44:15]
    else : @[DelayPipe.scala 46:30]
      node _T_19 = lt(cnt, io.config) @[DelayPipe.scala 46:18]
      when _T_19 : @[DelayPipe.scala 46:30]
        node _T_20 = add(cnt, UInt<1>("h01")) @[DelayPipe.scala 47:16]
        node _T_21 = tail(_T_20, 1) @[DelayPipe.scala 47:16]
        cnt <= _T_21 @[DelayPipe.scala 47:9]
        skip @[DelayPipe.scala 46:30]
    node _T_22 = eq(UInt<1>("h00"), io.config) @[DelayPipe.scala 50:22]
    node _T_23 = and(io.en, _T_22) @[DelayPipe.scala 50:14]
    when _T_23 : @[DelayPipe.scala 50:37]
      io.out <= io.in @[DelayPipe.scala 51:12]
      skip @[DelayPipe.scala 50:37]
    else : @[DelayPipe.scala 52:43]
      node _T_24 = eq(cnt, io.config) @[DelayPipe.scala 52:28]
      node _T_25 = and(io.en, _T_24) @[DelayPipe.scala 52:20]
      when _T_25 : @[DelayPipe.scala 52:43]
        io.out <= regs[rptr] @[DelayPipe.scala 53:12]
        skip @[DelayPipe.scala 52:43]
      else : @[DelayPipe.scala 54:14]
        io.out <= UInt<1>("h00") @[DelayPipe.scala 55:12]
        skip @[DelayPipe.scala 54:14]
    
  module DelayPipe_29 : 
    input clock : Clock
    input reset : Reset
    output io : {flip en : UInt<1>, flip config : UInt<3>, flip in : UInt<32>, out : UInt<32>}
    
    wire _T : UInt<32>[5] @[DelayPipe.scala 22:29]
    _T[0] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[1] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[2] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[3] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[4] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    reg regs : UInt<32>[5], clock with : (reset => (reset, _T)) @[DelayPipe.scala 22:21]
    reg wptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 23:21]
    reg rptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 24:21]
    node _T_1 = lt(wptr, UInt<3>("h04")) @[DelayPipe.scala 26:23]
    node _T_2 = and(io.en, _T_1) @[DelayPipe.scala 26:14]
    when _T_2 : @[DelayPipe.scala 26:37]
      node _T_3 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 27:17]
      node _T_4 = tail(_T_3, 1) @[DelayPipe.scala 27:17]
      wptr <= _T_4 @[DelayPipe.scala 27:10]
      skip @[DelayPipe.scala 26:37]
    else : @[DelayPipe.scala 28:14]
      wptr <= UInt<1>("h00") @[DelayPipe.scala 29:10]
      skip @[DelayPipe.scala 28:14]
    node _T_5 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 32:12]
    node _T_6 = tail(_T_5, 1) @[DelayPipe.scala 32:12]
    node _T_7 = geq(_T_6, io.config) @[DelayPipe.scala 32:17]
    when _T_7 : @[DelayPipe.scala 32:30]
      node _T_8 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 33:18]
      node _T_9 = tail(_T_8, 1) @[DelayPipe.scala 33:18]
      node _T_10 = sub(_T_9, io.config) @[DelayPipe.scala 33:24]
      node _T_11 = tail(_T_10, 1) @[DelayPipe.scala 33:24]
      rptr <= _T_11 @[DelayPipe.scala 33:10]
      skip @[DelayPipe.scala 32:30]
    else : @[DelayPipe.scala 34:14]
      node _T_12 = add(UInt<3>("h06"), wptr) @[DelayPipe.scala 35:30]
      node _T_13 = tail(_T_12, 1) @[DelayPipe.scala 35:30]
      node _T_14 = sub(_T_13, io.config) @[DelayPipe.scala 35:37]
      node _T_15 = tail(_T_14, 1) @[DelayPipe.scala 35:37]
      rptr <= _T_15 @[DelayPipe.scala 35:10]
      skip @[DelayPipe.scala 34:14]
    node _T_16 = gt(io.config, UInt<1>("h00")) @[DelayPipe.scala 39:28]
    node _T_17 = and(io.en, _T_16) @[DelayPipe.scala 39:14]
    when _T_17 : @[DelayPipe.scala 39:35]
      regs[wptr] <= io.in @[DelayPipe.scala 40:16]
      skip @[DelayPipe.scala 39:35]
    reg cnt : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 43:20]
    node _T_18 = eq(io.en, UInt<1>("h00")) @[DelayPipe.scala 44:8]
    when _T_18 : @[DelayPipe.scala 44:15]
      cnt <= UInt<1>("h00") @[DelayPipe.scala 45:9]
      skip @[DelayPipe.scala 44:15]
    else : @[DelayPipe.scala 46:30]
      node _T_19 = lt(cnt, io.config) @[DelayPipe.scala 46:18]
      when _T_19 : @[DelayPipe.scala 46:30]
        node _T_20 = add(cnt, UInt<1>("h01")) @[DelayPipe.scala 47:16]
        node _T_21 = tail(_T_20, 1) @[DelayPipe.scala 47:16]
        cnt <= _T_21 @[DelayPipe.scala 47:9]
        skip @[DelayPipe.scala 46:30]
    node _T_22 = eq(UInt<1>("h00"), io.config) @[DelayPipe.scala 50:22]
    node _T_23 = and(io.en, _T_22) @[DelayPipe.scala 50:14]
    when _T_23 : @[DelayPipe.scala 50:37]
      io.out <= io.in @[DelayPipe.scala 51:12]
      skip @[DelayPipe.scala 50:37]
    else : @[DelayPipe.scala 52:43]
      node _T_24 = eq(cnt, io.config) @[DelayPipe.scala 52:28]
      node _T_25 = and(io.en, _T_24) @[DelayPipe.scala 52:20]
      when _T_25 : @[DelayPipe.scala 52:43]
        io.out <= regs[rptr] @[DelayPipe.scala 53:12]
        skip @[DelayPipe.scala 52:43]
      else : @[DelayPipe.scala 54:14]
        io.out <= UInt<1>("h00") @[DelayPipe.scala 55:12]
        skip @[DelayPipe.scala 54:14]
    
  module Muxn_44 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[6], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    node _T_10 = eq(UInt<3>("h05"), io.config) @[Mux.scala 80:60]
    node _T_11 = mux(_T_10, io.in[5], _T_9) @[Mux.scala 80:57]
    io.out <= _T_11 @[Multiplexer.scala 20:10]
    
  module Muxn_45 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[6], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    node _T_10 = eq(UInt<3>("h05"), io.config) @[Mux.scala 80:60]
    node _T_11 = mux(_T_10, io.in[5], _T_9) @[Mux.scala 80:57]
    io.out <= _T_11 @[Multiplexer.scala 20:10]
    
  module ConfigMem_30 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<1>, flip cfg_data : UInt<32>, out : UInt<48>[1]}
    
    wire _T : UInt<48>[1] @[ConfigMem.scala 27:29]
    _T[0] <= UInt<48>("h00") @[ConfigMem.scala 27:29]
    reg regs : UInt<48>[1], clock with : (reset => (reset, _T)) @[ConfigMem.scala 27:21]
    node _T_1 = eq(io.cfg_addr, UInt<1>("h00")) @[ConfigMem.scala 39:38]
    node _T_2 = and(io.cfg_en, _T_1) @[ConfigMem.scala 39:22]
    when _T_2 : @[ConfigMem.scala 39:47]
      node _T_3 = bits(regs[0], 47, 32) @[ConfigMem.scala 41:33]
      node _T_4 = cat(_T_3, io.cfg_data) @[Cat.scala 29:58]
      regs[0] <= _T_4 @[ConfigMem.scala 41:19]
      skip @[ConfigMem.scala 39:47]
    node _T_5 = eq(io.cfg_addr, UInt<1>("h01")) @[ConfigMem.scala 39:38]
    node _T_6 = and(io.cfg_en, _T_5) @[ConfigMem.scala 39:22]
    when _T_6 : @[ConfigMem.scala 39:47]
      node _T_7 = bits(regs[0], 31, 0) @[ConfigMem.scala 43:46]
      node _T_8 = cat(io.cfg_data, _T_7) @[Cat.scala 29:58]
      regs[0] <= _T_8 @[ConfigMem.scala 43:19]
      skip @[ConfigMem.scala 39:47]
    io.out[0] <= regs[0] @[ConfigMem.scala 52:45]
    
  module GPE_14 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<12>, flip cfg_data : UInt<32>, flip en : UInt<1>, flip in : UInt<32>[8], out : UInt<32>[1]}
    
    inst alu of ALU_14 @[PE.scala 50:19]
    alu.clock <= clock
    alu.reset <= reset
    inst rf of RF_14 @[PE.scala 51:18]
    rf.clock <= clock
    rf.reset <= reset
    inst DelayPipe of DelayPipe_28 @[PE.scala 52:54]
    DelayPipe.clock <= clock
    DelayPipe.reset <= reset
    inst DelayPipe_1 of DelayPipe_29 @[PE.scala 52:54]
    DelayPipe_1.clock <= clock
    DelayPipe_1.reset <= reset
    wire const : UInt<32> @[PE.scala 54:19]
    inst Muxn of Muxn_44 @[PE.scala 55:49]
    Muxn.clock <= clock
    Muxn.reset <= reset
    inst Muxn_1 of Muxn_45 @[PE.scala 55:49]
    Muxn_1.clock <= clock
    Muxn_1.reset <= reset
    Muxn.io.in[0] <= io.in[0] @[PE.scala 62:12]
    Muxn.io.in[1] <= io.in[1] @[PE.scala 62:12]
    Muxn.io.in[2] <= io.in[2] @[PE.scala 62:12]
    Muxn.io.in[3] <= io.in[3] @[PE.scala 62:12]
    Muxn.io.in[4] <= const @[PE.scala 64:12]
    Muxn.io.in[5] <= rf.io.out[1] @[PE.scala 66:12]
    DelayPipe.io.en <= io.en @[PE.scala 69:23]
    DelayPipe.io.in <= Muxn.io.out @[PE.scala 70:23]
    alu.io.in[0] <= DelayPipe.io.out @[PE.scala 71:18]
    Muxn_1.io.in[0] <= io.in[4] @[PE.scala 62:12]
    Muxn_1.io.in[1] <= io.in[5] @[PE.scala 62:12]
    Muxn_1.io.in[2] <= io.in[6] @[PE.scala 62:12]
    Muxn_1.io.in[3] <= io.in[7] @[PE.scala 62:12]
    Muxn_1.io.in[4] <= const @[PE.scala 64:12]
    Muxn_1.io.in[5] <= rf.io.out[1] @[PE.scala 66:12]
    DelayPipe_1.io.en <= io.en @[PE.scala 69:23]
    DelayPipe_1.io.in <= Muxn_1.io.out @[PE.scala 70:23]
    alu.io.in[1] <= DelayPipe_1.io.out @[PE.scala 71:18]
    rf.io.en <= io.en @[PE.scala 75:12]
    rf.io.in[0] <= alu.io.out @[PE.scala 76:15]
    io.out[0] <= rf.io.out[0] @[PE.scala 77:13]
    inst cfg of ConfigMem_30 @[PE.scala 89:19]
    cfg.clock <= clock
    cfg.reset <= reset
    node _T = bits(io.cfg_addr, 11, 2) @[PE.scala 90:63]
    node _T_1 = eq(UInt<6>("h034"), _T) @[PE.scala 90:48]
    node _T_2 = and(io.cfg_en, _T_1) @[PE.scala 90:30]
    cfg.io.cfg_en <= _T_2 @[PE.scala 90:17]
    node _T_3 = bits(io.cfg_addr, 1, 0) @[PE.scala 91:33]
    cfg.io.cfg_addr <= _T_3 @[PE.scala 91:19]
    cfg.io.cfg_data <= io.cfg_data @[PE.scala 92:19]
    wire cfgOut : UInt<48> @[PE.scala 96:20]
    cfgOut <= cfg.io.out[0] @[PE.scala 97:10]
    node _T_4 = bits(cfgOut, 31, 0) @[PE.scala 98:18]
    const <= _T_4 @[PE.scala 98:9]
    node _T_5 = bits(cfgOut, 35, 32) @[PE.scala 100:28]
    alu.io.config <= _T_5 @[PE.scala 100:19]
    rf.io.config is invalid @[PE.scala 107:18]
    node _T_6 = bits(cfgOut, 38, 36) @[PE.scala 113:38]
    DelayPipe.io.config <= _T_6 @[PE.scala 113:29]
    node _T_7 = bits(cfgOut, 41, 39) @[PE.scala 113:38]
    DelayPipe_1.io.config <= _T_7 @[PE.scala 113:29]
    node _T_8 = bits(cfgOut, 44, 42) @[PE.scala 121:32]
    Muxn.io.config <= _T_8 @[PE.scala 121:23]
    node _T_9 = bits(cfgOut, 47, 45) @[PE.scala 121:32]
    Muxn_1.io.config <= _T_9 @[PE.scala 121:23]
    
  module ALU_15 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<4>, flip in : UInt<32>[2], out : UInt<32>}
    
    node _T = bits(io.in[0], 31, 0) @[Operations.scala 122:31]
    node _T_1 = bits(io.in[0], 31, 0) @[Operations.scala 124:31]
    node _T_2 = bits(io.in[1], 31, 0) @[Operations.scala 124:49]
    node _T_3 = add(_T_1, _T_2) @[Operations.scala 124:41]
    node _T_4 = tail(_T_3, 1) @[Operations.scala 124:41]
    node _T_5 = bits(io.in[0], 31, 0) @[Operations.scala 126:31]
    node _T_6 = bits(io.in[1], 31, 0) @[Operations.scala 126:49]
    node _T_7 = sub(_T_5, _T_6) @[Operations.scala 126:41]
    node _T_8 = tail(_T_7, 1) @[Operations.scala 126:41]
    node _T_9 = bits(io.in[0], 31, 0) @[Operations.scala 128:31]
    node _T_10 = bits(io.in[1], 31, 0) @[Operations.scala 128:49]
    node _T_11 = mul(_T_9, _T_10) @[Operations.scala 128:41]
    node _T_12 = bits(io.in[0], 31, 0) @[Operations.scala 138:31]
    node _T_13 = bits(io.in[1], 31, 0) @[Operations.scala 138:49]
    node _T_14 = and(_T_12, _T_13) @[Operations.scala 138:41]
    node _T_15 = bits(io.in[0], 31, 0) @[Operations.scala 140:31]
    node _T_16 = bits(io.in[1], 31, 0) @[Operations.scala 140:49]
    node _T_17 = or(_T_15, _T_16) @[Operations.scala 140:41]
    node _T_18 = bits(io.in[0], 31, 0) @[Operations.scala 142:31]
    node _T_19 = bits(io.in[1], 31, 0) @[Operations.scala 142:49]
    node _T_20 = xor(_T_18, _T_19) @[Operations.scala 142:41]
    node _T_21 = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_22 = mux(_T_21, _T, UInt<1>("h00")) @[Mux.scala 80:57]
    node _T_23 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_24 = mux(_T_23, _T_4, _T_22) @[Mux.scala 80:57]
    node _T_25 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_26 = mux(_T_25, _T_8, _T_24) @[Mux.scala 80:57]
    node _T_27 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_28 = mux(_T_27, _T_11, _T_26) @[Mux.scala 80:57]
    node _T_29 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_30 = mux(_T_29, _T_14, _T_28) @[Mux.scala 80:57]
    node _T_31 = eq(UInt<3>("h05"), io.config) @[Mux.scala 80:60]
    node _T_32 = mux(_T_31, _T_17, _T_30) @[Mux.scala 80:57]
    node _T_33 = eq(UInt<3>("h06"), io.config) @[Mux.scala 80:60]
    node _T_34 = mux(_T_33, _T_20, _T_32) @[Mux.scala 80:57]
    io.out <= _T_34 @[ALU.scala 25:10]
    
  module RF_15 : 
    input clock : Clock
    input reset : Reset
    output io : {flip en : UInt<1>, flip config : UInt<0>, flip in : UInt<32>[1], out : UInt<32>[2]}
    
    wire _T : UInt<32>[1] @[RegFile.scala 24:29]
    _T[0] <= UInt<32>("h00") @[RegFile.scala 24:29]
    reg regs : UInt<32>[1], clock with : (reset => (reset, _T)) @[RegFile.scala 24:21]
    when io.en : @[RegFile.scala 34:16]
      regs[0] <= io.in[0] @[RegFile.scala 35:41]
      skip @[RegFile.scala 34:16]
    io.out[0] <= regs[0] @[RegFile.scala 37:42]
    io.out[1] <= regs[0] @[RegFile.scala 37:42]
    
  module DelayPipe_30 : 
    input clock : Clock
    input reset : Reset
    output io : {flip en : UInt<1>, flip config : UInt<3>, flip in : UInt<32>, out : UInt<32>}
    
    wire _T : UInt<32>[5] @[DelayPipe.scala 22:29]
    _T[0] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[1] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[2] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[3] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[4] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    reg regs : UInt<32>[5], clock with : (reset => (reset, _T)) @[DelayPipe.scala 22:21]
    reg wptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 23:21]
    reg rptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 24:21]
    node _T_1 = lt(wptr, UInt<3>("h04")) @[DelayPipe.scala 26:23]
    node _T_2 = and(io.en, _T_1) @[DelayPipe.scala 26:14]
    when _T_2 : @[DelayPipe.scala 26:37]
      node _T_3 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 27:17]
      node _T_4 = tail(_T_3, 1) @[DelayPipe.scala 27:17]
      wptr <= _T_4 @[DelayPipe.scala 27:10]
      skip @[DelayPipe.scala 26:37]
    else : @[DelayPipe.scala 28:14]
      wptr <= UInt<1>("h00") @[DelayPipe.scala 29:10]
      skip @[DelayPipe.scala 28:14]
    node _T_5 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 32:12]
    node _T_6 = tail(_T_5, 1) @[DelayPipe.scala 32:12]
    node _T_7 = geq(_T_6, io.config) @[DelayPipe.scala 32:17]
    when _T_7 : @[DelayPipe.scala 32:30]
      node _T_8 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 33:18]
      node _T_9 = tail(_T_8, 1) @[DelayPipe.scala 33:18]
      node _T_10 = sub(_T_9, io.config) @[DelayPipe.scala 33:24]
      node _T_11 = tail(_T_10, 1) @[DelayPipe.scala 33:24]
      rptr <= _T_11 @[DelayPipe.scala 33:10]
      skip @[DelayPipe.scala 32:30]
    else : @[DelayPipe.scala 34:14]
      node _T_12 = add(UInt<3>("h06"), wptr) @[DelayPipe.scala 35:30]
      node _T_13 = tail(_T_12, 1) @[DelayPipe.scala 35:30]
      node _T_14 = sub(_T_13, io.config) @[DelayPipe.scala 35:37]
      node _T_15 = tail(_T_14, 1) @[DelayPipe.scala 35:37]
      rptr <= _T_15 @[DelayPipe.scala 35:10]
      skip @[DelayPipe.scala 34:14]
    node _T_16 = gt(io.config, UInt<1>("h00")) @[DelayPipe.scala 39:28]
    node _T_17 = and(io.en, _T_16) @[DelayPipe.scala 39:14]
    when _T_17 : @[DelayPipe.scala 39:35]
      regs[wptr] <= io.in @[DelayPipe.scala 40:16]
      skip @[DelayPipe.scala 39:35]
    reg cnt : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 43:20]
    node _T_18 = eq(io.en, UInt<1>("h00")) @[DelayPipe.scala 44:8]
    when _T_18 : @[DelayPipe.scala 44:15]
      cnt <= UInt<1>("h00") @[DelayPipe.scala 45:9]
      skip @[DelayPipe.scala 44:15]
    else : @[DelayPipe.scala 46:30]
      node _T_19 = lt(cnt, io.config) @[DelayPipe.scala 46:18]
      when _T_19 : @[DelayPipe.scala 46:30]
        node _T_20 = add(cnt, UInt<1>("h01")) @[DelayPipe.scala 47:16]
        node _T_21 = tail(_T_20, 1) @[DelayPipe.scala 47:16]
        cnt <= _T_21 @[DelayPipe.scala 47:9]
        skip @[DelayPipe.scala 46:30]
    node _T_22 = eq(UInt<1>("h00"), io.config) @[DelayPipe.scala 50:22]
    node _T_23 = and(io.en, _T_22) @[DelayPipe.scala 50:14]
    when _T_23 : @[DelayPipe.scala 50:37]
      io.out <= io.in @[DelayPipe.scala 51:12]
      skip @[DelayPipe.scala 50:37]
    else : @[DelayPipe.scala 52:43]
      node _T_24 = eq(cnt, io.config) @[DelayPipe.scala 52:28]
      node _T_25 = and(io.en, _T_24) @[DelayPipe.scala 52:20]
      when _T_25 : @[DelayPipe.scala 52:43]
        io.out <= regs[rptr] @[DelayPipe.scala 53:12]
        skip @[DelayPipe.scala 52:43]
      else : @[DelayPipe.scala 54:14]
        io.out <= UInt<1>("h00") @[DelayPipe.scala 55:12]
        skip @[DelayPipe.scala 54:14]
    
  module DelayPipe_31 : 
    input clock : Clock
    input reset : Reset
    output io : {flip en : UInt<1>, flip config : UInt<3>, flip in : UInt<32>, out : UInt<32>}
    
    wire _T : UInt<32>[5] @[DelayPipe.scala 22:29]
    _T[0] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[1] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[2] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[3] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[4] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    reg regs : UInt<32>[5], clock with : (reset => (reset, _T)) @[DelayPipe.scala 22:21]
    reg wptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 23:21]
    reg rptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 24:21]
    node _T_1 = lt(wptr, UInt<3>("h04")) @[DelayPipe.scala 26:23]
    node _T_2 = and(io.en, _T_1) @[DelayPipe.scala 26:14]
    when _T_2 : @[DelayPipe.scala 26:37]
      node _T_3 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 27:17]
      node _T_4 = tail(_T_3, 1) @[DelayPipe.scala 27:17]
      wptr <= _T_4 @[DelayPipe.scala 27:10]
      skip @[DelayPipe.scala 26:37]
    else : @[DelayPipe.scala 28:14]
      wptr <= UInt<1>("h00") @[DelayPipe.scala 29:10]
      skip @[DelayPipe.scala 28:14]
    node _T_5 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 32:12]
    node _T_6 = tail(_T_5, 1) @[DelayPipe.scala 32:12]
    node _T_7 = geq(_T_6, io.config) @[DelayPipe.scala 32:17]
    when _T_7 : @[DelayPipe.scala 32:30]
      node _T_8 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 33:18]
      node _T_9 = tail(_T_8, 1) @[DelayPipe.scala 33:18]
      node _T_10 = sub(_T_9, io.config) @[DelayPipe.scala 33:24]
      node _T_11 = tail(_T_10, 1) @[DelayPipe.scala 33:24]
      rptr <= _T_11 @[DelayPipe.scala 33:10]
      skip @[DelayPipe.scala 32:30]
    else : @[DelayPipe.scala 34:14]
      node _T_12 = add(UInt<3>("h06"), wptr) @[DelayPipe.scala 35:30]
      node _T_13 = tail(_T_12, 1) @[DelayPipe.scala 35:30]
      node _T_14 = sub(_T_13, io.config) @[DelayPipe.scala 35:37]
      node _T_15 = tail(_T_14, 1) @[DelayPipe.scala 35:37]
      rptr <= _T_15 @[DelayPipe.scala 35:10]
      skip @[DelayPipe.scala 34:14]
    node _T_16 = gt(io.config, UInt<1>("h00")) @[DelayPipe.scala 39:28]
    node _T_17 = and(io.en, _T_16) @[DelayPipe.scala 39:14]
    when _T_17 : @[DelayPipe.scala 39:35]
      regs[wptr] <= io.in @[DelayPipe.scala 40:16]
      skip @[DelayPipe.scala 39:35]
    reg cnt : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 43:20]
    node _T_18 = eq(io.en, UInt<1>("h00")) @[DelayPipe.scala 44:8]
    when _T_18 : @[DelayPipe.scala 44:15]
      cnt <= UInt<1>("h00") @[DelayPipe.scala 45:9]
      skip @[DelayPipe.scala 44:15]
    else : @[DelayPipe.scala 46:30]
      node _T_19 = lt(cnt, io.config) @[DelayPipe.scala 46:18]
      when _T_19 : @[DelayPipe.scala 46:30]
        node _T_20 = add(cnt, UInt<1>("h01")) @[DelayPipe.scala 47:16]
        node _T_21 = tail(_T_20, 1) @[DelayPipe.scala 47:16]
        cnt <= _T_21 @[DelayPipe.scala 47:9]
        skip @[DelayPipe.scala 46:30]
    node _T_22 = eq(UInt<1>("h00"), io.config) @[DelayPipe.scala 50:22]
    node _T_23 = and(io.en, _T_22) @[DelayPipe.scala 50:14]
    when _T_23 : @[DelayPipe.scala 50:37]
      io.out <= io.in @[DelayPipe.scala 51:12]
      skip @[DelayPipe.scala 50:37]
    else : @[DelayPipe.scala 52:43]
      node _T_24 = eq(cnt, io.config) @[DelayPipe.scala 52:28]
      node _T_25 = and(io.en, _T_24) @[DelayPipe.scala 52:20]
      when _T_25 : @[DelayPipe.scala 52:43]
        io.out <= regs[rptr] @[DelayPipe.scala 53:12]
        skip @[DelayPipe.scala 52:43]
      else : @[DelayPipe.scala 54:14]
        io.out <= UInt<1>("h00") @[DelayPipe.scala 55:12]
        skip @[DelayPipe.scala 54:14]
    
  module Muxn_46 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[6], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    node _T_10 = eq(UInt<3>("h05"), io.config) @[Mux.scala 80:60]
    node _T_11 = mux(_T_10, io.in[5], _T_9) @[Mux.scala 80:57]
    io.out <= _T_11 @[Multiplexer.scala 20:10]
    
  module Muxn_47 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[6], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    node _T_10 = eq(UInt<3>("h05"), io.config) @[Mux.scala 80:60]
    node _T_11 = mux(_T_10, io.in[5], _T_9) @[Mux.scala 80:57]
    io.out <= _T_11 @[Multiplexer.scala 20:10]
    
  module ConfigMem_31 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<1>, flip cfg_data : UInt<32>, out : UInt<48>[1]}
    
    wire _T : UInt<48>[1] @[ConfigMem.scala 27:29]
    _T[0] <= UInt<48>("h00") @[ConfigMem.scala 27:29]
    reg regs : UInt<48>[1], clock with : (reset => (reset, _T)) @[ConfigMem.scala 27:21]
    node _T_1 = eq(io.cfg_addr, UInt<1>("h00")) @[ConfigMem.scala 39:38]
    node _T_2 = and(io.cfg_en, _T_1) @[ConfigMem.scala 39:22]
    when _T_2 : @[ConfigMem.scala 39:47]
      node _T_3 = bits(regs[0], 47, 32) @[ConfigMem.scala 41:33]
      node _T_4 = cat(_T_3, io.cfg_data) @[Cat.scala 29:58]
      regs[0] <= _T_4 @[ConfigMem.scala 41:19]
      skip @[ConfigMem.scala 39:47]
    node _T_5 = eq(io.cfg_addr, UInt<1>("h01")) @[ConfigMem.scala 39:38]
    node _T_6 = and(io.cfg_en, _T_5) @[ConfigMem.scala 39:22]
    when _T_6 : @[ConfigMem.scala 39:47]
      node _T_7 = bits(regs[0], 31, 0) @[ConfigMem.scala 43:46]
      node _T_8 = cat(io.cfg_data, _T_7) @[Cat.scala 29:58]
      regs[0] <= _T_8 @[ConfigMem.scala 43:19]
      skip @[ConfigMem.scala 39:47]
    io.out[0] <= regs[0] @[ConfigMem.scala 52:45]
    
  module GPE_15 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<12>, flip cfg_data : UInt<32>, flip en : UInt<1>, flip in : UInt<32>[8], out : UInt<32>[1]}
    
    inst alu of ALU_15 @[PE.scala 50:19]
    alu.clock <= clock
    alu.reset <= reset
    inst rf of RF_15 @[PE.scala 51:18]
    rf.clock <= clock
    rf.reset <= reset
    inst DelayPipe of DelayPipe_30 @[PE.scala 52:54]
    DelayPipe.clock <= clock
    DelayPipe.reset <= reset
    inst DelayPipe_1 of DelayPipe_31 @[PE.scala 52:54]
    DelayPipe_1.clock <= clock
    DelayPipe_1.reset <= reset
    wire const : UInt<32> @[PE.scala 54:19]
    inst Muxn of Muxn_46 @[PE.scala 55:49]
    Muxn.clock <= clock
    Muxn.reset <= reset
    inst Muxn_1 of Muxn_47 @[PE.scala 55:49]
    Muxn_1.clock <= clock
    Muxn_1.reset <= reset
    Muxn.io.in[0] <= io.in[0] @[PE.scala 62:12]
    Muxn.io.in[1] <= io.in[1] @[PE.scala 62:12]
    Muxn.io.in[2] <= io.in[2] @[PE.scala 62:12]
    Muxn.io.in[3] <= io.in[3] @[PE.scala 62:12]
    Muxn.io.in[4] <= const @[PE.scala 64:12]
    Muxn.io.in[5] <= rf.io.out[1] @[PE.scala 66:12]
    DelayPipe.io.en <= io.en @[PE.scala 69:23]
    DelayPipe.io.in <= Muxn.io.out @[PE.scala 70:23]
    alu.io.in[0] <= DelayPipe.io.out @[PE.scala 71:18]
    Muxn_1.io.in[0] <= io.in[4] @[PE.scala 62:12]
    Muxn_1.io.in[1] <= io.in[5] @[PE.scala 62:12]
    Muxn_1.io.in[2] <= io.in[6] @[PE.scala 62:12]
    Muxn_1.io.in[3] <= io.in[7] @[PE.scala 62:12]
    Muxn_1.io.in[4] <= const @[PE.scala 64:12]
    Muxn_1.io.in[5] <= rf.io.out[1] @[PE.scala 66:12]
    DelayPipe_1.io.en <= io.en @[PE.scala 69:23]
    DelayPipe_1.io.in <= Muxn_1.io.out @[PE.scala 70:23]
    alu.io.in[1] <= DelayPipe_1.io.out @[PE.scala 71:18]
    rf.io.en <= io.en @[PE.scala 75:12]
    rf.io.in[0] <= alu.io.out @[PE.scala 76:15]
    io.out[0] <= rf.io.out[0] @[PE.scala 77:13]
    inst cfg of ConfigMem_31 @[PE.scala 89:19]
    cfg.clock <= clock
    cfg.reset <= reset
    node _T = bits(io.cfg_addr, 11, 2) @[PE.scala 90:63]
    node _T_1 = eq(UInt<6>("h035"), _T) @[PE.scala 90:48]
    node _T_2 = and(io.cfg_en, _T_1) @[PE.scala 90:30]
    cfg.io.cfg_en <= _T_2 @[PE.scala 90:17]
    node _T_3 = bits(io.cfg_addr, 1, 0) @[PE.scala 91:33]
    cfg.io.cfg_addr <= _T_3 @[PE.scala 91:19]
    cfg.io.cfg_data <= io.cfg_data @[PE.scala 92:19]
    wire cfgOut : UInt<48> @[PE.scala 96:20]
    cfgOut <= cfg.io.out[0] @[PE.scala 97:10]
    node _T_4 = bits(cfgOut, 31, 0) @[PE.scala 98:18]
    const <= _T_4 @[PE.scala 98:9]
    node _T_5 = bits(cfgOut, 35, 32) @[PE.scala 100:28]
    alu.io.config <= _T_5 @[PE.scala 100:19]
    rf.io.config is invalid @[PE.scala 107:18]
    node _T_6 = bits(cfgOut, 38, 36) @[PE.scala 113:38]
    DelayPipe.io.config <= _T_6 @[PE.scala 113:29]
    node _T_7 = bits(cfgOut, 41, 39) @[PE.scala 113:38]
    DelayPipe_1.io.config <= _T_7 @[PE.scala 113:29]
    node _T_8 = bits(cfgOut, 44, 42) @[PE.scala 121:32]
    Muxn.io.config <= _T_8 @[PE.scala 121:23]
    node _T_9 = bits(cfgOut, 47, 45) @[PE.scala 121:32]
    Muxn_1.io.config <= _T_9 @[PE.scala 121:23]
    
  module ALU_16 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<4>, flip in : UInt<32>[2], out : UInt<32>}
    
    node _T = bits(io.in[0], 31, 0) @[Operations.scala 122:31]
    node _T_1 = bits(io.in[0], 31, 0) @[Operations.scala 124:31]
    node _T_2 = bits(io.in[1], 31, 0) @[Operations.scala 124:49]
    node _T_3 = add(_T_1, _T_2) @[Operations.scala 124:41]
    node _T_4 = tail(_T_3, 1) @[Operations.scala 124:41]
    node _T_5 = bits(io.in[0], 31, 0) @[Operations.scala 126:31]
    node _T_6 = bits(io.in[1], 31, 0) @[Operations.scala 126:49]
    node _T_7 = sub(_T_5, _T_6) @[Operations.scala 126:41]
    node _T_8 = tail(_T_7, 1) @[Operations.scala 126:41]
    node _T_9 = bits(io.in[0], 31, 0) @[Operations.scala 128:31]
    node _T_10 = bits(io.in[1], 31, 0) @[Operations.scala 128:49]
    node _T_11 = mul(_T_9, _T_10) @[Operations.scala 128:41]
    node _T_12 = bits(io.in[0], 31, 0) @[Operations.scala 138:31]
    node _T_13 = bits(io.in[1], 31, 0) @[Operations.scala 138:49]
    node _T_14 = and(_T_12, _T_13) @[Operations.scala 138:41]
    node _T_15 = bits(io.in[0], 31, 0) @[Operations.scala 140:31]
    node _T_16 = bits(io.in[1], 31, 0) @[Operations.scala 140:49]
    node _T_17 = or(_T_15, _T_16) @[Operations.scala 140:41]
    node _T_18 = bits(io.in[0], 31, 0) @[Operations.scala 142:31]
    node _T_19 = bits(io.in[1], 31, 0) @[Operations.scala 142:49]
    node _T_20 = xor(_T_18, _T_19) @[Operations.scala 142:41]
    node _T_21 = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_22 = mux(_T_21, _T, UInt<1>("h00")) @[Mux.scala 80:57]
    node _T_23 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_24 = mux(_T_23, _T_4, _T_22) @[Mux.scala 80:57]
    node _T_25 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_26 = mux(_T_25, _T_8, _T_24) @[Mux.scala 80:57]
    node _T_27 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_28 = mux(_T_27, _T_11, _T_26) @[Mux.scala 80:57]
    node _T_29 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_30 = mux(_T_29, _T_14, _T_28) @[Mux.scala 80:57]
    node _T_31 = eq(UInt<3>("h05"), io.config) @[Mux.scala 80:60]
    node _T_32 = mux(_T_31, _T_17, _T_30) @[Mux.scala 80:57]
    node _T_33 = eq(UInt<3>("h06"), io.config) @[Mux.scala 80:60]
    node _T_34 = mux(_T_33, _T_20, _T_32) @[Mux.scala 80:57]
    io.out <= _T_34 @[ALU.scala 25:10]
    
  module RF_16 : 
    input clock : Clock
    input reset : Reset
    output io : {flip en : UInt<1>, flip config : UInt<0>, flip in : UInt<32>[1], out : UInt<32>[2]}
    
    wire _T : UInt<32>[1] @[RegFile.scala 24:29]
    _T[0] <= UInt<32>("h00") @[RegFile.scala 24:29]
    reg regs : UInt<32>[1], clock with : (reset => (reset, _T)) @[RegFile.scala 24:21]
    when io.en : @[RegFile.scala 34:16]
      regs[0] <= io.in[0] @[RegFile.scala 35:41]
      skip @[RegFile.scala 34:16]
    io.out[0] <= regs[0] @[RegFile.scala 37:42]
    io.out[1] <= regs[0] @[RegFile.scala 37:42]
    
  module DelayPipe_32 : 
    input clock : Clock
    input reset : Reset
    output io : {flip en : UInt<1>, flip config : UInt<3>, flip in : UInt<32>, out : UInt<32>}
    
    wire _T : UInt<32>[5] @[DelayPipe.scala 22:29]
    _T[0] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[1] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[2] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[3] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[4] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    reg regs : UInt<32>[5], clock with : (reset => (reset, _T)) @[DelayPipe.scala 22:21]
    reg wptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 23:21]
    reg rptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 24:21]
    node _T_1 = lt(wptr, UInt<3>("h04")) @[DelayPipe.scala 26:23]
    node _T_2 = and(io.en, _T_1) @[DelayPipe.scala 26:14]
    when _T_2 : @[DelayPipe.scala 26:37]
      node _T_3 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 27:17]
      node _T_4 = tail(_T_3, 1) @[DelayPipe.scala 27:17]
      wptr <= _T_4 @[DelayPipe.scala 27:10]
      skip @[DelayPipe.scala 26:37]
    else : @[DelayPipe.scala 28:14]
      wptr <= UInt<1>("h00") @[DelayPipe.scala 29:10]
      skip @[DelayPipe.scala 28:14]
    node _T_5 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 32:12]
    node _T_6 = tail(_T_5, 1) @[DelayPipe.scala 32:12]
    node _T_7 = geq(_T_6, io.config) @[DelayPipe.scala 32:17]
    when _T_7 : @[DelayPipe.scala 32:30]
      node _T_8 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 33:18]
      node _T_9 = tail(_T_8, 1) @[DelayPipe.scala 33:18]
      node _T_10 = sub(_T_9, io.config) @[DelayPipe.scala 33:24]
      node _T_11 = tail(_T_10, 1) @[DelayPipe.scala 33:24]
      rptr <= _T_11 @[DelayPipe.scala 33:10]
      skip @[DelayPipe.scala 32:30]
    else : @[DelayPipe.scala 34:14]
      node _T_12 = add(UInt<3>("h06"), wptr) @[DelayPipe.scala 35:30]
      node _T_13 = tail(_T_12, 1) @[DelayPipe.scala 35:30]
      node _T_14 = sub(_T_13, io.config) @[DelayPipe.scala 35:37]
      node _T_15 = tail(_T_14, 1) @[DelayPipe.scala 35:37]
      rptr <= _T_15 @[DelayPipe.scala 35:10]
      skip @[DelayPipe.scala 34:14]
    node _T_16 = gt(io.config, UInt<1>("h00")) @[DelayPipe.scala 39:28]
    node _T_17 = and(io.en, _T_16) @[DelayPipe.scala 39:14]
    when _T_17 : @[DelayPipe.scala 39:35]
      regs[wptr] <= io.in @[DelayPipe.scala 40:16]
      skip @[DelayPipe.scala 39:35]
    reg cnt : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 43:20]
    node _T_18 = eq(io.en, UInt<1>("h00")) @[DelayPipe.scala 44:8]
    when _T_18 : @[DelayPipe.scala 44:15]
      cnt <= UInt<1>("h00") @[DelayPipe.scala 45:9]
      skip @[DelayPipe.scala 44:15]
    else : @[DelayPipe.scala 46:30]
      node _T_19 = lt(cnt, io.config) @[DelayPipe.scala 46:18]
      when _T_19 : @[DelayPipe.scala 46:30]
        node _T_20 = add(cnt, UInt<1>("h01")) @[DelayPipe.scala 47:16]
        node _T_21 = tail(_T_20, 1) @[DelayPipe.scala 47:16]
        cnt <= _T_21 @[DelayPipe.scala 47:9]
        skip @[DelayPipe.scala 46:30]
    node _T_22 = eq(UInt<1>("h00"), io.config) @[DelayPipe.scala 50:22]
    node _T_23 = and(io.en, _T_22) @[DelayPipe.scala 50:14]
    when _T_23 : @[DelayPipe.scala 50:37]
      io.out <= io.in @[DelayPipe.scala 51:12]
      skip @[DelayPipe.scala 50:37]
    else : @[DelayPipe.scala 52:43]
      node _T_24 = eq(cnt, io.config) @[DelayPipe.scala 52:28]
      node _T_25 = and(io.en, _T_24) @[DelayPipe.scala 52:20]
      when _T_25 : @[DelayPipe.scala 52:43]
        io.out <= regs[rptr] @[DelayPipe.scala 53:12]
        skip @[DelayPipe.scala 52:43]
      else : @[DelayPipe.scala 54:14]
        io.out <= UInt<1>("h00") @[DelayPipe.scala 55:12]
        skip @[DelayPipe.scala 54:14]
    
  module DelayPipe_33 : 
    input clock : Clock
    input reset : Reset
    output io : {flip en : UInt<1>, flip config : UInt<3>, flip in : UInt<32>, out : UInt<32>}
    
    wire _T : UInt<32>[5] @[DelayPipe.scala 22:29]
    _T[0] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[1] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[2] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[3] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[4] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    reg regs : UInt<32>[5], clock with : (reset => (reset, _T)) @[DelayPipe.scala 22:21]
    reg wptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 23:21]
    reg rptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 24:21]
    node _T_1 = lt(wptr, UInt<3>("h04")) @[DelayPipe.scala 26:23]
    node _T_2 = and(io.en, _T_1) @[DelayPipe.scala 26:14]
    when _T_2 : @[DelayPipe.scala 26:37]
      node _T_3 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 27:17]
      node _T_4 = tail(_T_3, 1) @[DelayPipe.scala 27:17]
      wptr <= _T_4 @[DelayPipe.scala 27:10]
      skip @[DelayPipe.scala 26:37]
    else : @[DelayPipe.scala 28:14]
      wptr <= UInt<1>("h00") @[DelayPipe.scala 29:10]
      skip @[DelayPipe.scala 28:14]
    node _T_5 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 32:12]
    node _T_6 = tail(_T_5, 1) @[DelayPipe.scala 32:12]
    node _T_7 = geq(_T_6, io.config) @[DelayPipe.scala 32:17]
    when _T_7 : @[DelayPipe.scala 32:30]
      node _T_8 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 33:18]
      node _T_9 = tail(_T_8, 1) @[DelayPipe.scala 33:18]
      node _T_10 = sub(_T_9, io.config) @[DelayPipe.scala 33:24]
      node _T_11 = tail(_T_10, 1) @[DelayPipe.scala 33:24]
      rptr <= _T_11 @[DelayPipe.scala 33:10]
      skip @[DelayPipe.scala 32:30]
    else : @[DelayPipe.scala 34:14]
      node _T_12 = add(UInt<3>("h06"), wptr) @[DelayPipe.scala 35:30]
      node _T_13 = tail(_T_12, 1) @[DelayPipe.scala 35:30]
      node _T_14 = sub(_T_13, io.config) @[DelayPipe.scala 35:37]
      node _T_15 = tail(_T_14, 1) @[DelayPipe.scala 35:37]
      rptr <= _T_15 @[DelayPipe.scala 35:10]
      skip @[DelayPipe.scala 34:14]
    node _T_16 = gt(io.config, UInt<1>("h00")) @[DelayPipe.scala 39:28]
    node _T_17 = and(io.en, _T_16) @[DelayPipe.scala 39:14]
    when _T_17 : @[DelayPipe.scala 39:35]
      regs[wptr] <= io.in @[DelayPipe.scala 40:16]
      skip @[DelayPipe.scala 39:35]
    reg cnt : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 43:20]
    node _T_18 = eq(io.en, UInt<1>("h00")) @[DelayPipe.scala 44:8]
    when _T_18 : @[DelayPipe.scala 44:15]
      cnt <= UInt<1>("h00") @[DelayPipe.scala 45:9]
      skip @[DelayPipe.scala 44:15]
    else : @[DelayPipe.scala 46:30]
      node _T_19 = lt(cnt, io.config) @[DelayPipe.scala 46:18]
      when _T_19 : @[DelayPipe.scala 46:30]
        node _T_20 = add(cnt, UInt<1>("h01")) @[DelayPipe.scala 47:16]
        node _T_21 = tail(_T_20, 1) @[DelayPipe.scala 47:16]
        cnt <= _T_21 @[DelayPipe.scala 47:9]
        skip @[DelayPipe.scala 46:30]
    node _T_22 = eq(UInt<1>("h00"), io.config) @[DelayPipe.scala 50:22]
    node _T_23 = and(io.en, _T_22) @[DelayPipe.scala 50:14]
    when _T_23 : @[DelayPipe.scala 50:37]
      io.out <= io.in @[DelayPipe.scala 51:12]
      skip @[DelayPipe.scala 50:37]
    else : @[DelayPipe.scala 52:43]
      node _T_24 = eq(cnt, io.config) @[DelayPipe.scala 52:28]
      node _T_25 = and(io.en, _T_24) @[DelayPipe.scala 52:20]
      when _T_25 : @[DelayPipe.scala 52:43]
        io.out <= regs[rptr] @[DelayPipe.scala 53:12]
        skip @[DelayPipe.scala 52:43]
      else : @[DelayPipe.scala 54:14]
        io.out <= UInt<1>("h00") @[DelayPipe.scala 55:12]
        skip @[DelayPipe.scala 54:14]
    
  module Muxn_48 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[6], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    node _T_10 = eq(UInt<3>("h05"), io.config) @[Mux.scala 80:60]
    node _T_11 = mux(_T_10, io.in[5], _T_9) @[Mux.scala 80:57]
    io.out <= _T_11 @[Multiplexer.scala 20:10]
    
  module Muxn_49 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[6], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    node _T_10 = eq(UInt<3>("h05"), io.config) @[Mux.scala 80:60]
    node _T_11 = mux(_T_10, io.in[5], _T_9) @[Mux.scala 80:57]
    io.out <= _T_11 @[Multiplexer.scala 20:10]
    
  module ConfigMem_32 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<1>, flip cfg_data : UInt<32>, out : UInt<48>[1]}
    
    wire _T : UInt<48>[1] @[ConfigMem.scala 27:29]
    _T[0] <= UInt<48>("h00") @[ConfigMem.scala 27:29]
    reg regs : UInt<48>[1], clock with : (reset => (reset, _T)) @[ConfigMem.scala 27:21]
    node _T_1 = eq(io.cfg_addr, UInt<1>("h00")) @[ConfigMem.scala 39:38]
    node _T_2 = and(io.cfg_en, _T_1) @[ConfigMem.scala 39:22]
    when _T_2 : @[ConfigMem.scala 39:47]
      node _T_3 = bits(regs[0], 47, 32) @[ConfigMem.scala 41:33]
      node _T_4 = cat(_T_3, io.cfg_data) @[Cat.scala 29:58]
      regs[0] <= _T_4 @[ConfigMem.scala 41:19]
      skip @[ConfigMem.scala 39:47]
    node _T_5 = eq(io.cfg_addr, UInt<1>("h01")) @[ConfigMem.scala 39:38]
    node _T_6 = and(io.cfg_en, _T_5) @[ConfigMem.scala 39:22]
    when _T_6 : @[ConfigMem.scala 39:47]
      node _T_7 = bits(regs[0], 31, 0) @[ConfigMem.scala 43:46]
      node _T_8 = cat(io.cfg_data, _T_7) @[Cat.scala 29:58]
      regs[0] <= _T_8 @[ConfigMem.scala 43:19]
      skip @[ConfigMem.scala 39:47]
    io.out[0] <= regs[0] @[ConfigMem.scala 52:45]
    
  module GPE_16 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<12>, flip cfg_data : UInt<32>, flip en : UInt<1>, flip in : UInt<32>[8], out : UInt<32>[1]}
    
    inst alu of ALU_16 @[PE.scala 50:19]
    alu.clock <= clock
    alu.reset <= reset
    inst rf of RF_16 @[PE.scala 51:18]
    rf.clock <= clock
    rf.reset <= reset
    inst DelayPipe of DelayPipe_32 @[PE.scala 52:54]
    DelayPipe.clock <= clock
    DelayPipe.reset <= reset
    inst DelayPipe_1 of DelayPipe_33 @[PE.scala 52:54]
    DelayPipe_1.clock <= clock
    DelayPipe_1.reset <= reset
    wire const : UInt<32> @[PE.scala 54:19]
    inst Muxn of Muxn_48 @[PE.scala 55:49]
    Muxn.clock <= clock
    Muxn.reset <= reset
    inst Muxn_1 of Muxn_49 @[PE.scala 55:49]
    Muxn_1.clock <= clock
    Muxn_1.reset <= reset
    Muxn.io.in[0] <= io.in[0] @[PE.scala 62:12]
    Muxn.io.in[1] <= io.in[1] @[PE.scala 62:12]
    Muxn.io.in[2] <= io.in[2] @[PE.scala 62:12]
    Muxn.io.in[3] <= io.in[3] @[PE.scala 62:12]
    Muxn.io.in[4] <= const @[PE.scala 64:12]
    Muxn.io.in[5] <= rf.io.out[1] @[PE.scala 66:12]
    DelayPipe.io.en <= io.en @[PE.scala 69:23]
    DelayPipe.io.in <= Muxn.io.out @[PE.scala 70:23]
    alu.io.in[0] <= DelayPipe.io.out @[PE.scala 71:18]
    Muxn_1.io.in[0] <= io.in[4] @[PE.scala 62:12]
    Muxn_1.io.in[1] <= io.in[5] @[PE.scala 62:12]
    Muxn_1.io.in[2] <= io.in[6] @[PE.scala 62:12]
    Muxn_1.io.in[3] <= io.in[7] @[PE.scala 62:12]
    Muxn_1.io.in[4] <= const @[PE.scala 64:12]
    Muxn_1.io.in[5] <= rf.io.out[1] @[PE.scala 66:12]
    DelayPipe_1.io.en <= io.en @[PE.scala 69:23]
    DelayPipe_1.io.in <= Muxn_1.io.out @[PE.scala 70:23]
    alu.io.in[1] <= DelayPipe_1.io.out @[PE.scala 71:18]
    rf.io.en <= io.en @[PE.scala 75:12]
    rf.io.in[0] <= alu.io.out @[PE.scala 76:15]
    io.out[0] <= rf.io.out[0] @[PE.scala 77:13]
    inst cfg of ConfigMem_32 @[PE.scala 89:19]
    cfg.clock <= clock
    cfg.reset <= reset
    node _T = bits(io.cfg_addr, 11, 2) @[PE.scala 90:63]
    node _T_1 = eq(UInt<7>("h040"), _T) @[PE.scala 90:48]
    node _T_2 = and(io.cfg_en, _T_1) @[PE.scala 90:30]
    cfg.io.cfg_en <= _T_2 @[PE.scala 90:17]
    node _T_3 = bits(io.cfg_addr, 1, 0) @[PE.scala 91:33]
    cfg.io.cfg_addr <= _T_3 @[PE.scala 91:19]
    cfg.io.cfg_data <= io.cfg_data @[PE.scala 92:19]
    wire cfgOut : UInt<48> @[PE.scala 96:20]
    cfgOut <= cfg.io.out[0] @[PE.scala 97:10]
    node _T_4 = bits(cfgOut, 31, 0) @[PE.scala 98:18]
    const <= _T_4 @[PE.scala 98:9]
    node _T_5 = bits(cfgOut, 35, 32) @[PE.scala 100:28]
    alu.io.config <= _T_5 @[PE.scala 100:19]
    rf.io.config is invalid @[PE.scala 107:18]
    node _T_6 = bits(cfgOut, 38, 36) @[PE.scala 113:38]
    DelayPipe.io.config <= _T_6 @[PE.scala 113:29]
    node _T_7 = bits(cfgOut, 41, 39) @[PE.scala 113:38]
    DelayPipe_1.io.config <= _T_7 @[PE.scala 113:29]
    node _T_8 = bits(cfgOut, 44, 42) @[PE.scala 121:32]
    Muxn.io.config <= _T_8 @[PE.scala 121:23]
    node _T_9 = bits(cfgOut, 47, 45) @[PE.scala 121:32]
    Muxn_1.io.config <= _T_9 @[PE.scala 121:23]
    
  module ALU_17 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<4>, flip in : UInt<32>[2], out : UInt<32>}
    
    node _T = bits(io.in[0], 31, 0) @[Operations.scala 122:31]
    node _T_1 = bits(io.in[0], 31, 0) @[Operations.scala 124:31]
    node _T_2 = bits(io.in[1], 31, 0) @[Operations.scala 124:49]
    node _T_3 = add(_T_1, _T_2) @[Operations.scala 124:41]
    node _T_4 = tail(_T_3, 1) @[Operations.scala 124:41]
    node _T_5 = bits(io.in[0], 31, 0) @[Operations.scala 126:31]
    node _T_6 = bits(io.in[1], 31, 0) @[Operations.scala 126:49]
    node _T_7 = sub(_T_5, _T_6) @[Operations.scala 126:41]
    node _T_8 = tail(_T_7, 1) @[Operations.scala 126:41]
    node _T_9 = bits(io.in[0], 31, 0) @[Operations.scala 128:31]
    node _T_10 = bits(io.in[1], 31, 0) @[Operations.scala 128:49]
    node _T_11 = mul(_T_9, _T_10) @[Operations.scala 128:41]
    node _T_12 = bits(io.in[0], 31, 0) @[Operations.scala 138:31]
    node _T_13 = bits(io.in[1], 31, 0) @[Operations.scala 138:49]
    node _T_14 = and(_T_12, _T_13) @[Operations.scala 138:41]
    node _T_15 = bits(io.in[0], 31, 0) @[Operations.scala 140:31]
    node _T_16 = bits(io.in[1], 31, 0) @[Operations.scala 140:49]
    node _T_17 = or(_T_15, _T_16) @[Operations.scala 140:41]
    node _T_18 = bits(io.in[0], 31, 0) @[Operations.scala 142:31]
    node _T_19 = bits(io.in[1], 31, 0) @[Operations.scala 142:49]
    node _T_20 = xor(_T_18, _T_19) @[Operations.scala 142:41]
    node _T_21 = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_22 = mux(_T_21, _T, UInt<1>("h00")) @[Mux.scala 80:57]
    node _T_23 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_24 = mux(_T_23, _T_4, _T_22) @[Mux.scala 80:57]
    node _T_25 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_26 = mux(_T_25, _T_8, _T_24) @[Mux.scala 80:57]
    node _T_27 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_28 = mux(_T_27, _T_11, _T_26) @[Mux.scala 80:57]
    node _T_29 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_30 = mux(_T_29, _T_14, _T_28) @[Mux.scala 80:57]
    node _T_31 = eq(UInt<3>("h05"), io.config) @[Mux.scala 80:60]
    node _T_32 = mux(_T_31, _T_17, _T_30) @[Mux.scala 80:57]
    node _T_33 = eq(UInt<3>("h06"), io.config) @[Mux.scala 80:60]
    node _T_34 = mux(_T_33, _T_20, _T_32) @[Mux.scala 80:57]
    io.out <= _T_34 @[ALU.scala 25:10]
    
  module RF_17 : 
    input clock : Clock
    input reset : Reset
    output io : {flip en : UInt<1>, flip config : UInt<0>, flip in : UInt<32>[1], out : UInt<32>[2]}
    
    wire _T : UInt<32>[1] @[RegFile.scala 24:29]
    _T[0] <= UInt<32>("h00") @[RegFile.scala 24:29]
    reg regs : UInt<32>[1], clock with : (reset => (reset, _T)) @[RegFile.scala 24:21]
    when io.en : @[RegFile.scala 34:16]
      regs[0] <= io.in[0] @[RegFile.scala 35:41]
      skip @[RegFile.scala 34:16]
    io.out[0] <= regs[0] @[RegFile.scala 37:42]
    io.out[1] <= regs[0] @[RegFile.scala 37:42]
    
  module DelayPipe_34 : 
    input clock : Clock
    input reset : Reset
    output io : {flip en : UInt<1>, flip config : UInt<3>, flip in : UInt<32>, out : UInt<32>}
    
    wire _T : UInt<32>[5] @[DelayPipe.scala 22:29]
    _T[0] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[1] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[2] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[3] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[4] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    reg regs : UInt<32>[5], clock with : (reset => (reset, _T)) @[DelayPipe.scala 22:21]
    reg wptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 23:21]
    reg rptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 24:21]
    node _T_1 = lt(wptr, UInt<3>("h04")) @[DelayPipe.scala 26:23]
    node _T_2 = and(io.en, _T_1) @[DelayPipe.scala 26:14]
    when _T_2 : @[DelayPipe.scala 26:37]
      node _T_3 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 27:17]
      node _T_4 = tail(_T_3, 1) @[DelayPipe.scala 27:17]
      wptr <= _T_4 @[DelayPipe.scala 27:10]
      skip @[DelayPipe.scala 26:37]
    else : @[DelayPipe.scala 28:14]
      wptr <= UInt<1>("h00") @[DelayPipe.scala 29:10]
      skip @[DelayPipe.scala 28:14]
    node _T_5 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 32:12]
    node _T_6 = tail(_T_5, 1) @[DelayPipe.scala 32:12]
    node _T_7 = geq(_T_6, io.config) @[DelayPipe.scala 32:17]
    when _T_7 : @[DelayPipe.scala 32:30]
      node _T_8 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 33:18]
      node _T_9 = tail(_T_8, 1) @[DelayPipe.scala 33:18]
      node _T_10 = sub(_T_9, io.config) @[DelayPipe.scala 33:24]
      node _T_11 = tail(_T_10, 1) @[DelayPipe.scala 33:24]
      rptr <= _T_11 @[DelayPipe.scala 33:10]
      skip @[DelayPipe.scala 32:30]
    else : @[DelayPipe.scala 34:14]
      node _T_12 = add(UInt<3>("h06"), wptr) @[DelayPipe.scala 35:30]
      node _T_13 = tail(_T_12, 1) @[DelayPipe.scala 35:30]
      node _T_14 = sub(_T_13, io.config) @[DelayPipe.scala 35:37]
      node _T_15 = tail(_T_14, 1) @[DelayPipe.scala 35:37]
      rptr <= _T_15 @[DelayPipe.scala 35:10]
      skip @[DelayPipe.scala 34:14]
    node _T_16 = gt(io.config, UInt<1>("h00")) @[DelayPipe.scala 39:28]
    node _T_17 = and(io.en, _T_16) @[DelayPipe.scala 39:14]
    when _T_17 : @[DelayPipe.scala 39:35]
      regs[wptr] <= io.in @[DelayPipe.scala 40:16]
      skip @[DelayPipe.scala 39:35]
    reg cnt : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 43:20]
    node _T_18 = eq(io.en, UInt<1>("h00")) @[DelayPipe.scala 44:8]
    when _T_18 : @[DelayPipe.scala 44:15]
      cnt <= UInt<1>("h00") @[DelayPipe.scala 45:9]
      skip @[DelayPipe.scala 44:15]
    else : @[DelayPipe.scala 46:30]
      node _T_19 = lt(cnt, io.config) @[DelayPipe.scala 46:18]
      when _T_19 : @[DelayPipe.scala 46:30]
        node _T_20 = add(cnt, UInt<1>("h01")) @[DelayPipe.scala 47:16]
        node _T_21 = tail(_T_20, 1) @[DelayPipe.scala 47:16]
        cnt <= _T_21 @[DelayPipe.scala 47:9]
        skip @[DelayPipe.scala 46:30]
    node _T_22 = eq(UInt<1>("h00"), io.config) @[DelayPipe.scala 50:22]
    node _T_23 = and(io.en, _T_22) @[DelayPipe.scala 50:14]
    when _T_23 : @[DelayPipe.scala 50:37]
      io.out <= io.in @[DelayPipe.scala 51:12]
      skip @[DelayPipe.scala 50:37]
    else : @[DelayPipe.scala 52:43]
      node _T_24 = eq(cnt, io.config) @[DelayPipe.scala 52:28]
      node _T_25 = and(io.en, _T_24) @[DelayPipe.scala 52:20]
      when _T_25 : @[DelayPipe.scala 52:43]
        io.out <= regs[rptr] @[DelayPipe.scala 53:12]
        skip @[DelayPipe.scala 52:43]
      else : @[DelayPipe.scala 54:14]
        io.out <= UInt<1>("h00") @[DelayPipe.scala 55:12]
        skip @[DelayPipe.scala 54:14]
    
  module DelayPipe_35 : 
    input clock : Clock
    input reset : Reset
    output io : {flip en : UInt<1>, flip config : UInt<3>, flip in : UInt<32>, out : UInt<32>}
    
    wire _T : UInt<32>[5] @[DelayPipe.scala 22:29]
    _T[0] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[1] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[2] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[3] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[4] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    reg regs : UInt<32>[5], clock with : (reset => (reset, _T)) @[DelayPipe.scala 22:21]
    reg wptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 23:21]
    reg rptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 24:21]
    node _T_1 = lt(wptr, UInt<3>("h04")) @[DelayPipe.scala 26:23]
    node _T_2 = and(io.en, _T_1) @[DelayPipe.scala 26:14]
    when _T_2 : @[DelayPipe.scala 26:37]
      node _T_3 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 27:17]
      node _T_4 = tail(_T_3, 1) @[DelayPipe.scala 27:17]
      wptr <= _T_4 @[DelayPipe.scala 27:10]
      skip @[DelayPipe.scala 26:37]
    else : @[DelayPipe.scala 28:14]
      wptr <= UInt<1>("h00") @[DelayPipe.scala 29:10]
      skip @[DelayPipe.scala 28:14]
    node _T_5 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 32:12]
    node _T_6 = tail(_T_5, 1) @[DelayPipe.scala 32:12]
    node _T_7 = geq(_T_6, io.config) @[DelayPipe.scala 32:17]
    when _T_7 : @[DelayPipe.scala 32:30]
      node _T_8 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 33:18]
      node _T_9 = tail(_T_8, 1) @[DelayPipe.scala 33:18]
      node _T_10 = sub(_T_9, io.config) @[DelayPipe.scala 33:24]
      node _T_11 = tail(_T_10, 1) @[DelayPipe.scala 33:24]
      rptr <= _T_11 @[DelayPipe.scala 33:10]
      skip @[DelayPipe.scala 32:30]
    else : @[DelayPipe.scala 34:14]
      node _T_12 = add(UInt<3>("h06"), wptr) @[DelayPipe.scala 35:30]
      node _T_13 = tail(_T_12, 1) @[DelayPipe.scala 35:30]
      node _T_14 = sub(_T_13, io.config) @[DelayPipe.scala 35:37]
      node _T_15 = tail(_T_14, 1) @[DelayPipe.scala 35:37]
      rptr <= _T_15 @[DelayPipe.scala 35:10]
      skip @[DelayPipe.scala 34:14]
    node _T_16 = gt(io.config, UInt<1>("h00")) @[DelayPipe.scala 39:28]
    node _T_17 = and(io.en, _T_16) @[DelayPipe.scala 39:14]
    when _T_17 : @[DelayPipe.scala 39:35]
      regs[wptr] <= io.in @[DelayPipe.scala 40:16]
      skip @[DelayPipe.scala 39:35]
    reg cnt : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 43:20]
    node _T_18 = eq(io.en, UInt<1>("h00")) @[DelayPipe.scala 44:8]
    when _T_18 : @[DelayPipe.scala 44:15]
      cnt <= UInt<1>("h00") @[DelayPipe.scala 45:9]
      skip @[DelayPipe.scala 44:15]
    else : @[DelayPipe.scala 46:30]
      node _T_19 = lt(cnt, io.config) @[DelayPipe.scala 46:18]
      when _T_19 : @[DelayPipe.scala 46:30]
        node _T_20 = add(cnt, UInt<1>("h01")) @[DelayPipe.scala 47:16]
        node _T_21 = tail(_T_20, 1) @[DelayPipe.scala 47:16]
        cnt <= _T_21 @[DelayPipe.scala 47:9]
        skip @[DelayPipe.scala 46:30]
    node _T_22 = eq(UInt<1>("h00"), io.config) @[DelayPipe.scala 50:22]
    node _T_23 = and(io.en, _T_22) @[DelayPipe.scala 50:14]
    when _T_23 : @[DelayPipe.scala 50:37]
      io.out <= io.in @[DelayPipe.scala 51:12]
      skip @[DelayPipe.scala 50:37]
    else : @[DelayPipe.scala 52:43]
      node _T_24 = eq(cnt, io.config) @[DelayPipe.scala 52:28]
      node _T_25 = and(io.en, _T_24) @[DelayPipe.scala 52:20]
      when _T_25 : @[DelayPipe.scala 52:43]
        io.out <= regs[rptr] @[DelayPipe.scala 53:12]
        skip @[DelayPipe.scala 52:43]
      else : @[DelayPipe.scala 54:14]
        io.out <= UInt<1>("h00") @[DelayPipe.scala 55:12]
        skip @[DelayPipe.scala 54:14]
    
  module Muxn_50 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[6], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    node _T_10 = eq(UInt<3>("h05"), io.config) @[Mux.scala 80:60]
    node _T_11 = mux(_T_10, io.in[5], _T_9) @[Mux.scala 80:57]
    io.out <= _T_11 @[Multiplexer.scala 20:10]
    
  module Muxn_51 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[6], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    node _T_10 = eq(UInt<3>("h05"), io.config) @[Mux.scala 80:60]
    node _T_11 = mux(_T_10, io.in[5], _T_9) @[Mux.scala 80:57]
    io.out <= _T_11 @[Multiplexer.scala 20:10]
    
  module ConfigMem_33 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<1>, flip cfg_data : UInt<32>, out : UInt<48>[1]}
    
    wire _T : UInt<48>[1] @[ConfigMem.scala 27:29]
    _T[0] <= UInt<48>("h00") @[ConfigMem.scala 27:29]
    reg regs : UInt<48>[1], clock with : (reset => (reset, _T)) @[ConfigMem.scala 27:21]
    node _T_1 = eq(io.cfg_addr, UInt<1>("h00")) @[ConfigMem.scala 39:38]
    node _T_2 = and(io.cfg_en, _T_1) @[ConfigMem.scala 39:22]
    when _T_2 : @[ConfigMem.scala 39:47]
      node _T_3 = bits(regs[0], 47, 32) @[ConfigMem.scala 41:33]
      node _T_4 = cat(_T_3, io.cfg_data) @[Cat.scala 29:58]
      regs[0] <= _T_4 @[ConfigMem.scala 41:19]
      skip @[ConfigMem.scala 39:47]
    node _T_5 = eq(io.cfg_addr, UInt<1>("h01")) @[ConfigMem.scala 39:38]
    node _T_6 = and(io.cfg_en, _T_5) @[ConfigMem.scala 39:22]
    when _T_6 : @[ConfigMem.scala 39:47]
      node _T_7 = bits(regs[0], 31, 0) @[ConfigMem.scala 43:46]
      node _T_8 = cat(io.cfg_data, _T_7) @[Cat.scala 29:58]
      regs[0] <= _T_8 @[ConfigMem.scala 43:19]
      skip @[ConfigMem.scala 39:47]
    io.out[0] <= regs[0] @[ConfigMem.scala 52:45]
    
  module GPE_17 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<12>, flip cfg_data : UInt<32>, flip en : UInt<1>, flip in : UInt<32>[8], out : UInt<32>[1]}
    
    inst alu of ALU_17 @[PE.scala 50:19]
    alu.clock <= clock
    alu.reset <= reset
    inst rf of RF_17 @[PE.scala 51:18]
    rf.clock <= clock
    rf.reset <= reset
    inst DelayPipe of DelayPipe_34 @[PE.scala 52:54]
    DelayPipe.clock <= clock
    DelayPipe.reset <= reset
    inst DelayPipe_1 of DelayPipe_35 @[PE.scala 52:54]
    DelayPipe_1.clock <= clock
    DelayPipe_1.reset <= reset
    wire const : UInt<32> @[PE.scala 54:19]
    inst Muxn of Muxn_50 @[PE.scala 55:49]
    Muxn.clock <= clock
    Muxn.reset <= reset
    inst Muxn_1 of Muxn_51 @[PE.scala 55:49]
    Muxn_1.clock <= clock
    Muxn_1.reset <= reset
    Muxn.io.in[0] <= io.in[0] @[PE.scala 62:12]
    Muxn.io.in[1] <= io.in[1] @[PE.scala 62:12]
    Muxn.io.in[2] <= io.in[2] @[PE.scala 62:12]
    Muxn.io.in[3] <= io.in[3] @[PE.scala 62:12]
    Muxn.io.in[4] <= const @[PE.scala 64:12]
    Muxn.io.in[5] <= rf.io.out[1] @[PE.scala 66:12]
    DelayPipe.io.en <= io.en @[PE.scala 69:23]
    DelayPipe.io.in <= Muxn.io.out @[PE.scala 70:23]
    alu.io.in[0] <= DelayPipe.io.out @[PE.scala 71:18]
    Muxn_1.io.in[0] <= io.in[4] @[PE.scala 62:12]
    Muxn_1.io.in[1] <= io.in[5] @[PE.scala 62:12]
    Muxn_1.io.in[2] <= io.in[6] @[PE.scala 62:12]
    Muxn_1.io.in[3] <= io.in[7] @[PE.scala 62:12]
    Muxn_1.io.in[4] <= const @[PE.scala 64:12]
    Muxn_1.io.in[5] <= rf.io.out[1] @[PE.scala 66:12]
    DelayPipe_1.io.en <= io.en @[PE.scala 69:23]
    DelayPipe_1.io.in <= Muxn_1.io.out @[PE.scala 70:23]
    alu.io.in[1] <= DelayPipe_1.io.out @[PE.scala 71:18]
    rf.io.en <= io.en @[PE.scala 75:12]
    rf.io.in[0] <= alu.io.out @[PE.scala 76:15]
    io.out[0] <= rf.io.out[0] @[PE.scala 77:13]
    inst cfg of ConfigMem_33 @[PE.scala 89:19]
    cfg.clock <= clock
    cfg.reset <= reset
    node _T = bits(io.cfg_addr, 11, 2) @[PE.scala 90:63]
    node _T_1 = eq(UInt<7>("h041"), _T) @[PE.scala 90:48]
    node _T_2 = and(io.cfg_en, _T_1) @[PE.scala 90:30]
    cfg.io.cfg_en <= _T_2 @[PE.scala 90:17]
    node _T_3 = bits(io.cfg_addr, 1, 0) @[PE.scala 91:33]
    cfg.io.cfg_addr <= _T_3 @[PE.scala 91:19]
    cfg.io.cfg_data <= io.cfg_data @[PE.scala 92:19]
    wire cfgOut : UInt<48> @[PE.scala 96:20]
    cfgOut <= cfg.io.out[0] @[PE.scala 97:10]
    node _T_4 = bits(cfgOut, 31, 0) @[PE.scala 98:18]
    const <= _T_4 @[PE.scala 98:9]
    node _T_5 = bits(cfgOut, 35, 32) @[PE.scala 100:28]
    alu.io.config <= _T_5 @[PE.scala 100:19]
    rf.io.config is invalid @[PE.scala 107:18]
    node _T_6 = bits(cfgOut, 38, 36) @[PE.scala 113:38]
    DelayPipe.io.config <= _T_6 @[PE.scala 113:29]
    node _T_7 = bits(cfgOut, 41, 39) @[PE.scala 113:38]
    DelayPipe_1.io.config <= _T_7 @[PE.scala 113:29]
    node _T_8 = bits(cfgOut, 44, 42) @[PE.scala 121:32]
    Muxn.io.config <= _T_8 @[PE.scala 121:23]
    node _T_9 = bits(cfgOut, 47, 45) @[PE.scala 121:32]
    Muxn_1.io.config <= _T_9 @[PE.scala 121:23]
    
  module ALU_18 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<4>, flip in : UInt<32>[2], out : UInt<32>}
    
    node _T = bits(io.in[0], 31, 0) @[Operations.scala 122:31]
    node _T_1 = bits(io.in[0], 31, 0) @[Operations.scala 124:31]
    node _T_2 = bits(io.in[1], 31, 0) @[Operations.scala 124:49]
    node _T_3 = add(_T_1, _T_2) @[Operations.scala 124:41]
    node _T_4 = tail(_T_3, 1) @[Operations.scala 124:41]
    node _T_5 = bits(io.in[0], 31, 0) @[Operations.scala 126:31]
    node _T_6 = bits(io.in[1], 31, 0) @[Operations.scala 126:49]
    node _T_7 = sub(_T_5, _T_6) @[Operations.scala 126:41]
    node _T_8 = tail(_T_7, 1) @[Operations.scala 126:41]
    node _T_9 = bits(io.in[0], 31, 0) @[Operations.scala 128:31]
    node _T_10 = bits(io.in[1], 31, 0) @[Operations.scala 128:49]
    node _T_11 = mul(_T_9, _T_10) @[Operations.scala 128:41]
    node _T_12 = bits(io.in[0], 31, 0) @[Operations.scala 138:31]
    node _T_13 = bits(io.in[1], 31, 0) @[Operations.scala 138:49]
    node _T_14 = and(_T_12, _T_13) @[Operations.scala 138:41]
    node _T_15 = bits(io.in[0], 31, 0) @[Operations.scala 140:31]
    node _T_16 = bits(io.in[1], 31, 0) @[Operations.scala 140:49]
    node _T_17 = or(_T_15, _T_16) @[Operations.scala 140:41]
    node _T_18 = bits(io.in[0], 31, 0) @[Operations.scala 142:31]
    node _T_19 = bits(io.in[1], 31, 0) @[Operations.scala 142:49]
    node _T_20 = xor(_T_18, _T_19) @[Operations.scala 142:41]
    node _T_21 = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_22 = mux(_T_21, _T, UInt<1>("h00")) @[Mux.scala 80:57]
    node _T_23 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_24 = mux(_T_23, _T_4, _T_22) @[Mux.scala 80:57]
    node _T_25 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_26 = mux(_T_25, _T_8, _T_24) @[Mux.scala 80:57]
    node _T_27 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_28 = mux(_T_27, _T_11, _T_26) @[Mux.scala 80:57]
    node _T_29 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_30 = mux(_T_29, _T_14, _T_28) @[Mux.scala 80:57]
    node _T_31 = eq(UInt<3>("h05"), io.config) @[Mux.scala 80:60]
    node _T_32 = mux(_T_31, _T_17, _T_30) @[Mux.scala 80:57]
    node _T_33 = eq(UInt<3>("h06"), io.config) @[Mux.scala 80:60]
    node _T_34 = mux(_T_33, _T_20, _T_32) @[Mux.scala 80:57]
    io.out <= _T_34 @[ALU.scala 25:10]
    
  module RF_18 : 
    input clock : Clock
    input reset : Reset
    output io : {flip en : UInt<1>, flip config : UInt<0>, flip in : UInt<32>[1], out : UInt<32>[2]}
    
    wire _T : UInt<32>[1] @[RegFile.scala 24:29]
    _T[0] <= UInt<32>("h00") @[RegFile.scala 24:29]
    reg regs : UInt<32>[1], clock with : (reset => (reset, _T)) @[RegFile.scala 24:21]
    when io.en : @[RegFile.scala 34:16]
      regs[0] <= io.in[0] @[RegFile.scala 35:41]
      skip @[RegFile.scala 34:16]
    io.out[0] <= regs[0] @[RegFile.scala 37:42]
    io.out[1] <= regs[0] @[RegFile.scala 37:42]
    
  module DelayPipe_36 : 
    input clock : Clock
    input reset : Reset
    output io : {flip en : UInt<1>, flip config : UInt<3>, flip in : UInt<32>, out : UInt<32>}
    
    wire _T : UInt<32>[5] @[DelayPipe.scala 22:29]
    _T[0] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[1] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[2] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[3] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[4] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    reg regs : UInt<32>[5], clock with : (reset => (reset, _T)) @[DelayPipe.scala 22:21]
    reg wptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 23:21]
    reg rptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 24:21]
    node _T_1 = lt(wptr, UInt<3>("h04")) @[DelayPipe.scala 26:23]
    node _T_2 = and(io.en, _T_1) @[DelayPipe.scala 26:14]
    when _T_2 : @[DelayPipe.scala 26:37]
      node _T_3 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 27:17]
      node _T_4 = tail(_T_3, 1) @[DelayPipe.scala 27:17]
      wptr <= _T_4 @[DelayPipe.scala 27:10]
      skip @[DelayPipe.scala 26:37]
    else : @[DelayPipe.scala 28:14]
      wptr <= UInt<1>("h00") @[DelayPipe.scala 29:10]
      skip @[DelayPipe.scala 28:14]
    node _T_5 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 32:12]
    node _T_6 = tail(_T_5, 1) @[DelayPipe.scala 32:12]
    node _T_7 = geq(_T_6, io.config) @[DelayPipe.scala 32:17]
    when _T_7 : @[DelayPipe.scala 32:30]
      node _T_8 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 33:18]
      node _T_9 = tail(_T_8, 1) @[DelayPipe.scala 33:18]
      node _T_10 = sub(_T_9, io.config) @[DelayPipe.scala 33:24]
      node _T_11 = tail(_T_10, 1) @[DelayPipe.scala 33:24]
      rptr <= _T_11 @[DelayPipe.scala 33:10]
      skip @[DelayPipe.scala 32:30]
    else : @[DelayPipe.scala 34:14]
      node _T_12 = add(UInt<3>("h06"), wptr) @[DelayPipe.scala 35:30]
      node _T_13 = tail(_T_12, 1) @[DelayPipe.scala 35:30]
      node _T_14 = sub(_T_13, io.config) @[DelayPipe.scala 35:37]
      node _T_15 = tail(_T_14, 1) @[DelayPipe.scala 35:37]
      rptr <= _T_15 @[DelayPipe.scala 35:10]
      skip @[DelayPipe.scala 34:14]
    node _T_16 = gt(io.config, UInt<1>("h00")) @[DelayPipe.scala 39:28]
    node _T_17 = and(io.en, _T_16) @[DelayPipe.scala 39:14]
    when _T_17 : @[DelayPipe.scala 39:35]
      regs[wptr] <= io.in @[DelayPipe.scala 40:16]
      skip @[DelayPipe.scala 39:35]
    reg cnt : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 43:20]
    node _T_18 = eq(io.en, UInt<1>("h00")) @[DelayPipe.scala 44:8]
    when _T_18 : @[DelayPipe.scala 44:15]
      cnt <= UInt<1>("h00") @[DelayPipe.scala 45:9]
      skip @[DelayPipe.scala 44:15]
    else : @[DelayPipe.scala 46:30]
      node _T_19 = lt(cnt, io.config) @[DelayPipe.scala 46:18]
      when _T_19 : @[DelayPipe.scala 46:30]
        node _T_20 = add(cnt, UInt<1>("h01")) @[DelayPipe.scala 47:16]
        node _T_21 = tail(_T_20, 1) @[DelayPipe.scala 47:16]
        cnt <= _T_21 @[DelayPipe.scala 47:9]
        skip @[DelayPipe.scala 46:30]
    node _T_22 = eq(UInt<1>("h00"), io.config) @[DelayPipe.scala 50:22]
    node _T_23 = and(io.en, _T_22) @[DelayPipe.scala 50:14]
    when _T_23 : @[DelayPipe.scala 50:37]
      io.out <= io.in @[DelayPipe.scala 51:12]
      skip @[DelayPipe.scala 50:37]
    else : @[DelayPipe.scala 52:43]
      node _T_24 = eq(cnt, io.config) @[DelayPipe.scala 52:28]
      node _T_25 = and(io.en, _T_24) @[DelayPipe.scala 52:20]
      when _T_25 : @[DelayPipe.scala 52:43]
        io.out <= regs[rptr] @[DelayPipe.scala 53:12]
        skip @[DelayPipe.scala 52:43]
      else : @[DelayPipe.scala 54:14]
        io.out <= UInt<1>("h00") @[DelayPipe.scala 55:12]
        skip @[DelayPipe.scala 54:14]
    
  module DelayPipe_37 : 
    input clock : Clock
    input reset : Reset
    output io : {flip en : UInt<1>, flip config : UInt<3>, flip in : UInt<32>, out : UInt<32>}
    
    wire _T : UInt<32>[5] @[DelayPipe.scala 22:29]
    _T[0] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[1] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[2] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[3] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[4] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    reg regs : UInt<32>[5], clock with : (reset => (reset, _T)) @[DelayPipe.scala 22:21]
    reg wptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 23:21]
    reg rptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 24:21]
    node _T_1 = lt(wptr, UInt<3>("h04")) @[DelayPipe.scala 26:23]
    node _T_2 = and(io.en, _T_1) @[DelayPipe.scala 26:14]
    when _T_2 : @[DelayPipe.scala 26:37]
      node _T_3 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 27:17]
      node _T_4 = tail(_T_3, 1) @[DelayPipe.scala 27:17]
      wptr <= _T_4 @[DelayPipe.scala 27:10]
      skip @[DelayPipe.scala 26:37]
    else : @[DelayPipe.scala 28:14]
      wptr <= UInt<1>("h00") @[DelayPipe.scala 29:10]
      skip @[DelayPipe.scala 28:14]
    node _T_5 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 32:12]
    node _T_6 = tail(_T_5, 1) @[DelayPipe.scala 32:12]
    node _T_7 = geq(_T_6, io.config) @[DelayPipe.scala 32:17]
    when _T_7 : @[DelayPipe.scala 32:30]
      node _T_8 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 33:18]
      node _T_9 = tail(_T_8, 1) @[DelayPipe.scala 33:18]
      node _T_10 = sub(_T_9, io.config) @[DelayPipe.scala 33:24]
      node _T_11 = tail(_T_10, 1) @[DelayPipe.scala 33:24]
      rptr <= _T_11 @[DelayPipe.scala 33:10]
      skip @[DelayPipe.scala 32:30]
    else : @[DelayPipe.scala 34:14]
      node _T_12 = add(UInt<3>("h06"), wptr) @[DelayPipe.scala 35:30]
      node _T_13 = tail(_T_12, 1) @[DelayPipe.scala 35:30]
      node _T_14 = sub(_T_13, io.config) @[DelayPipe.scala 35:37]
      node _T_15 = tail(_T_14, 1) @[DelayPipe.scala 35:37]
      rptr <= _T_15 @[DelayPipe.scala 35:10]
      skip @[DelayPipe.scala 34:14]
    node _T_16 = gt(io.config, UInt<1>("h00")) @[DelayPipe.scala 39:28]
    node _T_17 = and(io.en, _T_16) @[DelayPipe.scala 39:14]
    when _T_17 : @[DelayPipe.scala 39:35]
      regs[wptr] <= io.in @[DelayPipe.scala 40:16]
      skip @[DelayPipe.scala 39:35]
    reg cnt : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 43:20]
    node _T_18 = eq(io.en, UInt<1>("h00")) @[DelayPipe.scala 44:8]
    when _T_18 : @[DelayPipe.scala 44:15]
      cnt <= UInt<1>("h00") @[DelayPipe.scala 45:9]
      skip @[DelayPipe.scala 44:15]
    else : @[DelayPipe.scala 46:30]
      node _T_19 = lt(cnt, io.config) @[DelayPipe.scala 46:18]
      when _T_19 : @[DelayPipe.scala 46:30]
        node _T_20 = add(cnt, UInt<1>("h01")) @[DelayPipe.scala 47:16]
        node _T_21 = tail(_T_20, 1) @[DelayPipe.scala 47:16]
        cnt <= _T_21 @[DelayPipe.scala 47:9]
        skip @[DelayPipe.scala 46:30]
    node _T_22 = eq(UInt<1>("h00"), io.config) @[DelayPipe.scala 50:22]
    node _T_23 = and(io.en, _T_22) @[DelayPipe.scala 50:14]
    when _T_23 : @[DelayPipe.scala 50:37]
      io.out <= io.in @[DelayPipe.scala 51:12]
      skip @[DelayPipe.scala 50:37]
    else : @[DelayPipe.scala 52:43]
      node _T_24 = eq(cnt, io.config) @[DelayPipe.scala 52:28]
      node _T_25 = and(io.en, _T_24) @[DelayPipe.scala 52:20]
      when _T_25 : @[DelayPipe.scala 52:43]
        io.out <= regs[rptr] @[DelayPipe.scala 53:12]
        skip @[DelayPipe.scala 52:43]
      else : @[DelayPipe.scala 54:14]
        io.out <= UInt<1>("h00") @[DelayPipe.scala 55:12]
        skip @[DelayPipe.scala 54:14]
    
  module Muxn_52 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[6], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    node _T_10 = eq(UInt<3>("h05"), io.config) @[Mux.scala 80:60]
    node _T_11 = mux(_T_10, io.in[5], _T_9) @[Mux.scala 80:57]
    io.out <= _T_11 @[Multiplexer.scala 20:10]
    
  module Muxn_53 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[6], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    node _T_10 = eq(UInt<3>("h05"), io.config) @[Mux.scala 80:60]
    node _T_11 = mux(_T_10, io.in[5], _T_9) @[Mux.scala 80:57]
    io.out <= _T_11 @[Multiplexer.scala 20:10]
    
  module ConfigMem_34 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<1>, flip cfg_data : UInt<32>, out : UInt<48>[1]}
    
    wire _T : UInt<48>[1] @[ConfigMem.scala 27:29]
    _T[0] <= UInt<48>("h00") @[ConfigMem.scala 27:29]
    reg regs : UInt<48>[1], clock with : (reset => (reset, _T)) @[ConfigMem.scala 27:21]
    node _T_1 = eq(io.cfg_addr, UInt<1>("h00")) @[ConfigMem.scala 39:38]
    node _T_2 = and(io.cfg_en, _T_1) @[ConfigMem.scala 39:22]
    when _T_2 : @[ConfigMem.scala 39:47]
      node _T_3 = bits(regs[0], 47, 32) @[ConfigMem.scala 41:33]
      node _T_4 = cat(_T_3, io.cfg_data) @[Cat.scala 29:58]
      regs[0] <= _T_4 @[ConfigMem.scala 41:19]
      skip @[ConfigMem.scala 39:47]
    node _T_5 = eq(io.cfg_addr, UInt<1>("h01")) @[ConfigMem.scala 39:38]
    node _T_6 = and(io.cfg_en, _T_5) @[ConfigMem.scala 39:22]
    when _T_6 : @[ConfigMem.scala 39:47]
      node _T_7 = bits(regs[0], 31, 0) @[ConfigMem.scala 43:46]
      node _T_8 = cat(io.cfg_data, _T_7) @[Cat.scala 29:58]
      regs[0] <= _T_8 @[ConfigMem.scala 43:19]
      skip @[ConfigMem.scala 39:47]
    io.out[0] <= regs[0] @[ConfigMem.scala 52:45]
    
  module GPE_18 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<12>, flip cfg_data : UInt<32>, flip en : UInt<1>, flip in : UInt<32>[8], out : UInt<32>[1]}
    
    inst alu of ALU_18 @[PE.scala 50:19]
    alu.clock <= clock
    alu.reset <= reset
    inst rf of RF_18 @[PE.scala 51:18]
    rf.clock <= clock
    rf.reset <= reset
    inst DelayPipe of DelayPipe_36 @[PE.scala 52:54]
    DelayPipe.clock <= clock
    DelayPipe.reset <= reset
    inst DelayPipe_1 of DelayPipe_37 @[PE.scala 52:54]
    DelayPipe_1.clock <= clock
    DelayPipe_1.reset <= reset
    wire const : UInt<32> @[PE.scala 54:19]
    inst Muxn of Muxn_52 @[PE.scala 55:49]
    Muxn.clock <= clock
    Muxn.reset <= reset
    inst Muxn_1 of Muxn_53 @[PE.scala 55:49]
    Muxn_1.clock <= clock
    Muxn_1.reset <= reset
    Muxn.io.in[0] <= io.in[0] @[PE.scala 62:12]
    Muxn.io.in[1] <= io.in[1] @[PE.scala 62:12]
    Muxn.io.in[2] <= io.in[2] @[PE.scala 62:12]
    Muxn.io.in[3] <= io.in[3] @[PE.scala 62:12]
    Muxn.io.in[4] <= const @[PE.scala 64:12]
    Muxn.io.in[5] <= rf.io.out[1] @[PE.scala 66:12]
    DelayPipe.io.en <= io.en @[PE.scala 69:23]
    DelayPipe.io.in <= Muxn.io.out @[PE.scala 70:23]
    alu.io.in[0] <= DelayPipe.io.out @[PE.scala 71:18]
    Muxn_1.io.in[0] <= io.in[4] @[PE.scala 62:12]
    Muxn_1.io.in[1] <= io.in[5] @[PE.scala 62:12]
    Muxn_1.io.in[2] <= io.in[6] @[PE.scala 62:12]
    Muxn_1.io.in[3] <= io.in[7] @[PE.scala 62:12]
    Muxn_1.io.in[4] <= const @[PE.scala 64:12]
    Muxn_1.io.in[5] <= rf.io.out[1] @[PE.scala 66:12]
    DelayPipe_1.io.en <= io.en @[PE.scala 69:23]
    DelayPipe_1.io.in <= Muxn_1.io.out @[PE.scala 70:23]
    alu.io.in[1] <= DelayPipe_1.io.out @[PE.scala 71:18]
    rf.io.en <= io.en @[PE.scala 75:12]
    rf.io.in[0] <= alu.io.out @[PE.scala 76:15]
    io.out[0] <= rf.io.out[0] @[PE.scala 77:13]
    inst cfg of ConfigMem_34 @[PE.scala 89:19]
    cfg.clock <= clock
    cfg.reset <= reset
    node _T = bits(io.cfg_addr, 11, 2) @[PE.scala 90:63]
    node _T_1 = eq(UInt<7>("h042"), _T) @[PE.scala 90:48]
    node _T_2 = and(io.cfg_en, _T_1) @[PE.scala 90:30]
    cfg.io.cfg_en <= _T_2 @[PE.scala 90:17]
    node _T_3 = bits(io.cfg_addr, 1, 0) @[PE.scala 91:33]
    cfg.io.cfg_addr <= _T_3 @[PE.scala 91:19]
    cfg.io.cfg_data <= io.cfg_data @[PE.scala 92:19]
    wire cfgOut : UInt<48> @[PE.scala 96:20]
    cfgOut <= cfg.io.out[0] @[PE.scala 97:10]
    node _T_4 = bits(cfgOut, 31, 0) @[PE.scala 98:18]
    const <= _T_4 @[PE.scala 98:9]
    node _T_5 = bits(cfgOut, 35, 32) @[PE.scala 100:28]
    alu.io.config <= _T_5 @[PE.scala 100:19]
    rf.io.config is invalid @[PE.scala 107:18]
    node _T_6 = bits(cfgOut, 38, 36) @[PE.scala 113:38]
    DelayPipe.io.config <= _T_6 @[PE.scala 113:29]
    node _T_7 = bits(cfgOut, 41, 39) @[PE.scala 113:38]
    DelayPipe_1.io.config <= _T_7 @[PE.scala 113:29]
    node _T_8 = bits(cfgOut, 44, 42) @[PE.scala 121:32]
    Muxn.io.config <= _T_8 @[PE.scala 121:23]
    node _T_9 = bits(cfgOut, 47, 45) @[PE.scala 121:32]
    Muxn_1.io.config <= _T_9 @[PE.scala 121:23]
    
  module ALU_19 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<4>, flip in : UInt<32>[2], out : UInt<32>}
    
    node _T = bits(io.in[0], 31, 0) @[Operations.scala 122:31]
    node _T_1 = bits(io.in[0], 31, 0) @[Operations.scala 124:31]
    node _T_2 = bits(io.in[1], 31, 0) @[Operations.scala 124:49]
    node _T_3 = add(_T_1, _T_2) @[Operations.scala 124:41]
    node _T_4 = tail(_T_3, 1) @[Operations.scala 124:41]
    node _T_5 = bits(io.in[0], 31, 0) @[Operations.scala 126:31]
    node _T_6 = bits(io.in[1], 31, 0) @[Operations.scala 126:49]
    node _T_7 = sub(_T_5, _T_6) @[Operations.scala 126:41]
    node _T_8 = tail(_T_7, 1) @[Operations.scala 126:41]
    node _T_9 = bits(io.in[0], 31, 0) @[Operations.scala 128:31]
    node _T_10 = bits(io.in[1], 31, 0) @[Operations.scala 128:49]
    node _T_11 = mul(_T_9, _T_10) @[Operations.scala 128:41]
    node _T_12 = bits(io.in[0], 31, 0) @[Operations.scala 138:31]
    node _T_13 = bits(io.in[1], 31, 0) @[Operations.scala 138:49]
    node _T_14 = and(_T_12, _T_13) @[Operations.scala 138:41]
    node _T_15 = bits(io.in[0], 31, 0) @[Operations.scala 140:31]
    node _T_16 = bits(io.in[1], 31, 0) @[Operations.scala 140:49]
    node _T_17 = or(_T_15, _T_16) @[Operations.scala 140:41]
    node _T_18 = bits(io.in[0], 31, 0) @[Operations.scala 142:31]
    node _T_19 = bits(io.in[1], 31, 0) @[Operations.scala 142:49]
    node _T_20 = xor(_T_18, _T_19) @[Operations.scala 142:41]
    node _T_21 = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_22 = mux(_T_21, _T, UInt<1>("h00")) @[Mux.scala 80:57]
    node _T_23 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_24 = mux(_T_23, _T_4, _T_22) @[Mux.scala 80:57]
    node _T_25 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_26 = mux(_T_25, _T_8, _T_24) @[Mux.scala 80:57]
    node _T_27 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_28 = mux(_T_27, _T_11, _T_26) @[Mux.scala 80:57]
    node _T_29 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_30 = mux(_T_29, _T_14, _T_28) @[Mux.scala 80:57]
    node _T_31 = eq(UInt<3>("h05"), io.config) @[Mux.scala 80:60]
    node _T_32 = mux(_T_31, _T_17, _T_30) @[Mux.scala 80:57]
    node _T_33 = eq(UInt<3>("h06"), io.config) @[Mux.scala 80:60]
    node _T_34 = mux(_T_33, _T_20, _T_32) @[Mux.scala 80:57]
    io.out <= _T_34 @[ALU.scala 25:10]
    
  module RF_19 : 
    input clock : Clock
    input reset : Reset
    output io : {flip en : UInt<1>, flip config : UInt<0>, flip in : UInt<32>[1], out : UInt<32>[2]}
    
    wire _T : UInt<32>[1] @[RegFile.scala 24:29]
    _T[0] <= UInt<32>("h00") @[RegFile.scala 24:29]
    reg regs : UInt<32>[1], clock with : (reset => (reset, _T)) @[RegFile.scala 24:21]
    when io.en : @[RegFile.scala 34:16]
      regs[0] <= io.in[0] @[RegFile.scala 35:41]
      skip @[RegFile.scala 34:16]
    io.out[0] <= regs[0] @[RegFile.scala 37:42]
    io.out[1] <= regs[0] @[RegFile.scala 37:42]
    
  module DelayPipe_38 : 
    input clock : Clock
    input reset : Reset
    output io : {flip en : UInt<1>, flip config : UInt<3>, flip in : UInt<32>, out : UInt<32>}
    
    wire _T : UInt<32>[5] @[DelayPipe.scala 22:29]
    _T[0] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[1] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[2] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[3] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[4] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    reg regs : UInt<32>[5], clock with : (reset => (reset, _T)) @[DelayPipe.scala 22:21]
    reg wptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 23:21]
    reg rptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 24:21]
    node _T_1 = lt(wptr, UInt<3>("h04")) @[DelayPipe.scala 26:23]
    node _T_2 = and(io.en, _T_1) @[DelayPipe.scala 26:14]
    when _T_2 : @[DelayPipe.scala 26:37]
      node _T_3 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 27:17]
      node _T_4 = tail(_T_3, 1) @[DelayPipe.scala 27:17]
      wptr <= _T_4 @[DelayPipe.scala 27:10]
      skip @[DelayPipe.scala 26:37]
    else : @[DelayPipe.scala 28:14]
      wptr <= UInt<1>("h00") @[DelayPipe.scala 29:10]
      skip @[DelayPipe.scala 28:14]
    node _T_5 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 32:12]
    node _T_6 = tail(_T_5, 1) @[DelayPipe.scala 32:12]
    node _T_7 = geq(_T_6, io.config) @[DelayPipe.scala 32:17]
    when _T_7 : @[DelayPipe.scala 32:30]
      node _T_8 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 33:18]
      node _T_9 = tail(_T_8, 1) @[DelayPipe.scala 33:18]
      node _T_10 = sub(_T_9, io.config) @[DelayPipe.scala 33:24]
      node _T_11 = tail(_T_10, 1) @[DelayPipe.scala 33:24]
      rptr <= _T_11 @[DelayPipe.scala 33:10]
      skip @[DelayPipe.scala 32:30]
    else : @[DelayPipe.scala 34:14]
      node _T_12 = add(UInt<3>("h06"), wptr) @[DelayPipe.scala 35:30]
      node _T_13 = tail(_T_12, 1) @[DelayPipe.scala 35:30]
      node _T_14 = sub(_T_13, io.config) @[DelayPipe.scala 35:37]
      node _T_15 = tail(_T_14, 1) @[DelayPipe.scala 35:37]
      rptr <= _T_15 @[DelayPipe.scala 35:10]
      skip @[DelayPipe.scala 34:14]
    node _T_16 = gt(io.config, UInt<1>("h00")) @[DelayPipe.scala 39:28]
    node _T_17 = and(io.en, _T_16) @[DelayPipe.scala 39:14]
    when _T_17 : @[DelayPipe.scala 39:35]
      regs[wptr] <= io.in @[DelayPipe.scala 40:16]
      skip @[DelayPipe.scala 39:35]
    reg cnt : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 43:20]
    node _T_18 = eq(io.en, UInt<1>("h00")) @[DelayPipe.scala 44:8]
    when _T_18 : @[DelayPipe.scala 44:15]
      cnt <= UInt<1>("h00") @[DelayPipe.scala 45:9]
      skip @[DelayPipe.scala 44:15]
    else : @[DelayPipe.scala 46:30]
      node _T_19 = lt(cnt, io.config) @[DelayPipe.scala 46:18]
      when _T_19 : @[DelayPipe.scala 46:30]
        node _T_20 = add(cnt, UInt<1>("h01")) @[DelayPipe.scala 47:16]
        node _T_21 = tail(_T_20, 1) @[DelayPipe.scala 47:16]
        cnt <= _T_21 @[DelayPipe.scala 47:9]
        skip @[DelayPipe.scala 46:30]
    node _T_22 = eq(UInt<1>("h00"), io.config) @[DelayPipe.scala 50:22]
    node _T_23 = and(io.en, _T_22) @[DelayPipe.scala 50:14]
    when _T_23 : @[DelayPipe.scala 50:37]
      io.out <= io.in @[DelayPipe.scala 51:12]
      skip @[DelayPipe.scala 50:37]
    else : @[DelayPipe.scala 52:43]
      node _T_24 = eq(cnt, io.config) @[DelayPipe.scala 52:28]
      node _T_25 = and(io.en, _T_24) @[DelayPipe.scala 52:20]
      when _T_25 : @[DelayPipe.scala 52:43]
        io.out <= regs[rptr] @[DelayPipe.scala 53:12]
        skip @[DelayPipe.scala 52:43]
      else : @[DelayPipe.scala 54:14]
        io.out <= UInt<1>("h00") @[DelayPipe.scala 55:12]
        skip @[DelayPipe.scala 54:14]
    
  module DelayPipe_39 : 
    input clock : Clock
    input reset : Reset
    output io : {flip en : UInt<1>, flip config : UInt<3>, flip in : UInt<32>, out : UInt<32>}
    
    wire _T : UInt<32>[5] @[DelayPipe.scala 22:29]
    _T[0] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[1] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[2] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[3] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[4] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    reg regs : UInt<32>[5], clock with : (reset => (reset, _T)) @[DelayPipe.scala 22:21]
    reg wptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 23:21]
    reg rptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 24:21]
    node _T_1 = lt(wptr, UInt<3>("h04")) @[DelayPipe.scala 26:23]
    node _T_2 = and(io.en, _T_1) @[DelayPipe.scala 26:14]
    when _T_2 : @[DelayPipe.scala 26:37]
      node _T_3 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 27:17]
      node _T_4 = tail(_T_3, 1) @[DelayPipe.scala 27:17]
      wptr <= _T_4 @[DelayPipe.scala 27:10]
      skip @[DelayPipe.scala 26:37]
    else : @[DelayPipe.scala 28:14]
      wptr <= UInt<1>("h00") @[DelayPipe.scala 29:10]
      skip @[DelayPipe.scala 28:14]
    node _T_5 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 32:12]
    node _T_6 = tail(_T_5, 1) @[DelayPipe.scala 32:12]
    node _T_7 = geq(_T_6, io.config) @[DelayPipe.scala 32:17]
    when _T_7 : @[DelayPipe.scala 32:30]
      node _T_8 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 33:18]
      node _T_9 = tail(_T_8, 1) @[DelayPipe.scala 33:18]
      node _T_10 = sub(_T_9, io.config) @[DelayPipe.scala 33:24]
      node _T_11 = tail(_T_10, 1) @[DelayPipe.scala 33:24]
      rptr <= _T_11 @[DelayPipe.scala 33:10]
      skip @[DelayPipe.scala 32:30]
    else : @[DelayPipe.scala 34:14]
      node _T_12 = add(UInt<3>("h06"), wptr) @[DelayPipe.scala 35:30]
      node _T_13 = tail(_T_12, 1) @[DelayPipe.scala 35:30]
      node _T_14 = sub(_T_13, io.config) @[DelayPipe.scala 35:37]
      node _T_15 = tail(_T_14, 1) @[DelayPipe.scala 35:37]
      rptr <= _T_15 @[DelayPipe.scala 35:10]
      skip @[DelayPipe.scala 34:14]
    node _T_16 = gt(io.config, UInt<1>("h00")) @[DelayPipe.scala 39:28]
    node _T_17 = and(io.en, _T_16) @[DelayPipe.scala 39:14]
    when _T_17 : @[DelayPipe.scala 39:35]
      regs[wptr] <= io.in @[DelayPipe.scala 40:16]
      skip @[DelayPipe.scala 39:35]
    reg cnt : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 43:20]
    node _T_18 = eq(io.en, UInt<1>("h00")) @[DelayPipe.scala 44:8]
    when _T_18 : @[DelayPipe.scala 44:15]
      cnt <= UInt<1>("h00") @[DelayPipe.scala 45:9]
      skip @[DelayPipe.scala 44:15]
    else : @[DelayPipe.scala 46:30]
      node _T_19 = lt(cnt, io.config) @[DelayPipe.scala 46:18]
      when _T_19 : @[DelayPipe.scala 46:30]
        node _T_20 = add(cnt, UInt<1>("h01")) @[DelayPipe.scala 47:16]
        node _T_21 = tail(_T_20, 1) @[DelayPipe.scala 47:16]
        cnt <= _T_21 @[DelayPipe.scala 47:9]
        skip @[DelayPipe.scala 46:30]
    node _T_22 = eq(UInt<1>("h00"), io.config) @[DelayPipe.scala 50:22]
    node _T_23 = and(io.en, _T_22) @[DelayPipe.scala 50:14]
    when _T_23 : @[DelayPipe.scala 50:37]
      io.out <= io.in @[DelayPipe.scala 51:12]
      skip @[DelayPipe.scala 50:37]
    else : @[DelayPipe.scala 52:43]
      node _T_24 = eq(cnt, io.config) @[DelayPipe.scala 52:28]
      node _T_25 = and(io.en, _T_24) @[DelayPipe.scala 52:20]
      when _T_25 : @[DelayPipe.scala 52:43]
        io.out <= regs[rptr] @[DelayPipe.scala 53:12]
        skip @[DelayPipe.scala 52:43]
      else : @[DelayPipe.scala 54:14]
        io.out <= UInt<1>("h00") @[DelayPipe.scala 55:12]
        skip @[DelayPipe.scala 54:14]
    
  module Muxn_54 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[6], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    node _T_10 = eq(UInt<3>("h05"), io.config) @[Mux.scala 80:60]
    node _T_11 = mux(_T_10, io.in[5], _T_9) @[Mux.scala 80:57]
    io.out <= _T_11 @[Multiplexer.scala 20:10]
    
  module Muxn_55 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[6], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    node _T_10 = eq(UInt<3>("h05"), io.config) @[Mux.scala 80:60]
    node _T_11 = mux(_T_10, io.in[5], _T_9) @[Mux.scala 80:57]
    io.out <= _T_11 @[Multiplexer.scala 20:10]
    
  module ConfigMem_35 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<1>, flip cfg_data : UInt<32>, out : UInt<48>[1]}
    
    wire _T : UInt<48>[1] @[ConfigMem.scala 27:29]
    _T[0] <= UInt<48>("h00") @[ConfigMem.scala 27:29]
    reg regs : UInt<48>[1], clock with : (reset => (reset, _T)) @[ConfigMem.scala 27:21]
    node _T_1 = eq(io.cfg_addr, UInt<1>("h00")) @[ConfigMem.scala 39:38]
    node _T_2 = and(io.cfg_en, _T_1) @[ConfigMem.scala 39:22]
    when _T_2 : @[ConfigMem.scala 39:47]
      node _T_3 = bits(regs[0], 47, 32) @[ConfigMem.scala 41:33]
      node _T_4 = cat(_T_3, io.cfg_data) @[Cat.scala 29:58]
      regs[0] <= _T_4 @[ConfigMem.scala 41:19]
      skip @[ConfigMem.scala 39:47]
    node _T_5 = eq(io.cfg_addr, UInt<1>("h01")) @[ConfigMem.scala 39:38]
    node _T_6 = and(io.cfg_en, _T_5) @[ConfigMem.scala 39:22]
    when _T_6 : @[ConfigMem.scala 39:47]
      node _T_7 = bits(regs[0], 31, 0) @[ConfigMem.scala 43:46]
      node _T_8 = cat(io.cfg_data, _T_7) @[Cat.scala 29:58]
      regs[0] <= _T_8 @[ConfigMem.scala 43:19]
      skip @[ConfigMem.scala 39:47]
    io.out[0] <= regs[0] @[ConfigMem.scala 52:45]
    
  module GPE_19 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<12>, flip cfg_data : UInt<32>, flip en : UInt<1>, flip in : UInt<32>[8], out : UInt<32>[1]}
    
    inst alu of ALU_19 @[PE.scala 50:19]
    alu.clock <= clock
    alu.reset <= reset
    inst rf of RF_19 @[PE.scala 51:18]
    rf.clock <= clock
    rf.reset <= reset
    inst DelayPipe of DelayPipe_38 @[PE.scala 52:54]
    DelayPipe.clock <= clock
    DelayPipe.reset <= reset
    inst DelayPipe_1 of DelayPipe_39 @[PE.scala 52:54]
    DelayPipe_1.clock <= clock
    DelayPipe_1.reset <= reset
    wire const : UInt<32> @[PE.scala 54:19]
    inst Muxn of Muxn_54 @[PE.scala 55:49]
    Muxn.clock <= clock
    Muxn.reset <= reset
    inst Muxn_1 of Muxn_55 @[PE.scala 55:49]
    Muxn_1.clock <= clock
    Muxn_1.reset <= reset
    Muxn.io.in[0] <= io.in[0] @[PE.scala 62:12]
    Muxn.io.in[1] <= io.in[1] @[PE.scala 62:12]
    Muxn.io.in[2] <= io.in[2] @[PE.scala 62:12]
    Muxn.io.in[3] <= io.in[3] @[PE.scala 62:12]
    Muxn.io.in[4] <= const @[PE.scala 64:12]
    Muxn.io.in[5] <= rf.io.out[1] @[PE.scala 66:12]
    DelayPipe.io.en <= io.en @[PE.scala 69:23]
    DelayPipe.io.in <= Muxn.io.out @[PE.scala 70:23]
    alu.io.in[0] <= DelayPipe.io.out @[PE.scala 71:18]
    Muxn_1.io.in[0] <= io.in[4] @[PE.scala 62:12]
    Muxn_1.io.in[1] <= io.in[5] @[PE.scala 62:12]
    Muxn_1.io.in[2] <= io.in[6] @[PE.scala 62:12]
    Muxn_1.io.in[3] <= io.in[7] @[PE.scala 62:12]
    Muxn_1.io.in[4] <= const @[PE.scala 64:12]
    Muxn_1.io.in[5] <= rf.io.out[1] @[PE.scala 66:12]
    DelayPipe_1.io.en <= io.en @[PE.scala 69:23]
    DelayPipe_1.io.in <= Muxn_1.io.out @[PE.scala 70:23]
    alu.io.in[1] <= DelayPipe_1.io.out @[PE.scala 71:18]
    rf.io.en <= io.en @[PE.scala 75:12]
    rf.io.in[0] <= alu.io.out @[PE.scala 76:15]
    io.out[0] <= rf.io.out[0] @[PE.scala 77:13]
    inst cfg of ConfigMem_35 @[PE.scala 89:19]
    cfg.clock <= clock
    cfg.reset <= reset
    node _T = bits(io.cfg_addr, 11, 2) @[PE.scala 90:63]
    node _T_1 = eq(UInt<7>("h043"), _T) @[PE.scala 90:48]
    node _T_2 = and(io.cfg_en, _T_1) @[PE.scala 90:30]
    cfg.io.cfg_en <= _T_2 @[PE.scala 90:17]
    node _T_3 = bits(io.cfg_addr, 1, 0) @[PE.scala 91:33]
    cfg.io.cfg_addr <= _T_3 @[PE.scala 91:19]
    cfg.io.cfg_data <= io.cfg_data @[PE.scala 92:19]
    wire cfgOut : UInt<48> @[PE.scala 96:20]
    cfgOut <= cfg.io.out[0] @[PE.scala 97:10]
    node _T_4 = bits(cfgOut, 31, 0) @[PE.scala 98:18]
    const <= _T_4 @[PE.scala 98:9]
    node _T_5 = bits(cfgOut, 35, 32) @[PE.scala 100:28]
    alu.io.config <= _T_5 @[PE.scala 100:19]
    rf.io.config is invalid @[PE.scala 107:18]
    node _T_6 = bits(cfgOut, 38, 36) @[PE.scala 113:38]
    DelayPipe.io.config <= _T_6 @[PE.scala 113:29]
    node _T_7 = bits(cfgOut, 41, 39) @[PE.scala 113:38]
    DelayPipe_1.io.config <= _T_7 @[PE.scala 113:29]
    node _T_8 = bits(cfgOut, 44, 42) @[PE.scala 121:32]
    Muxn.io.config <= _T_8 @[PE.scala 121:23]
    node _T_9 = bits(cfgOut, 47, 45) @[PE.scala 121:32]
    Muxn_1.io.config <= _T_9 @[PE.scala 121:23]
    
  module ALU_20 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<4>, flip in : UInt<32>[2], out : UInt<32>}
    
    node _T = bits(io.in[0], 31, 0) @[Operations.scala 122:31]
    node _T_1 = bits(io.in[0], 31, 0) @[Operations.scala 124:31]
    node _T_2 = bits(io.in[1], 31, 0) @[Operations.scala 124:49]
    node _T_3 = add(_T_1, _T_2) @[Operations.scala 124:41]
    node _T_4 = tail(_T_3, 1) @[Operations.scala 124:41]
    node _T_5 = bits(io.in[0], 31, 0) @[Operations.scala 126:31]
    node _T_6 = bits(io.in[1], 31, 0) @[Operations.scala 126:49]
    node _T_7 = sub(_T_5, _T_6) @[Operations.scala 126:41]
    node _T_8 = tail(_T_7, 1) @[Operations.scala 126:41]
    node _T_9 = bits(io.in[0], 31, 0) @[Operations.scala 128:31]
    node _T_10 = bits(io.in[1], 31, 0) @[Operations.scala 128:49]
    node _T_11 = mul(_T_9, _T_10) @[Operations.scala 128:41]
    node _T_12 = bits(io.in[0], 31, 0) @[Operations.scala 138:31]
    node _T_13 = bits(io.in[1], 31, 0) @[Operations.scala 138:49]
    node _T_14 = and(_T_12, _T_13) @[Operations.scala 138:41]
    node _T_15 = bits(io.in[0], 31, 0) @[Operations.scala 140:31]
    node _T_16 = bits(io.in[1], 31, 0) @[Operations.scala 140:49]
    node _T_17 = or(_T_15, _T_16) @[Operations.scala 140:41]
    node _T_18 = bits(io.in[0], 31, 0) @[Operations.scala 142:31]
    node _T_19 = bits(io.in[1], 31, 0) @[Operations.scala 142:49]
    node _T_20 = xor(_T_18, _T_19) @[Operations.scala 142:41]
    node _T_21 = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_22 = mux(_T_21, _T, UInt<1>("h00")) @[Mux.scala 80:57]
    node _T_23 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_24 = mux(_T_23, _T_4, _T_22) @[Mux.scala 80:57]
    node _T_25 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_26 = mux(_T_25, _T_8, _T_24) @[Mux.scala 80:57]
    node _T_27 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_28 = mux(_T_27, _T_11, _T_26) @[Mux.scala 80:57]
    node _T_29 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_30 = mux(_T_29, _T_14, _T_28) @[Mux.scala 80:57]
    node _T_31 = eq(UInt<3>("h05"), io.config) @[Mux.scala 80:60]
    node _T_32 = mux(_T_31, _T_17, _T_30) @[Mux.scala 80:57]
    node _T_33 = eq(UInt<3>("h06"), io.config) @[Mux.scala 80:60]
    node _T_34 = mux(_T_33, _T_20, _T_32) @[Mux.scala 80:57]
    io.out <= _T_34 @[ALU.scala 25:10]
    
  module RF_20 : 
    input clock : Clock
    input reset : Reset
    output io : {flip en : UInt<1>, flip config : UInt<0>, flip in : UInt<32>[1], out : UInt<32>[2]}
    
    wire _T : UInt<32>[1] @[RegFile.scala 24:29]
    _T[0] <= UInt<32>("h00") @[RegFile.scala 24:29]
    reg regs : UInt<32>[1], clock with : (reset => (reset, _T)) @[RegFile.scala 24:21]
    when io.en : @[RegFile.scala 34:16]
      regs[0] <= io.in[0] @[RegFile.scala 35:41]
      skip @[RegFile.scala 34:16]
    io.out[0] <= regs[0] @[RegFile.scala 37:42]
    io.out[1] <= regs[0] @[RegFile.scala 37:42]
    
  module DelayPipe_40 : 
    input clock : Clock
    input reset : Reset
    output io : {flip en : UInt<1>, flip config : UInt<3>, flip in : UInt<32>, out : UInt<32>}
    
    wire _T : UInt<32>[5] @[DelayPipe.scala 22:29]
    _T[0] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[1] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[2] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[3] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[4] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    reg regs : UInt<32>[5], clock with : (reset => (reset, _T)) @[DelayPipe.scala 22:21]
    reg wptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 23:21]
    reg rptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 24:21]
    node _T_1 = lt(wptr, UInt<3>("h04")) @[DelayPipe.scala 26:23]
    node _T_2 = and(io.en, _T_1) @[DelayPipe.scala 26:14]
    when _T_2 : @[DelayPipe.scala 26:37]
      node _T_3 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 27:17]
      node _T_4 = tail(_T_3, 1) @[DelayPipe.scala 27:17]
      wptr <= _T_4 @[DelayPipe.scala 27:10]
      skip @[DelayPipe.scala 26:37]
    else : @[DelayPipe.scala 28:14]
      wptr <= UInt<1>("h00") @[DelayPipe.scala 29:10]
      skip @[DelayPipe.scala 28:14]
    node _T_5 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 32:12]
    node _T_6 = tail(_T_5, 1) @[DelayPipe.scala 32:12]
    node _T_7 = geq(_T_6, io.config) @[DelayPipe.scala 32:17]
    when _T_7 : @[DelayPipe.scala 32:30]
      node _T_8 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 33:18]
      node _T_9 = tail(_T_8, 1) @[DelayPipe.scala 33:18]
      node _T_10 = sub(_T_9, io.config) @[DelayPipe.scala 33:24]
      node _T_11 = tail(_T_10, 1) @[DelayPipe.scala 33:24]
      rptr <= _T_11 @[DelayPipe.scala 33:10]
      skip @[DelayPipe.scala 32:30]
    else : @[DelayPipe.scala 34:14]
      node _T_12 = add(UInt<3>("h06"), wptr) @[DelayPipe.scala 35:30]
      node _T_13 = tail(_T_12, 1) @[DelayPipe.scala 35:30]
      node _T_14 = sub(_T_13, io.config) @[DelayPipe.scala 35:37]
      node _T_15 = tail(_T_14, 1) @[DelayPipe.scala 35:37]
      rptr <= _T_15 @[DelayPipe.scala 35:10]
      skip @[DelayPipe.scala 34:14]
    node _T_16 = gt(io.config, UInt<1>("h00")) @[DelayPipe.scala 39:28]
    node _T_17 = and(io.en, _T_16) @[DelayPipe.scala 39:14]
    when _T_17 : @[DelayPipe.scala 39:35]
      regs[wptr] <= io.in @[DelayPipe.scala 40:16]
      skip @[DelayPipe.scala 39:35]
    reg cnt : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 43:20]
    node _T_18 = eq(io.en, UInt<1>("h00")) @[DelayPipe.scala 44:8]
    when _T_18 : @[DelayPipe.scala 44:15]
      cnt <= UInt<1>("h00") @[DelayPipe.scala 45:9]
      skip @[DelayPipe.scala 44:15]
    else : @[DelayPipe.scala 46:30]
      node _T_19 = lt(cnt, io.config) @[DelayPipe.scala 46:18]
      when _T_19 : @[DelayPipe.scala 46:30]
        node _T_20 = add(cnt, UInt<1>("h01")) @[DelayPipe.scala 47:16]
        node _T_21 = tail(_T_20, 1) @[DelayPipe.scala 47:16]
        cnt <= _T_21 @[DelayPipe.scala 47:9]
        skip @[DelayPipe.scala 46:30]
    node _T_22 = eq(UInt<1>("h00"), io.config) @[DelayPipe.scala 50:22]
    node _T_23 = and(io.en, _T_22) @[DelayPipe.scala 50:14]
    when _T_23 : @[DelayPipe.scala 50:37]
      io.out <= io.in @[DelayPipe.scala 51:12]
      skip @[DelayPipe.scala 50:37]
    else : @[DelayPipe.scala 52:43]
      node _T_24 = eq(cnt, io.config) @[DelayPipe.scala 52:28]
      node _T_25 = and(io.en, _T_24) @[DelayPipe.scala 52:20]
      when _T_25 : @[DelayPipe.scala 52:43]
        io.out <= regs[rptr] @[DelayPipe.scala 53:12]
        skip @[DelayPipe.scala 52:43]
      else : @[DelayPipe.scala 54:14]
        io.out <= UInt<1>("h00") @[DelayPipe.scala 55:12]
        skip @[DelayPipe.scala 54:14]
    
  module DelayPipe_41 : 
    input clock : Clock
    input reset : Reset
    output io : {flip en : UInt<1>, flip config : UInt<3>, flip in : UInt<32>, out : UInt<32>}
    
    wire _T : UInt<32>[5] @[DelayPipe.scala 22:29]
    _T[0] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[1] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[2] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[3] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[4] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    reg regs : UInt<32>[5], clock with : (reset => (reset, _T)) @[DelayPipe.scala 22:21]
    reg wptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 23:21]
    reg rptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 24:21]
    node _T_1 = lt(wptr, UInt<3>("h04")) @[DelayPipe.scala 26:23]
    node _T_2 = and(io.en, _T_1) @[DelayPipe.scala 26:14]
    when _T_2 : @[DelayPipe.scala 26:37]
      node _T_3 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 27:17]
      node _T_4 = tail(_T_3, 1) @[DelayPipe.scala 27:17]
      wptr <= _T_4 @[DelayPipe.scala 27:10]
      skip @[DelayPipe.scala 26:37]
    else : @[DelayPipe.scala 28:14]
      wptr <= UInt<1>("h00") @[DelayPipe.scala 29:10]
      skip @[DelayPipe.scala 28:14]
    node _T_5 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 32:12]
    node _T_6 = tail(_T_5, 1) @[DelayPipe.scala 32:12]
    node _T_7 = geq(_T_6, io.config) @[DelayPipe.scala 32:17]
    when _T_7 : @[DelayPipe.scala 32:30]
      node _T_8 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 33:18]
      node _T_9 = tail(_T_8, 1) @[DelayPipe.scala 33:18]
      node _T_10 = sub(_T_9, io.config) @[DelayPipe.scala 33:24]
      node _T_11 = tail(_T_10, 1) @[DelayPipe.scala 33:24]
      rptr <= _T_11 @[DelayPipe.scala 33:10]
      skip @[DelayPipe.scala 32:30]
    else : @[DelayPipe.scala 34:14]
      node _T_12 = add(UInt<3>("h06"), wptr) @[DelayPipe.scala 35:30]
      node _T_13 = tail(_T_12, 1) @[DelayPipe.scala 35:30]
      node _T_14 = sub(_T_13, io.config) @[DelayPipe.scala 35:37]
      node _T_15 = tail(_T_14, 1) @[DelayPipe.scala 35:37]
      rptr <= _T_15 @[DelayPipe.scala 35:10]
      skip @[DelayPipe.scala 34:14]
    node _T_16 = gt(io.config, UInt<1>("h00")) @[DelayPipe.scala 39:28]
    node _T_17 = and(io.en, _T_16) @[DelayPipe.scala 39:14]
    when _T_17 : @[DelayPipe.scala 39:35]
      regs[wptr] <= io.in @[DelayPipe.scala 40:16]
      skip @[DelayPipe.scala 39:35]
    reg cnt : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 43:20]
    node _T_18 = eq(io.en, UInt<1>("h00")) @[DelayPipe.scala 44:8]
    when _T_18 : @[DelayPipe.scala 44:15]
      cnt <= UInt<1>("h00") @[DelayPipe.scala 45:9]
      skip @[DelayPipe.scala 44:15]
    else : @[DelayPipe.scala 46:30]
      node _T_19 = lt(cnt, io.config) @[DelayPipe.scala 46:18]
      when _T_19 : @[DelayPipe.scala 46:30]
        node _T_20 = add(cnt, UInt<1>("h01")) @[DelayPipe.scala 47:16]
        node _T_21 = tail(_T_20, 1) @[DelayPipe.scala 47:16]
        cnt <= _T_21 @[DelayPipe.scala 47:9]
        skip @[DelayPipe.scala 46:30]
    node _T_22 = eq(UInt<1>("h00"), io.config) @[DelayPipe.scala 50:22]
    node _T_23 = and(io.en, _T_22) @[DelayPipe.scala 50:14]
    when _T_23 : @[DelayPipe.scala 50:37]
      io.out <= io.in @[DelayPipe.scala 51:12]
      skip @[DelayPipe.scala 50:37]
    else : @[DelayPipe.scala 52:43]
      node _T_24 = eq(cnt, io.config) @[DelayPipe.scala 52:28]
      node _T_25 = and(io.en, _T_24) @[DelayPipe.scala 52:20]
      when _T_25 : @[DelayPipe.scala 52:43]
        io.out <= regs[rptr] @[DelayPipe.scala 53:12]
        skip @[DelayPipe.scala 52:43]
      else : @[DelayPipe.scala 54:14]
        io.out <= UInt<1>("h00") @[DelayPipe.scala 55:12]
        skip @[DelayPipe.scala 54:14]
    
  module Muxn_56 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[6], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    node _T_10 = eq(UInt<3>("h05"), io.config) @[Mux.scala 80:60]
    node _T_11 = mux(_T_10, io.in[5], _T_9) @[Mux.scala 80:57]
    io.out <= _T_11 @[Multiplexer.scala 20:10]
    
  module Muxn_57 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[6], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    node _T_10 = eq(UInt<3>("h05"), io.config) @[Mux.scala 80:60]
    node _T_11 = mux(_T_10, io.in[5], _T_9) @[Mux.scala 80:57]
    io.out <= _T_11 @[Multiplexer.scala 20:10]
    
  module ConfigMem_36 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<1>, flip cfg_data : UInt<32>, out : UInt<48>[1]}
    
    wire _T : UInt<48>[1] @[ConfigMem.scala 27:29]
    _T[0] <= UInt<48>("h00") @[ConfigMem.scala 27:29]
    reg regs : UInt<48>[1], clock with : (reset => (reset, _T)) @[ConfigMem.scala 27:21]
    node _T_1 = eq(io.cfg_addr, UInt<1>("h00")) @[ConfigMem.scala 39:38]
    node _T_2 = and(io.cfg_en, _T_1) @[ConfigMem.scala 39:22]
    when _T_2 : @[ConfigMem.scala 39:47]
      node _T_3 = bits(regs[0], 47, 32) @[ConfigMem.scala 41:33]
      node _T_4 = cat(_T_3, io.cfg_data) @[Cat.scala 29:58]
      regs[0] <= _T_4 @[ConfigMem.scala 41:19]
      skip @[ConfigMem.scala 39:47]
    node _T_5 = eq(io.cfg_addr, UInt<1>("h01")) @[ConfigMem.scala 39:38]
    node _T_6 = and(io.cfg_en, _T_5) @[ConfigMem.scala 39:22]
    when _T_6 : @[ConfigMem.scala 39:47]
      node _T_7 = bits(regs[0], 31, 0) @[ConfigMem.scala 43:46]
      node _T_8 = cat(io.cfg_data, _T_7) @[Cat.scala 29:58]
      regs[0] <= _T_8 @[ConfigMem.scala 43:19]
      skip @[ConfigMem.scala 39:47]
    io.out[0] <= regs[0] @[ConfigMem.scala 52:45]
    
  module GPE_20 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<12>, flip cfg_data : UInt<32>, flip en : UInt<1>, flip in : UInt<32>[8], out : UInt<32>[1]}
    
    inst alu of ALU_20 @[PE.scala 50:19]
    alu.clock <= clock
    alu.reset <= reset
    inst rf of RF_20 @[PE.scala 51:18]
    rf.clock <= clock
    rf.reset <= reset
    inst DelayPipe of DelayPipe_40 @[PE.scala 52:54]
    DelayPipe.clock <= clock
    DelayPipe.reset <= reset
    inst DelayPipe_1 of DelayPipe_41 @[PE.scala 52:54]
    DelayPipe_1.clock <= clock
    DelayPipe_1.reset <= reset
    wire const : UInt<32> @[PE.scala 54:19]
    inst Muxn of Muxn_56 @[PE.scala 55:49]
    Muxn.clock <= clock
    Muxn.reset <= reset
    inst Muxn_1 of Muxn_57 @[PE.scala 55:49]
    Muxn_1.clock <= clock
    Muxn_1.reset <= reset
    Muxn.io.in[0] <= io.in[0] @[PE.scala 62:12]
    Muxn.io.in[1] <= io.in[1] @[PE.scala 62:12]
    Muxn.io.in[2] <= io.in[2] @[PE.scala 62:12]
    Muxn.io.in[3] <= io.in[3] @[PE.scala 62:12]
    Muxn.io.in[4] <= const @[PE.scala 64:12]
    Muxn.io.in[5] <= rf.io.out[1] @[PE.scala 66:12]
    DelayPipe.io.en <= io.en @[PE.scala 69:23]
    DelayPipe.io.in <= Muxn.io.out @[PE.scala 70:23]
    alu.io.in[0] <= DelayPipe.io.out @[PE.scala 71:18]
    Muxn_1.io.in[0] <= io.in[4] @[PE.scala 62:12]
    Muxn_1.io.in[1] <= io.in[5] @[PE.scala 62:12]
    Muxn_1.io.in[2] <= io.in[6] @[PE.scala 62:12]
    Muxn_1.io.in[3] <= io.in[7] @[PE.scala 62:12]
    Muxn_1.io.in[4] <= const @[PE.scala 64:12]
    Muxn_1.io.in[5] <= rf.io.out[1] @[PE.scala 66:12]
    DelayPipe_1.io.en <= io.en @[PE.scala 69:23]
    DelayPipe_1.io.in <= Muxn_1.io.out @[PE.scala 70:23]
    alu.io.in[1] <= DelayPipe_1.io.out @[PE.scala 71:18]
    rf.io.en <= io.en @[PE.scala 75:12]
    rf.io.in[0] <= alu.io.out @[PE.scala 76:15]
    io.out[0] <= rf.io.out[0] @[PE.scala 77:13]
    inst cfg of ConfigMem_36 @[PE.scala 89:19]
    cfg.clock <= clock
    cfg.reset <= reset
    node _T = bits(io.cfg_addr, 11, 2) @[PE.scala 90:63]
    node _T_1 = eq(UInt<7>("h044"), _T) @[PE.scala 90:48]
    node _T_2 = and(io.cfg_en, _T_1) @[PE.scala 90:30]
    cfg.io.cfg_en <= _T_2 @[PE.scala 90:17]
    node _T_3 = bits(io.cfg_addr, 1, 0) @[PE.scala 91:33]
    cfg.io.cfg_addr <= _T_3 @[PE.scala 91:19]
    cfg.io.cfg_data <= io.cfg_data @[PE.scala 92:19]
    wire cfgOut : UInt<48> @[PE.scala 96:20]
    cfgOut <= cfg.io.out[0] @[PE.scala 97:10]
    node _T_4 = bits(cfgOut, 31, 0) @[PE.scala 98:18]
    const <= _T_4 @[PE.scala 98:9]
    node _T_5 = bits(cfgOut, 35, 32) @[PE.scala 100:28]
    alu.io.config <= _T_5 @[PE.scala 100:19]
    rf.io.config is invalid @[PE.scala 107:18]
    node _T_6 = bits(cfgOut, 38, 36) @[PE.scala 113:38]
    DelayPipe.io.config <= _T_6 @[PE.scala 113:29]
    node _T_7 = bits(cfgOut, 41, 39) @[PE.scala 113:38]
    DelayPipe_1.io.config <= _T_7 @[PE.scala 113:29]
    node _T_8 = bits(cfgOut, 44, 42) @[PE.scala 121:32]
    Muxn.io.config <= _T_8 @[PE.scala 121:23]
    node _T_9 = bits(cfgOut, 47, 45) @[PE.scala 121:32]
    Muxn_1.io.config <= _T_9 @[PE.scala 121:23]
    
  module ALU_21 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<4>, flip in : UInt<32>[2], out : UInt<32>}
    
    node _T = bits(io.in[0], 31, 0) @[Operations.scala 122:31]
    node _T_1 = bits(io.in[0], 31, 0) @[Operations.scala 124:31]
    node _T_2 = bits(io.in[1], 31, 0) @[Operations.scala 124:49]
    node _T_3 = add(_T_1, _T_2) @[Operations.scala 124:41]
    node _T_4 = tail(_T_3, 1) @[Operations.scala 124:41]
    node _T_5 = bits(io.in[0], 31, 0) @[Operations.scala 126:31]
    node _T_6 = bits(io.in[1], 31, 0) @[Operations.scala 126:49]
    node _T_7 = sub(_T_5, _T_6) @[Operations.scala 126:41]
    node _T_8 = tail(_T_7, 1) @[Operations.scala 126:41]
    node _T_9 = bits(io.in[0], 31, 0) @[Operations.scala 128:31]
    node _T_10 = bits(io.in[1], 31, 0) @[Operations.scala 128:49]
    node _T_11 = mul(_T_9, _T_10) @[Operations.scala 128:41]
    node _T_12 = bits(io.in[0], 31, 0) @[Operations.scala 138:31]
    node _T_13 = bits(io.in[1], 31, 0) @[Operations.scala 138:49]
    node _T_14 = and(_T_12, _T_13) @[Operations.scala 138:41]
    node _T_15 = bits(io.in[0], 31, 0) @[Operations.scala 140:31]
    node _T_16 = bits(io.in[1], 31, 0) @[Operations.scala 140:49]
    node _T_17 = or(_T_15, _T_16) @[Operations.scala 140:41]
    node _T_18 = bits(io.in[0], 31, 0) @[Operations.scala 142:31]
    node _T_19 = bits(io.in[1], 31, 0) @[Operations.scala 142:49]
    node _T_20 = xor(_T_18, _T_19) @[Operations.scala 142:41]
    node _T_21 = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_22 = mux(_T_21, _T, UInt<1>("h00")) @[Mux.scala 80:57]
    node _T_23 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_24 = mux(_T_23, _T_4, _T_22) @[Mux.scala 80:57]
    node _T_25 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_26 = mux(_T_25, _T_8, _T_24) @[Mux.scala 80:57]
    node _T_27 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_28 = mux(_T_27, _T_11, _T_26) @[Mux.scala 80:57]
    node _T_29 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_30 = mux(_T_29, _T_14, _T_28) @[Mux.scala 80:57]
    node _T_31 = eq(UInt<3>("h05"), io.config) @[Mux.scala 80:60]
    node _T_32 = mux(_T_31, _T_17, _T_30) @[Mux.scala 80:57]
    node _T_33 = eq(UInt<3>("h06"), io.config) @[Mux.scala 80:60]
    node _T_34 = mux(_T_33, _T_20, _T_32) @[Mux.scala 80:57]
    io.out <= _T_34 @[ALU.scala 25:10]
    
  module RF_21 : 
    input clock : Clock
    input reset : Reset
    output io : {flip en : UInt<1>, flip config : UInt<0>, flip in : UInt<32>[1], out : UInt<32>[2]}
    
    wire _T : UInt<32>[1] @[RegFile.scala 24:29]
    _T[0] <= UInt<32>("h00") @[RegFile.scala 24:29]
    reg regs : UInt<32>[1], clock with : (reset => (reset, _T)) @[RegFile.scala 24:21]
    when io.en : @[RegFile.scala 34:16]
      regs[0] <= io.in[0] @[RegFile.scala 35:41]
      skip @[RegFile.scala 34:16]
    io.out[0] <= regs[0] @[RegFile.scala 37:42]
    io.out[1] <= regs[0] @[RegFile.scala 37:42]
    
  module DelayPipe_42 : 
    input clock : Clock
    input reset : Reset
    output io : {flip en : UInt<1>, flip config : UInt<3>, flip in : UInt<32>, out : UInt<32>}
    
    wire _T : UInt<32>[5] @[DelayPipe.scala 22:29]
    _T[0] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[1] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[2] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[3] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[4] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    reg regs : UInt<32>[5], clock with : (reset => (reset, _T)) @[DelayPipe.scala 22:21]
    reg wptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 23:21]
    reg rptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 24:21]
    node _T_1 = lt(wptr, UInt<3>("h04")) @[DelayPipe.scala 26:23]
    node _T_2 = and(io.en, _T_1) @[DelayPipe.scala 26:14]
    when _T_2 : @[DelayPipe.scala 26:37]
      node _T_3 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 27:17]
      node _T_4 = tail(_T_3, 1) @[DelayPipe.scala 27:17]
      wptr <= _T_4 @[DelayPipe.scala 27:10]
      skip @[DelayPipe.scala 26:37]
    else : @[DelayPipe.scala 28:14]
      wptr <= UInt<1>("h00") @[DelayPipe.scala 29:10]
      skip @[DelayPipe.scala 28:14]
    node _T_5 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 32:12]
    node _T_6 = tail(_T_5, 1) @[DelayPipe.scala 32:12]
    node _T_7 = geq(_T_6, io.config) @[DelayPipe.scala 32:17]
    when _T_7 : @[DelayPipe.scala 32:30]
      node _T_8 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 33:18]
      node _T_9 = tail(_T_8, 1) @[DelayPipe.scala 33:18]
      node _T_10 = sub(_T_9, io.config) @[DelayPipe.scala 33:24]
      node _T_11 = tail(_T_10, 1) @[DelayPipe.scala 33:24]
      rptr <= _T_11 @[DelayPipe.scala 33:10]
      skip @[DelayPipe.scala 32:30]
    else : @[DelayPipe.scala 34:14]
      node _T_12 = add(UInt<3>("h06"), wptr) @[DelayPipe.scala 35:30]
      node _T_13 = tail(_T_12, 1) @[DelayPipe.scala 35:30]
      node _T_14 = sub(_T_13, io.config) @[DelayPipe.scala 35:37]
      node _T_15 = tail(_T_14, 1) @[DelayPipe.scala 35:37]
      rptr <= _T_15 @[DelayPipe.scala 35:10]
      skip @[DelayPipe.scala 34:14]
    node _T_16 = gt(io.config, UInt<1>("h00")) @[DelayPipe.scala 39:28]
    node _T_17 = and(io.en, _T_16) @[DelayPipe.scala 39:14]
    when _T_17 : @[DelayPipe.scala 39:35]
      regs[wptr] <= io.in @[DelayPipe.scala 40:16]
      skip @[DelayPipe.scala 39:35]
    reg cnt : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 43:20]
    node _T_18 = eq(io.en, UInt<1>("h00")) @[DelayPipe.scala 44:8]
    when _T_18 : @[DelayPipe.scala 44:15]
      cnt <= UInt<1>("h00") @[DelayPipe.scala 45:9]
      skip @[DelayPipe.scala 44:15]
    else : @[DelayPipe.scala 46:30]
      node _T_19 = lt(cnt, io.config) @[DelayPipe.scala 46:18]
      when _T_19 : @[DelayPipe.scala 46:30]
        node _T_20 = add(cnt, UInt<1>("h01")) @[DelayPipe.scala 47:16]
        node _T_21 = tail(_T_20, 1) @[DelayPipe.scala 47:16]
        cnt <= _T_21 @[DelayPipe.scala 47:9]
        skip @[DelayPipe.scala 46:30]
    node _T_22 = eq(UInt<1>("h00"), io.config) @[DelayPipe.scala 50:22]
    node _T_23 = and(io.en, _T_22) @[DelayPipe.scala 50:14]
    when _T_23 : @[DelayPipe.scala 50:37]
      io.out <= io.in @[DelayPipe.scala 51:12]
      skip @[DelayPipe.scala 50:37]
    else : @[DelayPipe.scala 52:43]
      node _T_24 = eq(cnt, io.config) @[DelayPipe.scala 52:28]
      node _T_25 = and(io.en, _T_24) @[DelayPipe.scala 52:20]
      when _T_25 : @[DelayPipe.scala 52:43]
        io.out <= regs[rptr] @[DelayPipe.scala 53:12]
        skip @[DelayPipe.scala 52:43]
      else : @[DelayPipe.scala 54:14]
        io.out <= UInt<1>("h00") @[DelayPipe.scala 55:12]
        skip @[DelayPipe.scala 54:14]
    
  module DelayPipe_43 : 
    input clock : Clock
    input reset : Reset
    output io : {flip en : UInt<1>, flip config : UInt<3>, flip in : UInt<32>, out : UInt<32>}
    
    wire _T : UInt<32>[5] @[DelayPipe.scala 22:29]
    _T[0] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[1] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[2] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[3] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[4] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    reg regs : UInt<32>[5], clock with : (reset => (reset, _T)) @[DelayPipe.scala 22:21]
    reg wptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 23:21]
    reg rptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 24:21]
    node _T_1 = lt(wptr, UInt<3>("h04")) @[DelayPipe.scala 26:23]
    node _T_2 = and(io.en, _T_1) @[DelayPipe.scala 26:14]
    when _T_2 : @[DelayPipe.scala 26:37]
      node _T_3 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 27:17]
      node _T_4 = tail(_T_3, 1) @[DelayPipe.scala 27:17]
      wptr <= _T_4 @[DelayPipe.scala 27:10]
      skip @[DelayPipe.scala 26:37]
    else : @[DelayPipe.scala 28:14]
      wptr <= UInt<1>("h00") @[DelayPipe.scala 29:10]
      skip @[DelayPipe.scala 28:14]
    node _T_5 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 32:12]
    node _T_6 = tail(_T_5, 1) @[DelayPipe.scala 32:12]
    node _T_7 = geq(_T_6, io.config) @[DelayPipe.scala 32:17]
    when _T_7 : @[DelayPipe.scala 32:30]
      node _T_8 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 33:18]
      node _T_9 = tail(_T_8, 1) @[DelayPipe.scala 33:18]
      node _T_10 = sub(_T_9, io.config) @[DelayPipe.scala 33:24]
      node _T_11 = tail(_T_10, 1) @[DelayPipe.scala 33:24]
      rptr <= _T_11 @[DelayPipe.scala 33:10]
      skip @[DelayPipe.scala 32:30]
    else : @[DelayPipe.scala 34:14]
      node _T_12 = add(UInt<3>("h06"), wptr) @[DelayPipe.scala 35:30]
      node _T_13 = tail(_T_12, 1) @[DelayPipe.scala 35:30]
      node _T_14 = sub(_T_13, io.config) @[DelayPipe.scala 35:37]
      node _T_15 = tail(_T_14, 1) @[DelayPipe.scala 35:37]
      rptr <= _T_15 @[DelayPipe.scala 35:10]
      skip @[DelayPipe.scala 34:14]
    node _T_16 = gt(io.config, UInt<1>("h00")) @[DelayPipe.scala 39:28]
    node _T_17 = and(io.en, _T_16) @[DelayPipe.scala 39:14]
    when _T_17 : @[DelayPipe.scala 39:35]
      regs[wptr] <= io.in @[DelayPipe.scala 40:16]
      skip @[DelayPipe.scala 39:35]
    reg cnt : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 43:20]
    node _T_18 = eq(io.en, UInt<1>("h00")) @[DelayPipe.scala 44:8]
    when _T_18 : @[DelayPipe.scala 44:15]
      cnt <= UInt<1>("h00") @[DelayPipe.scala 45:9]
      skip @[DelayPipe.scala 44:15]
    else : @[DelayPipe.scala 46:30]
      node _T_19 = lt(cnt, io.config) @[DelayPipe.scala 46:18]
      when _T_19 : @[DelayPipe.scala 46:30]
        node _T_20 = add(cnt, UInt<1>("h01")) @[DelayPipe.scala 47:16]
        node _T_21 = tail(_T_20, 1) @[DelayPipe.scala 47:16]
        cnt <= _T_21 @[DelayPipe.scala 47:9]
        skip @[DelayPipe.scala 46:30]
    node _T_22 = eq(UInt<1>("h00"), io.config) @[DelayPipe.scala 50:22]
    node _T_23 = and(io.en, _T_22) @[DelayPipe.scala 50:14]
    when _T_23 : @[DelayPipe.scala 50:37]
      io.out <= io.in @[DelayPipe.scala 51:12]
      skip @[DelayPipe.scala 50:37]
    else : @[DelayPipe.scala 52:43]
      node _T_24 = eq(cnt, io.config) @[DelayPipe.scala 52:28]
      node _T_25 = and(io.en, _T_24) @[DelayPipe.scala 52:20]
      when _T_25 : @[DelayPipe.scala 52:43]
        io.out <= regs[rptr] @[DelayPipe.scala 53:12]
        skip @[DelayPipe.scala 52:43]
      else : @[DelayPipe.scala 54:14]
        io.out <= UInt<1>("h00") @[DelayPipe.scala 55:12]
        skip @[DelayPipe.scala 54:14]
    
  module Muxn_58 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[6], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    node _T_10 = eq(UInt<3>("h05"), io.config) @[Mux.scala 80:60]
    node _T_11 = mux(_T_10, io.in[5], _T_9) @[Mux.scala 80:57]
    io.out <= _T_11 @[Multiplexer.scala 20:10]
    
  module Muxn_59 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[6], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    node _T_10 = eq(UInt<3>("h05"), io.config) @[Mux.scala 80:60]
    node _T_11 = mux(_T_10, io.in[5], _T_9) @[Mux.scala 80:57]
    io.out <= _T_11 @[Multiplexer.scala 20:10]
    
  module ConfigMem_37 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<1>, flip cfg_data : UInt<32>, out : UInt<48>[1]}
    
    wire _T : UInt<48>[1] @[ConfigMem.scala 27:29]
    _T[0] <= UInt<48>("h00") @[ConfigMem.scala 27:29]
    reg regs : UInt<48>[1], clock with : (reset => (reset, _T)) @[ConfigMem.scala 27:21]
    node _T_1 = eq(io.cfg_addr, UInt<1>("h00")) @[ConfigMem.scala 39:38]
    node _T_2 = and(io.cfg_en, _T_1) @[ConfigMem.scala 39:22]
    when _T_2 : @[ConfigMem.scala 39:47]
      node _T_3 = bits(regs[0], 47, 32) @[ConfigMem.scala 41:33]
      node _T_4 = cat(_T_3, io.cfg_data) @[Cat.scala 29:58]
      regs[0] <= _T_4 @[ConfigMem.scala 41:19]
      skip @[ConfigMem.scala 39:47]
    node _T_5 = eq(io.cfg_addr, UInt<1>("h01")) @[ConfigMem.scala 39:38]
    node _T_6 = and(io.cfg_en, _T_5) @[ConfigMem.scala 39:22]
    when _T_6 : @[ConfigMem.scala 39:47]
      node _T_7 = bits(regs[0], 31, 0) @[ConfigMem.scala 43:46]
      node _T_8 = cat(io.cfg_data, _T_7) @[Cat.scala 29:58]
      regs[0] <= _T_8 @[ConfigMem.scala 43:19]
      skip @[ConfigMem.scala 39:47]
    io.out[0] <= regs[0] @[ConfigMem.scala 52:45]
    
  module GPE_21 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<12>, flip cfg_data : UInt<32>, flip en : UInt<1>, flip in : UInt<32>[8], out : UInt<32>[1]}
    
    inst alu of ALU_21 @[PE.scala 50:19]
    alu.clock <= clock
    alu.reset <= reset
    inst rf of RF_21 @[PE.scala 51:18]
    rf.clock <= clock
    rf.reset <= reset
    inst DelayPipe of DelayPipe_42 @[PE.scala 52:54]
    DelayPipe.clock <= clock
    DelayPipe.reset <= reset
    inst DelayPipe_1 of DelayPipe_43 @[PE.scala 52:54]
    DelayPipe_1.clock <= clock
    DelayPipe_1.reset <= reset
    wire const : UInt<32> @[PE.scala 54:19]
    inst Muxn of Muxn_58 @[PE.scala 55:49]
    Muxn.clock <= clock
    Muxn.reset <= reset
    inst Muxn_1 of Muxn_59 @[PE.scala 55:49]
    Muxn_1.clock <= clock
    Muxn_1.reset <= reset
    Muxn.io.in[0] <= io.in[0] @[PE.scala 62:12]
    Muxn.io.in[1] <= io.in[1] @[PE.scala 62:12]
    Muxn.io.in[2] <= io.in[2] @[PE.scala 62:12]
    Muxn.io.in[3] <= io.in[3] @[PE.scala 62:12]
    Muxn.io.in[4] <= const @[PE.scala 64:12]
    Muxn.io.in[5] <= rf.io.out[1] @[PE.scala 66:12]
    DelayPipe.io.en <= io.en @[PE.scala 69:23]
    DelayPipe.io.in <= Muxn.io.out @[PE.scala 70:23]
    alu.io.in[0] <= DelayPipe.io.out @[PE.scala 71:18]
    Muxn_1.io.in[0] <= io.in[4] @[PE.scala 62:12]
    Muxn_1.io.in[1] <= io.in[5] @[PE.scala 62:12]
    Muxn_1.io.in[2] <= io.in[6] @[PE.scala 62:12]
    Muxn_1.io.in[3] <= io.in[7] @[PE.scala 62:12]
    Muxn_1.io.in[4] <= const @[PE.scala 64:12]
    Muxn_1.io.in[5] <= rf.io.out[1] @[PE.scala 66:12]
    DelayPipe_1.io.en <= io.en @[PE.scala 69:23]
    DelayPipe_1.io.in <= Muxn_1.io.out @[PE.scala 70:23]
    alu.io.in[1] <= DelayPipe_1.io.out @[PE.scala 71:18]
    rf.io.en <= io.en @[PE.scala 75:12]
    rf.io.in[0] <= alu.io.out @[PE.scala 76:15]
    io.out[0] <= rf.io.out[0] @[PE.scala 77:13]
    inst cfg of ConfigMem_37 @[PE.scala 89:19]
    cfg.clock <= clock
    cfg.reset <= reset
    node _T = bits(io.cfg_addr, 11, 2) @[PE.scala 90:63]
    node _T_1 = eq(UInt<7>("h045"), _T) @[PE.scala 90:48]
    node _T_2 = and(io.cfg_en, _T_1) @[PE.scala 90:30]
    cfg.io.cfg_en <= _T_2 @[PE.scala 90:17]
    node _T_3 = bits(io.cfg_addr, 1, 0) @[PE.scala 91:33]
    cfg.io.cfg_addr <= _T_3 @[PE.scala 91:19]
    cfg.io.cfg_data <= io.cfg_data @[PE.scala 92:19]
    wire cfgOut : UInt<48> @[PE.scala 96:20]
    cfgOut <= cfg.io.out[0] @[PE.scala 97:10]
    node _T_4 = bits(cfgOut, 31, 0) @[PE.scala 98:18]
    const <= _T_4 @[PE.scala 98:9]
    node _T_5 = bits(cfgOut, 35, 32) @[PE.scala 100:28]
    alu.io.config <= _T_5 @[PE.scala 100:19]
    rf.io.config is invalid @[PE.scala 107:18]
    node _T_6 = bits(cfgOut, 38, 36) @[PE.scala 113:38]
    DelayPipe.io.config <= _T_6 @[PE.scala 113:29]
    node _T_7 = bits(cfgOut, 41, 39) @[PE.scala 113:38]
    DelayPipe_1.io.config <= _T_7 @[PE.scala 113:29]
    node _T_8 = bits(cfgOut, 44, 42) @[PE.scala 121:32]
    Muxn.io.config <= _T_8 @[PE.scala 121:23]
    node _T_9 = bits(cfgOut, 47, 45) @[PE.scala 121:32]
    Muxn_1.io.config <= _T_9 @[PE.scala 121:23]
    
  module ALU_22 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<4>, flip in : UInt<32>[2], out : UInt<32>}
    
    node _T = bits(io.in[0], 31, 0) @[Operations.scala 122:31]
    node _T_1 = bits(io.in[0], 31, 0) @[Operations.scala 124:31]
    node _T_2 = bits(io.in[1], 31, 0) @[Operations.scala 124:49]
    node _T_3 = add(_T_1, _T_2) @[Operations.scala 124:41]
    node _T_4 = tail(_T_3, 1) @[Operations.scala 124:41]
    node _T_5 = bits(io.in[0], 31, 0) @[Operations.scala 126:31]
    node _T_6 = bits(io.in[1], 31, 0) @[Operations.scala 126:49]
    node _T_7 = sub(_T_5, _T_6) @[Operations.scala 126:41]
    node _T_8 = tail(_T_7, 1) @[Operations.scala 126:41]
    node _T_9 = bits(io.in[0], 31, 0) @[Operations.scala 128:31]
    node _T_10 = bits(io.in[1], 31, 0) @[Operations.scala 128:49]
    node _T_11 = mul(_T_9, _T_10) @[Operations.scala 128:41]
    node _T_12 = bits(io.in[0], 31, 0) @[Operations.scala 138:31]
    node _T_13 = bits(io.in[1], 31, 0) @[Operations.scala 138:49]
    node _T_14 = and(_T_12, _T_13) @[Operations.scala 138:41]
    node _T_15 = bits(io.in[0], 31, 0) @[Operations.scala 140:31]
    node _T_16 = bits(io.in[1], 31, 0) @[Operations.scala 140:49]
    node _T_17 = or(_T_15, _T_16) @[Operations.scala 140:41]
    node _T_18 = bits(io.in[0], 31, 0) @[Operations.scala 142:31]
    node _T_19 = bits(io.in[1], 31, 0) @[Operations.scala 142:49]
    node _T_20 = xor(_T_18, _T_19) @[Operations.scala 142:41]
    node _T_21 = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_22 = mux(_T_21, _T, UInt<1>("h00")) @[Mux.scala 80:57]
    node _T_23 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_24 = mux(_T_23, _T_4, _T_22) @[Mux.scala 80:57]
    node _T_25 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_26 = mux(_T_25, _T_8, _T_24) @[Mux.scala 80:57]
    node _T_27 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_28 = mux(_T_27, _T_11, _T_26) @[Mux.scala 80:57]
    node _T_29 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_30 = mux(_T_29, _T_14, _T_28) @[Mux.scala 80:57]
    node _T_31 = eq(UInt<3>("h05"), io.config) @[Mux.scala 80:60]
    node _T_32 = mux(_T_31, _T_17, _T_30) @[Mux.scala 80:57]
    node _T_33 = eq(UInt<3>("h06"), io.config) @[Mux.scala 80:60]
    node _T_34 = mux(_T_33, _T_20, _T_32) @[Mux.scala 80:57]
    io.out <= _T_34 @[ALU.scala 25:10]
    
  module RF_22 : 
    input clock : Clock
    input reset : Reset
    output io : {flip en : UInt<1>, flip config : UInt<0>, flip in : UInt<32>[1], out : UInt<32>[2]}
    
    wire _T : UInt<32>[1] @[RegFile.scala 24:29]
    _T[0] <= UInt<32>("h00") @[RegFile.scala 24:29]
    reg regs : UInt<32>[1], clock with : (reset => (reset, _T)) @[RegFile.scala 24:21]
    when io.en : @[RegFile.scala 34:16]
      regs[0] <= io.in[0] @[RegFile.scala 35:41]
      skip @[RegFile.scala 34:16]
    io.out[0] <= regs[0] @[RegFile.scala 37:42]
    io.out[1] <= regs[0] @[RegFile.scala 37:42]
    
  module DelayPipe_44 : 
    input clock : Clock
    input reset : Reset
    output io : {flip en : UInt<1>, flip config : UInt<3>, flip in : UInt<32>, out : UInt<32>}
    
    wire _T : UInt<32>[5] @[DelayPipe.scala 22:29]
    _T[0] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[1] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[2] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[3] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[4] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    reg regs : UInt<32>[5], clock with : (reset => (reset, _T)) @[DelayPipe.scala 22:21]
    reg wptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 23:21]
    reg rptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 24:21]
    node _T_1 = lt(wptr, UInt<3>("h04")) @[DelayPipe.scala 26:23]
    node _T_2 = and(io.en, _T_1) @[DelayPipe.scala 26:14]
    when _T_2 : @[DelayPipe.scala 26:37]
      node _T_3 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 27:17]
      node _T_4 = tail(_T_3, 1) @[DelayPipe.scala 27:17]
      wptr <= _T_4 @[DelayPipe.scala 27:10]
      skip @[DelayPipe.scala 26:37]
    else : @[DelayPipe.scala 28:14]
      wptr <= UInt<1>("h00") @[DelayPipe.scala 29:10]
      skip @[DelayPipe.scala 28:14]
    node _T_5 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 32:12]
    node _T_6 = tail(_T_5, 1) @[DelayPipe.scala 32:12]
    node _T_7 = geq(_T_6, io.config) @[DelayPipe.scala 32:17]
    when _T_7 : @[DelayPipe.scala 32:30]
      node _T_8 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 33:18]
      node _T_9 = tail(_T_8, 1) @[DelayPipe.scala 33:18]
      node _T_10 = sub(_T_9, io.config) @[DelayPipe.scala 33:24]
      node _T_11 = tail(_T_10, 1) @[DelayPipe.scala 33:24]
      rptr <= _T_11 @[DelayPipe.scala 33:10]
      skip @[DelayPipe.scala 32:30]
    else : @[DelayPipe.scala 34:14]
      node _T_12 = add(UInt<3>("h06"), wptr) @[DelayPipe.scala 35:30]
      node _T_13 = tail(_T_12, 1) @[DelayPipe.scala 35:30]
      node _T_14 = sub(_T_13, io.config) @[DelayPipe.scala 35:37]
      node _T_15 = tail(_T_14, 1) @[DelayPipe.scala 35:37]
      rptr <= _T_15 @[DelayPipe.scala 35:10]
      skip @[DelayPipe.scala 34:14]
    node _T_16 = gt(io.config, UInt<1>("h00")) @[DelayPipe.scala 39:28]
    node _T_17 = and(io.en, _T_16) @[DelayPipe.scala 39:14]
    when _T_17 : @[DelayPipe.scala 39:35]
      regs[wptr] <= io.in @[DelayPipe.scala 40:16]
      skip @[DelayPipe.scala 39:35]
    reg cnt : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 43:20]
    node _T_18 = eq(io.en, UInt<1>("h00")) @[DelayPipe.scala 44:8]
    when _T_18 : @[DelayPipe.scala 44:15]
      cnt <= UInt<1>("h00") @[DelayPipe.scala 45:9]
      skip @[DelayPipe.scala 44:15]
    else : @[DelayPipe.scala 46:30]
      node _T_19 = lt(cnt, io.config) @[DelayPipe.scala 46:18]
      when _T_19 : @[DelayPipe.scala 46:30]
        node _T_20 = add(cnt, UInt<1>("h01")) @[DelayPipe.scala 47:16]
        node _T_21 = tail(_T_20, 1) @[DelayPipe.scala 47:16]
        cnt <= _T_21 @[DelayPipe.scala 47:9]
        skip @[DelayPipe.scala 46:30]
    node _T_22 = eq(UInt<1>("h00"), io.config) @[DelayPipe.scala 50:22]
    node _T_23 = and(io.en, _T_22) @[DelayPipe.scala 50:14]
    when _T_23 : @[DelayPipe.scala 50:37]
      io.out <= io.in @[DelayPipe.scala 51:12]
      skip @[DelayPipe.scala 50:37]
    else : @[DelayPipe.scala 52:43]
      node _T_24 = eq(cnt, io.config) @[DelayPipe.scala 52:28]
      node _T_25 = and(io.en, _T_24) @[DelayPipe.scala 52:20]
      when _T_25 : @[DelayPipe.scala 52:43]
        io.out <= regs[rptr] @[DelayPipe.scala 53:12]
        skip @[DelayPipe.scala 52:43]
      else : @[DelayPipe.scala 54:14]
        io.out <= UInt<1>("h00") @[DelayPipe.scala 55:12]
        skip @[DelayPipe.scala 54:14]
    
  module DelayPipe_45 : 
    input clock : Clock
    input reset : Reset
    output io : {flip en : UInt<1>, flip config : UInt<3>, flip in : UInt<32>, out : UInt<32>}
    
    wire _T : UInt<32>[5] @[DelayPipe.scala 22:29]
    _T[0] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[1] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[2] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[3] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[4] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    reg regs : UInt<32>[5], clock with : (reset => (reset, _T)) @[DelayPipe.scala 22:21]
    reg wptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 23:21]
    reg rptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 24:21]
    node _T_1 = lt(wptr, UInt<3>("h04")) @[DelayPipe.scala 26:23]
    node _T_2 = and(io.en, _T_1) @[DelayPipe.scala 26:14]
    when _T_2 : @[DelayPipe.scala 26:37]
      node _T_3 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 27:17]
      node _T_4 = tail(_T_3, 1) @[DelayPipe.scala 27:17]
      wptr <= _T_4 @[DelayPipe.scala 27:10]
      skip @[DelayPipe.scala 26:37]
    else : @[DelayPipe.scala 28:14]
      wptr <= UInt<1>("h00") @[DelayPipe.scala 29:10]
      skip @[DelayPipe.scala 28:14]
    node _T_5 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 32:12]
    node _T_6 = tail(_T_5, 1) @[DelayPipe.scala 32:12]
    node _T_7 = geq(_T_6, io.config) @[DelayPipe.scala 32:17]
    when _T_7 : @[DelayPipe.scala 32:30]
      node _T_8 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 33:18]
      node _T_9 = tail(_T_8, 1) @[DelayPipe.scala 33:18]
      node _T_10 = sub(_T_9, io.config) @[DelayPipe.scala 33:24]
      node _T_11 = tail(_T_10, 1) @[DelayPipe.scala 33:24]
      rptr <= _T_11 @[DelayPipe.scala 33:10]
      skip @[DelayPipe.scala 32:30]
    else : @[DelayPipe.scala 34:14]
      node _T_12 = add(UInt<3>("h06"), wptr) @[DelayPipe.scala 35:30]
      node _T_13 = tail(_T_12, 1) @[DelayPipe.scala 35:30]
      node _T_14 = sub(_T_13, io.config) @[DelayPipe.scala 35:37]
      node _T_15 = tail(_T_14, 1) @[DelayPipe.scala 35:37]
      rptr <= _T_15 @[DelayPipe.scala 35:10]
      skip @[DelayPipe.scala 34:14]
    node _T_16 = gt(io.config, UInt<1>("h00")) @[DelayPipe.scala 39:28]
    node _T_17 = and(io.en, _T_16) @[DelayPipe.scala 39:14]
    when _T_17 : @[DelayPipe.scala 39:35]
      regs[wptr] <= io.in @[DelayPipe.scala 40:16]
      skip @[DelayPipe.scala 39:35]
    reg cnt : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 43:20]
    node _T_18 = eq(io.en, UInt<1>("h00")) @[DelayPipe.scala 44:8]
    when _T_18 : @[DelayPipe.scala 44:15]
      cnt <= UInt<1>("h00") @[DelayPipe.scala 45:9]
      skip @[DelayPipe.scala 44:15]
    else : @[DelayPipe.scala 46:30]
      node _T_19 = lt(cnt, io.config) @[DelayPipe.scala 46:18]
      when _T_19 : @[DelayPipe.scala 46:30]
        node _T_20 = add(cnt, UInt<1>("h01")) @[DelayPipe.scala 47:16]
        node _T_21 = tail(_T_20, 1) @[DelayPipe.scala 47:16]
        cnt <= _T_21 @[DelayPipe.scala 47:9]
        skip @[DelayPipe.scala 46:30]
    node _T_22 = eq(UInt<1>("h00"), io.config) @[DelayPipe.scala 50:22]
    node _T_23 = and(io.en, _T_22) @[DelayPipe.scala 50:14]
    when _T_23 : @[DelayPipe.scala 50:37]
      io.out <= io.in @[DelayPipe.scala 51:12]
      skip @[DelayPipe.scala 50:37]
    else : @[DelayPipe.scala 52:43]
      node _T_24 = eq(cnt, io.config) @[DelayPipe.scala 52:28]
      node _T_25 = and(io.en, _T_24) @[DelayPipe.scala 52:20]
      when _T_25 : @[DelayPipe.scala 52:43]
        io.out <= regs[rptr] @[DelayPipe.scala 53:12]
        skip @[DelayPipe.scala 52:43]
      else : @[DelayPipe.scala 54:14]
        io.out <= UInt<1>("h00") @[DelayPipe.scala 55:12]
        skip @[DelayPipe.scala 54:14]
    
  module Muxn_60 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[6], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    node _T_10 = eq(UInt<3>("h05"), io.config) @[Mux.scala 80:60]
    node _T_11 = mux(_T_10, io.in[5], _T_9) @[Mux.scala 80:57]
    io.out <= _T_11 @[Multiplexer.scala 20:10]
    
  module Muxn_61 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[6], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    node _T_10 = eq(UInt<3>("h05"), io.config) @[Mux.scala 80:60]
    node _T_11 = mux(_T_10, io.in[5], _T_9) @[Mux.scala 80:57]
    io.out <= _T_11 @[Multiplexer.scala 20:10]
    
  module ConfigMem_38 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<1>, flip cfg_data : UInt<32>, out : UInt<48>[1]}
    
    wire _T : UInt<48>[1] @[ConfigMem.scala 27:29]
    _T[0] <= UInt<48>("h00") @[ConfigMem.scala 27:29]
    reg regs : UInt<48>[1], clock with : (reset => (reset, _T)) @[ConfigMem.scala 27:21]
    node _T_1 = eq(io.cfg_addr, UInt<1>("h00")) @[ConfigMem.scala 39:38]
    node _T_2 = and(io.cfg_en, _T_1) @[ConfigMem.scala 39:22]
    when _T_2 : @[ConfigMem.scala 39:47]
      node _T_3 = bits(regs[0], 47, 32) @[ConfigMem.scala 41:33]
      node _T_4 = cat(_T_3, io.cfg_data) @[Cat.scala 29:58]
      regs[0] <= _T_4 @[ConfigMem.scala 41:19]
      skip @[ConfigMem.scala 39:47]
    node _T_5 = eq(io.cfg_addr, UInt<1>("h01")) @[ConfigMem.scala 39:38]
    node _T_6 = and(io.cfg_en, _T_5) @[ConfigMem.scala 39:22]
    when _T_6 : @[ConfigMem.scala 39:47]
      node _T_7 = bits(regs[0], 31, 0) @[ConfigMem.scala 43:46]
      node _T_8 = cat(io.cfg_data, _T_7) @[Cat.scala 29:58]
      regs[0] <= _T_8 @[ConfigMem.scala 43:19]
      skip @[ConfigMem.scala 39:47]
    io.out[0] <= regs[0] @[ConfigMem.scala 52:45]
    
  module GPE_22 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<12>, flip cfg_data : UInt<32>, flip en : UInt<1>, flip in : UInt<32>[8], out : UInt<32>[1]}
    
    inst alu of ALU_22 @[PE.scala 50:19]
    alu.clock <= clock
    alu.reset <= reset
    inst rf of RF_22 @[PE.scala 51:18]
    rf.clock <= clock
    rf.reset <= reset
    inst DelayPipe of DelayPipe_44 @[PE.scala 52:54]
    DelayPipe.clock <= clock
    DelayPipe.reset <= reset
    inst DelayPipe_1 of DelayPipe_45 @[PE.scala 52:54]
    DelayPipe_1.clock <= clock
    DelayPipe_1.reset <= reset
    wire const : UInt<32> @[PE.scala 54:19]
    inst Muxn of Muxn_60 @[PE.scala 55:49]
    Muxn.clock <= clock
    Muxn.reset <= reset
    inst Muxn_1 of Muxn_61 @[PE.scala 55:49]
    Muxn_1.clock <= clock
    Muxn_1.reset <= reset
    Muxn.io.in[0] <= io.in[0] @[PE.scala 62:12]
    Muxn.io.in[1] <= io.in[1] @[PE.scala 62:12]
    Muxn.io.in[2] <= io.in[2] @[PE.scala 62:12]
    Muxn.io.in[3] <= io.in[3] @[PE.scala 62:12]
    Muxn.io.in[4] <= const @[PE.scala 64:12]
    Muxn.io.in[5] <= rf.io.out[1] @[PE.scala 66:12]
    DelayPipe.io.en <= io.en @[PE.scala 69:23]
    DelayPipe.io.in <= Muxn.io.out @[PE.scala 70:23]
    alu.io.in[0] <= DelayPipe.io.out @[PE.scala 71:18]
    Muxn_1.io.in[0] <= io.in[4] @[PE.scala 62:12]
    Muxn_1.io.in[1] <= io.in[5] @[PE.scala 62:12]
    Muxn_1.io.in[2] <= io.in[6] @[PE.scala 62:12]
    Muxn_1.io.in[3] <= io.in[7] @[PE.scala 62:12]
    Muxn_1.io.in[4] <= const @[PE.scala 64:12]
    Muxn_1.io.in[5] <= rf.io.out[1] @[PE.scala 66:12]
    DelayPipe_1.io.en <= io.en @[PE.scala 69:23]
    DelayPipe_1.io.in <= Muxn_1.io.out @[PE.scala 70:23]
    alu.io.in[1] <= DelayPipe_1.io.out @[PE.scala 71:18]
    rf.io.en <= io.en @[PE.scala 75:12]
    rf.io.in[0] <= alu.io.out @[PE.scala 76:15]
    io.out[0] <= rf.io.out[0] @[PE.scala 77:13]
    inst cfg of ConfigMem_38 @[PE.scala 89:19]
    cfg.clock <= clock
    cfg.reset <= reset
    node _T = bits(io.cfg_addr, 11, 2) @[PE.scala 90:63]
    node _T_1 = eq(UInt<7>("h046"), _T) @[PE.scala 90:48]
    node _T_2 = and(io.cfg_en, _T_1) @[PE.scala 90:30]
    cfg.io.cfg_en <= _T_2 @[PE.scala 90:17]
    node _T_3 = bits(io.cfg_addr, 1, 0) @[PE.scala 91:33]
    cfg.io.cfg_addr <= _T_3 @[PE.scala 91:19]
    cfg.io.cfg_data <= io.cfg_data @[PE.scala 92:19]
    wire cfgOut : UInt<48> @[PE.scala 96:20]
    cfgOut <= cfg.io.out[0] @[PE.scala 97:10]
    node _T_4 = bits(cfgOut, 31, 0) @[PE.scala 98:18]
    const <= _T_4 @[PE.scala 98:9]
    node _T_5 = bits(cfgOut, 35, 32) @[PE.scala 100:28]
    alu.io.config <= _T_5 @[PE.scala 100:19]
    rf.io.config is invalid @[PE.scala 107:18]
    node _T_6 = bits(cfgOut, 38, 36) @[PE.scala 113:38]
    DelayPipe.io.config <= _T_6 @[PE.scala 113:29]
    node _T_7 = bits(cfgOut, 41, 39) @[PE.scala 113:38]
    DelayPipe_1.io.config <= _T_7 @[PE.scala 113:29]
    node _T_8 = bits(cfgOut, 44, 42) @[PE.scala 121:32]
    Muxn.io.config <= _T_8 @[PE.scala 121:23]
    node _T_9 = bits(cfgOut, 47, 45) @[PE.scala 121:32]
    Muxn_1.io.config <= _T_9 @[PE.scala 121:23]
    
  module ALU_23 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<4>, flip in : UInt<32>[2], out : UInt<32>}
    
    node _T = bits(io.in[0], 31, 0) @[Operations.scala 122:31]
    node _T_1 = bits(io.in[0], 31, 0) @[Operations.scala 124:31]
    node _T_2 = bits(io.in[1], 31, 0) @[Operations.scala 124:49]
    node _T_3 = add(_T_1, _T_2) @[Operations.scala 124:41]
    node _T_4 = tail(_T_3, 1) @[Operations.scala 124:41]
    node _T_5 = bits(io.in[0], 31, 0) @[Operations.scala 126:31]
    node _T_6 = bits(io.in[1], 31, 0) @[Operations.scala 126:49]
    node _T_7 = sub(_T_5, _T_6) @[Operations.scala 126:41]
    node _T_8 = tail(_T_7, 1) @[Operations.scala 126:41]
    node _T_9 = bits(io.in[0], 31, 0) @[Operations.scala 128:31]
    node _T_10 = bits(io.in[1], 31, 0) @[Operations.scala 128:49]
    node _T_11 = mul(_T_9, _T_10) @[Operations.scala 128:41]
    node _T_12 = bits(io.in[0], 31, 0) @[Operations.scala 138:31]
    node _T_13 = bits(io.in[1], 31, 0) @[Operations.scala 138:49]
    node _T_14 = and(_T_12, _T_13) @[Operations.scala 138:41]
    node _T_15 = bits(io.in[0], 31, 0) @[Operations.scala 140:31]
    node _T_16 = bits(io.in[1], 31, 0) @[Operations.scala 140:49]
    node _T_17 = or(_T_15, _T_16) @[Operations.scala 140:41]
    node _T_18 = bits(io.in[0], 31, 0) @[Operations.scala 142:31]
    node _T_19 = bits(io.in[1], 31, 0) @[Operations.scala 142:49]
    node _T_20 = xor(_T_18, _T_19) @[Operations.scala 142:41]
    node _T_21 = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_22 = mux(_T_21, _T, UInt<1>("h00")) @[Mux.scala 80:57]
    node _T_23 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_24 = mux(_T_23, _T_4, _T_22) @[Mux.scala 80:57]
    node _T_25 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_26 = mux(_T_25, _T_8, _T_24) @[Mux.scala 80:57]
    node _T_27 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_28 = mux(_T_27, _T_11, _T_26) @[Mux.scala 80:57]
    node _T_29 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_30 = mux(_T_29, _T_14, _T_28) @[Mux.scala 80:57]
    node _T_31 = eq(UInt<3>("h05"), io.config) @[Mux.scala 80:60]
    node _T_32 = mux(_T_31, _T_17, _T_30) @[Mux.scala 80:57]
    node _T_33 = eq(UInt<3>("h06"), io.config) @[Mux.scala 80:60]
    node _T_34 = mux(_T_33, _T_20, _T_32) @[Mux.scala 80:57]
    io.out <= _T_34 @[ALU.scala 25:10]
    
  module RF_23 : 
    input clock : Clock
    input reset : Reset
    output io : {flip en : UInt<1>, flip config : UInt<0>, flip in : UInt<32>[1], out : UInt<32>[2]}
    
    wire _T : UInt<32>[1] @[RegFile.scala 24:29]
    _T[0] <= UInt<32>("h00") @[RegFile.scala 24:29]
    reg regs : UInt<32>[1], clock with : (reset => (reset, _T)) @[RegFile.scala 24:21]
    when io.en : @[RegFile.scala 34:16]
      regs[0] <= io.in[0] @[RegFile.scala 35:41]
      skip @[RegFile.scala 34:16]
    io.out[0] <= regs[0] @[RegFile.scala 37:42]
    io.out[1] <= regs[0] @[RegFile.scala 37:42]
    
  module DelayPipe_46 : 
    input clock : Clock
    input reset : Reset
    output io : {flip en : UInt<1>, flip config : UInt<3>, flip in : UInt<32>, out : UInt<32>}
    
    wire _T : UInt<32>[5] @[DelayPipe.scala 22:29]
    _T[0] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[1] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[2] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[3] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[4] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    reg regs : UInt<32>[5], clock with : (reset => (reset, _T)) @[DelayPipe.scala 22:21]
    reg wptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 23:21]
    reg rptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 24:21]
    node _T_1 = lt(wptr, UInt<3>("h04")) @[DelayPipe.scala 26:23]
    node _T_2 = and(io.en, _T_1) @[DelayPipe.scala 26:14]
    when _T_2 : @[DelayPipe.scala 26:37]
      node _T_3 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 27:17]
      node _T_4 = tail(_T_3, 1) @[DelayPipe.scala 27:17]
      wptr <= _T_4 @[DelayPipe.scala 27:10]
      skip @[DelayPipe.scala 26:37]
    else : @[DelayPipe.scala 28:14]
      wptr <= UInt<1>("h00") @[DelayPipe.scala 29:10]
      skip @[DelayPipe.scala 28:14]
    node _T_5 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 32:12]
    node _T_6 = tail(_T_5, 1) @[DelayPipe.scala 32:12]
    node _T_7 = geq(_T_6, io.config) @[DelayPipe.scala 32:17]
    when _T_7 : @[DelayPipe.scala 32:30]
      node _T_8 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 33:18]
      node _T_9 = tail(_T_8, 1) @[DelayPipe.scala 33:18]
      node _T_10 = sub(_T_9, io.config) @[DelayPipe.scala 33:24]
      node _T_11 = tail(_T_10, 1) @[DelayPipe.scala 33:24]
      rptr <= _T_11 @[DelayPipe.scala 33:10]
      skip @[DelayPipe.scala 32:30]
    else : @[DelayPipe.scala 34:14]
      node _T_12 = add(UInt<3>("h06"), wptr) @[DelayPipe.scala 35:30]
      node _T_13 = tail(_T_12, 1) @[DelayPipe.scala 35:30]
      node _T_14 = sub(_T_13, io.config) @[DelayPipe.scala 35:37]
      node _T_15 = tail(_T_14, 1) @[DelayPipe.scala 35:37]
      rptr <= _T_15 @[DelayPipe.scala 35:10]
      skip @[DelayPipe.scala 34:14]
    node _T_16 = gt(io.config, UInt<1>("h00")) @[DelayPipe.scala 39:28]
    node _T_17 = and(io.en, _T_16) @[DelayPipe.scala 39:14]
    when _T_17 : @[DelayPipe.scala 39:35]
      regs[wptr] <= io.in @[DelayPipe.scala 40:16]
      skip @[DelayPipe.scala 39:35]
    reg cnt : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 43:20]
    node _T_18 = eq(io.en, UInt<1>("h00")) @[DelayPipe.scala 44:8]
    when _T_18 : @[DelayPipe.scala 44:15]
      cnt <= UInt<1>("h00") @[DelayPipe.scala 45:9]
      skip @[DelayPipe.scala 44:15]
    else : @[DelayPipe.scala 46:30]
      node _T_19 = lt(cnt, io.config) @[DelayPipe.scala 46:18]
      when _T_19 : @[DelayPipe.scala 46:30]
        node _T_20 = add(cnt, UInt<1>("h01")) @[DelayPipe.scala 47:16]
        node _T_21 = tail(_T_20, 1) @[DelayPipe.scala 47:16]
        cnt <= _T_21 @[DelayPipe.scala 47:9]
        skip @[DelayPipe.scala 46:30]
    node _T_22 = eq(UInt<1>("h00"), io.config) @[DelayPipe.scala 50:22]
    node _T_23 = and(io.en, _T_22) @[DelayPipe.scala 50:14]
    when _T_23 : @[DelayPipe.scala 50:37]
      io.out <= io.in @[DelayPipe.scala 51:12]
      skip @[DelayPipe.scala 50:37]
    else : @[DelayPipe.scala 52:43]
      node _T_24 = eq(cnt, io.config) @[DelayPipe.scala 52:28]
      node _T_25 = and(io.en, _T_24) @[DelayPipe.scala 52:20]
      when _T_25 : @[DelayPipe.scala 52:43]
        io.out <= regs[rptr] @[DelayPipe.scala 53:12]
        skip @[DelayPipe.scala 52:43]
      else : @[DelayPipe.scala 54:14]
        io.out <= UInt<1>("h00") @[DelayPipe.scala 55:12]
        skip @[DelayPipe.scala 54:14]
    
  module DelayPipe_47 : 
    input clock : Clock
    input reset : Reset
    output io : {flip en : UInt<1>, flip config : UInt<3>, flip in : UInt<32>, out : UInt<32>}
    
    wire _T : UInt<32>[5] @[DelayPipe.scala 22:29]
    _T[0] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[1] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[2] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[3] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[4] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    reg regs : UInt<32>[5], clock with : (reset => (reset, _T)) @[DelayPipe.scala 22:21]
    reg wptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 23:21]
    reg rptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 24:21]
    node _T_1 = lt(wptr, UInt<3>("h04")) @[DelayPipe.scala 26:23]
    node _T_2 = and(io.en, _T_1) @[DelayPipe.scala 26:14]
    when _T_2 : @[DelayPipe.scala 26:37]
      node _T_3 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 27:17]
      node _T_4 = tail(_T_3, 1) @[DelayPipe.scala 27:17]
      wptr <= _T_4 @[DelayPipe.scala 27:10]
      skip @[DelayPipe.scala 26:37]
    else : @[DelayPipe.scala 28:14]
      wptr <= UInt<1>("h00") @[DelayPipe.scala 29:10]
      skip @[DelayPipe.scala 28:14]
    node _T_5 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 32:12]
    node _T_6 = tail(_T_5, 1) @[DelayPipe.scala 32:12]
    node _T_7 = geq(_T_6, io.config) @[DelayPipe.scala 32:17]
    when _T_7 : @[DelayPipe.scala 32:30]
      node _T_8 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 33:18]
      node _T_9 = tail(_T_8, 1) @[DelayPipe.scala 33:18]
      node _T_10 = sub(_T_9, io.config) @[DelayPipe.scala 33:24]
      node _T_11 = tail(_T_10, 1) @[DelayPipe.scala 33:24]
      rptr <= _T_11 @[DelayPipe.scala 33:10]
      skip @[DelayPipe.scala 32:30]
    else : @[DelayPipe.scala 34:14]
      node _T_12 = add(UInt<3>("h06"), wptr) @[DelayPipe.scala 35:30]
      node _T_13 = tail(_T_12, 1) @[DelayPipe.scala 35:30]
      node _T_14 = sub(_T_13, io.config) @[DelayPipe.scala 35:37]
      node _T_15 = tail(_T_14, 1) @[DelayPipe.scala 35:37]
      rptr <= _T_15 @[DelayPipe.scala 35:10]
      skip @[DelayPipe.scala 34:14]
    node _T_16 = gt(io.config, UInt<1>("h00")) @[DelayPipe.scala 39:28]
    node _T_17 = and(io.en, _T_16) @[DelayPipe.scala 39:14]
    when _T_17 : @[DelayPipe.scala 39:35]
      regs[wptr] <= io.in @[DelayPipe.scala 40:16]
      skip @[DelayPipe.scala 39:35]
    reg cnt : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 43:20]
    node _T_18 = eq(io.en, UInt<1>("h00")) @[DelayPipe.scala 44:8]
    when _T_18 : @[DelayPipe.scala 44:15]
      cnt <= UInt<1>("h00") @[DelayPipe.scala 45:9]
      skip @[DelayPipe.scala 44:15]
    else : @[DelayPipe.scala 46:30]
      node _T_19 = lt(cnt, io.config) @[DelayPipe.scala 46:18]
      when _T_19 : @[DelayPipe.scala 46:30]
        node _T_20 = add(cnt, UInt<1>("h01")) @[DelayPipe.scala 47:16]
        node _T_21 = tail(_T_20, 1) @[DelayPipe.scala 47:16]
        cnt <= _T_21 @[DelayPipe.scala 47:9]
        skip @[DelayPipe.scala 46:30]
    node _T_22 = eq(UInt<1>("h00"), io.config) @[DelayPipe.scala 50:22]
    node _T_23 = and(io.en, _T_22) @[DelayPipe.scala 50:14]
    when _T_23 : @[DelayPipe.scala 50:37]
      io.out <= io.in @[DelayPipe.scala 51:12]
      skip @[DelayPipe.scala 50:37]
    else : @[DelayPipe.scala 52:43]
      node _T_24 = eq(cnt, io.config) @[DelayPipe.scala 52:28]
      node _T_25 = and(io.en, _T_24) @[DelayPipe.scala 52:20]
      when _T_25 : @[DelayPipe.scala 52:43]
        io.out <= regs[rptr] @[DelayPipe.scala 53:12]
        skip @[DelayPipe.scala 52:43]
      else : @[DelayPipe.scala 54:14]
        io.out <= UInt<1>("h00") @[DelayPipe.scala 55:12]
        skip @[DelayPipe.scala 54:14]
    
  module Muxn_62 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[6], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    node _T_10 = eq(UInt<3>("h05"), io.config) @[Mux.scala 80:60]
    node _T_11 = mux(_T_10, io.in[5], _T_9) @[Mux.scala 80:57]
    io.out <= _T_11 @[Multiplexer.scala 20:10]
    
  module Muxn_63 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[6], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    node _T_10 = eq(UInt<3>("h05"), io.config) @[Mux.scala 80:60]
    node _T_11 = mux(_T_10, io.in[5], _T_9) @[Mux.scala 80:57]
    io.out <= _T_11 @[Multiplexer.scala 20:10]
    
  module ConfigMem_39 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<1>, flip cfg_data : UInt<32>, out : UInt<48>[1]}
    
    wire _T : UInt<48>[1] @[ConfigMem.scala 27:29]
    _T[0] <= UInt<48>("h00") @[ConfigMem.scala 27:29]
    reg regs : UInt<48>[1], clock with : (reset => (reset, _T)) @[ConfigMem.scala 27:21]
    node _T_1 = eq(io.cfg_addr, UInt<1>("h00")) @[ConfigMem.scala 39:38]
    node _T_2 = and(io.cfg_en, _T_1) @[ConfigMem.scala 39:22]
    when _T_2 : @[ConfigMem.scala 39:47]
      node _T_3 = bits(regs[0], 47, 32) @[ConfigMem.scala 41:33]
      node _T_4 = cat(_T_3, io.cfg_data) @[Cat.scala 29:58]
      regs[0] <= _T_4 @[ConfigMem.scala 41:19]
      skip @[ConfigMem.scala 39:47]
    node _T_5 = eq(io.cfg_addr, UInt<1>("h01")) @[ConfigMem.scala 39:38]
    node _T_6 = and(io.cfg_en, _T_5) @[ConfigMem.scala 39:22]
    when _T_6 : @[ConfigMem.scala 39:47]
      node _T_7 = bits(regs[0], 31, 0) @[ConfigMem.scala 43:46]
      node _T_8 = cat(io.cfg_data, _T_7) @[Cat.scala 29:58]
      regs[0] <= _T_8 @[ConfigMem.scala 43:19]
      skip @[ConfigMem.scala 39:47]
    io.out[0] <= regs[0] @[ConfigMem.scala 52:45]
    
  module GPE_23 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<12>, flip cfg_data : UInt<32>, flip en : UInt<1>, flip in : UInt<32>[8], out : UInt<32>[1]}
    
    inst alu of ALU_23 @[PE.scala 50:19]
    alu.clock <= clock
    alu.reset <= reset
    inst rf of RF_23 @[PE.scala 51:18]
    rf.clock <= clock
    rf.reset <= reset
    inst DelayPipe of DelayPipe_46 @[PE.scala 52:54]
    DelayPipe.clock <= clock
    DelayPipe.reset <= reset
    inst DelayPipe_1 of DelayPipe_47 @[PE.scala 52:54]
    DelayPipe_1.clock <= clock
    DelayPipe_1.reset <= reset
    wire const : UInt<32> @[PE.scala 54:19]
    inst Muxn of Muxn_62 @[PE.scala 55:49]
    Muxn.clock <= clock
    Muxn.reset <= reset
    inst Muxn_1 of Muxn_63 @[PE.scala 55:49]
    Muxn_1.clock <= clock
    Muxn_1.reset <= reset
    Muxn.io.in[0] <= io.in[0] @[PE.scala 62:12]
    Muxn.io.in[1] <= io.in[1] @[PE.scala 62:12]
    Muxn.io.in[2] <= io.in[2] @[PE.scala 62:12]
    Muxn.io.in[3] <= io.in[3] @[PE.scala 62:12]
    Muxn.io.in[4] <= const @[PE.scala 64:12]
    Muxn.io.in[5] <= rf.io.out[1] @[PE.scala 66:12]
    DelayPipe.io.en <= io.en @[PE.scala 69:23]
    DelayPipe.io.in <= Muxn.io.out @[PE.scala 70:23]
    alu.io.in[0] <= DelayPipe.io.out @[PE.scala 71:18]
    Muxn_1.io.in[0] <= io.in[4] @[PE.scala 62:12]
    Muxn_1.io.in[1] <= io.in[5] @[PE.scala 62:12]
    Muxn_1.io.in[2] <= io.in[6] @[PE.scala 62:12]
    Muxn_1.io.in[3] <= io.in[7] @[PE.scala 62:12]
    Muxn_1.io.in[4] <= const @[PE.scala 64:12]
    Muxn_1.io.in[5] <= rf.io.out[1] @[PE.scala 66:12]
    DelayPipe_1.io.en <= io.en @[PE.scala 69:23]
    DelayPipe_1.io.in <= Muxn_1.io.out @[PE.scala 70:23]
    alu.io.in[1] <= DelayPipe_1.io.out @[PE.scala 71:18]
    rf.io.en <= io.en @[PE.scala 75:12]
    rf.io.in[0] <= alu.io.out @[PE.scala 76:15]
    io.out[0] <= rf.io.out[0] @[PE.scala 77:13]
    inst cfg of ConfigMem_39 @[PE.scala 89:19]
    cfg.clock <= clock
    cfg.reset <= reset
    node _T = bits(io.cfg_addr, 11, 2) @[PE.scala 90:63]
    node _T_1 = eq(UInt<7>("h047"), _T) @[PE.scala 90:48]
    node _T_2 = and(io.cfg_en, _T_1) @[PE.scala 90:30]
    cfg.io.cfg_en <= _T_2 @[PE.scala 90:17]
    node _T_3 = bits(io.cfg_addr, 1, 0) @[PE.scala 91:33]
    cfg.io.cfg_addr <= _T_3 @[PE.scala 91:19]
    cfg.io.cfg_data <= io.cfg_data @[PE.scala 92:19]
    wire cfgOut : UInt<48> @[PE.scala 96:20]
    cfgOut <= cfg.io.out[0] @[PE.scala 97:10]
    node _T_4 = bits(cfgOut, 31, 0) @[PE.scala 98:18]
    const <= _T_4 @[PE.scala 98:9]
    node _T_5 = bits(cfgOut, 35, 32) @[PE.scala 100:28]
    alu.io.config <= _T_5 @[PE.scala 100:19]
    rf.io.config is invalid @[PE.scala 107:18]
    node _T_6 = bits(cfgOut, 38, 36) @[PE.scala 113:38]
    DelayPipe.io.config <= _T_6 @[PE.scala 113:29]
    node _T_7 = bits(cfgOut, 41, 39) @[PE.scala 113:38]
    DelayPipe_1.io.config <= _T_7 @[PE.scala 113:29]
    node _T_8 = bits(cfgOut, 44, 42) @[PE.scala 121:32]
    Muxn.io.config <= _T_8 @[PE.scala 121:23]
    node _T_9 = bits(cfgOut, 47, 45) @[PE.scala 121:32]
    Muxn_1.io.config <= _T_9 @[PE.scala 121:23]
    
  module ALU_24 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<4>, flip in : UInt<32>[2], out : UInt<32>}
    
    node _T = bits(io.in[0], 31, 0) @[Operations.scala 122:31]
    node _T_1 = bits(io.in[0], 31, 0) @[Operations.scala 124:31]
    node _T_2 = bits(io.in[1], 31, 0) @[Operations.scala 124:49]
    node _T_3 = add(_T_1, _T_2) @[Operations.scala 124:41]
    node _T_4 = tail(_T_3, 1) @[Operations.scala 124:41]
    node _T_5 = bits(io.in[0], 31, 0) @[Operations.scala 126:31]
    node _T_6 = bits(io.in[1], 31, 0) @[Operations.scala 126:49]
    node _T_7 = sub(_T_5, _T_6) @[Operations.scala 126:41]
    node _T_8 = tail(_T_7, 1) @[Operations.scala 126:41]
    node _T_9 = bits(io.in[0], 31, 0) @[Operations.scala 128:31]
    node _T_10 = bits(io.in[1], 31, 0) @[Operations.scala 128:49]
    node _T_11 = mul(_T_9, _T_10) @[Operations.scala 128:41]
    node _T_12 = bits(io.in[0], 31, 0) @[Operations.scala 138:31]
    node _T_13 = bits(io.in[1], 31, 0) @[Operations.scala 138:49]
    node _T_14 = and(_T_12, _T_13) @[Operations.scala 138:41]
    node _T_15 = bits(io.in[0], 31, 0) @[Operations.scala 140:31]
    node _T_16 = bits(io.in[1], 31, 0) @[Operations.scala 140:49]
    node _T_17 = or(_T_15, _T_16) @[Operations.scala 140:41]
    node _T_18 = bits(io.in[0], 31, 0) @[Operations.scala 142:31]
    node _T_19 = bits(io.in[1], 31, 0) @[Operations.scala 142:49]
    node _T_20 = xor(_T_18, _T_19) @[Operations.scala 142:41]
    node _T_21 = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_22 = mux(_T_21, _T, UInt<1>("h00")) @[Mux.scala 80:57]
    node _T_23 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_24 = mux(_T_23, _T_4, _T_22) @[Mux.scala 80:57]
    node _T_25 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_26 = mux(_T_25, _T_8, _T_24) @[Mux.scala 80:57]
    node _T_27 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_28 = mux(_T_27, _T_11, _T_26) @[Mux.scala 80:57]
    node _T_29 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_30 = mux(_T_29, _T_14, _T_28) @[Mux.scala 80:57]
    node _T_31 = eq(UInt<3>("h05"), io.config) @[Mux.scala 80:60]
    node _T_32 = mux(_T_31, _T_17, _T_30) @[Mux.scala 80:57]
    node _T_33 = eq(UInt<3>("h06"), io.config) @[Mux.scala 80:60]
    node _T_34 = mux(_T_33, _T_20, _T_32) @[Mux.scala 80:57]
    io.out <= _T_34 @[ALU.scala 25:10]
    
  module RF_24 : 
    input clock : Clock
    input reset : Reset
    output io : {flip en : UInt<1>, flip config : UInt<0>, flip in : UInt<32>[1], out : UInt<32>[2]}
    
    wire _T : UInt<32>[1] @[RegFile.scala 24:29]
    _T[0] <= UInt<32>("h00") @[RegFile.scala 24:29]
    reg regs : UInt<32>[1], clock with : (reset => (reset, _T)) @[RegFile.scala 24:21]
    when io.en : @[RegFile.scala 34:16]
      regs[0] <= io.in[0] @[RegFile.scala 35:41]
      skip @[RegFile.scala 34:16]
    io.out[0] <= regs[0] @[RegFile.scala 37:42]
    io.out[1] <= regs[0] @[RegFile.scala 37:42]
    
  module DelayPipe_48 : 
    input clock : Clock
    input reset : Reset
    output io : {flip en : UInt<1>, flip config : UInt<3>, flip in : UInt<32>, out : UInt<32>}
    
    wire _T : UInt<32>[5] @[DelayPipe.scala 22:29]
    _T[0] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[1] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[2] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[3] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[4] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    reg regs : UInt<32>[5], clock with : (reset => (reset, _T)) @[DelayPipe.scala 22:21]
    reg wptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 23:21]
    reg rptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 24:21]
    node _T_1 = lt(wptr, UInt<3>("h04")) @[DelayPipe.scala 26:23]
    node _T_2 = and(io.en, _T_1) @[DelayPipe.scala 26:14]
    when _T_2 : @[DelayPipe.scala 26:37]
      node _T_3 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 27:17]
      node _T_4 = tail(_T_3, 1) @[DelayPipe.scala 27:17]
      wptr <= _T_4 @[DelayPipe.scala 27:10]
      skip @[DelayPipe.scala 26:37]
    else : @[DelayPipe.scala 28:14]
      wptr <= UInt<1>("h00") @[DelayPipe.scala 29:10]
      skip @[DelayPipe.scala 28:14]
    node _T_5 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 32:12]
    node _T_6 = tail(_T_5, 1) @[DelayPipe.scala 32:12]
    node _T_7 = geq(_T_6, io.config) @[DelayPipe.scala 32:17]
    when _T_7 : @[DelayPipe.scala 32:30]
      node _T_8 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 33:18]
      node _T_9 = tail(_T_8, 1) @[DelayPipe.scala 33:18]
      node _T_10 = sub(_T_9, io.config) @[DelayPipe.scala 33:24]
      node _T_11 = tail(_T_10, 1) @[DelayPipe.scala 33:24]
      rptr <= _T_11 @[DelayPipe.scala 33:10]
      skip @[DelayPipe.scala 32:30]
    else : @[DelayPipe.scala 34:14]
      node _T_12 = add(UInt<3>("h06"), wptr) @[DelayPipe.scala 35:30]
      node _T_13 = tail(_T_12, 1) @[DelayPipe.scala 35:30]
      node _T_14 = sub(_T_13, io.config) @[DelayPipe.scala 35:37]
      node _T_15 = tail(_T_14, 1) @[DelayPipe.scala 35:37]
      rptr <= _T_15 @[DelayPipe.scala 35:10]
      skip @[DelayPipe.scala 34:14]
    node _T_16 = gt(io.config, UInt<1>("h00")) @[DelayPipe.scala 39:28]
    node _T_17 = and(io.en, _T_16) @[DelayPipe.scala 39:14]
    when _T_17 : @[DelayPipe.scala 39:35]
      regs[wptr] <= io.in @[DelayPipe.scala 40:16]
      skip @[DelayPipe.scala 39:35]
    reg cnt : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 43:20]
    node _T_18 = eq(io.en, UInt<1>("h00")) @[DelayPipe.scala 44:8]
    when _T_18 : @[DelayPipe.scala 44:15]
      cnt <= UInt<1>("h00") @[DelayPipe.scala 45:9]
      skip @[DelayPipe.scala 44:15]
    else : @[DelayPipe.scala 46:30]
      node _T_19 = lt(cnt, io.config) @[DelayPipe.scala 46:18]
      when _T_19 : @[DelayPipe.scala 46:30]
        node _T_20 = add(cnt, UInt<1>("h01")) @[DelayPipe.scala 47:16]
        node _T_21 = tail(_T_20, 1) @[DelayPipe.scala 47:16]
        cnt <= _T_21 @[DelayPipe.scala 47:9]
        skip @[DelayPipe.scala 46:30]
    node _T_22 = eq(UInt<1>("h00"), io.config) @[DelayPipe.scala 50:22]
    node _T_23 = and(io.en, _T_22) @[DelayPipe.scala 50:14]
    when _T_23 : @[DelayPipe.scala 50:37]
      io.out <= io.in @[DelayPipe.scala 51:12]
      skip @[DelayPipe.scala 50:37]
    else : @[DelayPipe.scala 52:43]
      node _T_24 = eq(cnt, io.config) @[DelayPipe.scala 52:28]
      node _T_25 = and(io.en, _T_24) @[DelayPipe.scala 52:20]
      when _T_25 : @[DelayPipe.scala 52:43]
        io.out <= regs[rptr] @[DelayPipe.scala 53:12]
        skip @[DelayPipe.scala 52:43]
      else : @[DelayPipe.scala 54:14]
        io.out <= UInt<1>("h00") @[DelayPipe.scala 55:12]
        skip @[DelayPipe.scala 54:14]
    
  module DelayPipe_49 : 
    input clock : Clock
    input reset : Reset
    output io : {flip en : UInt<1>, flip config : UInt<3>, flip in : UInt<32>, out : UInt<32>}
    
    wire _T : UInt<32>[5] @[DelayPipe.scala 22:29]
    _T[0] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[1] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[2] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[3] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[4] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    reg regs : UInt<32>[5], clock with : (reset => (reset, _T)) @[DelayPipe.scala 22:21]
    reg wptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 23:21]
    reg rptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 24:21]
    node _T_1 = lt(wptr, UInt<3>("h04")) @[DelayPipe.scala 26:23]
    node _T_2 = and(io.en, _T_1) @[DelayPipe.scala 26:14]
    when _T_2 : @[DelayPipe.scala 26:37]
      node _T_3 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 27:17]
      node _T_4 = tail(_T_3, 1) @[DelayPipe.scala 27:17]
      wptr <= _T_4 @[DelayPipe.scala 27:10]
      skip @[DelayPipe.scala 26:37]
    else : @[DelayPipe.scala 28:14]
      wptr <= UInt<1>("h00") @[DelayPipe.scala 29:10]
      skip @[DelayPipe.scala 28:14]
    node _T_5 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 32:12]
    node _T_6 = tail(_T_5, 1) @[DelayPipe.scala 32:12]
    node _T_7 = geq(_T_6, io.config) @[DelayPipe.scala 32:17]
    when _T_7 : @[DelayPipe.scala 32:30]
      node _T_8 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 33:18]
      node _T_9 = tail(_T_8, 1) @[DelayPipe.scala 33:18]
      node _T_10 = sub(_T_9, io.config) @[DelayPipe.scala 33:24]
      node _T_11 = tail(_T_10, 1) @[DelayPipe.scala 33:24]
      rptr <= _T_11 @[DelayPipe.scala 33:10]
      skip @[DelayPipe.scala 32:30]
    else : @[DelayPipe.scala 34:14]
      node _T_12 = add(UInt<3>("h06"), wptr) @[DelayPipe.scala 35:30]
      node _T_13 = tail(_T_12, 1) @[DelayPipe.scala 35:30]
      node _T_14 = sub(_T_13, io.config) @[DelayPipe.scala 35:37]
      node _T_15 = tail(_T_14, 1) @[DelayPipe.scala 35:37]
      rptr <= _T_15 @[DelayPipe.scala 35:10]
      skip @[DelayPipe.scala 34:14]
    node _T_16 = gt(io.config, UInt<1>("h00")) @[DelayPipe.scala 39:28]
    node _T_17 = and(io.en, _T_16) @[DelayPipe.scala 39:14]
    when _T_17 : @[DelayPipe.scala 39:35]
      regs[wptr] <= io.in @[DelayPipe.scala 40:16]
      skip @[DelayPipe.scala 39:35]
    reg cnt : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 43:20]
    node _T_18 = eq(io.en, UInt<1>("h00")) @[DelayPipe.scala 44:8]
    when _T_18 : @[DelayPipe.scala 44:15]
      cnt <= UInt<1>("h00") @[DelayPipe.scala 45:9]
      skip @[DelayPipe.scala 44:15]
    else : @[DelayPipe.scala 46:30]
      node _T_19 = lt(cnt, io.config) @[DelayPipe.scala 46:18]
      when _T_19 : @[DelayPipe.scala 46:30]
        node _T_20 = add(cnt, UInt<1>("h01")) @[DelayPipe.scala 47:16]
        node _T_21 = tail(_T_20, 1) @[DelayPipe.scala 47:16]
        cnt <= _T_21 @[DelayPipe.scala 47:9]
        skip @[DelayPipe.scala 46:30]
    node _T_22 = eq(UInt<1>("h00"), io.config) @[DelayPipe.scala 50:22]
    node _T_23 = and(io.en, _T_22) @[DelayPipe.scala 50:14]
    when _T_23 : @[DelayPipe.scala 50:37]
      io.out <= io.in @[DelayPipe.scala 51:12]
      skip @[DelayPipe.scala 50:37]
    else : @[DelayPipe.scala 52:43]
      node _T_24 = eq(cnt, io.config) @[DelayPipe.scala 52:28]
      node _T_25 = and(io.en, _T_24) @[DelayPipe.scala 52:20]
      when _T_25 : @[DelayPipe.scala 52:43]
        io.out <= regs[rptr] @[DelayPipe.scala 53:12]
        skip @[DelayPipe.scala 52:43]
      else : @[DelayPipe.scala 54:14]
        io.out <= UInt<1>("h00") @[DelayPipe.scala 55:12]
        skip @[DelayPipe.scala 54:14]
    
  module Muxn_64 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[6], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    node _T_10 = eq(UInt<3>("h05"), io.config) @[Mux.scala 80:60]
    node _T_11 = mux(_T_10, io.in[5], _T_9) @[Mux.scala 80:57]
    io.out <= _T_11 @[Multiplexer.scala 20:10]
    
  module Muxn_65 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[6], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    node _T_10 = eq(UInt<3>("h05"), io.config) @[Mux.scala 80:60]
    node _T_11 = mux(_T_10, io.in[5], _T_9) @[Mux.scala 80:57]
    io.out <= _T_11 @[Multiplexer.scala 20:10]
    
  module ConfigMem_40 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<1>, flip cfg_data : UInt<32>, out : UInt<48>[1]}
    
    wire _T : UInt<48>[1] @[ConfigMem.scala 27:29]
    _T[0] <= UInt<48>("h00") @[ConfigMem.scala 27:29]
    reg regs : UInt<48>[1], clock with : (reset => (reset, _T)) @[ConfigMem.scala 27:21]
    node _T_1 = eq(io.cfg_addr, UInt<1>("h00")) @[ConfigMem.scala 39:38]
    node _T_2 = and(io.cfg_en, _T_1) @[ConfigMem.scala 39:22]
    when _T_2 : @[ConfigMem.scala 39:47]
      node _T_3 = bits(regs[0], 47, 32) @[ConfigMem.scala 41:33]
      node _T_4 = cat(_T_3, io.cfg_data) @[Cat.scala 29:58]
      regs[0] <= _T_4 @[ConfigMem.scala 41:19]
      skip @[ConfigMem.scala 39:47]
    node _T_5 = eq(io.cfg_addr, UInt<1>("h01")) @[ConfigMem.scala 39:38]
    node _T_6 = and(io.cfg_en, _T_5) @[ConfigMem.scala 39:22]
    when _T_6 : @[ConfigMem.scala 39:47]
      node _T_7 = bits(regs[0], 31, 0) @[ConfigMem.scala 43:46]
      node _T_8 = cat(io.cfg_data, _T_7) @[Cat.scala 29:58]
      regs[0] <= _T_8 @[ConfigMem.scala 43:19]
      skip @[ConfigMem.scala 39:47]
    io.out[0] <= regs[0] @[ConfigMem.scala 52:45]
    
  module GPE_24 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<12>, flip cfg_data : UInt<32>, flip en : UInt<1>, flip in : UInt<32>[8], out : UInt<32>[1]}
    
    inst alu of ALU_24 @[PE.scala 50:19]
    alu.clock <= clock
    alu.reset <= reset
    inst rf of RF_24 @[PE.scala 51:18]
    rf.clock <= clock
    rf.reset <= reset
    inst DelayPipe of DelayPipe_48 @[PE.scala 52:54]
    DelayPipe.clock <= clock
    DelayPipe.reset <= reset
    inst DelayPipe_1 of DelayPipe_49 @[PE.scala 52:54]
    DelayPipe_1.clock <= clock
    DelayPipe_1.reset <= reset
    wire const : UInt<32> @[PE.scala 54:19]
    inst Muxn of Muxn_64 @[PE.scala 55:49]
    Muxn.clock <= clock
    Muxn.reset <= reset
    inst Muxn_1 of Muxn_65 @[PE.scala 55:49]
    Muxn_1.clock <= clock
    Muxn_1.reset <= reset
    Muxn.io.in[0] <= io.in[0] @[PE.scala 62:12]
    Muxn.io.in[1] <= io.in[1] @[PE.scala 62:12]
    Muxn.io.in[2] <= io.in[2] @[PE.scala 62:12]
    Muxn.io.in[3] <= io.in[3] @[PE.scala 62:12]
    Muxn.io.in[4] <= const @[PE.scala 64:12]
    Muxn.io.in[5] <= rf.io.out[1] @[PE.scala 66:12]
    DelayPipe.io.en <= io.en @[PE.scala 69:23]
    DelayPipe.io.in <= Muxn.io.out @[PE.scala 70:23]
    alu.io.in[0] <= DelayPipe.io.out @[PE.scala 71:18]
    Muxn_1.io.in[0] <= io.in[4] @[PE.scala 62:12]
    Muxn_1.io.in[1] <= io.in[5] @[PE.scala 62:12]
    Muxn_1.io.in[2] <= io.in[6] @[PE.scala 62:12]
    Muxn_1.io.in[3] <= io.in[7] @[PE.scala 62:12]
    Muxn_1.io.in[4] <= const @[PE.scala 64:12]
    Muxn_1.io.in[5] <= rf.io.out[1] @[PE.scala 66:12]
    DelayPipe_1.io.en <= io.en @[PE.scala 69:23]
    DelayPipe_1.io.in <= Muxn_1.io.out @[PE.scala 70:23]
    alu.io.in[1] <= DelayPipe_1.io.out @[PE.scala 71:18]
    rf.io.en <= io.en @[PE.scala 75:12]
    rf.io.in[0] <= alu.io.out @[PE.scala 76:15]
    io.out[0] <= rf.io.out[0] @[PE.scala 77:13]
    inst cfg of ConfigMem_40 @[PE.scala 89:19]
    cfg.clock <= clock
    cfg.reset <= reset
    node _T = bits(io.cfg_addr, 11, 2) @[PE.scala 90:63]
    node _T_1 = eq(UInt<7>("h052"), _T) @[PE.scala 90:48]
    node _T_2 = and(io.cfg_en, _T_1) @[PE.scala 90:30]
    cfg.io.cfg_en <= _T_2 @[PE.scala 90:17]
    node _T_3 = bits(io.cfg_addr, 1, 0) @[PE.scala 91:33]
    cfg.io.cfg_addr <= _T_3 @[PE.scala 91:19]
    cfg.io.cfg_data <= io.cfg_data @[PE.scala 92:19]
    wire cfgOut : UInt<48> @[PE.scala 96:20]
    cfgOut <= cfg.io.out[0] @[PE.scala 97:10]
    node _T_4 = bits(cfgOut, 31, 0) @[PE.scala 98:18]
    const <= _T_4 @[PE.scala 98:9]
    node _T_5 = bits(cfgOut, 35, 32) @[PE.scala 100:28]
    alu.io.config <= _T_5 @[PE.scala 100:19]
    rf.io.config is invalid @[PE.scala 107:18]
    node _T_6 = bits(cfgOut, 38, 36) @[PE.scala 113:38]
    DelayPipe.io.config <= _T_6 @[PE.scala 113:29]
    node _T_7 = bits(cfgOut, 41, 39) @[PE.scala 113:38]
    DelayPipe_1.io.config <= _T_7 @[PE.scala 113:29]
    node _T_8 = bits(cfgOut, 44, 42) @[PE.scala 121:32]
    Muxn.io.config <= _T_8 @[PE.scala 121:23]
    node _T_9 = bits(cfgOut, 47, 45) @[PE.scala 121:32]
    Muxn_1.io.config <= _T_9 @[PE.scala 121:23]
    
  module ALU_25 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<4>, flip in : UInt<32>[2], out : UInt<32>}
    
    node _T = bits(io.in[0], 31, 0) @[Operations.scala 122:31]
    node _T_1 = bits(io.in[0], 31, 0) @[Operations.scala 124:31]
    node _T_2 = bits(io.in[1], 31, 0) @[Operations.scala 124:49]
    node _T_3 = add(_T_1, _T_2) @[Operations.scala 124:41]
    node _T_4 = tail(_T_3, 1) @[Operations.scala 124:41]
    node _T_5 = bits(io.in[0], 31, 0) @[Operations.scala 126:31]
    node _T_6 = bits(io.in[1], 31, 0) @[Operations.scala 126:49]
    node _T_7 = sub(_T_5, _T_6) @[Operations.scala 126:41]
    node _T_8 = tail(_T_7, 1) @[Operations.scala 126:41]
    node _T_9 = bits(io.in[0], 31, 0) @[Operations.scala 128:31]
    node _T_10 = bits(io.in[1], 31, 0) @[Operations.scala 128:49]
    node _T_11 = mul(_T_9, _T_10) @[Operations.scala 128:41]
    node _T_12 = bits(io.in[0], 31, 0) @[Operations.scala 138:31]
    node _T_13 = bits(io.in[1], 31, 0) @[Operations.scala 138:49]
    node _T_14 = and(_T_12, _T_13) @[Operations.scala 138:41]
    node _T_15 = bits(io.in[0], 31, 0) @[Operations.scala 140:31]
    node _T_16 = bits(io.in[1], 31, 0) @[Operations.scala 140:49]
    node _T_17 = or(_T_15, _T_16) @[Operations.scala 140:41]
    node _T_18 = bits(io.in[0], 31, 0) @[Operations.scala 142:31]
    node _T_19 = bits(io.in[1], 31, 0) @[Operations.scala 142:49]
    node _T_20 = xor(_T_18, _T_19) @[Operations.scala 142:41]
    node _T_21 = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_22 = mux(_T_21, _T, UInt<1>("h00")) @[Mux.scala 80:57]
    node _T_23 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_24 = mux(_T_23, _T_4, _T_22) @[Mux.scala 80:57]
    node _T_25 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_26 = mux(_T_25, _T_8, _T_24) @[Mux.scala 80:57]
    node _T_27 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_28 = mux(_T_27, _T_11, _T_26) @[Mux.scala 80:57]
    node _T_29 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_30 = mux(_T_29, _T_14, _T_28) @[Mux.scala 80:57]
    node _T_31 = eq(UInt<3>("h05"), io.config) @[Mux.scala 80:60]
    node _T_32 = mux(_T_31, _T_17, _T_30) @[Mux.scala 80:57]
    node _T_33 = eq(UInt<3>("h06"), io.config) @[Mux.scala 80:60]
    node _T_34 = mux(_T_33, _T_20, _T_32) @[Mux.scala 80:57]
    io.out <= _T_34 @[ALU.scala 25:10]
    
  module RF_25 : 
    input clock : Clock
    input reset : Reset
    output io : {flip en : UInt<1>, flip config : UInt<0>, flip in : UInt<32>[1], out : UInt<32>[2]}
    
    wire _T : UInt<32>[1] @[RegFile.scala 24:29]
    _T[0] <= UInt<32>("h00") @[RegFile.scala 24:29]
    reg regs : UInt<32>[1], clock with : (reset => (reset, _T)) @[RegFile.scala 24:21]
    when io.en : @[RegFile.scala 34:16]
      regs[0] <= io.in[0] @[RegFile.scala 35:41]
      skip @[RegFile.scala 34:16]
    io.out[0] <= regs[0] @[RegFile.scala 37:42]
    io.out[1] <= regs[0] @[RegFile.scala 37:42]
    
  module DelayPipe_50 : 
    input clock : Clock
    input reset : Reset
    output io : {flip en : UInt<1>, flip config : UInt<3>, flip in : UInt<32>, out : UInt<32>}
    
    wire _T : UInt<32>[5] @[DelayPipe.scala 22:29]
    _T[0] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[1] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[2] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[3] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[4] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    reg regs : UInt<32>[5], clock with : (reset => (reset, _T)) @[DelayPipe.scala 22:21]
    reg wptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 23:21]
    reg rptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 24:21]
    node _T_1 = lt(wptr, UInt<3>("h04")) @[DelayPipe.scala 26:23]
    node _T_2 = and(io.en, _T_1) @[DelayPipe.scala 26:14]
    when _T_2 : @[DelayPipe.scala 26:37]
      node _T_3 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 27:17]
      node _T_4 = tail(_T_3, 1) @[DelayPipe.scala 27:17]
      wptr <= _T_4 @[DelayPipe.scala 27:10]
      skip @[DelayPipe.scala 26:37]
    else : @[DelayPipe.scala 28:14]
      wptr <= UInt<1>("h00") @[DelayPipe.scala 29:10]
      skip @[DelayPipe.scala 28:14]
    node _T_5 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 32:12]
    node _T_6 = tail(_T_5, 1) @[DelayPipe.scala 32:12]
    node _T_7 = geq(_T_6, io.config) @[DelayPipe.scala 32:17]
    when _T_7 : @[DelayPipe.scala 32:30]
      node _T_8 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 33:18]
      node _T_9 = tail(_T_8, 1) @[DelayPipe.scala 33:18]
      node _T_10 = sub(_T_9, io.config) @[DelayPipe.scala 33:24]
      node _T_11 = tail(_T_10, 1) @[DelayPipe.scala 33:24]
      rptr <= _T_11 @[DelayPipe.scala 33:10]
      skip @[DelayPipe.scala 32:30]
    else : @[DelayPipe.scala 34:14]
      node _T_12 = add(UInt<3>("h06"), wptr) @[DelayPipe.scala 35:30]
      node _T_13 = tail(_T_12, 1) @[DelayPipe.scala 35:30]
      node _T_14 = sub(_T_13, io.config) @[DelayPipe.scala 35:37]
      node _T_15 = tail(_T_14, 1) @[DelayPipe.scala 35:37]
      rptr <= _T_15 @[DelayPipe.scala 35:10]
      skip @[DelayPipe.scala 34:14]
    node _T_16 = gt(io.config, UInt<1>("h00")) @[DelayPipe.scala 39:28]
    node _T_17 = and(io.en, _T_16) @[DelayPipe.scala 39:14]
    when _T_17 : @[DelayPipe.scala 39:35]
      regs[wptr] <= io.in @[DelayPipe.scala 40:16]
      skip @[DelayPipe.scala 39:35]
    reg cnt : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 43:20]
    node _T_18 = eq(io.en, UInt<1>("h00")) @[DelayPipe.scala 44:8]
    when _T_18 : @[DelayPipe.scala 44:15]
      cnt <= UInt<1>("h00") @[DelayPipe.scala 45:9]
      skip @[DelayPipe.scala 44:15]
    else : @[DelayPipe.scala 46:30]
      node _T_19 = lt(cnt, io.config) @[DelayPipe.scala 46:18]
      when _T_19 : @[DelayPipe.scala 46:30]
        node _T_20 = add(cnt, UInt<1>("h01")) @[DelayPipe.scala 47:16]
        node _T_21 = tail(_T_20, 1) @[DelayPipe.scala 47:16]
        cnt <= _T_21 @[DelayPipe.scala 47:9]
        skip @[DelayPipe.scala 46:30]
    node _T_22 = eq(UInt<1>("h00"), io.config) @[DelayPipe.scala 50:22]
    node _T_23 = and(io.en, _T_22) @[DelayPipe.scala 50:14]
    when _T_23 : @[DelayPipe.scala 50:37]
      io.out <= io.in @[DelayPipe.scala 51:12]
      skip @[DelayPipe.scala 50:37]
    else : @[DelayPipe.scala 52:43]
      node _T_24 = eq(cnt, io.config) @[DelayPipe.scala 52:28]
      node _T_25 = and(io.en, _T_24) @[DelayPipe.scala 52:20]
      when _T_25 : @[DelayPipe.scala 52:43]
        io.out <= regs[rptr] @[DelayPipe.scala 53:12]
        skip @[DelayPipe.scala 52:43]
      else : @[DelayPipe.scala 54:14]
        io.out <= UInt<1>("h00") @[DelayPipe.scala 55:12]
        skip @[DelayPipe.scala 54:14]
    
  module DelayPipe_51 : 
    input clock : Clock
    input reset : Reset
    output io : {flip en : UInt<1>, flip config : UInt<3>, flip in : UInt<32>, out : UInt<32>}
    
    wire _T : UInt<32>[5] @[DelayPipe.scala 22:29]
    _T[0] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[1] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[2] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[3] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[4] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    reg regs : UInt<32>[5], clock with : (reset => (reset, _T)) @[DelayPipe.scala 22:21]
    reg wptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 23:21]
    reg rptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 24:21]
    node _T_1 = lt(wptr, UInt<3>("h04")) @[DelayPipe.scala 26:23]
    node _T_2 = and(io.en, _T_1) @[DelayPipe.scala 26:14]
    when _T_2 : @[DelayPipe.scala 26:37]
      node _T_3 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 27:17]
      node _T_4 = tail(_T_3, 1) @[DelayPipe.scala 27:17]
      wptr <= _T_4 @[DelayPipe.scala 27:10]
      skip @[DelayPipe.scala 26:37]
    else : @[DelayPipe.scala 28:14]
      wptr <= UInt<1>("h00") @[DelayPipe.scala 29:10]
      skip @[DelayPipe.scala 28:14]
    node _T_5 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 32:12]
    node _T_6 = tail(_T_5, 1) @[DelayPipe.scala 32:12]
    node _T_7 = geq(_T_6, io.config) @[DelayPipe.scala 32:17]
    when _T_7 : @[DelayPipe.scala 32:30]
      node _T_8 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 33:18]
      node _T_9 = tail(_T_8, 1) @[DelayPipe.scala 33:18]
      node _T_10 = sub(_T_9, io.config) @[DelayPipe.scala 33:24]
      node _T_11 = tail(_T_10, 1) @[DelayPipe.scala 33:24]
      rptr <= _T_11 @[DelayPipe.scala 33:10]
      skip @[DelayPipe.scala 32:30]
    else : @[DelayPipe.scala 34:14]
      node _T_12 = add(UInt<3>("h06"), wptr) @[DelayPipe.scala 35:30]
      node _T_13 = tail(_T_12, 1) @[DelayPipe.scala 35:30]
      node _T_14 = sub(_T_13, io.config) @[DelayPipe.scala 35:37]
      node _T_15 = tail(_T_14, 1) @[DelayPipe.scala 35:37]
      rptr <= _T_15 @[DelayPipe.scala 35:10]
      skip @[DelayPipe.scala 34:14]
    node _T_16 = gt(io.config, UInt<1>("h00")) @[DelayPipe.scala 39:28]
    node _T_17 = and(io.en, _T_16) @[DelayPipe.scala 39:14]
    when _T_17 : @[DelayPipe.scala 39:35]
      regs[wptr] <= io.in @[DelayPipe.scala 40:16]
      skip @[DelayPipe.scala 39:35]
    reg cnt : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 43:20]
    node _T_18 = eq(io.en, UInt<1>("h00")) @[DelayPipe.scala 44:8]
    when _T_18 : @[DelayPipe.scala 44:15]
      cnt <= UInt<1>("h00") @[DelayPipe.scala 45:9]
      skip @[DelayPipe.scala 44:15]
    else : @[DelayPipe.scala 46:30]
      node _T_19 = lt(cnt, io.config) @[DelayPipe.scala 46:18]
      when _T_19 : @[DelayPipe.scala 46:30]
        node _T_20 = add(cnt, UInt<1>("h01")) @[DelayPipe.scala 47:16]
        node _T_21 = tail(_T_20, 1) @[DelayPipe.scala 47:16]
        cnt <= _T_21 @[DelayPipe.scala 47:9]
        skip @[DelayPipe.scala 46:30]
    node _T_22 = eq(UInt<1>("h00"), io.config) @[DelayPipe.scala 50:22]
    node _T_23 = and(io.en, _T_22) @[DelayPipe.scala 50:14]
    when _T_23 : @[DelayPipe.scala 50:37]
      io.out <= io.in @[DelayPipe.scala 51:12]
      skip @[DelayPipe.scala 50:37]
    else : @[DelayPipe.scala 52:43]
      node _T_24 = eq(cnt, io.config) @[DelayPipe.scala 52:28]
      node _T_25 = and(io.en, _T_24) @[DelayPipe.scala 52:20]
      when _T_25 : @[DelayPipe.scala 52:43]
        io.out <= regs[rptr] @[DelayPipe.scala 53:12]
        skip @[DelayPipe.scala 52:43]
      else : @[DelayPipe.scala 54:14]
        io.out <= UInt<1>("h00") @[DelayPipe.scala 55:12]
        skip @[DelayPipe.scala 54:14]
    
  module Muxn_66 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[6], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    node _T_10 = eq(UInt<3>("h05"), io.config) @[Mux.scala 80:60]
    node _T_11 = mux(_T_10, io.in[5], _T_9) @[Mux.scala 80:57]
    io.out <= _T_11 @[Multiplexer.scala 20:10]
    
  module Muxn_67 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[6], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    node _T_10 = eq(UInt<3>("h05"), io.config) @[Mux.scala 80:60]
    node _T_11 = mux(_T_10, io.in[5], _T_9) @[Mux.scala 80:57]
    io.out <= _T_11 @[Multiplexer.scala 20:10]
    
  module ConfigMem_41 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<1>, flip cfg_data : UInt<32>, out : UInt<48>[1]}
    
    wire _T : UInt<48>[1] @[ConfigMem.scala 27:29]
    _T[0] <= UInt<48>("h00") @[ConfigMem.scala 27:29]
    reg regs : UInt<48>[1], clock with : (reset => (reset, _T)) @[ConfigMem.scala 27:21]
    node _T_1 = eq(io.cfg_addr, UInt<1>("h00")) @[ConfigMem.scala 39:38]
    node _T_2 = and(io.cfg_en, _T_1) @[ConfigMem.scala 39:22]
    when _T_2 : @[ConfigMem.scala 39:47]
      node _T_3 = bits(regs[0], 47, 32) @[ConfigMem.scala 41:33]
      node _T_4 = cat(_T_3, io.cfg_data) @[Cat.scala 29:58]
      regs[0] <= _T_4 @[ConfigMem.scala 41:19]
      skip @[ConfigMem.scala 39:47]
    node _T_5 = eq(io.cfg_addr, UInt<1>("h01")) @[ConfigMem.scala 39:38]
    node _T_6 = and(io.cfg_en, _T_5) @[ConfigMem.scala 39:22]
    when _T_6 : @[ConfigMem.scala 39:47]
      node _T_7 = bits(regs[0], 31, 0) @[ConfigMem.scala 43:46]
      node _T_8 = cat(io.cfg_data, _T_7) @[Cat.scala 29:58]
      regs[0] <= _T_8 @[ConfigMem.scala 43:19]
      skip @[ConfigMem.scala 39:47]
    io.out[0] <= regs[0] @[ConfigMem.scala 52:45]
    
  module GPE_25 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<12>, flip cfg_data : UInt<32>, flip en : UInt<1>, flip in : UInt<32>[8], out : UInt<32>[1]}
    
    inst alu of ALU_25 @[PE.scala 50:19]
    alu.clock <= clock
    alu.reset <= reset
    inst rf of RF_25 @[PE.scala 51:18]
    rf.clock <= clock
    rf.reset <= reset
    inst DelayPipe of DelayPipe_50 @[PE.scala 52:54]
    DelayPipe.clock <= clock
    DelayPipe.reset <= reset
    inst DelayPipe_1 of DelayPipe_51 @[PE.scala 52:54]
    DelayPipe_1.clock <= clock
    DelayPipe_1.reset <= reset
    wire const : UInt<32> @[PE.scala 54:19]
    inst Muxn of Muxn_66 @[PE.scala 55:49]
    Muxn.clock <= clock
    Muxn.reset <= reset
    inst Muxn_1 of Muxn_67 @[PE.scala 55:49]
    Muxn_1.clock <= clock
    Muxn_1.reset <= reset
    Muxn.io.in[0] <= io.in[0] @[PE.scala 62:12]
    Muxn.io.in[1] <= io.in[1] @[PE.scala 62:12]
    Muxn.io.in[2] <= io.in[2] @[PE.scala 62:12]
    Muxn.io.in[3] <= io.in[3] @[PE.scala 62:12]
    Muxn.io.in[4] <= const @[PE.scala 64:12]
    Muxn.io.in[5] <= rf.io.out[1] @[PE.scala 66:12]
    DelayPipe.io.en <= io.en @[PE.scala 69:23]
    DelayPipe.io.in <= Muxn.io.out @[PE.scala 70:23]
    alu.io.in[0] <= DelayPipe.io.out @[PE.scala 71:18]
    Muxn_1.io.in[0] <= io.in[4] @[PE.scala 62:12]
    Muxn_1.io.in[1] <= io.in[5] @[PE.scala 62:12]
    Muxn_1.io.in[2] <= io.in[6] @[PE.scala 62:12]
    Muxn_1.io.in[3] <= io.in[7] @[PE.scala 62:12]
    Muxn_1.io.in[4] <= const @[PE.scala 64:12]
    Muxn_1.io.in[5] <= rf.io.out[1] @[PE.scala 66:12]
    DelayPipe_1.io.en <= io.en @[PE.scala 69:23]
    DelayPipe_1.io.in <= Muxn_1.io.out @[PE.scala 70:23]
    alu.io.in[1] <= DelayPipe_1.io.out @[PE.scala 71:18]
    rf.io.en <= io.en @[PE.scala 75:12]
    rf.io.in[0] <= alu.io.out @[PE.scala 76:15]
    io.out[0] <= rf.io.out[0] @[PE.scala 77:13]
    inst cfg of ConfigMem_41 @[PE.scala 89:19]
    cfg.clock <= clock
    cfg.reset <= reset
    node _T = bits(io.cfg_addr, 11, 2) @[PE.scala 90:63]
    node _T_1 = eq(UInt<7>("h053"), _T) @[PE.scala 90:48]
    node _T_2 = and(io.cfg_en, _T_1) @[PE.scala 90:30]
    cfg.io.cfg_en <= _T_2 @[PE.scala 90:17]
    node _T_3 = bits(io.cfg_addr, 1, 0) @[PE.scala 91:33]
    cfg.io.cfg_addr <= _T_3 @[PE.scala 91:19]
    cfg.io.cfg_data <= io.cfg_data @[PE.scala 92:19]
    wire cfgOut : UInt<48> @[PE.scala 96:20]
    cfgOut <= cfg.io.out[0] @[PE.scala 97:10]
    node _T_4 = bits(cfgOut, 31, 0) @[PE.scala 98:18]
    const <= _T_4 @[PE.scala 98:9]
    node _T_5 = bits(cfgOut, 35, 32) @[PE.scala 100:28]
    alu.io.config <= _T_5 @[PE.scala 100:19]
    rf.io.config is invalid @[PE.scala 107:18]
    node _T_6 = bits(cfgOut, 38, 36) @[PE.scala 113:38]
    DelayPipe.io.config <= _T_6 @[PE.scala 113:29]
    node _T_7 = bits(cfgOut, 41, 39) @[PE.scala 113:38]
    DelayPipe_1.io.config <= _T_7 @[PE.scala 113:29]
    node _T_8 = bits(cfgOut, 44, 42) @[PE.scala 121:32]
    Muxn.io.config <= _T_8 @[PE.scala 121:23]
    node _T_9 = bits(cfgOut, 47, 45) @[PE.scala 121:32]
    Muxn_1.io.config <= _T_9 @[PE.scala 121:23]
    
  module ALU_26 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<4>, flip in : UInt<32>[2], out : UInt<32>}
    
    node _T = bits(io.in[0], 31, 0) @[Operations.scala 122:31]
    node _T_1 = bits(io.in[0], 31, 0) @[Operations.scala 124:31]
    node _T_2 = bits(io.in[1], 31, 0) @[Operations.scala 124:49]
    node _T_3 = add(_T_1, _T_2) @[Operations.scala 124:41]
    node _T_4 = tail(_T_3, 1) @[Operations.scala 124:41]
    node _T_5 = bits(io.in[0], 31, 0) @[Operations.scala 126:31]
    node _T_6 = bits(io.in[1], 31, 0) @[Operations.scala 126:49]
    node _T_7 = sub(_T_5, _T_6) @[Operations.scala 126:41]
    node _T_8 = tail(_T_7, 1) @[Operations.scala 126:41]
    node _T_9 = bits(io.in[0], 31, 0) @[Operations.scala 128:31]
    node _T_10 = bits(io.in[1], 31, 0) @[Operations.scala 128:49]
    node _T_11 = mul(_T_9, _T_10) @[Operations.scala 128:41]
    node _T_12 = bits(io.in[0], 31, 0) @[Operations.scala 138:31]
    node _T_13 = bits(io.in[1], 31, 0) @[Operations.scala 138:49]
    node _T_14 = and(_T_12, _T_13) @[Operations.scala 138:41]
    node _T_15 = bits(io.in[0], 31, 0) @[Operations.scala 140:31]
    node _T_16 = bits(io.in[1], 31, 0) @[Operations.scala 140:49]
    node _T_17 = or(_T_15, _T_16) @[Operations.scala 140:41]
    node _T_18 = bits(io.in[0], 31, 0) @[Operations.scala 142:31]
    node _T_19 = bits(io.in[1], 31, 0) @[Operations.scala 142:49]
    node _T_20 = xor(_T_18, _T_19) @[Operations.scala 142:41]
    node _T_21 = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_22 = mux(_T_21, _T, UInt<1>("h00")) @[Mux.scala 80:57]
    node _T_23 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_24 = mux(_T_23, _T_4, _T_22) @[Mux.scala 80:57]
    node _T_25 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_26 = mux(_T_25, _T_8, _T_24) @[Mux.scala 80:57]
    node _T_27 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_28 = mux(_T_27, _T_11, _T_26) @[Mux.scala 80:57]
    node _T_29 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_30 = mux(_T_29, _T_14, _T_28) @[Mux.scala 80:57]
    node _T_31 = eq(UInt<3>("h05"), io.config) @[Mux.scala 80:60]
    node _T_32 = mux(_T_31, _T_17, _T_30) @[Mux.scala 80:57]
    node _T_33 = eq(UInt<3>("h06"), io.config) @[Mux.scala 80:60]
    node _T_34 = mux(_T_33, _T_20, _T_32) @[Mux.scala 80:57]
    io.out <= _T_34 @[ALU.scala 25:10]
    
  module RF_26 : 
    input clock : Clock
    input reset : Reset
    output io : {flip en : UInt<1>, flip config : UInt<0>, flip in : UInt<32>[1], out : UInt<32>[2]}
    
    wire _T : UInt<32>[1] @[RegFile.scala 24:29]
    _T[0] <= UInt<32>("h00") @[RegFile.scala 24:29]
    reg regs : UInt<32>[1], clock with : (reset => (reset, _T)) @[RegFile.scala 24:21]
    when io.en : @[RegFile.scala 34:16]
      regs[0] <= io.in[0] @[RegFile.scala 35:41]
      skip @[RegFile.scala 34:16]
    io.out[0] <= regs[0] @[RegFile.scala 37:42]
    io.out[1] <= regs[0] @[RegFile.scala 37:42]
    
  module DelayPipe_52 : 
    input clock : Clock
    input reset : Reset
    output io : {flip en : UInt<1>, flip config : UInt<3>, flip in : UInt<32>, out : UInt<32>}
    
    wire _T : UInt<32>[5] @[DelayPipe.scala 22:29]
    _T[0] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[1] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[2] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[3] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[4] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    reg regs : UInt<32>[5], clock with : (reset => (reset, _T)) @[DelayPipe.scala 22:21]
    reg wptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 23:21]
    reg rptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 24:21]
    node _T_1 = lt(wptr, UInt<3>("h04")) @[DelayPipe.scala 26:23]
    node _T_2 = and(io.en, _T_1) @[DelayPipe.scala 26:14]
    when _T_2 : @[DelayPipe.scala 26:37]
      node _T_3 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 27:17]
      node _T_4 = tail(_T_3, 1) @[DelayPipe.scala 27:17]
      wptr <= _T_4 @[DelayPipe.scala 27:10]
      skip @[DelayPipe.scala 26:37]
    else : @[DelayPipe.scala 28:14]
      wptr <= UInt<1>("h00") @[DelayPipe.scala 29:10]
      skip @[DelayPipe.scala 28:14]
    node _T_5 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 32:12]
    node _T_6 = tail(_T_5, 1) @[DelayPipe.scala 32:12]
    node _T_7 = geq(_T_6, io.config) @[DelayPipe.scala 32:17]
    when _T_7 : @[DelayPipe.scala 32:30]
      node _T_8 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 33:18]
      node _T_9 = tail(_T_8, 1) @[DelayPipe.scala 33:18]
      node _T_10 = sub(_T_9, io.config) @[DelayPipe.scala 33:24]
      node _T_11 = tail(_T_10, 1) @[DelayPipe.scala 33:24]
      rptr <= _T_11 @[DelayPipe.scala 33:10]
      skip @[DelayPipe.scala 32:30]
    else : @[DelayPipe.scala 34:14]
      node _T_12 = add(UInt<3>("h06"), wptr) @[DelayPipe.scala 35:30]
      node _T_13 = tail(_T_12, 1) @[DelayPipe.scala 35:30]
      node _T_14 = sub(_T_13, io.config) @[DelayPipe.scala 35:37]
      node _T_15 = tail(_T_14, 1) @[DelayPipe.scala 35:37]
      rptr <= _T_15 @[DelayPipe.scala 35:10]
      skip @[DelayPipe.scala 34:14]
    node _T_16 = gt(io.config, UInt<1>("h00")) @[DelayPipe.scala 39:28]
    node _T_17 = and(io.en, _T_16) @[DelayPipe.scala 39:14]
    when _T_17 : @[DelayPipe.scala 39:35]
      regs[wptr] <= io.in @[DelayPipe.scala 40:16]
      skip @[DelayPipe.scala 39:35]
    reg cnt : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 43:20]
    node _T_18 = eq(io.en, UInt<1>("h00")) @[DelayPipe.scala 44:8]
    when _T_18 : @[DelayPipe.scala 44:15]
      cnt <= UInt<1>("h00") @[DelayPipe.scala 45:9]
      skip @[DelayPipe.scala 44:15]
    else : @[DelayPipe.scala 46:30]
      node _T_19 = lt(cnt, io.config) @[DelayPipe.scala 46:18]
      when _T_19 : @[DelayPipe.scala 46:30]
        node _T_20 = add(cnt, UInt<1>("h01")) @[DelayPipe.scala 47:16]
        node _T_21 = tail(_T_20, 1) @[DelayPipe.scala 47:16]
        cnt <= _T_21 @[DelayPipe.scala 47:9]
        skip @[DelayPipe.scala 46:30]
    node _T_22 = eq(UInt<1>("h00"), io.config) @[DelayPipe.scala 50:22]
    node _T_23 = and(io.en, _T_22) @[DelayPipe.scala 50:14]
    when _T_23 : @[DelayPipe.scala 50:37]
      io.out <= io.in @[DelayPipe.scala 51:12]
      skip @[DelayPipe.scala 50:37]
    else : @[DelayPipe.scala 52:43]
      node _T_24 = eq(cnt, io.config) @[DelayPipe.scala 52:28]
      node _T_25 = and(io.en, _T_24) @[DelayPipe.scala 52:20]
      when _T_25 : @[DelayPipe.scala 52:43]
        io.out <= regs[rptr] @[DelayPipe.scala 53:12]
        skip @[DelayPipe.scala 52:43]
      else : @[DelayPipe.scala 54:14]
        io.out <= UInt<1>("h00") @[DelayPipe.scala 55:12]
        skip @[DelayPipe.scala 54:14]
    
  module DelayPipe_53 : 
    input clock : Clock
    input reset : Reset
    output io : {flip en : UInt<1>, flip config : UInt<3>, flip in : UInt<32>, out : UInt<32>}
    
    wire _T : UInt<32>[5] @[DelayPipe.scala 22:29]
    _T[0] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[1] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[2] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[3] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[4] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    reg regs : UInt<32>[5], clock with : (reset => (reset, _T)) @[DelayPipe.scala 22:21]
    reg wptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 23:21]
    reg rptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 24:21]
    node _T_1 = lt(wptr, UInt<3>("h04")) @[DelayPipe.scala 26:23]
    node _T_2 = and(io.en, _T_1) @[DelayPipe.scala 26:14]
    when _T_2 : @[DelayPipe.scala 26:37]
      node _T_3 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 27:17]
      node _T_4 = tail(_T_3, 1) @[DelayPipe.scala 27:17]
      wptr <= _T_4 @[DelayPipe.scala 27:10]
      skip @[DelayPipe.scala 26:37]
    else : @[DelayPipe.scala 28:14]
      wptr <= UInt<1>("h00") @[DelayPipe.scala 29:10]
      skip @[DelayPipe.scala 28:14]
    node _T_5 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 32:12]
    node _T_6 = tail(_T_5, 1) @[DelayPipe.scala 32:12]
    node _T_7 = geq(_T_6, io.config) @[DelayPipe.scala 32:17]
    when _T_7 : @[DelayPipe.scala 32:30]
      node _T_8 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 33:18]
      node _T_9 = tail(_T_8, 1) @[DelayPipe.scala 33:18]
      node _T_10 = sub(_T_9, io.config) @[DelayPipe.scala 33:24]
      node _T_11 = tail(_T_10, 1) @[DelayPipe.scala 33:24]
      rptr <= _T_11 @[DelayPipe.scala 33:10]
      skip @[DelayPipe.scala 32:30]
    else : @[DelayPipe.scala 34:14]
      node _T_12 = add(UInt<3>("h06"), wptr) @[DelayPipe.scala 35:30]
      node _T_13 = tail(_T_12, 1) @[DelayPipe.scala 35:30]
      node _T_14 = sub(_T_13, io.config) @[DelayPipe.scala 35:37]
      node _T_15 = tail(_T_14, 1) @[DelayPipe.scala 35:37]
      rptr <= _T_15 @[DelayPipe.scala 35:10]
      skip @[DelayPipe.scala 34:14]
    node _T_16 = gt(io.config, UInt<1>("h00")) @[DelayPipe.scala 39:28]
    node _T_17 = and(io.en, _T_16) @[DelayPipe.scala 39:14]
    when _T_17 : @[DelayPipe.scala 39:35]
      regs[wptr] <= io.in @[DelayPipe.scala 40:16]
      skip @[DelayPipe.scala 39:35]
    reg cnt : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 43:20]
    node _T_18 = eq(io.en, UInt<1>("h00")) @[DelayPipe.scala 44:8]
    when _T_18 : @[DelayPipe.scala 44:15]
      cnt <= UInt<1>("h00") @[DelayPipe.scala 45:9]
      skip @[DelayPipe.scala 44:15]
    else : @[DelayPipe.scala 46:30]
      node _T_19 = lt(cnt, io.config) @[DelayPipe.scala 46:18]
      when _T_19 : @[DelayPipe.scala 46:30]
        node _T_20 = add(cnt, UInt<1>("h01")) @[DelayPipe.scala 47:16]
        node _T_21 = tail(_T_20, 1) @[DelayPipe.scala 47:16]
        cnt <= _T_21 @[DelayPipe.scala 47:9]
        skip @[DelayPipe.scala 46:30]
    node _T_22 = eq(UInt<1>("h00"), io.config) @[DelayPipe.scala 50:22]
    node _T_23 = and(io.en, _T_22) @[DelayPipe.scala 50:14]
    when _T_23 : @[DelayPipe.scala 50:37]
      io.out <= io.in @[DelayPipe.scala 51:12]
      skip @[DelayPipe.scala 50:37]
    else : @[DelayPipe.scala 52:43]
      node _T_24 = eq(cnt, io.config) @[DelayPipe.scala 52:28]
      node _T_25 = and(io.en, _T_24) @[DelayPipe.scala 52:20]
      when _T_25 : @[DelayPipe.scala 52:43]
        io.out <= regs[rptr] @[DelayPipe.scala 53:12]
        skip @[DelayPipe.scala 52:43]
      else : @[DelayPipe.scala 54:14]
        io.out <= UInt<1>("h00") @[DelayPipe.scala 55:12]
        skip @[DelayPipe.scala 54:14]
    
  module Muxn_68 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[6], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    node _T_10 = eq(UInt<3>("h05"), io.config) @[Mux.scala 80:60]
    node _T_11 = mux(_T_10, io.in[5], _T_9) @[Mux.scala 80:57]
    io.out <= _T_11 @[Multiplexer.scala 20:10]
    
  module Muxn_69 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[6], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    node _T_10 = eq(UInt<3>("h05"), io.config) @[Mux.scala 80:60]
    node _T_11 = mux(_T_10, io.in[5], _T_9) @[Mux.scala 80:57]
    io.out <= _T_11 @[Multiplexer.scala 20:10]
    
  module ConfigMem_42 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<1>, flip cfg_data : UInt<32>, out : UInt<48>[1]}
    
    wire _T : UInt<48>[1] @[ConfigMem.scala 27:29]
    _T[0] <= UInt<48>("h00") @[ConfigMem.scala 27:29]
    reg regs : UInt<48>[1], clock with : (reset => (reset, _T)) @[ConfigMem.scala 27:21]
    node _T_1 = eq(io.cfg_addr, UInt<1>("h00")) @[ConfigMem.scala 39:38]
    node _T_2 = and(io.cfg_en, _T_1) @[ConfigMem.scala 39:22]
    when _T_2 : @[ConfigMem.scala 39:47]
      node _T_3 = bits(regs[0], 47, 32) @[ConfigMem.scala 41:33]
      node _T_4 = cat(_T_3, io.cfg_data) @[Cat.scala 29:58]
      regs[0] <= _T_4 @[ConfigMem.scala 41:19]
      skip @[ConfigMem.scala 39:47]
    node _T_5 = eq(io.cfg_addr, UInt<1>("h01")) @[ConfigMem.scala 39:38]
    node _T_6 = and(io.cfg_en, _T_5) @[ConfigMem.scala 39:22]
    when _T_6 : @[ConfigMem.scala 39:47]
      node _T_7 = bits(regs[0], 31, 0) @[ConfigMem.scala 43:46]
      node _T_8 = cat(io.cfg_data, _T_7) @[Cat.scala 29:58]
      regs[0] <= _T_8 @[ConfigMem.scala 43:19]
      skip @[ConfigMem.scala 39:47]
    io.out[0] <= regs[0] @[ConfigMem.scala 52:45]
    
  module GPE_26 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<12>, flip cfg_data : UInt<32>, flip en : UInt<1>, flip in : UInt<32>[8], out : UInt<32>[1]}
    
    inst alu of ALU_26 @[PE.scala 50:19]
    alu.clock <= clock
    alu.reset <= reset
    inst rf of RF_26 @[PE.scala 51:18]
    rf.clock <= clock
    rf.reset <= reset
    inst DelayPipe of DelayPipe_52 @[PE.scala 52:54]
    DelayPipe.clock <= clock
    DelayPipe.reset <= reset
    inst DelayPipe_1 of DelayPipe_53 @[PE.scala 52:54]
    DelayPipe_1.clock <= clock
    DelayPipe_1.reset <= reset
    wire const : UInt<32> @[PE.scala 54:19]
    inst Muxn of Muxn_68 @[PE.scala 55:49]
    Muxn.clock <= clock
    Muxn.reset <= reset
    inst Muxn_1 of Muxn_69 @[PE.scala 55:49]
    Muxn_1.clock <= clock
    Muxn_1.reset <= reset
    Muxn.io.in[0] <= io.in[0] @[PE.scala 62:12]
    Muxn.io.in[1] <= io.in[1] @[PE.scala 62:12]
    Muxn.io.in[2] <= io.in[2] @[PE.scala 62:12]
    Muxn.io.in[3] <= io.in[3] @[PE.scala 62:12]
    Muxn.io.in[4] <= const @[PE.scala 64:12]
    Muxn.io.in[5] <= rf.io.out[1] @[PE.scala 66:12]
    DelayPipe.io.en <= io.en @[PE.scala 69:23]
    DelayPipe.io.in <= Muxn.io.out @[PE.scala 70:23]
    alu.io.in[0] <= DelayPipe.io.out @[PE.scala 71:18]
    Muxn_1.io.in[0] <= io.in[4] @[PE.scala 62:12]
    Muxn_1.io.in[1] <= io.in[5] @[PE.scala 62:12]
    Muxn_1.io.in[2] <= io.in[6] @[PE.scala 62:12]
    Muxn_1.io.in[3] <= io.in[7] @[PE.scala 62:12]
    Muxn_1.io.in[4] <= const @[PE.scala 64:12]
    Muxn_1.io.in[5] <= rf.io.out[1] @[PE.scala 66:12]
    DelayPipe_1.io.en <= io.en @[PE.scala 69:23]
    DelayPipe_1.io.in <= Muxn_1.io.out @[PE.scala 70:23]
    alu.io.in[1] <= DelayPipe_1.io.out @[PE.scala 71:18]
    rf.io.en <= io.en @[PE.scala 75:12]
    rf.io.in[0] <= alu.io.out @[PE.scala 76:15]
    io.out[0] <= rf.io.out[0] @[PE.scala 77:13]
    inst cfg of ConfigMem_42 @[PE.scala 89:19]
    cfg.clock <= clock
    cfg.reset <= reset
    node _T = bits(io.cfg_addr, 11, 2) @[PE.scala 90:63]
    node _T_1 = eq(UInt<7>("h054"), _T) @[PE.scala 90:48]
    node _T_2 = and(io.cfg_en, _T_1) @[PE.scala 90:30]
    cfg.io.cfg_en <= _T_2 @[PE.scala 90:17]
    node _T_3 = bits(io.cfg_addr, 1, 0) @[PE.scala 91:33]
    cfg.io.cfg_addr <= _T_3 @[PE.scala 91:19]
    cfg.io.cfg_data <= io.cfg_data @[PE.scala 92:19]
    wire cfgOut : UInt<48> @[PE.scala 96:20]
    cfgOut <= cfg.io.out[0] @[PE.scala 97:10]
    node _T_4 = bits(cfgOut, 31, 0) @[PE.scala 98:18]
    const <= _T_4 @[PE.scala 98:9]
    node _T_5 = bits(cfgOut, 35, 32) @[PE.scala 100:28]
    alu.io.config <= _T_5 @[PE.scala 100:19]
    rf.io.config is invalid @[PE.scala 107:18]
    node _T_6 = bits(cfgOut, 38, 36) @[PE.scala 113:38]
    DelayPipe.io.config <= _T_6 @[PE.scala 113:29]
    node _T_7 = bits(cfgOut, 41, 39) @[PE.scala 113:38]
    DelayPipe_1.io.config <= _T_7 @[PE.scala 113:29]
    node _T_8 = bits(cfgOut, 44, 42) @[PE.scala 121:32]
    Muxn.io.config <= _T_8 @[PE.scala 121:23]
    node _T_9 = bits(cfgOut, 47, 45) @[PE.scala 121:32]
    Muxn_1.io.config <= _T_9 @[PE.scala 121:23]
    
  module ALU_27 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<4>, flip in : UInt<32>[2], out : UInt<32>}
    
    node _T = bits(io.in[0], 31, 0) @[Operations.scala 122:31]
    node _T_1 = bits(io.in[0], 31, 0) @[Operations.scala 124:31]
    node _T_2 = bits(io.in[1], 31, 0) @[Operations.scala 124:49]
    node _T_3 = add(_T_1, _T_2) @[Operations.scala 124:41]
    node _T_4 = tail(_T_3, 1) @[Operations.scala 124:41]
    node _T_5 = bits(io.in[0], 31, 0) @[Operations.scala 126:31]
    node _T_6 = bits(io.in[1], 31, 0) @[Operations.scala 126:49]
    node _T_7 = sub(_T_5, _T_6) @[Operations.scala 126:41]
    node _T_8 = tail(_T_7, 1) @[Operations.scala 126:41]
    node _T_9 = bits(io.in[0], 31, 0) @[Operations.scala 128:31]
    node _T_10 = bits(io.in[1], 31, 0) @[Operations.scala 128:49]
    node _T_11 = mul(_T_9, _T_10) @[Operations.scala 128:41]
    node _T_12 = bits(io.in[0], 31, 0) @[Operations.scala 138:31]
    node _T_13 = bits(io.in[1], 31, 0) @[Operations.scala 138:49]
    node _T_14 = and(_T_12, _T_13) @[Operations.scala 138:41]
    node _T_15 = bits(io.in[0], 31, 0) @[Operations.scala 140:31]
    node _T_16 = bits(io.in[1], 31, 0) @[Operations.scala 140:49]
    node _T_17 = or(_T_15, _T_16) @[Operations.scala 140:41]
    node _T_18 = bits(io.in[0], 31, 0) @[Operations.scala 142:31]
    node _T_19 = bits(io.in[1], 31, 0) @[Operations.scala 142:49]
    node _T_20 = xor(_T_18, _T_19) @[Operations.scala 142:41]
    node _T_21 = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_22 = mux(_T_21, _T, UInt<1>("h00")) @[Mux.scala 80:57]
    node _T_23 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_24 = mux(_T_23, _T_4, _T_22) @[Mux.scala 80:57]
    node _T_25 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_26 = mux(_T_25, _T_8, _T_24) @[Mux.scala 80:57]
    node _T_27 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_28 = mux(_T_27, _T_11, _T_26) @[Mux.scala 80:57]
    node _T_29 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_30 = mux(_T_29, _T_14, _T_28) @[Mux.scala 80:57]
    node _T_31 = eq(UInt<3>("h05"), io.config) @[Mux.scala 80:60]
    node _T_32 = mux(_T_31, _T_17, _T_30) @[Mux.scala 80:57]
    node _T_33 = eq(UInt<3>("h06"), io.config) @[Mux.scala 80:60]
    node _T_34 = mux(_T_33, _T_20, _T_32) @[Mux.scala 80:57]
    io.out <= _T_34 @[ALU.scala 25:10]
    
  module RF_27 : 
    input clock : Clock
    input reset : Reset
    output io : {flip en : UInt<1>, flip config : UInt<0>, flip in : UInt<32>[1], out : UInt<32>[2]}
    
    wire _T : UInt<32>[1] @[RegFile.scala 24:29]
    _T[0] <= UInt<32>("h00") @[RegFile.scala 24:29]
    reg regs : UInt<32>[1], clock with : (reset => (reset, _T)) @[RegFile.scala 24:21]
    when io.en : @[RegFile.scala 34:16]
      regs[0] <= io.in[0] @[RegFile.scala 35:41]
      skip @[RegFile.scala 34:16]
    io.out[0] <= regs[0] @[RegFile.scala 37:42]
    io.out[1] <= regs[0] @[RegFile.scala 37:42]
    
  module DelayPipe_54 : 
    input clock : Clock
    input reset : Reset
    output io : {flip en : UInt<1>, flip config : UInt<3>, flip in : UInt<32>, out : UInt<32>}
    
    wire _T : UInt<32>[5] @[DelayPipe.scala 22:29]
    _T[0] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[1] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[2] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[3] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[4] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    reg regs : UInt<32>[5], clock with : (reset => (reset, _T)) @[DelayPipe.scala 22:21]
    reg wptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 23:21]
    reg rptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 24:21]
    node _T_1 = lt(wptr, UInt<3>("h04")) @[DelayPipe.scala 26:23]
    node _T_2 = and(io.en, _T_1) @[DelayPipe.scala 26:14]
    when _T_2 : @[DelayPipe.scala 26:37]
      node _T_3 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 27:17]
      node _T_4 = tail(_T_3, 1) @[DelayPipe.scala 27:17]
      wptr <= _T_4 @[DelayPipe.scala 27:10]
      skip @[DelayPipe.scala 26:37]
    else : @[DelayPipe.scala 28:14]
      wptr <= UInt<1>("h00") @[DelayPipe.scala 29:10]
      skip @[DelayPipe.scala 28:14]
    node _T_5 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 32:12]
    node _T_6 = tail(_T_5, 1) @[DelayPipe.scala 32:12]
    node _T_7 = geq(_T_6, io.config) @[DelayPipe.scala 32:17]
    when _T_7 : @[DelayPipe.scala 32:30]
      node _T_8 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 33:18]
      node _T_9 = tail(_T_8, 1) @[DelayPipe.scala 33:18]
      node _T_10 = sub(_T_9, io.config) @[DelayPipe.scala 33:24]
      node _T_11 = tail(_T_10, 1) @[DelayPipe.scala 33:24]
      rptr <= _T_11 @[DelayPipe.scala 33:10]
      skip @[DelayPipe.scala 32:30]
    else : @[DelayPipe.scala 34:14]
      node _T_12 = add(UInt<3>("h06"), wptr) @[DelayPipe.scala 35:30]
      node _T_13 = tail(_T_12, 1) @[DelayPipe.scala 35:30]
      node _T_14 = sub(_T_13, io.config) @[DelayPipe.scala 35:37]
      node _T_15 = tail(_T_14, 1) @[DelayPipe.scala 35:37]
      rptr <= _T_15 @[DelayPipe.scala 35:10]
      skip @[DelayPipe.scala 34:14]
    node _T_16 = gt(io.config, UInt<1>("h00")) @[DelayPipe.scala 39:28]
    node _T_17 = and(io.en, _T_16) @[DelayPipe.scala 39:14]
    when _T_17 : @[DelayPipe.scala 39:35]
      regs[wptr] <= io.in @[DelayPipe.scala 40:16]
      skip @[DelayPipe.scala 39:35]
    reg cnt : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 43:20]
    node _T_18 = eq(io.en, UInt<1>("h00")) @[DelayPipe.scala 44:8]
    when _T_18 : @[DelayPipe.scala 44:15]
      cnt <= UInt<1>("h00") @[DelayPipe.scala 45:9]
      skip @[DelayPipe.scala 44:15]
    else : @[DelayPipe.scala 46:30]
      node _T_19 = lt(cnt, io.config) @[DelayPipe.scala 46:18]
      when _T_19 : @[DelayPipe.scala 46:30]
        node _T_20 = add(cnt, UInt<1>("h01")) @[DelayPipe.scala 47:16]
        node _T_21 = tail(_T_20, 1) @[DelayPipe.scala 47:16]
        cnt <= _T_21 @[DelayPipe.scala 47:9]
        skip @[DelayPipe.scala 46:30]
    node _T_22 = eq(UInt<1>("h00"), io.config) @[DelayPipe.scala 50:22]
    node _T_23 = and(io.en, _T_22) @[DelayPipe.scala 50:14]
    when _T_23 : @[DelayPipe.scala 50:37]
      io.out <= io.in @[DelayPipe.scala 51:12]
      skip @[DelayPipe.scala 50:37]
    else : @[DelayPipe.scala 52:43]
      node _T_24 = eq(cnt, io.config) @[DelayPipe.scala 52:28]
      node _T_25 = and(io.en, _T_24) @[DelayPipe.scala 52:20]
      when _T_25 : @[DelayPipe.scala 52:43]
        io.out <= regs[rptr] @[DelayPipe.scala 53:12]
        skip @[DelayPipe.scala 52:43]
      else : @[DelayPipe.scala 54:14]
        io.out <= UInt<1>("h00") @[DelayPipe.scala 55:12]
        skip @[DelayPipe.scala 54:14]
    
  module DelayPipe_55 : 
    input clock : Clock
    input reset : Reset
    output io : {flip en : UInt<1>, flip config : UInt<3>, flip in : UInt<32>, out : UInt<32>}
    
    wire _T : UInt<32>[5] @[DelayPipe.scala 22:29]
    _T[0] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[1] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[2] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[3] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[4] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    reg regs : UInt<32>[5], clock with : (reset => (reset, _T)) @[DelayPipe.scala 22:21]
    reg wptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 23:21]
    reg rptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 24:21]
    node _T_1 = lt(wptr, UInt<3>("h04")) @[DelayPipe.scala 26:23]
    node _T_2 = and(io.en, _T_1) @[DelayPipe.scala 26:14]
    when _T_2 : @[DelayPipe.scala 26:37]
      node _T_3 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 27:17]
      node _T_4 = tail(_T_3, 1) @[DelayPipe.scala 27:17]
      wptr <= _T_4 @[DelayPipe.scala 27:10]
      skip @[DelayPipe.scala 26:37]
    else : @[DelayPipe.scala 28:14]
      wptr <= UInt<1>("h00") @[DelayPipe.scala 29:10]
      skip @[DelayPipe.scala 28:14]
    node _T_5 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 32:12]
    node _T_6 = tail(_T_5, 1) @[DelayPipe.scala 32:12]
    node _T_7 = geq(_T_6, io.config) @[DelayPipe.scala 32:17]
    when _T_7 : @[DelayPipe.scala 32:30]
      node _T_8 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 33:18]
      node _T_9 = tail(_T_8, 1) @[DelayPipe.scala 33:18]
      node _T_10 = sub(_T_9, io.config) @[DelayPipe.scala 33:24]
      node _T_11 = tail(_T_10, 1) @[DelayPipe.scala 33:24]
      rptr <= _T_11 @[DelayPipe.scala 33:10]
      skip @[DelayPipe.scala 32:30]
    else : @[DelayPipe.scala 34:14]
      node _T_12 = add(UInt<3>("h06"), wptr) @[DelayPipe.scala 35:30]
      node _T_13 = tail(_T_12, 1) @[DelayPipe.scala 35:30]
      node _T_14 = sub(_T_13, io.config) @[DelayPipe.scala 35:37]
      node _T_15 = tail(_T_14, 1) @[DelayPipe.scala 35:37]
      rptr <= _T_15 @[DelayPipe.scala 35:10]
      skip @[DelayPipe.scala 34:14]
    node _T_16 = gt(io.config, UInt<1>("h00")) @[DelayPipe.scala 39:28]
    node _T_17 = and(io.en, _T_16) @[DelayPipe.scala 39:14]
    when _T_17 : @[DelayPipe.scala 39:35]
      regs[wptr] <= io.in @[DelayPipe.scala 40:16]
      skip @[DelayPipe.scala 39:35]
    reg cnt : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 43:20]
    node _T_18 = eq(io.en, UInt<1>("h00")) @[DelayPipe.scala 44:8]
    when _T_18 : @[DelayPipe.scala 44:15]
      cnt <= UInt<1>("h00") @[DelayPipe.scala 45:9]
      skip @[DelayPipe.scala 44:15]
    else : @[DelayPipe.scala 46:30]
      node _T_19 = lt(cnt, io.config) @[DelayPipe.scala 46:18]
      when _T_19 : @[DelayPipe.scala 46:30]
        node _T_20 = add(cnt, UInt<1>("h01")) @[DelayPipe.scala 47:16]
        node _T_21 = tail(_T_20, 1) @[DelayPipe.scala 47:16]
        cnt <= _T_21 @[DelayPipe.scala 47:9]
        skip @[DelayPipe.scala 46:30]
    node _T_22 = eq(UInt<1>("h00"), io.config) @[DelayPipe.scala 50:22]
    node _T_23 = and(io.en, _T_22) @[DelayPipe.scala 50:14]
    when _T_23 : @[DelayPipe.scala 50:37]
      io.out <= io.in @[DelayPipe.scala 51:12]
      skip @[DelayPipe.scala 50:37]
    else : @[DelayPipe.scala 52:43]
      node _T_24 = eq(cnt, io.config) @[DelayPipe.scala 52:28]
      node _T_25 = and(io.en, _T_24) @[DelayPipe.scala 52:20]
      when _T_25 : @[DelayPipe.scala 52:43]
        io.out <= regs[rptr] @[DelayPipe.scala 53:12]
        skip @[DelayPipe.scala 52:43]
      else : @[DelayPipe.scala 54:14]
        io.out <= UInt<1>("h00") @[DelayPipe.scala 55:12]
        skip @[DelayPipe.scala 54:14]
    
  module Muxn_70 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[6], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    node _T_10 = eq(UInt<3>("h05"), io.config) @[Mux.scala 80:60]
    node _T_11 = mux(_T_10, io.in[5], _T_9) @[Mux.scala 80:57]
    io.out <= _T_11 @[Multiplexer.scala 20:10]
    
  module Muxn_71 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[6], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    node _T_10 = eq(UInt<3>("h05"), io.config) @[Mux.scala 80:60]
    node _T_11 = mux(_T_10, io.in[5], _T_9) @[Mux.scala 80:57]
    io.out <= _T_11 @[Multiplexer.scala 20:10]
    
  module ConfigMem_43 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<1>, flip cfg_data : UInt<32>, out : UInt<48>[1]}
    
    wire _T : UInt<48>[1] @[ConfigMem.scala 27:29]
    _T[0] <= UInt<48>("h00") @[ConfigMem.scala 27:29]
    reg regs : UInt<48>[1], clock with : (reset => (reset, _T)) @[ConfigMem.scala 27:21]
    node _T_1 = eq(io.cfg_addr, UInt<1>("h00")) @[ConfigMem.scala 39:38]
    node _T_2 = and(io.cfg_en, _T_1) @[ConfigMem.scala 39:22]
    when _T_2 : @[ConfigMem.scala 39:47]
      node _T_3 = bits(regs[0], 47, 32) @[ConfigMem.scala 41:33]
      node _T_4 = cat(_T_3, io.cfg_data) @[Cat.scala 29:58]
      regs[0] <= _T_4 @[ConfigMem.scala 41:19]
      skip @[ConfigMem.scala 39:47]
    node _T_5 = eq(io.cfg_addr, UInt<1>("h01")) @[ConfigMem.scala 39:38]
    node _T_6 = and(io.cfg_en, _T_5) @[ConfigMem.scala 39:22]
    when _T_6 : @[ConfigMem.scala 39:47]
      node _T_7 = bits(regs[0], 31, 0) @[ConfigMem.scala 43:46]
      node _T_8 = cat(io.cfg_data, _T_7) @[Cat.scala 29:58]
      regs[0] <= _T_8 @[ConfigMem.scala 43:19]
      skip @[ConfigMem.scala 39:47]
    io.out[0] <= regs[0] @[ConfigMem.scala 52:45]
    
  module GPE_27 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<12>, flip cfg_data : UInt<32>, flip en : UInt<1>, flip in : UInt<32>[8], out : UInt<32>[1]}
    
    inst alu of ALU_27 @[PE.scala 50:19]
    alu.clock <= clock
    alu.reset <= reset
    inst rf of RF_27 @[PE.scala 51:18]
    rf.clock <= clock
    rf.reset <= reset
    inst DelayPipe of DelayPipe_54 @[PE.scala 52:54]
    DelayPipe.clock <= clock
    DelayPipe.reset <= reset
    inst DelayPipe_1 of DelayPipe_55 @[PE.scala 52:54]
    DelayPipe_1.clock <= clock
    DelayPipe_1.reset <= reset
    wire const : UInt<32> @[PE.scala 54:19]
    inst Muxn of Muxn_70 @[PE.scala 55:49]
    Muxn.clock <= clock
    Muxn.reset <= reset
    inst Muxn_1 of Muxn_71 @[PE.scala 55:49]
    Muxn_1.clock <= clock
    Muxn_1.reset <= reset
    Muxn.io.in[0] <= io.in[0] @[PE.scala 62:12]
    Muxn.io.in[1] <= io.in[1] @[PE.scala 62:12]
    Muxn.io.in[2] <= io.in[2] @[PE.scala 62:12]
    Muxn.io.in[3] <= io.in[3] @[PE.scala 62:12]
    Muxn.io.in[4] <= const @[PE.scala 64:12]
    Muxn.io.in[5] <= rf.io.out[1] @[PE.scala 66:12]
    DelayPipe.io.en <= io.en @[PE.scala 69:23]
    DelayPipe.io.in <= Muxn.io.out @[PE.scala 70:23]
    alu.io.in[0] <= DelayPipe.io.out @[PE.scala 71:18]
    Muxn_1.io.in[0] <= io.in[4] @[PE.scala 62:12]
    Muxn_1.io.in[1] <= io.in[5] @[PE.scala 62:12]
    Muxn_1.io.in[2] <= io.in[6] @[PE.scala 62:12]
    Muxn_1.io.in[3] <= io.in[7] @[PE.scala 62:12]
    Muxn_1.io.in[4] <= const @[PE.scala 64:12]
    Muxn_1.io.in[5] <= rf.io.out[1] @[PE.scala 66:12]
    DelayPipe_1.io.en <= io.en @[PE.scala 69:23]
    DelayPipe_1.io.in <= Muxn_1.io.out @[PE.scala 70:23]
    alu.io.in[1] <= DelayPipe_1.io.out @[PE.scala 71:18]
    rf.io.en <= io.en @[PE.scala 75:12]
    rf.io.in[0] <= alu.io.out @[PE.scala 76:15]
    io.out[0] <= rf.io.out[0] @[PE.scala 77:13]
    inst cfg of ConfigMem_43 @[PE.scala 89:19]
    cfg.clock <= clock
    cfg.reset <= reset
    node _T = bits(io.cfg_addr, 11, 2) @[PE.scala 90:63]
    node _T_1 = eq(UInt<7>("h055"), _T) @[PE.scala 90:48]
    node _T_2 = and(io.cfg_en, _T_1) @[PE.scala 90:30]
    cfg.io.cfg_en <= _T_2 @[PE.scala 90:17]
    node _T_3 = bits(io.cfg_addr, 1, 0) @[PE.scala 91:33]
    cfg.io.cfg_addr <= _T_3 @[PE.scala 91:19]
    cfg.io.cfg_data <= io.cfg_data @[PE.scala 92:19]
    wire cfgOut : UInt<48> @[PE.scala 96:20]
    cfgOut <= cfg.io.out[0] @[PE.scala 97:10]
    node _T_4 = bits(cfgOut, 31, 0) @[PE.scala 98:18]
    const <= _T_4 @[PE.scala 98:9]
    node _T_5 = bits(cfgOut, 35, 32) @[PE.scala 100:28]
    alu.io.config <= _T_5 @[PE.scala 100:19]
    rf.io.config is invalid @[PE.scala 107:18]
    node _T_6 = bits(cfgOut, 38, 36) @[PE.scala 113:38]
    DelayPipe.io.config <= _T_6 @[PE.scala 113:29]
    node _T_7 = bits(cfgOut, 41, 39) @[PE.scala 113:38]
    DelayPipe_1.io.config <= _T_7 @[PE.scala 113:29]
    node _T_8 = bits(cfgOut, 44, 42) @[PE.scala 121:32]
    Muxn.io.config <= _T_8 @[PE.scala 121:23]
    node _T_9 = bits(cfgOut, 47, 45) @[PE.scala 121:32]
    Muxn_1.io.config <= _T_9 @[PE.scala 121:23]
    
  module ALU_28 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<4>, flip in : UInt<32>[2], out : UInt<32>}
    
    node _T = bits(io.in[0], 31, 0) @[Operations.scala 122:31]
    node _T_1 = bits(io.in[0], 31, 0) @[Operations.scala 124:31]
    node _T_2 = bits(io.in[1], 31, 0) @[Operations.scala 124:49]
    node _T_3 = add(_T_1, _T_2) @[Operations.scala 124:41]
    node _T_4 = tail(_T_3, 1) @[Operations.scala 124:41]
    node _T_5 = bits(io.in[0], 31, 0) @[Operations.scala 126:31]
    node _T_6 = bits(io.in[1], 31, 0) @[Operations.scala 126:49]
    node _T_7 = sub(_T_5, _T_6) @[Operations.scala 126:41]
    node _T_8 = tail(_T_7, 1) @[Operations.scala 126:41]
    node _T_9 = bits(io.in[0], 31, 0) @[Operations.scala 128:31]
    node _T_10 = bits(io.in[1], 31, 0) @[Operations.scala 128:49]
    node _T_11 = mul(_T_9, _T_10) @[Operations.scala 128:41]
    node _T_12 = bits(io.in[0], 31, 0) @[Operations.scala 138:31]
    node _T_13 = bits(io.in[1], 31, 0) @[Operations.scala 138:49]
    node _T_14 = and(_T_12, _T_13) @[Operations.scala 138:41]
    node _T_15 = bits(io.in[0], 31, 0) @[Operations.scala 140:31]
    node _T_16 = bits(io.in[1], 31, 0) @[Operations.scala 140:49]
    node _T_17 = or(_T_15, _T_16) @[Operations.scala 140:41]
    node _T_18 = bits(io.in[0], 31, 0) @[Operations.scala 142:31]
    node _T_19 = bits(io.in[1], 31, 0) @[Operations.scala 142:49]
    node _T_20 = xor(_T_18, _T_19) @[Operations.scala 142:41]
    node _T_21 = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_22 = mux(_T_21, _T, UInt<1>("h00")) @[Mux.scala 80:57]
    node _T_23 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_24 = mux(_T_23, _T_4, _T_22) @[Mux.scala 80:57]
    node _T_25 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_26 = mux(_T_25, _T_8, _T_24) @[Mux.scala 80:57]
    node _T_27 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_28 = mux(_T_27, _T_11, _T_26) @[Mux.scala 80:57]
    node _T_29 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_30 = mux(_T_29, _T_14, _T_28) @[Mux.scala 80:57]
    node _T_31 = eq(UInt<3>("h05"), io.config) @[Mux.scala 80:60]
    node _T_32 = mux(_T_31, _T_17, _T_30) @[Mux.scala 80:57]
    node _T_33 = eq(UInt<3>("h06"), io.config) @[Mux.scala 80:60]
    node _T_34 = mux(_T_33, _T_20, _T_32) @[Mux.scala 80:57]
    io.out <= _T_34 @[ALU.scala 25:10]
    
  module RF_28 : 
    input clock : Clock
    input reset : Reset
    output io : {flip en : UInt<1>, flip config : UInt<0>, flip in : UInt<32>[1], out : UInt<32>[2]}
    
    wire _T : UInt<32>[1] @[RegFile.scala 24:29]
    _T[0] <= UInt<32>("h00") @[RegFile.scala 24:29]
    reg regs : UInt<32>[1], clock with : (reset => (reset, _T)) @[RegFile.scala 24:21]
    when io.en : @[RegFile.scala 34:16]
      regs[0] <= io.in[0] @[RegFile.scala 35:41]
      skip @[RegFile.scala 34:16]
    io.out[0] <= regs[0] @[RegFile.scala 37:42]
    io.out[1] <= regs[0] @[RegFile.scala 37:42]
    
  module DelayPipe_56 : 
    input clock : Clock
    input reset : Reset
    output io : {flip en : UInt<1>, flip config : UInt<3>, flip in : UInt<32>, out : UInt<32>}
    
    wire _T : UInt<32>[5] @[DelayPipe.scala 22:29]
    _T[0] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[1] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[2] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[3] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[4] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    reg regs : UInt<32>[5], clock with : (reset => (reset, _T)) @[DelayPipe.scala 22:21]
    reg wptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 23:21]
    reg rptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 24:21]
    node _T_1 = lt(wptr, UInt<3>("h04")) @[DelayPipe.scala 26:23]
    node _T_2 = and(io.en, _T_1) @[DelayPipe.scala 26:14]
    when _T_2 : @[DelayPipe.scala 26:37]
      node _T_3 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 27:17]
      node _T_4 = tail(_T_3, 1) @[DelayPipe.scala 27:17]
      wptr <= _T_4 @[DelayPipe.scala 27:10]
      skip @[DelayPipe.scala 26:37]
    else : @[DelayPipe.scala 28:14]
      wptr <= UInt<1>("h00") @[DelayPipe.scala 29:10]
      skip @[DelayPipe.scala 28:14]
    node _T_5 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 32:12]
    node _T_6 = tail(_T_5, 1) @[DelayPipe.scala 32:12]
    node _T_7 = geq(_T_6, io.config) @[DelayPipe.scala 32:17]
    when _T_7 : @[DelayPipe.scala 32:30]
      node _T_8 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 33:18]
      node _T_9 = tail(_T_8, 1) @[DelayPipe.scala 33:18]
      node _T_10 = sub(_T_9, io.config) @[DelayPipe.scala 33:24]
      node _T_11 = tail(_T_10, 1) @[DelayPipe.scala 33:24]
      rptr <= _T_11 @[DelayPipe.scala 33:10]
      skip @[DelayPipe.scala 32:30]
    else : @[DelayPipe.scala 34:14]
      node _T_12 = add(UInt<3>("h06"), wptr) @[DelayPipe.scala 35:30]
      node _T_13 = tail(_T_12, 1) @[DelayPipe.scala 35:30]
      node _T_14 = sub(_T_13, io.config) @[DelayPipe.scala 35:37]
      node _T_15 = tail(_T_14, 1) @[DelayPipe.scala 35:37]
      rptr <= _T_15 @[DelayPipe.scala 35:10]
      skip @[DelayPipe.scala 34:14]
    node _T_16 = gt(io.config, UInt<1>("h00")) @[DelayPipe.scala 39:28]
    node _T_17 = and(io.en, _T_16) @[DelayPipe.scala 39:14]
    when _T_17 : @[DelayPipe.scala 39:35]
      regs[wptr] <= io.in @[DelayPipe.scala 40:16]
      skip @[DelayPipe.scala 39:35]
    reg cnt : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 43:20]
    node _T_18 = eq(io.en, UInt<1>("h00")) @[DelayPipe.scala 44:8]
    when _T_18 : @[DelayPipe.scala 44:15]
      cnt <= UInt<1>("h00") @[DelayPipe.scala 45:9]
      skip @[DelayPipe.scala 44:15]
    else : @[DelayPipe.scala 46:30]
      node _T_19 = lt(cnt, io.config) @[DelayPipe.scala 46:18]
      when _T_19 : @[DelayPipe.scala 46:30]
        node _T_20 = add(cnt, UInt<1>("h01")) @[DelayPipe.scala 47:16]
        node _T_21 = tail(_T_20, 1) @[DelayPipe.scala 47:16]
        cnt <= _T_21 @[DelayPipe.scala 47:9]
        skip @[DelayPipe.scala 46:30]
    node _T_22 = eq(UInt<1>("h00"), io.config) @[DelayPipe.scala 50:22]
    node _T_23 = and(io.en, _T_22) @[DelayPipe.scala 50:14]
    when _T_23 : @[DelayPipe.scala 50:37]
      io.out <= io.in @[DelayPipe.scala 51:12]
      skip @[DelayPipe.scala 50:37]
    else : @[DelayPipe.scala 52:43]
      node _T_24 = eq(cnt, io.config) @[DelayPipe.scala 52:28]
      node _T_25 = and(io.en, _T_24) @[DelayPipe.scala 52:20]
      when _T_25 : @[DelayPipe.scala 52:43]
        io.out <= regs[rptr] @[DelayPipe.scala 53:12]
        skip @[DelayPipe.scala 52:43]
      else : @[DelayPipe.scala 54:14]
        io.out <= UInt<1>("h00") @[DelayPipe.scala 55:12]
        skip @[DelayPipe.scala 54:14]
    
  module DelayPipe_57 : 
    input clock : Clock
    input reset : Reset
    output io : {flip en : UInt<1>, flip config : UInt<3>, flip in : UInt<32>, out : UInt<32>}
    
    wire _T : UInt<32>[5] @[DelayPipe.scala 22:29]
    _T[0] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[1] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[2] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[3] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[4] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    reg regs : UInt<32>[5], clock with : (reset => (reset, _T)) @[DelayPipe.scala 22:21]
    reg wptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 23:21]
    reg rptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 24:21]
    node _T_1 = lt(wptr, UInt<3>("h04")) @[DelayPipe.scala 26:23]
    node _T_2 = and(io.en, _T_1) @[DelayPipe.scala 26:14]
    when _T_2 : @[DelayPipe.scala 26:37]
      node _T_3 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 27:17]
      node _T_4 = tail(_T_3, 1) @[DelayPipe.scala 27:17]
      wptr <= _T_4 @[DelayPipe.scala 27:10]
      skip @[DelayPipe.scala 26:37]
    else : @[DelayPipe.scala 28:14]
      wptr <= UInt<1>("h00") @[DelayPipe.scala 29:10]
      skip @[DelayPipe.scala 28:14]
    node _T_5 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 32:12]
    node _T_6 = tail(_T_5, 1) @[DelayPipe.scala 32:12]
    node _T_7 = geq(_T_6, io.config) @[DelayPipe.scala 32:17]
    when _T_7 : @[DelayPipe.scala 32:30]
      node _T_8 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 33:18]
      node _T_9 = tail(_T_8, 1) @[DelayPipe.scala 33:18]
      node _T_10 = sub(_T_9, io.config) @[DelayPipe.scala 33:24]
      node _T_11 = tail(_T_10, 1) @[DelayPipe.scala 33:24]
      rptr <= _T_11 @[DelayPipe.scala 33:10]
      skip @[DelayPipe.scala 32:30]
    else : @[DelayPipe.scala 34:14]
      node _T_12 = add(UInt<3>("h06"), wptr) @[DelayPipe.scala 35:30]
      node _T_13 = tail(_T_12, 1) @[DelayPipe.scala 35:30]
      node _T_14 = sub(_T_13, io.config) @[DelayPipe.scala 35:37]
      node _T_15 = tail(_T_14, 1) @[DelayPipe.scala 35:37]
      rptr <= _T_15 @[DelayPipe.scala 35:10]
      skip @[DelayPipe.scala 34:14]
    node _T_16 = gt(io.config, UInt<1>("h00")) @[DelayPipe.scala 39:28]
    node _T_17 = and(io.en, _T_16) @[DelayPipe.scala 39:14]
    when _T_17 : @[DelayPipe.scala 39:35]
      regs[wptr] <= io.in @[DelayPipe.scala 40:16]
      skip @[DelayPipe.scala 39:35]
    reg cnt : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 43:20]
    node _T_18 = eq(io.en, UInt<1>("h00")) @[DelayPipe.scala 44:8]
    when _T_18 : @[DelayPipe.scala 44:15]
      cnt <= UInt<1>("h00") @[DelayPipe.scala 45:9]
      skip @[DelayPipe.scala 44:15]
    else : @[DelayPipe.scala 46:30]
      node _T_19 = lt(cnt, io.config) @[DelayPipe.scala 46:18]
      when _T_19 : @[DelayPipe.scala 46:30]
        node _T_20 = add(cnt, UInt<1>("h01")) @[DelayPipe.scala 47:16]
        node _T_21 = tail(_T_20, 1) @[DelayPipe.scala 47:16]
        cnt <= _T_21 @[DelayPipe.scala 47:9]
        skip @[DelayPipe.scala 46:30]
    node _T_22 = eq(UInt<1>("h00"), io.config) @[DelayPipe.scala 50:22]
    node _T_23 = and(io.en, _T_22) @[DelayPipe.scala 50:14]
    when _T_23 : @[DelayPipe.scala 50:37]
      io.out <= io.in @[DelayPipe.scala 51:12]
      skip @[DelayPipe.scala 50:37]
    else : @[DelayPipe.scala 52:43]
      node _T_24 = eq(cnt, io.config) @[DelayPipe.scala 52:28]
      node _T_25 = and(io.en, _T_24) @[DelayPipe.scala 52:20]
      when _T_25 : @[DelayPipe.scala 52:43]
        io.out <= regs[rptr] @[DelayPipe.scala 53:12]
        skip @[DelayPipe.scala 52:43]
      else : @[DelayPipe.scala 54:14]
        io.out <= UInt<1>("h00") @[DelayPipe.scala 55:12]
        skip @[DelayPipe.scala 54:14]
    
  module Muxn_72 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[6], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    node _T_10 = eq(UInt<3>("h05"), io.config) @[Mux.scala 80:60]
    node _T_11 = mux(_T_10, io.in[5], _T_9) @[Mux.scala 80:57]
    io.out <= _T_11 @[Multiplexer.scala 20:10]
    
  module Muxn_73 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[6], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    node _T_10 = eq(UInt<3>("h05"), io.config) @[Mux.scala 80:60]
    node _T_11 = mux(_T_10, io.in[5], _T_9) @[Mux.scala 80:57]
    io.out <= _T_11 @[Multiplexer.scala 20:10]
    
  module ConfigMem_44 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<1>, flip cfg_data : UInt<32>, out : UInt<48>[1]}
    
    wire _T : UInt<48>[1] @[ConfigMem.scala 27:29]
    _T[0] <= UInt<48>("h00") @[ConfigMem.scala 27:29]
    reg regs : UInt<48>[1], clock with : (reset => (reset, _T)) @[ConfigMem.scala 27:21]
    node _T_1 = eq(io.cfg_addr, UInt<1>("h00")) @[ConfigMem.scala 39:38]
    node _T_2 = and(io.cfg_en, _T_1) @[ConfigMem.scala 39:22]
    when _T_2 : @[ConfigMem.scala 39:47]
      node _T_3 = bits(regs[0], 47, 32) @[ConfigMem.scala 41:33]
      node _T_4 = cat(_T_3, io.cfg_data) @[Cat.scala 29:58]
      regs[0] <= _T_4 @[ConfigMem.scala 41:19]
      skip @[ConfigMem.scala 39:47]
    node _T_5 = eq(io.cfg_addr, UInt<1>("h01")) @[ConfigMem.scala 39:38]
    node _T_6 = and(io.cfg_en, _T_5) @[ConfigMem.scala 39:22]
    when _T_6 : @[ConfigMem.scala 39:47]
      node _T_7 = bits(regs[0], 31, 0) @[ConfigMem.scala 43:46]
      node _T_8 = cat(io.cfg_data, _T_7) @[Cat.scala 29:58]
      regs[0] <= _T_8 @[ConfigMem.scala 43:19]
      skip @[ConfigMem.scala 39:47]
    io.out[0] <= regs[0] @[ConfigMem.scala 52:45]
    
  module GPE_28 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<12>, flip cfg_data : UInt<32>, flip en : UInt<1>, flip in : UInt<32>[8], out : UInt<32>[1]}
    
    inst alu of ALU_28 @[PE.scala 50:19]
    alu.clock <= clock
    alu.reset <= reset
    inst rf of RF_28 @[PE.scala 51:18]
    rf.clock <= clock
    rf.reset <= reset
    inst DelayPipe of DelayPipe_56 @[PE.scala 52:54]
    DelayPipe.clock <= clock
    DelayPipe.reset <= reset
    inst DelayPipe_1 of DelayPipe_57 @[PE.scala 52:54]
    DelayPipe_1.clock <= clock
    DelayPipe_1.reset <= reset
    wire const : UInt<32> @[PE.scala 54:19]
    inst Muxn of Muxn_72 @[PE.scala 55:49]
    Muxn.clock <= clock
    Muxn.reset <= reset
    inst Muxn_1 of Muxn_73 @[PE.scala 55:49]
    Muxn_1.clock <= clock
    Muxn_1.reset <= reset
    Muxn.io.in[0] <= io.in[0] @[PE.scala 62:12]
    Muxn.io.in[1] <= io.in[1] @[PE.scala 62:12]
    Muxn.io.in[2] <= io.in[2] @[PE.scala 62:12]
    Muxn.io.in[3] <= io.in[3] @[PE.scala 62:12]
    Muxn.io.in[4] <= const @[PE.scala 64:12]
    Muxn.io.in[5] <= rf.io.out[1] @[PE.scala 66:12]
    DelayPipe.io.en <= io.en @[PE.scala 69:23]
    DelayPipe.io.in <= Muxn.io.out @[PE.scala 70:23]
    alu.io.in[0] <= DelayPipe.io.out @[PE.scala 71:18]
    Muxn_1.io.in[0] <= io.in[4] @[PE.scala 62:12]
    Muxn_1.io.in[1] <= io.in[5] @[PE.scala 62:12]
    Muxn_1.io.in[2] <= io.in[6] @[PE.scala 62:12]
    Muxn_1.io.in[3] <= io.in[7] @[PE.scala 62:12]
    Muxn_1.io.in[4] <= const @[PE.scala 64:12]
    Muxn_1.io.in[5] <= rf.io.out[1] @[PE.scala 66:12]
    DelayPipe_1.io.en <= io.en @[PE.scala 69:23]
    DelayPipe_1.io.in <= Muxn_1.io.out @[PE.scala 70:23]
    alu.io.in[1] <= DelayPipe_1.io.out @[PE.scala 71:18]
    rf.io.en <= io.en @[PE.scala 75:12]
    rf.io.in[0] <= alu.io.out @[PE.scala 76:15]
    io.out[0] <= rf.io.out[0] @[PE.scala 77:13]
    inst cfg of ConfigMem_44 @[PE.scala 89:19]
    cfg.clock <= clock
    cfg.reset <= reset
    node _T = bits(io.cfg_addr, 11, 2) @[PE.scala 90:63]
    node _T_1 = eq(UInt<7>("h056"), _T) @[PE.scala 90:48]
    node _T_2 = and(io.cfg_en, _T_1) @[PE.scala 90:30]
    cfg.io.cfg_en <= _T_2 @[PE.scala 90:17]
    node _T_3 = bits(io.cfg_addr, 1, 0) @[PE.scala 91:33]
    cfg.io.cfg_addr <= _T_3 @[PE.scala 91:19]
    cfg.io.cfg_data <= io.cfg_data @[PE.scala 92:19]
    wire cfgOut : UInt<48> @[PE.scala 96:20]
    cfgOut <= cfg.io.out[0] @[PE.scala 97:10]
    node _T_4 = bits(cfgOut, 31, 0) @[PE.scala 98:18]
    const <= _T_4 @[PE.scala 98:9]
    node _T_5 = bits(cfgOut, 35, 32) @[PE.scala 100:28]
    alu.io.config <= _T_5 @[PE.scala 100:19]
    rf.io.config is invalid @[PE.scala 107:18]
    node _T_6 = bits(cfgOut, 38, 36) @[PE.scala 113:38]
    DelayPipe.io.config <= _T_6 @[PE.scala 113:29]
    node _T_7 = bits(cfgOut, 41, 39) @[PE.scala 113:38]
    DelayPipe_1.io.config <= _T_7 @[PE.scala 113:29]
    node _T_8 = bits(cfgOut, 44, 42) @[PE.scala 121:32]
    Muxn.io.config <= _T_8 @[PE.scala 121:23]
    node _T_9 = bits(cfgOut, 47, 45) @[PE.scala 121:32]
    Muxn_1.io.config <= _T_9 @[PE.scala 121:23]
    
  module ALU_29 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<4>, flip in : UInt<32>[2], out : UInt<32>}
    
    node _T = bits(io.in[0], 31, 0) @[Operations.scala 122:31]
    node _T_1 = bits(io.in[0], 31, 0) @[Operations.scala 124:31]
    node _T_2 = bits(io.in[1], 31, 0) @[Operations.scala 124:49]
    node _T_3 = add(_T_1, _T_2) @[Operations.scala 124:41]
    node _T_4 = tail(_T_3, 1) @[Operations.scala 124:41]
    node _T_5 = bits(io.in[0], 31, 0) @[Operations.scala 126:31]
    node _T_6 = bits(io.in[1], 31, 0) @[Operations.scala 126:49]
    node _T_7 = sub(_T_5, _T_6) @[Operations.scala 126:41]
    node _T_8 = tail(_T_7, 1) @[Operations.scala 126:41]
    node _T_9 = bits(io.in[0], 31, 0) @[Operations.scala 128:31]
    node _T_10 = bits(io.in[1], 31, 0) @[Operations.scala 128:49]
    node _T_11 = mul(_T_9, _T_10) @[Operations.scala 128:41]
    node _T_12 = bits(io.in[0], 31, 0) @[Operations.scala 138:31]
    node _T_13 = bits(io.in[1], 31, 0) @[Operations.scala 138:49]
    node _T_14 = and(_T_12, _T_13) @[Operations.scala 138:41]
    node _T_15 = bits(io.in[0], 31, 0) @[Operations.scala 140:31]
    node _T_16 = bits(io.in[1], 31, 0) @[Operations.scala 140:49]
    node _T_17 = or(_T_15, _T_16) @[Operations.scala 140:41]
    node _T_18 = bits(io.in[0], 31, 0) @[Operations.scala 142:31]
    node _T_19 = bits(io.in[1], 31, 0) @[Operations.scala 142:49]
    node _T_20 = xor(_T_18, _T_19) @[Operations.scala 142:41]
    node _T_21 = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_22 = mux(_T_21, _T, UInt<1>("h00")) @[Mux.scala 80:57]
    node _T_23 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_24 = mux(_T_23, _T_4, _T_22) @[Mux.scala 80:57]
    node _T_25 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_26 = mux(_T_25, _T_8, _T_24) @[Mux.scala 80:57]
    node _T_27 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_28 = mux(_T_27, _T_11, _T_26) @[Mux.scala 80:57]
    node _T_29 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_30 = mux(_T_29, _T_14, _T_28) @[Mux.scala 80:57]
    node _T_31 = eq(UInt<3>("h05"), io.config) @[Mux.scala 80:60]
    node _T_32 = mux(_T_31, _T_17, _T_30) @[Mux.scala 80:57]
    node _T_33 = eq(UInt<3>("h06"), io.config) @[Mux.scala 80:60]
    node _T_34 = mux(_T_33, _T_20, _T_32) @[Mux.scala 80:57]
    io.out <= _T_34 @[ALU.scala 25:10]
    
  module RF_29 : 
    input clock : Clock
    input reset : Reset
    output io : {flip en : UInt<1>, flip config : UInt<0>, flip in : UInt<32>[1], out : UInt<32>[2]}
    
    wire _T : UInt<32>[1] @[RegFile.scala 24:29]
    _T[0] <= UInt<32>("h00") @[RegFile.scala 24:29]
    reg regs : UInt<32>[1], clock with : (reset => (reset, _T)) @[RegFile.scala 24:21]
    when io.en : @[RegFile.scala 34:16]
      regs[0] <= io.in[0] @[RegFile.scala 35:41]
      skip @[RegFile.scala 34:16]
    io.out[0] <= regs[0] @[RegFile.scala 37:42]
    io.out[1] <= regs[0] @[RegFile.scala 37:42]
    
  module DelayPipe_58 : 
    input clock : Clock
    input reset : Reset
    output io : {flip en : UInt<1>, flip config : UInt<3>, flip in : UInt<32>, out : UInt<32>}
    
    wire _T : UInt<32>[5] @[DelayPipe.scala 22:29]
    _T[0] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[1] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[2] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[3] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[4] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    reg regs : UInt<32>[5], clock with : (reset => (reset, _T)) @[DelayPipe.scala 22:21]
    reg wptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 23:21]
    reg rptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 24:21]
    node _T_1 = lt(wptr, UInt<3>("h04")) @[DelayPipe.scala 26:23]
    node _T_2 = and(io.en, _T_1) @[DelayPipe.scala 26:14]
    when _T_2 : @[DelayPipe.scala 26:37]
      node _T_3 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 27:17]
      node _T_4 = tail(_T_3, 1) @[DelayPipe.scala 27:17]
      wptr <= _T_4 @[DelayPipe.scala 27:10]
      skip @[DelayPipe.scala 26:37]
    else : @[DelayPipe.scala 28:14]
      wptr <= UInt<1>("h00") @[DelayPipe.scala 29:10]
      skip @[DelayPipe.scala 28:14]
    node _T_5 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 32:12]
    node _T_6 = tail(_T_5, 1) @[DelayPipe.scala 32:12]
    node _T_7 = geq(_T_6, io.config) @[DelayPipe.scala 32:17]
    when _T_7 : @[DelayPipe.scala 32:30]
      node _T_8 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 33:18]
      node _T_9 = tail(_T_8, 1) @[DelayPipe.scala 33:18]
      node _T_10 = sub(_T_9, io.config) @[DelayPipe.scala 33:24]
      node _T_11 = tail(_T_10, 1) @[DelayPipe.scala 33:24]
      rptr <= _T_11 @[DelayPipe.scala 33:10]
      skip @[DelayPipe.scala 32:30]
    else : @[DelayPipe.scala 34:14]
      node _T_12 = add(UInt<3>("h06"), wptr) @[DelayPipe.scala 35:30]
      node _T_13 = tail(_T_12, 1) @[DelayPipe.scala 35:30]
      node _T_14 = sub(_T_13, io.config) @[DelayPipe.scala 35:37]
      node _T_15 = tail(_T_14, 1) @[DelayPipe.scala 35:37]
      rptr <= _T_15 @[DelayPipe.scala 35:10]
      skip @[DelayPipe.scala 34:14]
    node _T_16 = gt(io.config, UInt<1>("h00")) @[DelayPipe.scala 39:28]
    node _T_17 = and(io.en, _T_16) @[DelayPipe.scala 39:14]
    when _T_17 : @[DelayPipe.scala 39:35]
      regs[wptr] <= io.in @[DelayPipe.scala 40:16]
      skip @[DelayPipe.scala 39:35]
    reg cnt : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 43:20]
    node _T_18 = eq(io.en, UInt<1>("h00")) @[DelayPipe.scala 44:8]
    when _T_18 : @[DelayPipe.scala 44:15]
      cnt <= UInt<1>("h00") @[DelayPipe.scala 45:9]
      skip @[DelayPipe.scala 44:15]
    else : @[DelayPipe.scala 46:30]
      node _T_19 = lt(cnt, io.config) @[DelayPipe.scala 46:18]
      when _T_19 : @[DelayPipe.scala 46:30]
        node _T_20 = add(cnt, UInt<1>("h01")) @[DelayPipe.scala 47:16]
        node _T_21 = tail(_T_20, 1) @[DelayPipe.scala 47:16]
        cnt <= _T_21 @[DelayPipe.scala 47:9]
        skip @[DelayPipe.scala 46:30]
    node _T_22 = eq(UInt<1>("h00"), io.config) @[DelayPipe.scala 50:22]
    node _T_23 = and(io.en, _T_22) @[DelayPipe.scala 50:14]
    when _T_23 : @[DelayPipe.scala 50:37]
      io.out <= io.in @[DelayPipe.scala 51:12]
      skip @[DelayPipe.scala 50:37]
    else : @[DelayPipe.scala 52:43]
      node _T_24 = eq(cnt, io.config) @[DelayPipe.scala 52:28]
      node _T_25 = and(io.en, _T_24) @[DelayPipe.scala 52:20]
      when _T_25 : @[DelayPipe.scala 52:43]
        io.out <= regs[rptr] @[DelayPipe.scala 53:12]
        skip @[DelayPipe.scala 52:43]
      else : @[DelayPipe.scala 54:14]
        io.out <= UInt<1>("h00") @[DelayPipe.scala 55:12]
        skip @[DelayPipe.scala 54:14]
    
  module DelayPipe_59 : 
    input clock : Clock
    input reset : Reset
    output io : {flip en : UInt<1>, flip config : UInt<3>, flip in : UInt<32>, out : UInt<32>}
    
    wire _T : UInt<32>[5] @[DelayPipe.scala 22:29]
    _T[0] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[1] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[2] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[3] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[4] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    reg regs : UInt<32>[5], clock with : (reset => (reset, _T)) @[DelayPipe.scala 22:21]
    reg wptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 23:21]
    reg rptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 24:21]
    node _T_1 = lt(wptr, UInt<3>("h04")) @[DelayPipe.scala 26:23]
    node _T_2 = and(io.en, _T_1) @[DelayPipe.scala 26:14]
    when _T_2 : @[DelayPipe.scala 26:37]
      node _T_3 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 27:17]
      node _T_4 = tail(_T_3, 1) @[DelayPipe.scala 27:17]
      wptr <= _T_4 @[DelayPipe.scala 27:10]
      skip @[DelayPipe.scala 26:37]
    else : @[DelayPipe.scala 28:14]
      wptr <= UInt<1>("h00") @[DelayPipe.scala 29:10]
      skip @[DelayPipe.scala 28:14]
    node _T_5 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 32:12]
    node _T_6 = tail(_T_5, 1) @[DelayPipe.scala 32:12]
    node _T_7 = geq(_T_6, io.config) @[DelayPipe.scala 32:17]
    when _T_7 : @[DelayPipe.scala 32:30]
      node _T_8 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 33:18]
      node _T_9 = tail(_T_8, 1) @[DelayPipe.scala 33:18]
      node _T_10 = sub(_T_9, io.config) @[DelayPipe.scala 33:24]
      node _T_11 = tail(_T_10, 1) @[DelayPipe.scala 33:24]
      rptr <= _T_11 @[DelayPipe.scala 33:10]
      skip @[DelayPipe.scala 32:30]
    else : @[DelayPipe.scala 34:14]
      node _T_12 = add(UInt<3>("h06"), wptr) @[DelayPipe.scala 35:30]
      node _T_13 = tail(_T_12, 1) @[DelayPipe.scala 35:30]
      node _T_14 = sub(_T_13, io.config) @[DelayPipe.scala 35:37]
      node _T_15 = tail(_T_14, 1) @[DelayPipe.scala 35:37]
      rptr <= _T_15 @[DelayPipe.scala 35:10]
      skip @[DelayPipe.scala 34:14]
    node _T_16 = gt(io.config, UInt<1>("h00")) @[DelayPipe.scala 39:28]
    node _T_17 = and(io.en, _T_16) @[DelayPipe.scala 39:14]
    when _T_17 : @[DelayPipe.scala 39:35]
      regs[wptr] <= io.in @[DelayPipe.scala 40:16]
      skip @[DelayPipe.scala 39:35]
    reg cnt : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 43:20]
    node _T_18 = eq(io.en, UInt<1>("h00")) @[DelayPipe.scala 44:8]
    when _T_18 : @[DelayPipe.scala 44:15]
      cnt <= UInt<1>("h00") @[DelayPipe.scala 45:9]
      skip @[DelayPipe.scala 44:15]
    else : @[DelayPipe.scala 46:30]
      node _T_19 = lt(cnt, io.config) @[DelayPipe.scala 46:18]
      when _T_19 : @[DelayPipe.scala 46:30]
        node _T_20 = add(cnt, UInt<1>("h01")) @[DelayPipe.scala 47:16]
        node _T_21 = tail(_T_20, 1) @[DelayPipe.scala 47:16]
        cnt <= _T_21 @[DelayPipe.scala 47:9]
        skip @[DelayPipe.scala 46:30]
    node _T_22 = eq(UInt<1>("h00"), io.config) @[DelayPipe.scala 50:22]
    node _T_23 = and(io.en, _T_22) @[DelayPipe.scala 50:14]
    when _T_23 : @[DelayPipe.scala 50:37]
      io.out <= io.in @[DelayPipe.scala 51:12]
      skip @[DelayPipe.scala 50:37]
    else : @[DelayPipe.scala 52:43]
      node _T_24 = eq(cnt, io.config) @[DelayPipe.scala 52:28]
      node _T_25 = and(io.en, _T_24) @[DelayPipe.scala 52:20]
      when _T_25 : @[DelayPipe.scala 52:43]
        io.out <= regs[rptr] @[DelayPipe.scala 53:12]
        skip @[DelayPipe.scala 52:43]
      else : @[DelayPipe.scala 54:14]
        io.out <= UInt<1>("h00") @[DelayPipe.scala 55:12]
        skip @[DelayPipe.scala 54:14]
    
  module Muxn_74 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[6], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    node _T_10 = eq(UInt<3>("h05"), io.config) @[Mux.scala 80:60]
    node _T_11 = mux(_T_10, io.in[5], _T_9) @[Mux.scala 80:57]
    io.out <= _T_11 @[Multiplexer.scala 20:10]
    
  module Muxn_75 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[6], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    node _T_10 = eq(UInt<3>("h05"), io.config) @[Mux.scala 80:60]
    node _T_11 = mux(_T_10, io.in[5], _T_9) @[Mux.scala 80:57]
    io.out <= _T_11 @[Multiplexer.scala 20:10]
    
  module ConfigMem_45 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<1>, flip cfg_data : UInt<32>, out : UInt<48>[1]}
    
    wire _T : UInt<48>[1] @[ConfigMem.scala 27:29]
    _T[0] <= UInt<48>("h00") @[ConfigMem.scala 27:29]
    reg regs : UInt<48>[1], clock with : (reset => (reset, _T)) @[ConfigMem.scala 27:21]
    node _T_1 = eq(io.cfg_addr, UInt<1>("h00")) @[ConfigMem.scala 39:38]
    node _T_2 = and(io.cfg_en, _T_1) @[ConfigMem.scala 39:22]
    when _T_2 : @[ConfigMem.scala 39:47]
      node _T_3 = bits(regs[0], 47, 32) @[ConfigMem.scala 41:33]
      node _T_4 = cat(_T_3, io.cfg_data) @[Cat.scala 29:58]
      regs[0] <= _T_4 @[ConfigMem.scala 41:19]
      skip @[ConfigMem.scala 39:47]
    node _T_5 = eq(io.cfg_addr, UInt<1>("h01")) @[ConfigMem.scala 39:38]
    node _T_6 = and(io.cfg_en, _T_5) @[ConfigMem.scala 39:22]
    when _T_6 : @[ConfigMem.scala 39:47]
      node _T_7 = bits(regs[0], 31, 0) @[ConfigMem.scala 43:46]
      node _T_8 = cat(io.cfg_data, _T_7) @[Cat.scala 29:58]
      regs[0] <= _T_8 @[ConfigMem.scala 43:19]
      skip @[ConfigMem.scala 39:47]
    io.out[0] <= regs[0] @[ConfigMem.scala 52:45]
    
  module GPE_29 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<12>, flip cfg_data : UInt<32>, flip en : UInt<1>, flip in : UInt<32>[8], out : UInt<32>[1]}
    
    inst alu of ALU_29 @[PE.scala 50:19]
    alu.clock <= clock
    alu.reset <= reset
    inst rf of RF_29 @[PE.scala 51:18]
    rf.clock <= clock
    rf.reset <= reset
    inst DelayPipe of DelayPipe_58 @[PE.scala 52:54]
    DelayPipe.clock <= clock
    DelayPipe.reset <= reset
    inst DelayPipe_1 of DelayPipe_59 @[PE.scala 52:54]
    DelayPipe_1.clock <= clock
    DelayPipe_1.reset <= reset
    wire const : UInt<32> @[PE.scala 54:19]
    inst Muxn of Muxn_74 @[PE.scala 55:49]
    Muxn.clock <= clock
    Muxn.reset <= reset
    inst Muxn_1 of Muxn_75 @[PE.scala 55:49]
    Muxn_1.clock <= clock
    Muxn_1.reset <= reset
    Muxn.io.in[0] <= io.in[0] @[PE.scala 62:12]
    Muxn.io.in[1] <= io.in[1] @[PE.scala 62:12]
    Muxn.io.in[2] <= io.in[2] @[PE.scala 62:12]
    Muxn.io.in[3] <= io.in[3] @[PE.scala 62:12]
    Muxn.io.in[4] <= const @[PE.scala 64:12]
    Muxn.io.in[5] <= rf.io.out[1] @[PE.scala 66:12]
    DelayPipe.io.en <= io.en @[PE.scala 69:23]
    DelayPipe.io.in <= Muxn.io.out @[PE.scala 70:23]
    alu.io.in[0] <= DelayPipe.io.out @[PE.scala 71:18]
    Muxn_1.io.in[0] <= io.in[4] @[PE.scala 62:12]
    Muxn_1.io.in[1] <= io.in[5] @[PE.scala 62:12]
    Muxn_1.io.in[2] <= io.in[6] @[PE.scala 62:12]
    Muxn_1.io.in[3] <= io.in[7] @[PE.scala 62:12]
    Muxn_1.io.in[4] <= const @[PE.scala 64:12]
    Muxn_1.io.in[5] <= rf.io.out[1] @[PE.scala 66:12]
    DelayPipe_1.io.en <= io.en @[PE.scala 69:23]
    DelayPipe_1.io.in <= Muxn_1.io.out @[PE.scala 70:23]
    alu.io.in[1] <= DelayPipe_1.io.out @[PE.scala 71:18]
    rf.io.en <= io.en @[PE.scala 75:12]
    rf.io.in[0] <= alu.io.out @[PE.scala 76:15]
    io.out[0] <= rf.io.out[0] @[PE.scala 77:13]
    inst cfg of ConfigMem_45 @[PE.scala 89:19]
    cfg.clock <= clock
    cfg.reset <= reset
    node _T = bits(io.cfg_addr, 11, 2) @[PE.scala 90:63]
    node _T_1 = eq(UInt<7>("h057"), _T) @[PE.scala 90:48]
    node _T_2 = and(io.cfg_en, _T_1) @[PE.scala 90:30]
    cfg.io.cfg_en <= _T_2 @[PE.scala 90:17]
    node _T_3 = bits(io.cfg_addr, 1, 0) @[PE.scala 91:33]
    cfg.io.cfg_addr <= _T_3 @[PE.scala 91:19]
    cfg.io.cfg_data <= io.cfg_data @[PE.scala 92:19]
    wire cfgOut : UInt<48> @[PE.scala 96:20]
    cfgOut <= cfg.io.out[0] @[PE.scala 97:10]
    node _T_4 = bits(cfgOut, 31, 0) @[PE.scala 98:18]
    const <= _T_4 @[PE.scala 98:9]
    node _T_5 = bits(cfgOut, 35, 32) @[PE.scala 100:28]
    alu.io.config <= _T_5 @[PE.scala 100:19]
    rf.io.config is invalid @[PE.scala 107:18]
    node _T_6 = bits(cfgOut, 38, 36) @[PE.scala 113:38]
    DelayPipe.io.config <= _T_6 @[PE.scala 113:29]
    node _T_7 = bits(cfgOut, 41, 39) @[PE.scala 113:38]
    DelayPipe_1.io.config <= _T_7 @[PE.scala 113:29]
    node _T_8 = bits(cfgOut, 44, 42) @[PE.scala 121:32]
    Muxn.io.config <= _T_8 @[PE.scala 121:23]
    node _T_9 = bits(cfgOut, 47, 45) @[PE.scala 121:32]
    Muxn_1.io.config <= _T_9 @[PE.scala 121:23]
    
  module ALU_30 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<4>, flip in : UInt<32>[2], out : UInt<32>}
    
    node _T = bits(io.in[0], 31, 0) @[Operations.scala 122:31]
    node _T_1 = bits(io.in[0], 31, 0) @[Operations.scala 124:31]
    node _T_2 = bits(io.in[1], 31, 0) @[Operations.scala 124:49]
    node _T_3 = add(_T_1, _T_2) @[Operations.scala 124:41]
    node _T_4 = tail(_T_3, 1) @[Operations.scala 124:41]
    node _T_5 = bits(io.in[0], 31, 0) @[Operations.scala 126:31]
    node _T_6 = bits(io.in[1], 31, 0) @[Operations.scala 126:49]
    node _T_7 = sub(_T_5, _T_6) @[Operations.scala 126:41]
    node _T_8 = tail(_T_7, 1) @[Operations.scala 126:41]
    node _T_9 = bits(io.in[0], 31, 0) @[Operations.scala 128:31]
    node _T_10 = bits(io.in[1], 31, 0) @[Operations.scala 128:49]
    node _T_11 = mul(_T_9, _T_10) @[Operations.scala 128:41]
    node _T_12 = bits(io.in[0], 31, 0) @[Operations.scala 138:31]
    node _T_13 = bits(io.in[1], 31, 0) @[Operations.scala 138:49]
    node _T_14 = and(_T_12, _T_13) @[Operations.scala 138:41]
    node _T_15 = bits(io.in[0], 31, 0) @[Operations.scala 140:31]
    node _T_16 = bits(io.in[1], 31, 0) @[Operations.scala 140:49]
    node _T_17 = or(_T_15, _T_16) @[Operations.scala 140:41]
    node _T_18 = bits(io.in[0], 31, 0) @[Operations.scala 142:31]
    node _T_19 = bits(io.in[1], 31, 0) @[Operations.scala 142:49]
    node _T_20 = xor(_T_18, _T_19) @[Operations.scala 142:41]
    node _T_21 = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_22 = mux(_T_21, _T, UInt<1>("h00")) @[Mux.scala 80:57]
    node _T_23 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_24 = mux(_T_23, _T_4, _T_22) @[Mux.scala 80:57]
    node _T_25 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_26 = mux(_T_25, _T_8, _T_24) @[Mux.scala 80:57]
    node _T_27 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_28 = mux(_T_27, _T_11, _T_26) @[Mux.scala 80:57]
    node _T_29 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_30 = mux(_T_29, _T_14, _T_28) @[Mux.scala 80:57]
    node _T_31 = eq(UInt<3>("h05"), io.config) @[Mux.scala 80:60]
    node _T_32 = mux(_T_31, _T_17, _T_30) @[Mux.scala 80:57]
    node _T_33 = eq(UInt<3>("h06"), io.config) @[Mux.scala 80:60]
    node _T_34 = mux(_T_33, _T_20, _T_32) @[Mux.scala 80:57]
    io.out <= _T_34 @[ALU.scala 25:10]
    
  module RF_30 : 
    input clock : Clock
    input reset : Reset
    output io : {flip en : UInt<1>, flip config : UInt<0>, flip in : UInt<32>[1], out : UInt<32>[2]}
    
    wire _T : UInt<32>[1] @[RegFile.scala 24:29]
    _T[0] <= UInt<32>("h00") @[RegFile.scala 24:29]
    reg regs : UInt<32>[1], clock with : (reset => (reset, _T)) @[RegFile.scala 24:21]
    when io.en : @[RegFile.scala 34:16]
      regs[0] <= io.in[0] @[RegFile.scala 35:41]
      skip @[RegFile.scala 34:16]
    io.out[0] <= regs[0] @[RegFile.scala 37:42]
    io.out[1] <= regs[0] @[RegFile.scala 37:42]
    
  module DelayPipe_60 : 
    input clock : Clock
    input reset : Reset
    output io : {flip en : UInt<1>, flip config : UInt<3>, flip in : UInt<32>, out : UInt<32>}
    
    wire _T : UInt<32>[5] @[DelayPipe.scala 22:29]
    _T[0] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[1] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[2] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[3] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[4] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    reg regs : UInt<32>[5], clock with : (reset => (reset, _T)) @[DelayPipe.scala 22:21]
    reg wptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 23:21]
    reg rptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 24:21]
    node _T_1 = lt(wptr, UInt<3>("h04")) @[DelayPipe.scala 26:23]
    node _T_2 = and(io.en, _T_1) @[DelayPipe.scala 26:14]
    when _T_2 : @[DelayPipe.scala 26:37]
      node _T_3 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 27:17]
      node _T_4 = tail(_T_3, 1) @[DelayPipe.scala 27:17]
      wptr <= _T_4 @[DelayPipe.scala 27:10]
      skip @[DelayPipe.scala 26:37]
    else : @[DelayPipe.scala 28:14]
      wptr <= UInt<1>("h00") @[DelayPipe.scala 29:10]
      skip @[DelayPipe.scala 28:14]
    node _T_5 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 32:12]
    node _T_6 = tail(_T_5, 1) @[DelayPipe.scala 32:12]
    node _T_7 = geq(_T_6, io.config) @[DelayPipe.scala 32:17]
    when _T_7 : @[DelayPipe.scala 32:30]
      node _T_8 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 33:18]
      node _T_9 = tail(_T_8, 1) @[DelayPipe.scala 33:18]
      node _T_10 = sub(_T_9, io.config) @[DelayPipe.scala 33:24]
      node _T_11 = tail(_T_10, 1) @[DelayPipe.scala 33:24]
      rptr <= _T_11 @[DelayPipe.scala 33:10]
      skip @[DelayPipe.scala 32:30]
    else : @[DelayPipe.scala 34:14]
      node _T_12 = add(UInt<3>("h06"), wptr) @[DelayPipe.scala 35:30]
      node _T_13 = tail(_T_12, 1) @[DelayPipe.scala 35:30]
      node _T_14 = sub(_T_13, io.config) @[DelayPipe.scala 35:37]
      node _T_15 = tail(_T_14, 1) @[DelayPipe.scala 35:37]
      rptr <= _T_15 @[DelayPipe.scala 35:10]
      skip @[DelayPipe.scala 34:14]
    node _T_16 = gt(io.config, UInt<1>("h00")) @[DelayPipe.scala 39:28]
    node _T_17 = and(io.en, _T_16) @[DelayPipe.scala 39:14]
    when _T_17 : @[DelayPipe.scala 39:35]
      regs[wptr] <= io.in @[DelayPipe.scala 40:16]
      skip @[DelayPipe.scala 39:35]
    reg cnt : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 43:20]
    node _T_18 = eq(io.en, UInt<1>("h00")) @[DelayPipe.scala 44:8]
    when _T_18 : @[DelayPipe.scala 44:15]
      cnt <= UInt<1>("h00") @[DelayPipe.scala 45:9]
      skip @[DelayPipe.scala 44:15]
    else : @[DelayPipe.scala 46:30]
      node _T_19 = lt(cnt, io.config) @[DelayPipe.scala 46:18]
      when _T_19 : @[DelayPipe.scala 46:30]
        node _T_20 = add(cnt, UInt<1>("h01")) @[DelayPipe.scala 47:16]
        node _T_21 = tail(_T_20, 1) @[DelayPipe.scala 47:16]
        cnt <= _T_21 @[DelayPipe.scala 47:9]
        skip @[DelayPipe.scala 46:30]
    node _T_22 = eq(UInt<1>("h00"), io.config) @[DelayPipe.scala 50:22]
    node _T_23 = and(io.en, _T_22) @[DelayPipe.scala 50:14]
    when _T_23 : @[DelayPipe.scala 50:37]
      io.out <= io.in @[DelayPipe.scala 51:12]
      skip @[DelayPipe.scala 50:37]
    else : @[DelayPipe.scala 52:43]
      node _T_24 = eq(cnt, io.config) @[DelayPipe.scala 52:28]
      node _T_25 = and(io.en, _T_24) @[DelayPipe.scala 52:20]
      when _T_25 : @[DelayPipe.scala 52:43]
        io.out <= regs[rptr] @[DelayPipe.scala 53:12]
        skip @[DelayPipe.scala 52:43]
      else : @[DelayPipe.scala 54:14]
        io.out <= UInt<1>("h00") @[DelayPipe.scala 55:12]
        skip @[DelayPipe.scala 54:14]
    
  module DelayPipe_61 : 
    input clock : Clock
    input reset : Reset
    output io : {flip en : UInt<1>, flip config : UInt<3>, flip in : UInt<32>, out : UInt<32>}
    
    wire _T : UInt<32>[5] @[DelayPipe.scala 22:29]
    _T[0] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[1] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[2] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[3] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[4] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    reg regs : UInt<32>[5], clock with : (reset => (reset, _T)) @[DelayPipe.scala 22:21]
    reg wptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 23:21]
    reg rptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 24:21]
    node _T_1 = lt(wptr, UInt<3>("h04")) @[DelayPipe.scala 26:23]
    node _T_2 = and(io.en, _T_1) @[DelayPipe.scala 26:14]
    when _T_2 : @[DelayPipe.scala 26:37]
      node _T_3 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 27:17]
      node _T_4 = tail(_T_3, 1) @[DelayPipe.scala 27:17]
      wptr <= _T_4 @[DelayPipe.scala 27:10]
      skip @[DelayPipe.scala 26:37]
    else : @[DelayPipe.scala 28:14]
      wptr <= UInt<1>("h00") @[DelayPipe.scala 29:10]
      skip @[DelayPipe.scala 28:14]
    node _T_5 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 32:12]
    node _T_6 = tail(_T_5, 1) @[DelayPipe.scala 32:12]
    node _T_7 = geq(_T_6, io.config) @[DelayPipe.scala 32:17]
    when _T_7 : @[DelayPipe.scala 32:30]
      node _T_8 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 33:18]
      node _T_9 = tail(_T_8, 1) @[DelayPipe.scala 33:18]
      node _T_10 = sub(_T_9, io.config) @[DelayPipe.scala 33:24]
      node _T_11 = tail(_T_10, 1) @[DelayPipe.scala 33:24]
      rptr <= _T_11 @[DelayPipe.scala 33:10]
      skip @[DelayPipe.scala 32:30]
    else : @[DelayPipe.scala 34:14]
      node _T_12 = add(UInt<3>("h06"), wptr) @[DelayPipe.scala 35:30]
      node _T_13 = tail(_T_12, 1) @[DelayPipe.scala 35:30]
      node _T_14 = sub(_T_13, io.config) @[DelayPipe.scala 35:37]
      node _T_15 = tail(_T_14, 1) @[DelayPipe.scala 35:37]
      rptr <= _T_15 @[DelayPipe.scala 35:10]
      skip @[DelayPipe.scala 34:14]
    node _T_16 = gt(io.config, UInt<1>("h00")) @[DelayPipe.scala 39:28]
    node _T_17 = and(io.en, _T_16) @[DelayPipe.scala 39:14]
    when _T_17 : @[DelayPipe.scala 39:35]
      regs[wptr] <= io.in @[DelayPipe.scala 40:16]
      skip @[DelayPipe.scala 39:35]
    reg cnt : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 43:20]
    node _T_18 = eq(io.en, UInt<1>("h00")) @[DelayPipe.scala 44:8]
    when _T_18 : @[DelayPipe.scala 44:15]
      cnt <= UInt<1>("h00") @[DelayPipe.scala 45:9]
      skip @[DelayPipe.scala 44:15]
    else : @[DelayPipe.scala 46:30]
      node _T_19 = lt(cnt, io.config) @[DelayPipe.scala 46:18]
      when _T_19 : @[DelayPipe.scala 46:30]
        node _T_20 = add(cnt, UInt<1>("h01")) @[DelayPipe.scala 47:16]
        node _T_21 = tail(_T_20, 1) @[DelayPipe.scala 47:16]
        cnt <= _T_21 @[DelayPipe.scala 47:9]
        skip @[DelayPipe.scala 46:30]
    node _T_22 = eq(UInt<1>("h00"), io.config) @[DelayPipe.scala 50:22]
    node _T_23 = and(io.en, _T_22) @[DelayPipe.scala 50:14]
    when _T_23 : @[DelayPipe.scala 50:37]
      io.out <= io.in @[DelayPipe.scala 51:12]
      skip @[DelayPipe.scala 50:37]
    else : @[DelayPipe.scala 52:43]
      node _T_24 = eq(cnt, io.config) @[DelayPipe.scala 52:28]
      node _T_25 = and(io.en, _T_24) @[DelayPipe.scala 52:20]
      when _T_25 : @[DelayPipe.scala 52:43]
        io.out <= regs[rptr] @[DelayPipe.scala 53:12]
        skip @[DelayPipe.scala 52:43]
      else : @[DelayPipe.scala 54:14]
        io.out <= UInt<1>("h00") @[DelayPipe.scala 55:12]
        skip @[DelayPipe.scala 54:14]
    
  module Muxn_76 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[6], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    node _T_10 = eq(UInt<3>("h05"), io.config) @[Mux.scala 80:60]
    node _T_11 = mux(_T_10, io.in[5], _T_9) @[Mux.scala 80:57]
    io.out <= _T_11 @[Multiplexer.scala 20:10]
    
  module Muxn_77 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[6], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    node _T_10 = eq(UInt<3>("h05"), io.config) @[Mux.scala 80:60]
    node _T_11 = mux(_T_10, io.in[5], _T_9) @[Mux.scala 80:57]
    io.out <= _T_11 @[Multiplexer.scala 20:10]
    
  module ConfigMem_46 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<1>, flip cfg_data : UInt<32>, out : UInt<48>[1]}
    
    wire _T : UInt<48>[1] @[ConfigMem.scala 27:29]
    _T[0] <= UInt<48>("h00") @[ConfigMem.scala 27:29]
    reg regs : UInt<48>[1], clock with : (reset => (reset, _T)) @[ConfigMem.scala 27:21]
    node _T_1 = eq(io.cfg_addr, UInt<1>("h00")) @[ConfigMem.scala 39:38]
    node _T_2 = and(io.cfg_en, _T_1) @[ConfigMem.scala 39:22]
    when _T_2 : @[ConfigMem.scala 39:47]
      node _T_3 = bits(regs[0], 47, 32) @[ConfigMem.scala 41:33]
      node _T_4 = cat(_T_3, io.cfg_data) @[Cat.scala 29:58]
      regs[0] <= _T_4 @[ConfigMem.scala 41:19]
      skip @[ConfigMem.scala 39:47]
    node _T_5 = eq(io.cfg_addr, UInt<1>("h01")) @[ConfigMem.scala 39:38]
    node _T_6 = and(io.cfg_en, _T_5) @[ConfigMem.scala 39:22]
    when _T_6 : @[ConfigMem.scala 39:47]
      node _T_7 = bits(regs[0], 31, 0) @[ConfigMem.scala 43:46]
      node _T_8 = cat(io.cfg_data, _T_7) @[Cat.scala 29:58]
      regs[0] <= _T_8 @[ConfigMem.scala 43:19]
      skip @[ConfigMem.scala 39:47]
    io.out[0] <= regs[0] @[ConfigMem.scala 52:45]
    
  module GPE_30 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<12>, flip cfg_data : UInt<32>, flip en : UInt<1>, flip in : UInt<32>[8], out : UInt<32>[1]}
    
    inst alu of ALU_30 @[PE.scala 50:19]
    alu.clock <= clock
    alu.reset <= reset
    inst rf of RF_30 @[PE.scala 51:18]
    rf.clock <= clock
    rf.reset <= reset
    inst DelayPipe of DelayPipe_60 @[PE.scala 52:54]
    DelayPipe.clock <= clock
    DelayPipe.reset <= reset
    inst DelayPipe_1 of DelayPipe_61 @[PE.scala 52:54]
    DelayPipe_1.clock <= clock
    DelayPipe_1.reset <= reset
    wire const : UInt<32> @[PE.scala 54:19]
    inst Muxn of Muxn_76 @[PE.scala 55:49]
    Muxn.clock <= clock
    Muxn.reset <= reset
    inst Muxn_1 of Muxn_77 @[PE.scala 55:49]
    Muxn_1.clock <= clock
    Muxn_1.reset <= reset
    Muxn.io.in[0] <= io.in[0] @[PE.scala 62:12]
    Muxn.io.in[1] <= io.in[1] @[PE.scala 62:12]
    Muxn.io.in[2] <= io.in[2] @[PE.scala 62:12]
    Muxn.io.in[3] <= io.in[3] @[PE.scala 62:12]
    Muxn.io.in[4] <= const @[PE.scala 64:12]
    Muxn.io.in[5] <= rf.io.out[1] @[PE.scala 66:12]
    DelayPipe.io.en <= io.en @[PE.scala 69:23]
    DelayPipe.io.in <= Muxn.io.out @[PE.scala 70:23]
    alu.io.in[0] <= DelayPipe.io.out @[PE.scala 71:18]
    Muxn_1.io.in[0] <= io.in[4] @[PE.scala 62:12]
    Muxn_1.io.in[1] <= io.in[5] @[PE.scala 62:12]
    Muxn_1.io.in[2] <= io.in[6] @[PE.scala 62:12]
    Muxn_1.io.in[3] <= io.in[7] @[PE.scala 62:12]
    Muxn_1.io.in[4] <= const @[PE.scala 64:12]
    Muxn_1.io.in[5] <= rf.io.out[1] @[PE.scala 66:12]
    DelayPipe_1.io.en <= io.en @[PE.scala 69:23]
    DelayPipe_1.io.in <= Muxn_1.io.out @[PE.scala 70:23]
    alu.io.in[1] <= DelayPipe_1.io.out @[PE.scala 71:18]
    rf.io.en <= io.en @[PE.scala 75:12]
    rf.io.in[0] <= alu.io.out @[PE.scala 76:15]
    io.out[0] <= rf.io.out[0] @[PE.scala 77:13]
    inst cfg of ConfigMem_46 @[PE.scala 89:19]
    cfg.clock <= clock
    cfg.reset <= reset
    node _T = bits(io.cfg_addr, 11, 2) @[PE.scala 90:63]
    node _T_1 = eq(UInt<7>("h058"), _T) @[PE.scala 90:48]
    node _T_2 = and(io.cfg_en, _T_1) @[PE.scala 90:30]
    cfg.io.cfg_en <= _T_2 @[PE.scala 90:17]
    node _T_3 = bits(io.cfg_addr, 1, 0) @[PE.scala 91:33]
    cfg.io.cfg_addr <= _T_3 @[PE.scala 91:19]
    cfg.io.cfg_data <= io.cfg_data @[PE.scala 92:19]
    wire cfgOut : UInt<48> @[PE.scala 96:20]
    cfgOut <= cfg.io.out[0] @[PE.scala 97:10]
    node _T_4 = bits(cfgOut, 31, 0) @[PE.scala 98:18]
    const <= _T_4 @[PE.scala 98:9]
    node _T_5 = bits(cfgOut, 35, 32) @[PE.scala 100:28]
    alu.io.config <= _T_5 @[PE.scala 100:19]
    rf.io.config is invalid @[PE.scala 107:18]
    node _T_6 = bits(cfgOut, 38, 36) @[PE.scala 113:38]
    DelayPipe.io.config <= _T_6 @[PE.scala 113:29]
    node _T_7 = bits(cfgOut, 41, 39) @[PE.scala 113:38]
    DelayPipe_1.io.config <= _T_7 @[PE.scala 113:29]
    node _T_8 = bits(cfgOut, 44, 42) @[PE.scala 121:32]
    Muxn.io.config <= _T_8 @[PE.scala 121:23]
    node _T_9 = bits(cfgOut, 47, 45) @[PE.scala 121:32]
    Muxn_1.io.config <= _T_9 @[PE.scala 121:23]
    
  module ALU_31 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<4>, flip in : UInt<32>[2], out : UInt<32>}
    
    node _T = bits(io.in[0], 31, 0) @[Operations.scala 122:31]
    node _T_1 = bits(io.in[0], 31, 0) @[Operations.scala 124:31]
    node _T_2 = bits(io.in[1], 31, 0) @[Operations.scala 124:49]
    node _T_3 = add(_T_1, _T_2) @[Operations.scala 124:41]
    node _T_4 = tail(_T_3, 1) @[Operations.scala 124:41]
    node _T_5 = bits(io.in[0], 31, 0) @[Operations.scala 126:31]
    node _T_6 = bits(io.in[1], 31, 0) @[Operations.scala 126:49]
    node _T_7 = sub(_T_5, _T_6) @[Operations.scala 126:41]
    node _T_8 = tail(_T_7, 1) @[Operations.scala 126:41]
    node _T_9 = bits(io.in[0], 31, 0) @[Operations.scala 128:31]
    node _T_10 = bits(io.in[1], 31, 0) @[Operations.scala 128:49]
    node _T_11 = mul(_T_9, _T_10) @[Operations.scala 128:41]
    node _T_12 = bits(io.in[0], 31, 0) @[Operations.scala 138:31]
    node _T_13 = bits(io.in[1], 31, 0) @[Operations.scala 138:49]
    node _T_14 = and(_T_12, _T_13) @[Operations.scala 138:41]
    node _T_15 = bits(io.in[0], 31, 0) @[Operations.scala 140:31]
    node _T_16 = bits(io.in[1], 31, 0) @[Operations.scala 140:49]
    node _T_17 = or(_T_15, _T_16) @[Operations.scala 140:41]
    node _T_18 = bits(io.in[0], 31, 0) @[Operations.scala 142:31]
    node _T_19 = bits(io.in[1], 31, 0) @[Operations.scala 142:49]
    node _T_20 = xor(_T_18, _T_19) @[Operations.scala 142:41]
    node _T_21 = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_22 = mux(_T_21, _T, UInt<1>("h00")) @[Mux.scala 80:57]
    node _T_23 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_24 = mux(_T_23, _T_4, _T_22) @[Mux.scala 80:57]
    node _T_25 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_26 = mux(_T_25, _T_8, _T_24) @[Mux.scala 80:57]
    node _T_27 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_28 = mux(_T_27, _T_11, _T_26) @[Mux.scala 80:57]
    node _T_29 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_30 = mux(_T_29, _T_14, _T_28) @[Mux.scala 80:57]
    node _T_31 = eq(UInt<3>("h05"), io.config) @[Mux.scala 80:60]
    node _T_32 = mux(_T_31, _T_17, _T_30) @[Mux.scala 80:57]
    node _T_33 = eq(UInt<3>("h06"), io.config) @[Mux.scala 80:60]
    node _T_34 = mux(_T_33, _T_20, _T_32) @[Mux.scala 80:57]
    io.out <= _T_34 @[ALU.scala 25:10]
    
  module RF_31 : 
    input clock : Clock
    input reset : Reset
    output io : {flip en : UInt<1>, flip config : UInt<0>, flip in : UInt<32>[1], out : UInt<32>[2]}
    
    wire _T : UInt<32>[1] @[RegFile.scala 24:29]
    _T[0] <= UInt<32>("h00") @[RegFile.scala 24:29]
    reg regs : UInt<32>[1], clock with : (reset => (reset, _T)) @[RegFile.scala 24:21]
    when io.en : @[RegFile.scala 34:16]
      regs[0] <= io.in[0] @[RegFile.scala 35:41]
      skip @[RegFile.scala 34:16]
    io.out[0] <= regs[0] @[RegFile.scala 37:42]
    io.out[1] <= regs[0] @[RegFile.scala 37:42]
    
  module DelayPipe_62 : 
    input clock : Clock
    input reset : Reset
    output io : {flip en : UInt<1>, flip config : UInt<3>, flip in : UInt<32>, out : UInt<32>}
    
    wire _T : UInt<32>[5] @[DelayPipe.scala 22:29]
    _T[0] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[1] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[2] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[3] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[4] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    reg regs : UInt<32>[5], clock with : (reset => (reset, _T)) @[DelayPipe.scala 22:21]
    reg wptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 23:21]
    reg rptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 24:21]
    node _T_1 = lt(wptr, UInt<3>("h04")) @[DelayPipe.scala 26:23]
    node _T_2 = and(io.en, _T_1) @[DelayPipe.scala 26:14]
    when _T_2 : @[DelayPipe.scala 26:37]
      node _T_3 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 27:17]
      node _T_4 = tail(_T_3, 1) @[DelayPipe.scala 27:17]
      wptr <= _T_4 @[DelayPipe.scala 27:10]
      skip @[DelayPipe.scala 26:37]
    else : @[DelayPipe.scala 28:14]
      wptr <= UInt<1>("h00") @[DelayPipe.scala 29:10]
      skip @[DelayPipe.scala 28:14]
    node _T_5 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 32:12]
    node _T_6 = tail(_T_5, 1) @[DelayPipe.scala 32:12]
    node _T_7 = geq(_T_6, io.config) @[DelayPipe.scala 32:17]
    when _T_7 : @[DelayPipe.scala 32:30]
      node _T_8 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 33:18]
      node _T_9 = tail(_T_8, 1) @[DelayPipe.scala 33:18]
      node _T_10 = sub(_T_9, io.config) @[DelayPipe.scala 33:24]
      node _T_11 = tail(_T_10, 1) @[DelayPipe.scala 33:24]
      rptr <= _T_11 @[DelayPipe.scala 33:10]
      skip @[DelayPipe.scala 32:30]
    else : @[DelayPipe.scala 34:14]
      node _T_12 = add(UInt<3>("h06"), wptr) @[DelayPipe.scala 35:30]
      node _T_13 = tail(_T_12, 1) @[DelayPipe.scala 35:30]
      node _T_14 = sub(_T_13, io.config) @[DelayPipe.scala 35:37]
      node _T_15 = tail(_T_14, 1) @[DelayPipe.scala 35:37]
      rptr <= _T_15 @[DelayPipe.scala 35:10]
      skip @[DelayPipe.scala 34:14]
    node _T_16 = gt(io.config, UInt<1>("h00")) @[DelayPipe.scala 39:28]
    node _T_17 = and(io.en, _T_16) @[DelayPipe.scala 39:14]
    when _T_17 : @[DelayPipe.scala 39:35]
      regs[wptr] <= io.in @[DelayPipe.scala 40:16]
      skip @[DelayPipe.scala 39:35]
    reg cnt : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 43:20]
    node _T_18 = eq(io.en, UInt<1>("h00")) @[DelayPipe.scala 44:8]
    when _T_18 : @[DelayPipe.scala 44:15]
      cnt <= UInt<1>("h00") @[DelayPipe.scala 45:9]
      skip @[DelayPipe.scala 44:15]
    else : @[DelayPipe.scala 46:30]
      node _T_19 = lt(cnt, io.config) @[DelayPipe.scala 46:18]
      when _T_19 : @[DelayPipe.scala 46:30]
        node _T_20 = add(cnt, UInt<1>("h01")) @[DelayPipe.scala 47:16]
        node _T_21 = tail(_T_20, 1) @[DelayPipe.scala 47:16]
        cnt <= _T_21 @[DelayPipe.scala 47:9]
        skip @[DelayPipe.scala 46:30]
    node _T_22 = eq(UInt<1>("h00"), io.config) @[DelayPipe.scala 50:22]
    node _T_23 = and(io.en, _T_22) @[DelayPipe.scala 50:14]
    when _T_23 : @[DelayPipe.scala 50:37]
      io.out <= io.in @[DelayPipe.scala 51:12]
      skip @[DelayPipe.scala 50:37]
    else : @[DelayPipe.scala 52:43]
      node _T_24 = eq(cnt, io.config) @[DelayPipe.scala 52:28]
      node _T_25 = and(io.en, _T_24) @[DelayPipe.scala 52:20]
      when _T_25 : @[DelayPipe.scala 52:43]
        io.out <= regs[rptr] @[DelayPipe.scala 53:12]
        skip @[DelayPipe.scala 52:43]
      else : @[DelayPipe.scala 54:14]
        io.out <= UInt<1>("h00") @[DelayPipe.scala 55:12]
        skip @[DelayPipe.scala 54:14]
    
  module DelayPipe_63 : 
    input clock : Clock
    input reset : Reset
    output io : {flip en : UInt<1>, flip config : UInt<3>, flip in : UInt<32>, out : UInt<32>}
    
    wire _T : UInt<32>[5] @[DelayPipe.scala 22:29]
    _T[0] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[1] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[2] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[3] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[4] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    reg regs : UInt<32>[5], clock with : (reset => (reset, _T)) @[DelayPipe.scala 22:21]
    reg wptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 23:21]
    reg rptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 24:21]
    node _T_1 = lt(wptr, UInt<3>("h04")) @[DelayPipe.scala 26:23]
    node _T_2 = and(io.en, _T_1) @[DelayPipe.scala 26:14]
    when _T_2 : @[DelayPipe.scala 26:37]
      node _T_3 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 27:17]
      node _T_4 = tail(_T_3, 1) @[DelayPipe.scala 27:17]
      wptr <= _T_4 @[DelayPipe.scala 27:10]
      skip @[DelayPipe.scala 26:37]
    else : @[DelayPipe.scala 28:14]
      wptr <= UInt<1>("h00") @[DelayPipe.scala 29:10]
      skip @[DelayPipe.scala 28:14]
    node _T_5 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 32:12]
    node _T_6 = tail(_T_5, 1) @[DelayPipe.scala 32:12]
    node _T_7 = geq(_T_6, io.config) @[DelayPipe.scala 32:17]
    when _T_7 : @[DelayPipe.scala 32:30]
      node _T_8 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 33:18]
      node _T_9 = tail(_T_8, 1) @[DelayPipe.scala 33:18]
      node _T_10 = sub(_T_9, io.config) @[DelayPipe.scala 33:24]
      node _T_11 = tail(_T_10, 1) @[DelayPipe.scala 33:24]
      rptr <= _T_11 @[DelayPipe.scala 33:10]
      skip @[DelayPipe.scala 32:30]
    else : @[DelayPipe.scala 34:14]
      node _T_12 = add(UInt<3>("h06"), wptr) @[DelayPipe.scala 35:30]
      node _T_13 = tail(_T_12, 1) @[DelayPipe.scala 35:30]
      node _T_14 = sub(_T_13, io.config) @[DelayPipe.scala 35:37]
      node _T_15 = tail(_T_14, 1) @[DelayPipe.scala 35:37]
      rptr <= _T_15 @[DelayPipe.scala 35:10]
      skip @[DelayPipe.scala 34:14]
    node _T_16 = gt(io.config, UInt<1>("h00")) @[DelayPipe.scala 39:28]
    node _T_17 = and(io.en, _T_16) @[DelayPipe.scala 39:14]
    when _T_17 : @[DelayPipe.scala 39:35]
      regs[wptr] <= io.in @[DelayPipe.scala 40:16]
      skip @[DelayPipe.scala 39:35]
    reg cnt : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 43:20]
    node _T_18 = eq(io.en, UInt<1>("h00")) @[DelayPipe.scala 44:8]
    when _T_18 : @[DelayPipe.scala 44:15]
      cnt <= UInt<1>("h00") @[DelayPipe.scala 45:9]
      skip @[DelayPipe.scala 44:15]
    else : @[DelayPipe.scala 46:30]
      node _T_19 = lt(cnt, io.config) @[DelayPipe.scala 46:18]
      when _T_19 : @[DelayPipe.scala 46:30]
        node _T_20 = add(cnt, UInt<1>("h01")) @[DelayPipe.scala 47:16]
        node _T_21 = tail(_T_20, 1) @[DelayPipe.scala 47:16]
        cnt <= _T_21 @[DelayPipe.scala 47:9]
        skip @[DelayPipe.scala 46:30]
    node _T_22 = eq(UInt<1>("h00"), io.config) @[DelayPipe.scala 50:22]
    node _T_23 = and(io.en, _T_22) @[DelayPipe.scala 50:14]
    when _T_23 : @[DelayPipe.scala 50:37]
      io.out <= io.in @[DelayPipe.scala 51:12]
      skip @[DelayPipe.scala 50:37]
    else : @[DelayPipe.scala 52:43]
      node _T_24 = eq(cnt, io.config) @[DelayPipe.scala 52:28]
      node _T_25 = and(io.en, _T_24) @[DelayPipe.scala 52:20]
      when _T_25 : @[DelayPipe.scala 52:43]
        io.out <= regs[rptr] @[DelayPipe.scala 53:12]
        skip @[DelayPipe.scala 52:43]
      else : @[DelayPipe.scala 54:14]
        io.out <= UInt<1>("h00") @[DelayPipe.scala 55:12]
        skip @[DelayPipe.scala 54:14]
    
  module Muxn_78 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[6], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    node _T_10 = eq(UInt<3>("h05"), io.config) @[Mux.scala 80:60]
    node _T_11 = mux(_T_10, io.in[5], _T_9) @[Mux.scala 80:57]
    io.out <= _T_11 @[Multiplexer.scala 20:10]
    
  module Muxn_79 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[6], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    node _T_10 = eq(UInt<3>("h05"), io.config) @[Mux.scala 80:60]
    node _T_11 = mux(_T_10, io.in[5], _T_9) @[Mux.scala 80:57]
    io.out <= _T_11 @[Multiplexer.scala 20:10]
    
  module ConfigMem_47 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<1>, flip cfg_data : UInt<32>, out : UInt<48>[1]}
    
    wire _T : UInt<48>[1] @[ConfigMem.scala 27:29]
    _T[0] <= UInt<48>("h00") @[ConfigMem.scala 27:29]
    reg regs : UInt<48>[1], clock with : (reset => (reset, _T)) @[ConfigMem.scala 27:21]
    node _T_1 = eq(io.cfg_addr, UInt<1>("h00")) @[ConfigMem.scala 39:38]
    node _T_2 = and(io.cfg_en, _T_1) @[ConfigMem.scala 39:22]
    when _T_2 : @[ConfigMem.scala 39:47]
      node _T_3 = bits(regs[0], 47, 32) @[ConfigMem.scala 41:33]
      node _T_4 = cat(_T_3, io.cfg_data) @[Cat.scala 29:58]
      regs[0] <= _T_4 @[ConfigMem.scala 41:19]
      skip @[ConfigMem.scala 39:47]
    node _T_5 = eq(io.cfg_addr, UInt<1>("h01")) @[ConfigMem.scala 39:38]
    node _T_6 = and(io.cfg_en, _T_5) @[ConfigMem.scala 39:22]
    when _T_6 : @[ConfigMem.scala 39:47]
      node _T_7 = bits(regs[0], 31, 0) @[ConfigMem.scala 43:46]
      node _T_8 = cat(io.cfg_data, _T_7) @[Cat.scala 29:58]
      regs[0] <= _T_8 @[ConfigMem.scala 43:19]
      skip @[ConfigMem.scala 39:47]
    io.out[0] <= regs[0] @[ConfigMem.scala 52:45]
    
  module GPE_31 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<12>, flip cfg_data : UInt<32>, flip en : UInt<1>, flip in : UInt<32>[8], out : UInt<32>[1]}
    
    inst alu of ALU_31 @[PE.scala 50:19]
    alu.clock <= clock
    alu.reset <= reset
    inst rf of RF_31 @[PE.scala 51:18]
    rf.clock <= clock
    rf.reset <= reset
    inst DelayPipe of DelayPipe_62 @[PE.scala 52:54]
    DelayPipe.clock <= clock
    DelayPipe.reset <= reset
    inst DelayPipe_1 of DelayPipe_63 @[PE.scala 52:54]
    DelayPipe_1.clock <= clock
    DelayPipe_1.reset <= reset
    wire const : UInt<32> @[PE.scala 54:19]
    inst Muxn of Muxn_78 @[PE.scala 55:49]
    Muxn.clock <= clock
    Muxn.reset <= reset
    inst Muxn_1 of Muxn_79 @[PE.scala 55:49]
    Muxn_1.clock <= clock
    Muxn_1.reset <= reset
    Muxn.io.in[0] <= io.in[0] @[PE.scala 62:12]
    Muxn.io.in[1] <= io.in[1] @[PE.scala 62:12]
    Muxn.io.in[2] <= io.in[2] @[PE.scala 62:12]
    Muxn.io.in[3] <= io.in[3] @[PE.scala 62:12]
    Muxn.io.in[4] <= const @[PE.scala 64:12]
    Muxn.io.in[5] <= rf.io.out[1] @[PE.scala 66:12]
    DelayPipe.io.en <= io.en @[PE.scala 69:23]
    DelayPipe.io.in <= Muxn.io.out @[PE.scala 70:23]
    alu.io.in[0] <= DelayPipe.io.out @[PE.scala 71:18]
    Muxn_1.io.in[0] <= io.in[4] @[PE.scala 62:12]
    Muxn_1.io.in[1] <= io.in[5] @[PE.scala 62:12]
    Muxn_1.io.in[2] <= io.in[6] @[PE.scala 62:12]
    Muxn_1.io.in[3] <= io.in[7] @[PE.scala 62:12]
    Muxn_1.io.in[4] <= const @[PE.scala 64:12]
    Muxn_1.io.in[5] <= rf.io.out[1] @[PE.scala 66:12]
    DelayPipe_1.io.en <= io.en @[PE.scala 69:23]
    DelayPipe_1.io.in <= Muxn_1.io.out @[PE.scala 70:23]
    alu.io.in[1] <= DelayPipe_1.io.out @[PE.scala 71:18]
    rf.io.en <= io.en @[PE.scala 75:12]
    rf.io.in[0] <= alu.io.out @[PE.scala 76:15]
    io.out[0] <= rf.io.out[0] @[PE.scala 77:13]
    inst cfg of ConfigMem_47 @[PE.scala 89:19]
    cfg.clock <= clock
    cfg.reset <= reset
    node _T = bits(io.cfg_addr, 11, 2) @[PE.scala 90:63]
    node _T_1 = eq(UInt<7>("h059"), _T) @[PE.scala 90:48]
    node _T_2 = and(io.cfg_en, _T_1) @[PE.scala 90:30]
    cfg.io.cfg_en <= _T_2 @[PE.scala 90:17]
    node _T_3 = bits(io.cfg_addr, 1, 0) @[PE.scala 91:33]
    cfg.io.cfg_addr <= _T_3 @[PE.scala 91:19]
    cfg.io.cfg_data <= io.cfg_data @[PE.scala 92:19]
    wire cfgOut : UInt<48> @[PE.scala 96:20]
    cfgOut <= cfg.io.out[0] @[PE.scala 97:10]
    node _T_4 = bits(cfgOut, 31, 0) @[PE.scala 98:18]
    const <= _T_4 @[PE.scala 98:9]
    node _T_5 = bits(cfgOut, 35, 32) @[PE.scala 100:28]
    alu.io.config <= _T_5 @[PE.scala 100:19]
    rf.io.config is invalid @[PE.scala 107:18]
    node _T_6 = bits(cfgOut, 38, 36) @[PE.scala 113:38]
    DelayPipe.io.config <= _T_6 @[PE.scala 113:29]
    node _T_7 = bits(cfgOut, 41, 39) @[PE.scala 113:38]
    DelayPipe_1.io.config <= _T_7 @[PE.scala 113:29]
    node _T_8 = bits(cfgOut, 44, 42) @[PE.scala 121:32]
    Muxn.io.config <= _T_8 @[PE.scala 121:23]
    node _T_9 = bits(cfgOut, 47, 45) @[PE.scala 121:32]
    Muxn_1.io.config <= _T_9 @[PE.scala 121:23]
    
  module ALU_32 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<4>, flip in : UInt<32>[2], out : UInt<32>}
    
    node _T = bits(io.in[0], 31, 0) @[Operations.scala 122:31]
    node _T_1 = bits(io.in[0], 31, 0) @[Operations.scala 124:31]
    node _T_2 = bits(io.in[1], 31, 0) @[Operations.scala 124:49]
    node _T_3 = add(_T_1, _T_2) @[Operations.scala 124:41]
    node _T_4 = tail(_T_3, 1) @[Operations.scala 124:41]
    node _T_5 = bits(io.in[0], 31, 0) @[Operations.scala 126:31]
    node _T_6 = bits(io.in[1], 31, 0) @[Operations.scala 126:49]
    node _T_7 = sub(_T_5, _T_6) @[Operations.scala 126:41]
    node _T_8 = tail(_T_7, 1) @[Operations.scala 126:41]
    node _T_9 = bits(io.in[0], 31, 0) @[Operations.scala 128:31]
    node _T_10 = bits(io.in[1], 31, 0) @[Operations.scala 128:49]
    node _T_11 = mul(_T_9, _T_10) @[Operations.scala 128:41]
    node _T_12 = bits(io.in[0], 31, 0) @[Operations.scala 138:31]
    node _T_13 = bits(io.in[1], 31, 0) @[Operations.scala 138:49]
    node _T_14 = and(_T_12, _T_13) @[Operations.scala 138:41]
    node _T_15 = bits(io.in[0], 31, 0) @[Operations.scala 140:31]
    node _T_16 = bits(io.in[1], 31, 0) @[Operations.scala 140:49]
    node _T_17 = or(_T_15, _T_16) @[Operations.scala 140:41]
    node _T_18 = bits(io.in[0], 31, 0) @[Operations.scala 142:31]
    node _T_19 = bits(io.in[1], 31, 0) @[Operations.scala 142:49]
    node _T_20 = xor(_T_18, _T_19) @[Operations.scala 142:41]
    node _T_21 = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_22 = mux(_T_21, _T, UInt<1>("h00")) @[Mux.scala 80:57]
    node _T_23 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_24 = mux(_T_23, _T_4, _T_22) @[Mux.scala 80:57]
    node _T_25 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_26 = mux(_T_25, _T_8, _T_24) @[Mux.scala 80:57]
    node _T_27 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_28 = mux(_T_27, _T_11, _T_26) @[Mux.scala 80:57]
    node _T_29 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_30 = mux(_T_29, _T_14, _T_28) @[Mux.scala 80:57]
    node _T_31 = eq(UInt<3>("h05"), io.config) @[Mux.scala 80:60]
    node _T_32 = mux(_T_31, _T_17, _T_30) @[Mux.scala 80:57]
    node _T_33 = eq(UInt<3>("h06"), io.config) @[Mux.scala 80:60]
    node _T_34 = mux(_T_33, _T_20, _T_32) @[Mux.scala 80:57]
    io.out <= _T_34 @[ALU.scala 25:10]
    
  module RF_32 : 
    input clock : Clock
    input reset : Reset
    output io : {flip en : UInt<1>, flip config : UInt<0>, flip in : UInt<32>[1], out : UInt<32>[2]}
    
    wire _T : UInt<32>[1] @[RegFile.scala 24:29]
    _T[0] <= UInt<32>("h00") @[RegFile.scala 24:29]
    reg regs : UInt<32>[1], clock with : (reset => (reset, _T)) @[RegFile.scala 24:21]
    when io.en : @[RegFile.scala 34:16]
      regs[0] <= io.in[0] @[RegFile.scala 35:41]
      skip @[RegFile.scala 34:16]
    io.out[0] <= regs[0] @[RegFile.scala 37:42]
    io.out[1] <= regs[0] @[RegFile.scala 37:42]
    
  module DelayPipe_64 : 
    input clock : Clock
    input reset : Reset
    output io : {flip en : UInt<1>, flip config : UInt<3>, flip in : UInt<32>, out : UInt<32>}
    
    wire _T : UInt<32>[5] @[DelayPipe.scala 22:29]
    _T[0] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[1] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[2] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[3] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[4] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    reg regs : UInt<32>[5], clock with : (reset => (reset, _T)) @[DelayPipe.scala 22:21]
    reg wptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 23:21]
    reg rptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 24:21]
    node _T_1 = lt(wptr, UInt<3>("h04")) @[DelayPipe.scala 26:23]
    node _T_2 = and(io.en, _T_1) @[DelayPipe.scala 26:14]
    when _T_2 : @[DelayPipe.scala 26:37]
      node _T_3 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 27:17]
      node _T_4 = tail(_T_3, 1) @[DelayPipe.scala 27:17]
      wptr <= _T_4 @[DelayPipe.scala 27:10]
      skip @[DelayPipe.scala 26:37]
    else : @[DelayPipe.scala 28:14]
      wptr <= UInt<1>("h00") @[DelayPipe.scala 29:10]
      skip @[DelayPipe.scala 28:14]
    node _T_5 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 32:12]
    node _T_6 = tail(_T_5, 1) @[DelayPipe.scala 32:12]
    node _T_7 = geq(_T_6, io.config) @[DelayPipe.scala 32:17]
    when _T_7 : @[DelayPipe.scala 32:30]
      node _T_8 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 33:18]
      node _T_9 = tail(_T_8, 1) @[DelayPipe.scala 33:18]
      node _T_10 = sub(_T_9, io.config) @[DelayPipe.scala 33:24]
      node _T_11 = tail(_T_10, 1) @[DelayPipe.scala 33:24]
      rptr <= _T_11 @[DelayPipe.scala 33:10]
      skip @[DelayPipe.scala 32:30]
    else : @[DelayPipe.scala 34:14]
      node _T_12 = add(UInt<3>("h06"), wptr) @[DelayPipe.scala 35:30]
      node _T_13 = tail(_T_12, 1) @[DelayPipe.scala 35:30]
      node _T_14 = sub(_T_13, io.config) @[DelayPipe.scala 35:37]
      node _T_15 = tail(_T_14, 1) @[DelayPipe.scala 35:37]
      rptr <= _T_15 @[DelayPipe.scala 35:10]
      skip @[DelayPipe.scala 34:14]
    node _T_16 = gt(io.config, UInt<1>("h00")) @[DelayPipe.scala 39:28]
    node _T_17 = and(io.en, _T_16) @[DelayPipe.scala 39:14]
    when _T_17 : @[DelayPipe.scala 39:35]
      regs[wptr] <= io.in @[DelayPipe.scala 40:16]
      skip @[DelayPipe.scala 39:35]
    reg cnt : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 43:20]
    node _T_18 = eq(io.en, UInt<1>("h00")) @[DelayPipe.scala 44:8]
    when _T_18 : @[DelayPipe.scala 44:15]
      cnt <= UInt<1>("h00") @[DelayPipe.scala 45:9]
      skip @[DelayPipe.scala 44:15]
    else : @[DelayPipe.scala 46:30]
      node _T_19 = lt(cnt, io.config) @[DelayPipe.scala 46:18]
      when _T_19 : @[DelayPipe.scala 46:30]
        node _T_20 = add(cnt, UInt<1>("h01")) @[DelayPipe.scala 47:16]
        node _T_21 = tail(_T_20, 1) @[DelayPipe.scala 47:16]
        cnt <= _T_21 @[DelayPipe.scala 47:9]
        skip @[DelayPipe.scala 46:30]
    node _T_22 = eq(UInt<1>("h00"), io.config) @[DelayPipe.scala 50:22]
    node _T_23 = and(io.en, _T_22) @[DelayPipe.scala 50:14]
    when _T_23 : @[DelayPipe.scala 50:37]
      io.out <= io.in @[DelayPipe.scala 51:12]
      skip @[DelayPipe.scala 50:37]
    else : @[DelayPipe.scala 52:43]
      node _T_24 = eq(cnt, io.config) @[DelayPipe.scala 52:28]
      node _T_25 = and(io.en, _T_24) @[DelayPipe.scala 52:20]
      when _T_25 : @[DelayPipe.scala 52:43]
        io.out <= regs[rptr] @[DelayPipe.scala 53:12]
        skip @[DelayPipe.scala 52:43]
      else : @[DelayPipe.scala 54:14]
        io.out <= UInt<1>("h00") @[DelayPipe.scala 55:12]
        skip @[DelayPipe.scala 54:14]
    
  module DelayPipe_65 : 
    input clock : Clock
    input reset : Reset
    output io : {flip en : UInt<1>, flip config : UInt<3>, flip in : UInt<32>, out : UInt<32>}
    
    wire _T : UInt<32>[5] @[DelayPipe.scala 22:29]
    _T[0] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[1] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[2] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[3] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[4] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    reg regs : UInt<32>[5], clock with : (reset => (reset, _T)) @[DelayPipe.scala 22:21]
    reg wptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 23:21]
    reg rptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 24:21]
    node _T_1 = lt(wptr, UInt<3>("h04")) @[DelayPipe.scala 26:23]
    node _T_2 = and(io.en, _T_1) @[DelayPipe.scala 26:14]
    when _T_2 : @[DelayPipe.scala 26:37]
      node _T_3 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 27:17]
      node _T_4 = tail(_T_3, 1) @[DelayPipe.scala 27:17]
      wptr <= _T_4 @[DelayPipe.scala 27:10]
      skip @[DelayPipe.scala 26:37]
    else : @[DelayPipe.scala 28:14]
      wptr <= UInt<1>("h00") @[DelayPipe.scala 29:10]
      skip @[DelayPipe.scala 28:14]
    node _T_5 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 32:12]
    node _T_6 = tail(_T_5, 1) @[DelayPipe.scala 32:12]
    node _T_7 = geq(_T_6, io.config) @[DelayPipe.scala 32:17]
    when _T_7 : @[DelayPipe.scala 32:30]
      node _T_8 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 33:18]
      node _T_9 = tail(_T_8, 1) @[DelayPipe.scala 33:18]
      node _T_10 = sub(_T_9, io.config) @[DelayPipe.scala 33:24]
      node _T_11 = tail(_T_10, 1) @[DelayPipe.scala 33:24]
      rptr <= _T_11 @[DelayPipe.scala 33:10]
      skip @[DelayPipe.scala 32:30]
    else : @[DelayPipe.scala 34:14]
      node _T_12 = add(UInt<3>("h06"), wptr) @[DelayPipe.scala 35:30]
      node _T_13 = tail(_T_12, 1) @[DelayPipe.scala 35:30]
      node _T_14 = sub(_T_13, io.config) @[DelayPipe.scala 35:37]
      node _T_15 = tail(_T_14, 1) @[DelayPipe.scala 35:37]
      rptr <= _T_15 @[DelayPipe.scala 35:10]
      skip @[DelayPipe.scala 34:14]
    node _T_16 = gt(io.config, UInt<1>("h00")) @[DelayPipe.scala 39:28]
    node _T_17 = and(io.en, _T_16) @[DelayPipe.scala 39:14]
    when _T_17 : @[DelayPipe.scala 39:35]
      regs[wptr] <= io.in @[DelayPipe.scala 40:16]
      skip @[DelayPipe.scala 39:35]
    reg cnt : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 43:20]
    node _T_18 = eq(io.en, UInt<1>("h00")) @[DelayPipe.scala 44:8]
    when _T_18 : @[DelayPipe.scala 44:15]
      cnt <= UInt<1>("h00") @[DelayPipe.scala 45:9]
      skip @[DelayPipe.scala 44:15]
    else : @[DelayPipe.scala 46:30]
      node _T_19 = lt(cnt, io.config) @[DelayPipe.scala 46:18]
      when _T_19 : @[DelayPipe.scala 46:30]
        node _T_20 = add(cnt, UInt<1>("h01")) @[DelayPipe.scala 47:16]
        node _T_21 = tail(_T_20, 1) @[DelayPipe.scala 47:16]
        cnt <= _T_21 @[DelayPipe.scala 47:9]
        skip @[DelayPipe.scala 46:30]
    node _T_22 = eq(UInt<1>("h00"), io.config) @[DelayPipe.scala 50:22]
    node _T_23 = and(io.en, _T_22) @[DelayPipe.scala 50:14]
    when _T_23 : @[DelayPipe.scala 50:37]
      io.out <= io.in @[DelayPipe.scala 51:12]
      skip @[DelayPipe.scala 50:37]
    else : @[DelayPipe.scala 52:43]
      node _T_24 = eq(cnt, io.config) @[DelayPipe.scala 52:28]
      node _T_25 = and(io.en, _T_24) @[DelayPipe.scala 52:20]
      when _T_25 : @[DelayPipe.scala 52:43]
        io.out <= regs[rptr] @[DelayPipe.scala 53:12]
        skip @[DelayPipe.scala 52:43]
      else : @[DelayPipe.scala 54:14]
        io.out <= UInt<1>("h00") @[DelayPipe.scala 55:12]
        skip @[DelayPipe.scala 54:14]
    
  module Muxn_80 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[6], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    node _T_10 = eq(UInt<3>("h05"), io.config) @[Mux.scala 80:60]
    node _T_11 = mux(_T_10, io.in[5], _T_9) @[Mux.scala 80:57]
    io.out <= _T_11 @[Multiplexer.scala 20:10]
    
  module Muxn_81 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[6], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    node _T_10 = eq(UInt<3>("h05"), io.config) @[Mux.scala 80:60]
    node _T_11 = mux(_T_10, io.in[5], _T_9) @[Mux.scala 80:57]
    io.out <= _T_11 @[Multiplexer.scala 20:10]
    
  module ConfigMem_48 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<1>, flip cfg_data : UInt<32>, out : UInt<48>[1]}
    
    wire _T : UInt<48>[1] @[ConfigMem.scala 27:29]
    _T[0] <= UInt<48>("h00") @[ConfigMem.scala 27:29]
    reg regs : UInt<48>[1], clock with : (reset => (reset, _T)) @[ConfigMem.scala 27:21]
    node _T_1 = eq(io.cfg_addr, UInt<1>("h00")) @[ConfigMem.scala 39:38]
    node _T_2 = and(io.cfg_en, _T_1) @[ConfigMem.scala 39:22]
    when _T_2 : @[ConfigMem.scala 39:47]
      node _T_3 = bits(regs[0], 47, 32) @[ConfigMem.scala 41:33]
      node _T_4 = cat(_T_3, io.cfg_data) @[Cat.scala 29:58]
      regs[0] <= _T_4 @[ConfigMem.scala 41:19]
      skip @[ConfigMem.scala 39:47]
    node _T_5 = eq(io.cfg_addr, UInt<1>("h01")) @[ConfigMem.scala 39:38]
    node _T_6 = and(io.cfg_en, _T_5) @[ConfigMem.scala 39:22]
    when _T_6 : @[ConfigMem.scala 39:47]
      node _T_7 = bits(regs[0], 31, 0) @[ConfigMem.scala 43:46]
      node _T_8 = cat(io.cfg_data, _T_7) @[Cat.scala 29:58]
      regs[0] <= _T_8 @[ConfigMem.scala 43:19]
      skip @[ConfigMem.scala 39:47]
    io.out[0] <= regs[0] @[ConfigMem.scala 52:45]
    
  module GPE_32 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<12>, flip cfg_data : UInt<32>, flip en : UInt<1>, flip in : UInt<32>[8], out : UInt<32>[1]}
    
    inst alu of ALU_32 @[PE.scala 50:19]
    alu.clock <= clock
    alu.reset <= reset
    inst rf of RF_32 @[PE.scala 51:18]
    rf.clock <= clock
    rf.reset <= reset
    inst DelayPipe of DelayPipe_64 @[PE.scala 52:54]
    DelayPipe.clock <= clock
    DelayPipe.reset <= reset
    inst DelayPipe_1 of DelayPipe_65 @[PE.scala 52:54]
    DelayPipe_1.clock <= clock
    DelayPipe_1.reset <= reset
    wire const : UInt<32> @[PE.scala 54:19]
    inst Muxn of Muxn_80 @[PE.scala 55:49]
    Muxn.clock <= clock
    Muxn.reset <= reset
    inst Muxn_1 of Muxn_81 @[PE.scala 55:49]
    Muxn_1.clock <= clock
    Muxn_1.reset <= reset
    Muxn.io.in[0] <= io.in[0] @[PE.scala 62:12]
    Muxn.io.in[1] <= io.in[1] @[PE.scala 62:12]
    Muxn.io.in[2] <= io.in[2] @[PE.scala 62:12]
    Muxn.io.in[3] <= io.in[3] @[PE.scala 62:12]
    Muxn.io.in[4] <= const @[PE.scala 64:12]
    Muxn.io.in[5] <= rf.io.out[1] @[PE.scala 66:12]
    DelayPipe.io.en <= io.en @[PE.scala 69:23]
    DelayPipe.io.in <= Muxn.io.out @[PE.scala 70:23]
    alu.io.in[0] <= DelayPipe.io.out @[PE.scala 71:18]
    Muxn_1.io.in[0] <= io.in[4] @[PE.scala 62:12]
    Muxn_1.io.in[1] <= io.in[5] @[PE.scala 62:12]
    Muxn_1.io.in[2] <= io.in[6] @[PE.scala 62:12]
    Muxn_1.io.in[3] <= io.in[7] @[PE.scala 62:12]
    Muxn_1.io.in[4] <= const @[PE.scala 64:12]
    Muxn_1.io.in[5] <= rf.io.out[1] @[PE.scala 66:12]
    DelayPipe_1.io.en <= io.en @[PE.scala 69:23]
    DelayPipe_1.io.in <= Muxn_1.io.out @[PE.scala 70:23]
    alu.io.in[1] <= DelayPipe_1.io.out @[PE.scala 71:18]
    rf.io.en <= io.en @[PE.scala 75:12]
    rf.io.in[0] <= alu.io.out @[PE.scala 76:15]
    io.out[0] <= rf.io.out[0] @[PE.scala 77:13]
    inst cfg of ConfigMem_48 @[PE.scala 89:19]
    cfg.clock <= clock
    cfg.reset <= reset
    node _T = bits(io.cfg_addr, 11, 2) @[PE.scala 90:63]
    node _T_1 = eq(UInt<7>("h064"), _T) @[PE.scala 90:48]
    node _T_2 = and(io.cfg_en, _T_1) @[PE.scala 90:30]
    cfg.io.cfg_en <= _T_2 @[PE.scala 90:17]
    node _T_3 = bits(io.cfg_addr, 1, 0) @[PE.scala 91:33]
    cfg.io.cfg_addr <= _T_3 @[PE.scala 91:19]
    cfg.io.cfg_data <= io.cfg_data @[PE.scala 92:19]
    wire cfgOut : UInt<48> @[PE.scala 96:20]
    cfgOut <= cfg.io.out[0] @[PE.scala 97:10]
    node _T_4 = bits(cfgOut, 31, 0) @[PE.scala 98:18]
    const <= _T_4 @[PE.scala 98:9]
    node _T_5 = bits(cfgOut, 35, 32) @[PE.scala 100:28]
    alu.io.config <= _T_5 @[PE.scala 100:19]
    rf.io.config is invalid @[PE.scala 107:18]
    node _T_6 = bits(cfgOut, 38, 36) @[PE.scala 113:38]
    DelayPipe.io.config <= _T_6 @[PE.scala 113:29]
    node _T_7 = bits(cfgOut, 41, 39) @[PE.scala 113:38]
    DelayPipe_1.io.config <= _T_7 @[PE.scala 113:29]
    node _T_8 = bits(cfgOut, 44, 42) @[PE.scala 121:32]
    Muxn.io.config <= _T_8 @[PE.scala 121:23]
    node _T_9 = bits(cfgOut, 47, 45) @[PE.scala 121:32]
    Muxn_1.io.config <= _T_9 @[PE.scala 121:23]
    
  module ALU_33 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<4>, flip in : UInt<32>[2], out : UInt<32>}
    
    node _T = bits(io.in[0], 31, 0) @[Operations.scala 122:31]
    node _T_1 = bits(io.in[0], 31, 0) @[Operations.scala 124:31]
    node _T_2 = bits(io.in[1], 31, 0) @[Operations.scala 124:49]
    node _T_3 = add(_T_1, _T_2) @[Operations.scala 124:41]
    node _T_4 = tail(_T_3, 1) @[Operations.scala 124:41]
    node _T_5 = bits(io.in[0], 31, 0) @[Operations.scala 126:31]
    node _T_6 = bits(io.in[1], 31, 0) @[Operations.scala 126:49]
    node _T_7 = sub(_T_5, _T_6) @[Operations.scala 126:41]
    node _T_8 = tail(_T_7, 1) @[Operations.scala 126:41]
    node _T_9 = bits(io.in[0], 31, 0) @[Operations.scala 128:31]
    node _T_10 = bits(io.in[1], 31, 0) @[Operations.scala 128:49]
    node _T_11 = mul(_T_9, _T_10) @[Operations.scala 128:41]
    node _T_12 = bits(io.in[0], 31, 0) @[Operations.scala 138:31]
    node _T_13 = bits(io.in[1], 31, 0) @[Operations.scala 138:49]
    node _T_14 = and(_T_12, _T_13) @[Operations.scala 138:41]
    node _T_15 = bits(io.in[0], 31, 0) @[Operations.scala 140:31]
    node _T_16 = bits(io.in[1], 31, 0) @[Operations.scala 140:49]
    node _T_17 = or(_T_15, _T_16) @[Operations.scala 140:41]
    node _T_18 = bits(io.in[0], 31, 0) @[Operations.scala 142:31]
    node _T_19 = bits(io.in[1], 31, 0) @[Operations.scala 142:49]
    node _T_20 = xor(_T_18, _T_19) @[Operations.scala 142:41]
    node _T_21 = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_22 = mux(_T_21, _T, UInt<1>("h00")) @[Mux.scala 80:57]
    node _T_23 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_24 = mux(_T_23, _T_4, _T_22) @[Mux.scala 80:57]
    node _T_25 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_26 = mux(_T_25, _T_8, _T_24) @[Mux.scala 80:57]
    node _T_27 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_28 = mux(_T_27, _T_11, _T_26) @[Mux.scala 80:57]
    node _T_29 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_30 = mux(_T_29, _T_14, _T_28) @[Mux.scala 80:57]
    node _T_31 = eq(UInt<3>("h05"), io.config) @[Mux.scala 80:60]
    node _T_32 = mux(_T_31, _T_17, _T_30) @[Mux.scala 80:57]
    node _T_33 = eq(UInt<3>("h06"), io.config) @[Mux.scala 80:60]
    node _T_34 = mux(_T_33, _T_20, _T_32) @[Mux.scala 80:57]
    io.out <= _T_34 @[ALU.scala 25:10]
    
  module RF_33 : 
    input clock : Clock
    input reset : Reset
    output io : {flip en : UInt<1>, flip config : UInt<0>, flip in : UInt<32>[1], out : UInt<32>[2]}
    
    wire _T : UInt<32>[1] @[RegFile.scala 24:29]
    _T[0] <= UInt<32>("h00") @[RegFile.scala 24:29]
    reg regs : UInt<32>[1], clock with : (reset => (reset, _T)) @[RegFile.scala 24:21]
    when io.en : @[RegFile.scala 34:16]
      regs[0] <= io.in[0] @[RegFile.scala 35:41]
      skip @[RegFile.scala 34:16]
    io.out[0] <= regs[0] @[RegFile.scala 37:42]
    io.out[1] <= regs[0] @[RegFile.scala 37:42]
    
  module DelayPipe_66 : 
    input clock : Clock
    input reset : Reset
    output io : {flip en : UInt<1>, flip config : UInt<3>, flip in : UInt<32>, out : UInt<32>}
    
    wire _T : UInt<32>[5] @[DelayPipe.scala 22:29]
    _T[0] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[1] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[2] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[3] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[4] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    reg regs : UInt<32>[5], clock with : (reset => (reset, _T)) @[DelayPipe.scala 22:21]
    reg wptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 23:21]
    reg rptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 24:21]
    node _T_1 = lt(wptr, UInt<3>("h04")) @[DelayPipe.scala 26:23]
    node _T_2 = and(io.en, _T_1) @[DelayPipe.scala 26:14]
    when _T_2 : @[DelayPipe.scala 26:37]
      node _T_3 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 27:17]
      node _T_4 = tail(_T_3, 1) @[DelayPipe.scala 27:17]
      wptr <= _T_4 @[DelayPipe.scala 27:10]
      skip @[DelayPipe.scala 26:37]
    else : @[DelayPipe.scala 28:14]
      wptr <= UInt<1>("h00") @[DelayPipe.scala 29:10]
      skip @[DelayPipe.scala 28:14]
    node _T_5 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 32:12]
    node _T_6 = tail(_T_5, 1) @[DelayPipe.scala 32:12]
    node _T_7 = geq(_T_6, io.config) @[DelayPipe.scala 32:17]
    when _T_7 : @[DelayPipe.scala 32:30]
      node _T_8 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 33:18]
      node _T_9 = tail(_T_8, 1) @[DelayPipe.scala 33:18]
      node _T_10 = sub(_T_9, io.config) @[DelayPipe.scala 33:24]
      node _T_11 = tail(_T_10, 1) @[DelayPipe.scala 33:24]
      rptr <= _T_11 @[DelayPipe.scala 33:10]
      skip @[DelayPipe.scala 32:30]
    else : @[DelayPipe.scala 34:14]
      node _T_12 = add(UInt<3>("h06"), wptr) @[DelayPipe.scala 35:30]
      node _T_13 = tail(_T_12, 1) @[DelayPipe.scala 35:30]
      node _T_14 = sub(_T_13, io.config) @[DelayPipe.scala 35:37]
      node _T_15 = tail(_T_14, 1) @[DelayPipe.scala 35:37]
      rptr <= _T_15 @[DelayPipe.scala 35:10]
      skip @[DelayPipe.scala 34:14]
    node _T_16 = gt(io.config, UInt<1>("h00")) @[DelayPipe.scala 39:28]
    node _T_17 = and(io.en, _T_16) @[DelayPipe.scala 39:14]
    when _T_17 : @[DelayPipe.scala 39:35]
      regs[wptr] <= io.in @[DelayPipe.scala 40:16]
      skip @[DelayPipe.scala 39:35]
    reg cnt : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 43:20]
    node _T_18 = eq(io.en, UInt<1>("h00")) @[DelayPipe.scala 44:8]
    when _T_18 : @[DelayPipe.scala 44:15]
      cnt <= UInt<1>("h00") @[DelayPipe.scala 45:9]
      skip @[DelayPipe.scala 44:15]
    else : @[DelayPipe.scala 46:30]
      node _T_19 = lt(cnt, io.config) @[DelayPipe.scala 46:18]
      when _T_19 : @[DelayPipe.scala 46:30]
        node _T_20 = add(cnt, UInt<1>("h01")) @[DelayPipe.scala 47:16]
        node _T_21 = tail(_T_20, 1) @[DelayPipe.scala 47:16]
        cnt <= _T_21 @[DelayPipe.scala 47:9]
        skip @[DelayPipe.scala 46:30]
    node _T_22 = eq(UInt<1>("h00"), io.config) @[DelayPipe.scala 50:22]
    node _T_23 = and(io.en, _T_22) @[DelayPipe.scala 50:14]
    when _T_23 : @[DelayPipe.scala 50:37]
      io.out <= io.in @[DelayPipe.scala 51:12]
      skip @[DelayPipe.scala 50:37]
    else : @[DelayPipe.scala 52:43]
      node _T_24 = eq(cnt, io.config) @[DelayPipe.scala 52:28]
      node _T_25 = and(io.en, _T_24) @[DelayPipe.scala 52:20]
      when _T_25 : @[DelayPipe.scala 52:43]
        io.out <= regs[rptr] @[DelayPipe.scala 53:12]
        skip @[DelayPipe.scala 52:43]
      else : @[DelayPipe.scala 54:14]
        io.out <= UInt<1>("h00") @[DelayPipe.scala 55:12]
        skip @[DelayPipe.scala 54:14]
    
  module DelayPipe_67 : 
    input clock : Clock
    input reset : Reset
    output io : {flip en : UInt<1>, flip config : UInt<3>, flip in : UInt<32>, out : UInt<32>}
    
    wire _T : UInt<32>[5] @[DelayPipe.scala 22:29]
    _T[0] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[1] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[2] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[3] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[4] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    reg regs : UInt<32>[5], clock with : (reset => (reset, _T)) @[DelayPipe.scala 22:21]
    reg wptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 23:21]
    reg rptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 24:21]
    node _T_1 = lt(wptr, UInt<3>("h04")) @[DelayPipe.scala 26:23]
    node _T_2 = and(io.en, _T_1) @[DelayPipe.scala 26:14]
    when _T_2 : @[DelayPipe.scala 26:37]
      node _T_3 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 27:17]
      node _T_4 = tail(_T_3, 1) @[DelayPipe.scala 27:17]
      wptr <= _T_4 @[DelayPipe.scala 27:10]
      skip @[DelayPipe.scala 26:37]
    else : @[DelayPipe.scala 28:14]
      wptr <= UInt<1>("h00") @[DelayPipe.scala 29:10]
      skip @[DelayPipe.scala 28:14]
    node _T_5 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 32:12]
    node _T_6 = tail(_T_5, 1) @[DelayPipe.scala 32:12]
    node _T_7 = geq(_T_6, io.config) @[DelayPipe.scala 32:17]
    when _T_7 : @[DelayPipe.scala 32:30]
      node _T_8 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 33:18]
      node _T_9 = tail(_T_8, 1) @[DelayPipe.scala 33:18]
      node _T_10 = sub(_T_9, io.config) @[DelayPipe.scala 33:24]
      node _T_11 = tail(_T_10, 1) @[DelayPipe.scala 33:24]
      rptr <= _T_11 @[DelayPipe.scala 33:10]
      skip @[DelayPipe.scala 32:30]
    else : @[DelayPipe.scala 34:14]
      node _T_12 = add(UInt<3>("h06"), wptr) @[DelayPipe.scala 35:30]
      node _T_13 = tail(_T_12, 1) @[DelayPipe.scala 35:30]
      node _T_14 = sub(_T_13, io.config) @[DelayPipe.scala 35:37]
      node _T_15 = tail(_T_14, 1) @[DelayPipe.scala 35:37]
      rptr <= _T_15 @[DelayPipe.scala 35:10]
      skip @[DelayPipe.scala 34:14]
    node _T_16 = gt(io.config, UInt<1>("h00")) @[DelayPipe.scala 39:28]
    node _T_17 = and(io.en, _T_16) @[DelayPipe.scala 39:14]
    when _T_17 : @[DelayPipe.scala 39:35]
      regs[wptr] <= io.in @[DelayPipe.scala 40:16]
      skip @[DelayPipe.scala 39:35]
    reg cnt : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 43:20]
    node _T_18 = eq(io.en, UInt<1>("h00")) @[DelayPipe.scala 44:8]
    when _T_18 : @[DelayPipe.scala 44:15]
      cnt <= UInt<1>("h00") @[DelayPipe.scala 45:9]
      skip @[DelayPipe.scala 44:15]
    else : @[DelayPipe.scala 46:30]
      node _T_19 = lt(cnt, io.config) @[DelayPipe.scala 46:18]
      when _T_19 : @[DelayPipe.scala 46:30]
        node _T_20 = add(cnt, UInt<1>("h01")) @[DelayPipe.scala 47:16]
        node _T_21 = tail(_T_20, 1) @[DelayPipe.scala 47:16]
        cnt <= _T_21 @[DelayPipe.scala 47:9]
        skip @[DelayPipe.scala 46:30]
    node _T_22 = eq(UInt<1>("h00"), io.config) @[DelayPipe.scala 50:22]
    node _T_23 = and(io.en, _T_22) @[DelayPipe.scala 50:14]
    when _T_23 : @[DelayPipe.scala 50:37]
      io.out <= io.in @[DelayPipe.scala 51:12]
      skip @[DelayPipe.scala 50:37]
    else : @[DelayPipe.scala 52:43]
      node _T_24 = eq(cnt, io.config) @[DelayPipe.scala 52:28]
      node _T_25 = and(io.en, _T_24) @[DelayPipe.scala 52:20]
      when _T_25 : @[DelayPipe.scala 52:43]
        io.out <= regs[rptr] @[DelayPipe.scala 53:12]
        skip @[DelayPipe.scala 52:43]
      else : @[DelayPipe.scala 54:14]
        io.out <= UInt<1>("h00") @[DelayPipe.scala 55:12]
        skip @[DelayPipe.scala 54:14]
    
  module Muxn_82 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[6], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    node _T_10 = eq(UInt<3>("h05"), io.config) @[Mux.scala 80:60]
    node _T_11 = mux(_T_10, io.in[5], _T_9) @[Mux.scala 80:57]
    io.out <= _T_11 @[Multiplexer.scala 20:10]
    
  module Muxn_83 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[6], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    node _T_10 = eq(UInt<3>("h05"), io.config) @[Mux.scala 80:60]
    node _T_11 = mux(_T_10, io.in[5], _T_9) @[Mux.scala 80:57]
    io.out <= _T_11 @[Multiplexer.scala 20:10]
    
  module ConfigMem_49 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<1>, flip cfg_data : UInt<32>, out : UInt<48>[1]}
    
    wire _T : UInt<48>[1] @[ConfigMem.scala 27:29]
    _T[0] <= UInt<48>("h00") @[ConfigMem.scala 27:29]
    reg regs : UInt<48>[1], clock with : (reset => (reset, _T)) @[ConfigMem.scala 27:21]
    node _T_1 = eq(io.cfg_addr, UInt<1>("h00")) @[ConfigMem.scala 39:38]
    node _T_2 = and(io.cfg_en, _T_1) @[ConfigMem.scala 39:22]
    when _T_2 : @[ConfigMem.scala 39:47]
      node _T_3 = bits(regs[0], 47, 32) @[ConfigMem.scala 41:33]
      node _T_4 = cat(_T_3, io.cfg_data) @[Cat.scala 29:58]
      regs[0] <= _T_4 @[ConfigMem.scala 41:19]
      skip @[ConfigMem.scala 39:47]
    node _T_5 = eq(io.cfg_addr, UInt<1>("h01")) @[ConfigMem.scala 39:38]
    node _T_6 = and(io.cfg_en, _T_5) @[ConfigMem.scala 39:22]
    when _T_6 : @[ConfigMem.scala 39:47]
      node _T_7 = bits(regs[0], 31, 0) @[ConfigMem.scala 43:46]
      node _T_8 = cat(io.cfg_data, _T_7) @[Cat.scala 29:58]
      regs[0] <= _T_8 @[ConfigMem.scala 43:19]
      skip @[ConfigMem.scala 39:47]
    io.out[0] <= regs[0] @[ConfigMem.scala 52:45]
    
  module GPE_33 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<12>, flip cfg_data : UInt<32>, flip en : UInt<1>, flip in : UInt<32>[8], out : UInt<32>[1]}
    
    inst alu of ALU_33 @[PE.scala 50:19]
    alu.clock <= clock
    alu.reset <= reset
    inst rf of RF_33 @[PE.scala 51:18]
    rf.clock <= clock
    rf.reset <= reset
    inst DelayPipe of DelayPipe_66 @[PE.scala 52:54]
    DelayPipe.clock <= clock
    DelayPipe.reset <= reset
    inst DelayPipe_1 of DelayPipe_67 @[PE.scala 52:54]
    DelayPipe_1.clock <= clock
    DelayPipe_1.reset <= reset
    wire const : UInt<32> @[PE.scala 54:19]
    inst Muxn of Muxn_82 @[PE.scala 55:49]
    Muxn.clock <= clock
    Muxn.reset <= reset
    inst Muxn_1 of Muxn_83 @[PE.scala 55:49]
    Muxn_1.clock <= clock
    Muxn_1.reset <= reset
    Muxn.io.in[0] <= io.in[0] @[PE.scala 62:12]
    Muxn.io.in[1] <= io.in[1] @[PE.scala 62:12]
    Muxn.io.in[2] <= io.in[2] @[PE.scala 62:12]
    Muxn.io.in[3] <= io.in[3] @[PE.scala 62:12]
    Muxn.io.in[4] <= const @[PE.scala 64:12]
    Muxn.io.in[5] <= rf.io.out[1] @[PE.scala 66:12]
    DelayPipe.io.en <= io.en @[PE.scala 69:23]
    DelayPipe.io.in <= Muxn.io.out @[PE.scala 70:23]
    alu.io.in[0] <= DelayPipe.io.out @[PE.scala 71:18]
    Muxn_1.io.in[0] <= io.in[4] @[PE.scala 62:12]
    Muxn_1.io.in[1] <= io.in[5] @[PE.scala 62:12]
    Muxn_1.io.in[2] <= io.in[6] @[PE.scala 62:12]
    Muxn_1.io.in[3] <= io.in[7] @[PE.scala 62:12]
    Muxn_1.io.in[4] <= const @[PE.scala 64:12]
    Muxn_1.io.in[5] <= rf.io.out[1] @[PE.scala 66:12]
    DelayPipe_1.io.en <= io.en @[PE.scala 69:23]
    DelayPipe_1.io.in <= Muxn_1.io.out @[PE.scala 70:23]
    alu.io.in[1] <= DelayPipe_1.io.out @[PE.scala 71:18]
    rf.io.en <= io.en @[PE.scala 75:12]
    rf.io.in[0] <= alu.io.out @[PE.scala 76:15]
    io.out[0] <= rf.io.out[0] @[PE.scala 77:13]
    inst cfg of ConfigMem_49 @[PE.scala 89:19]
    cfg.clock <= clock
    cfg.reset <= reset
    node _T = bits(io.cfg_addr, 11, 2) @[PE.scala 90:63]
    node _T_1 = eq(UInt<7>("h065"), _T) @[PE.scala 90:48]
    node _T_2 = and(io.cfg_en, _T_1) @[PE.scala 90:30]
    cfg.io.cfg_en <= _T_2 @[PE.scala 90:17]
    node _T_3 = bits(io.cfg_addr, 1, 0) @[PE.scala 91:33]
    cfg.io.cfg_addr <= _T_3 @[PE.scala 91:19]
    cfg.io.cfg_data <= io.cfg_data @[PE.scala 92:19]
    wire cfgOut : UInt<48> @[PE.scala 96:20]
    cfgOut <= cfg.io.out[0] @[PE.scala 97:10]
    node _T_4 = bits(cfgOut, 31, 0) @[PE.scala 98:18]
    const <= _T_4 @[PE.scala 98:9]
    node _T_5 = bits(cfgOut, 35, 32) @[PE.scala 100:28]
    alu.io.config <= _T_5 @[PE.scala 100:19]
    rf.io.config is invalid @[PE.scala 107:18]
    node _T_6 = bits(cfgOut, 38, 36) @[PE.scala 113:38]
    DelayPipe.io.config <= _T_6 @[PE.scala 113:29]
    node _T_7 = bits(cfgOut, 41, 39) @[PE.scala 113:38]
    DelayPipe_1.io.config <= _T_7 @[PE.scala 113:29]
    node _T_8 = bits(cfgOut, 44, 42) @[PE.scala 121:32]
    Muxn.io.config <= _T_8 @[PE.scala 121:23]
    node _T_9 = bits(cfgOut, 47, 45) @[PE.scala 121:32]
    Muxn_1.io.config <= _T_9 @[PE.scala 121:23]
    
  module ALU_34 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<4>, flip in : UInt<32>[2], out : UInt<32>}
    
    node _T = bits(io.in[0], 31, 0) @[Operations.scala 122:31]
    node _T_1 = bits(io.in[0], 31, 0) @[Operations.scala 124:31]
    node _T_2 = bits(io.in[1], 31, 0) @[Operations.scala 124:49]
    node _T_3 = add(_T_1, _T_2) @[Operations.scala 124:41]
    node _T_4 = tail(_T_3, 1) @[Operations.scala 124:41]
    node _T_5 = bits(io.in[0], 31, 0) @[Operations.scala 126:31]
    node _T_6 = bits(io.in[1], 31, 0) @[Operations.scala 126:49]
    node _T_7 = sub(_T_5, _T_6) @[Operations.scala 126:41]
    node _T_8 = tail(_T_7, 1) @[Operations.scala 126:41]
    node _T_9 = bits(io.in[0], 31, 0) @[Operations.scala 128:31]
    node _T_10 = bits(io.in[1], 31, 0) @[Operations.scala 128:49]
    node _T_11 = mul(_T_9, _T_10) @[Operations.scala 128:41]
    node _T_12 = bits(io.in[0], 31, 0) @[Operations.scala 138:31]
    node _T_13 = bits(io.in[1], 31, 0) @[Operations.scala 138:49]
    node _T_14 = and(_T_12, _T_13) @[Operations.scala 138:41]
    node _T_15 = bits(io.in[0], 31, 0) @[Operations.scala 140:31]
    node _T_16 = bits(io.in[1], 31, 0) @[Operations.scala 140:49]
    node _T_17 = or(_T_15, _T_16) @[Operations.scala 140:41]
    node _T_18 = bits(io.in[0], 31, 0) @[Operations.scala 142:31]
    node _T_19 = bits(io.in[1], 31, 0) @[Operations.scala 142:49]
    node _T_20 = xor(_T_18, _T_19) @[Operations.scala 142:41]
    node _T_21 = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_22 = mux(_T_21, _T, UInt<1>("h00")) @[Mux.scala 80:57]
    node _T_23 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_24 = mux(_T_23, _T_4, _T_22) @[Mux.scala 80:57]
    node _T_25 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_26 = mux(_T_25, _T_8, _T_24) @[Mux.scala 80:57]
    node _T_27 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_28 = mux(_T_27, _T_11, _T_26) @[Mux.scala 80:57]
    node _T_29 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_30 = mux(_T_29, _T_14, _T_28) @[Mux.scala 80:57]
    node _T_31 = eq(UInt<3>("h05"), io.config) @[Mux.scala 80:60]
    node _T_32 = mux(_T_31, _T_17, _T_30) @[Mux.scala 80:57]
    node _T_33 = eq(UInt<3>("h06"), io.config) @[Mux.scala 80:60]
    node _T_34 = mux(_T_33, _T_20, _T_32) @[Mux.scala 80:57]
    io.out <= _T_34 @[ALU.scala 25:10]
    
  module RF_34 : 
    input clock : Clock
    input reset : Reset
    output io : {flip en : UInt<1>, flip config : UInt<0>, flip in : UInt<32>[1], out : UInt<32>[2]}
    
    wire _T : UInt<32>[1] @[RegFile.scala 24:29]
    _T[0] <= UInt<32>("h00") @[RegFile.scala 24:29]
    reg regs : UInt<32>[1], clock with : (reset => (reset, _T)) @[RegFile.scala 24:21]
    when io.en : @[RegFile.scala 34:16]
      regs[0] <= io.in[0] @[RegFile.scala 35:41]
      skip @[RegFile.scala 34:16]
    io.out[0] <= regs[0] @[RegFile.scala 37:42]
    io.out[1] <= regs[0] @[RegFile.scala 37:42]
    
  module DelayPipe_68 : 
    input clock : Clock
    input reset : Reset
    output io : {flip en : UInt<1>, flip config : UInt<3>, flip in : UInt<32>, out : UInt<32>}
    
    wire _T : UInt<32>[5] @[DelayPipe.scala 22:29]
    _T[0] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[1] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[2] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[3] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[4] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    reg regs : UInt<32>[5], clock with : (reset => (reset, _T)) @[DelayPipe.scala 22:21]
    reg wptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 23:21]
    reg rptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 24:21]
    node _T_1 = lt(wptr, UInt<3>("h04")) @[DelayPipe.scala 26:23]
    node _T_2 = and(io.en, _T_1) @[DelayPipe.scala 26:14]
    when _T_2 : @[DelayPipe.scala 26:37]
      node _T_3 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 27:17]
      node _T_4 = tail(_T_3, 1) @[DelayPipe.scala 27:17]
      wptr <= _T_4 @[DelayPipe.scala 27:10]
      skip @[DelayPipe.scala 26:37]
    else : @[DelayPipe.scala 28:14]
      wptr <= UInt<1>("h00") @[DelayPipe.scala 29:10]
      skip @[DelayPipe.scala 28:14]
    node _T_5 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 32:12]
    node _T_6 = tail(_T_5, 1) @[DelayPipe.scala 32:12]
    node _T_7 = geq(_T_6, io.config) @[DelayPipe.scala 32:17]
    when _T_7 : @[DelayPipe.scala 32:30]
      node _T_8 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 33:18]
      node _T_9 = tail(_T_8, 1) @[DelayPipe.scala 33:18]
      node _T_10 = sub(_T_9, io.config) @[DelayPipe.scala 33:24]
      node _T_11 = tail(_T_10, 1) @[DelayPipe.scala 33:24]
      rptr <= _T_11 @[DelayPipe.scala 33:10]
      skip @[DelayPipe.scala 32:30]
    else : @[DelayPipe.scala 34:14]
      node _T_12 = add(UInt<3>("h06"), wptr) @[DelayPipe.scala 35:30]
      node _T_13 = tail(_T_12, 1) @[DelayPipe.scala 35:30]
      node _T_14 = sub(_T_13, io.config) @[DelayPipe.scala 35:37]
      node _T_15 = tail(_T_14, 1) @[DelayPipe.scala 35:37]
      rptr <= _T_15 @[DelayPipe.scala 35:10]
      skip @[DelayPipe.scala 34:14]
    node _T_16 = gt(io.config, UInt<1>("h00")) @[DelayPipe.scala 39:28]
    node _T_17 = and(io.en, _T_16) @[DelayPipe.scala 39:14]
    when _T_17 : @[DelayPipe.scala 39:35]
      regs[wptr] <= io.in @[DelayPipe.scala 40:16]
      skip @[DelayPipe.scala 39:35]
    reg cnt : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 43:20]
    node _T_18 = eq(io.en, UInt<1>("h00")) @[DelayPipe.scala 44:8]
    when _T_18 : @[DelayPipe.scala 44:15]
      cnt <= UInt<1>("h00") @[DelayPipe.scala 45:9]
      skip @[DelayPipe.scala 44:15]
    else : @[DelayPipe.scala 46:30]
      node _T_19 = lt(cnt, io.config) @[DelayPipe.scala 46:18]
      when _T_19 : @[DelayPipe.scala 46:30]
        node _T_20 = add(cnt, UInt<1>("h01")) @[DelayPipe.scala 47:16]
        node _T_21 = tail(_T_20, 1) @[DelayPipe.scala 47:16]
        cnt <= _T_21 @[DelayPipe.scala 47:9]
        skip @[DelayPipe.scala 46:30]
    node _T_22 = eq(UInt<1>("h00"), io.config) @[DelayPipe.scala 50:22]
    node _T_23 = and(io.en, _T_22) @[DelayPipe.scala 50:14]
    when _T_23 : @[DelayPipe.scala 50:37]
      io.out <= io.in @[DelayPipe.scala 51:12]
      skip @[DelayPipe.scala 50:37]
    else : @[DelayPipe.scala 52:43]
      node _T_24 = eq(cnt, io.config) @[DelayPipe.scala 52:28]
      node _T_25 = and(io.en, _T_24) @[DelayPipe.scala 52:20]
      when _T_25 : @[DelayPipe.scala 52:43]
        io.out <= regs[rptr] @[DelayPipe.scala 53:12]
        skip @[DelayPipe.scala 52:43]
      else : @[DelayPipe.scala 54:14]
        io.out <= UInt<1>("h00") @[DelayPipe.scala 55:12]
        skip @[DelayPipe.scala 54:14]
    
  module DelayPipe_69 : 
    input clock : Clock
    input reset : Reset
    output io : {flip en : UInt<1>, flip config : UInt<3>, flip in : UInt<32>, out : UInt<32>}
    
    wire _T : UInt<32>[5] @[DelayPipe.scala 22:29]
    _T[0] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[1] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[2] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[3] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[4] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    reg regs : UInt<32>[5], clock with : (reset => (reset, _T)) @[DelayPipe.scala 22:21]
    reg wptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 23:21]
    reg rptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 24:21]
    node _T_1 = lt(wptr, UInt<3>("h04")) @[DelayPipe.scala 26:23]
    node _T_2 = and(io.en, _T_1) @[DelayPipe.scala 26:14]
    when _T_2 : @[DelayPipe.scala 26:37]
      node _T_3 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 27:17]
      node _T_4 = tail(_T_3, 1) @[DelayPipe.scala 27:17]
      wptr <= _T_4 @[DelayPipe.scala 27:10]
      skip @[DelayPipe.scala 26:37]
    else : @[DelayPipe.scala 28:14]
      wptr <= UInt<1>("h00") @[DelayPipe.scala 29:10]
      skip @[DelayPipe.scala 28:14]
    node _T_5 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 32:12]
    node _T_6 = tail(_T_5, 1) @[DelayPipe.scala 32:12]
    node _T_7 = geq(_T_6, io.config) @[DelayPipe.scala 32:17]
    when _T_7 : @[DelayPipe.scala 32:30]
      node _T_8 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 33:18]
      node _T_9 = tail(_T_8, 1) @[DelayPipe.scala 33:18]
      node _T_10 = sub(_T_9, io.config) @[DelayPipe.scala 33:24]
      node _T_11 = tail(_T_10, 1) @[DelayPipe.scala 33:24]
      rptr <= _T_11 @[DelayPipe.scala 33:10]
      skip @[DelayPipe.scala 32:30]
    else : @[DelayPipe.scala 34:14]
      node _T_12 = add(UInt<3>("h06"), wptr) @[DelayPipe.scala 35:30]
      node _T_13 = tail(_T_12, 1) @[DelayPipe.scala 35:30]
      node _T_14 = sub(_T_13, io.config) @[DelayPipe.scala 35:37]
      node _T_15 = tail(_T_14, 1) @[DelayPipe.scala 35:37]
      rptr <= _T_15 @[DelayPipe.scala 35:10]
      skip @[DelayPipe.scala 34:14]
    node _T_16 = gt(io.config, UInt<1>("h00")) @[DelayPipe.scala 39:28]
    node _T_17 = and(io.en, _T_16) @[DelayPipe.scala 39:14]
    when _T_17 : @[DelayPipe.scala 39:35]
      regs[wptr] <= io.in @[DelayPipe.scala 40:16]
      skip @[DelayPipe.scala 39:35]
    reg cnt : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 43:20]
    node _T_18 = eq(io.en, UInt<1>("h00")) @[DelayPipe.scala 44:8]
    when _T_18 : @[DelayPipe.scala 44:15]
      cnt <= UInt<1>("h00") @[DelayPipe.scala 45:9]
      skip @[DelayPipe.scala 44:15]
    else : @[DelayPipe.scala 46:30]
      node _T_19 = lt(cnt, io.config) @[DelayPipe.scala 46:18]
      when _T_19 : @[DelayPipe.scala 46:30]
        node _T_20 = add(cnt, UInt<1>("h01")) @[DelayPipe.scala 47:16]
        node _T_21 = tail(_T_20, 1) @[DelayPipe.scala 47:16]
        cnt <= _T_21 @[DelayPipe.scala 47:9]
        skip @[DelayPipe.scala 46:30]
    node _T_22 = eq(UInt<1>("h00"), io.config) @[DelayPipe.scala 50:22]
    node _T_23 = and(io.en, _T_22) @[DelayPipe.scala 50:14]
    when _T_23 : @[DelayPipe.scala 50:37]
      io.out <= io.in @[DelayPipe.scala 51:12]
      skip @[DelayPipe.scala 50:37]
    else : @[DelayPipe.scala 52:43]
      node _T_24 = eq(cnt, io.config) @[DelayPipe.scala 52:28]
      node _T_25 = and(io.en, _T_24) @[DelayPipe.scala 52:20]
      when _T_25 : @[DelayPipe.scala 52:43]
        io.out <= regs[rptr] @[DelayPipe.scala 53:12]
        skip @[DelayPipe.scala 52:43]
      else : @[DelayPipe.scala 54:14]
        io.out <= UInt<1>("h00") @[DelayPipe.scala 55:12]
        skip @[DelayPipe.scala 54:14]
    
  module Muxn_84 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[6], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    node _T_10 = eq(UInt<3>("h05"), io.config) @[Mux.scala 80:60]
    node _T_11 = mux(_T_10, io.in[5], _T_9) @[Mux.scala 80:57]
    io.out <= _T_11 @[Multiplexer.scala 20:10]
    
  module Muxn_85 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[6], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    node _T_10 = eq(UInt<3>("h05"), io.config) @[Mux.scala 80:60]
    node _T_11 = mux(_T_10, io.in[5], _T_9) @[Mux.scala 80:57]
    io.out <= _T_11 @[Multiplexer.scala 20:10]
    
  module ConfigMem_50 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<1>, flip cfg_data : UInt<32>, out : UInt<48>[1]}
    
    wire _T : UInt<48>[1] @[ConfigMem.scala 27:29]
    _T[0] <= UInt<48>("h00") @[ConfigMem.scala 27:29]
    reg regs : UInt<48>[1], clock with : (reset => (reset, _T)) @[ConfigMem.scala 27:21]
    node _T_1 = eq(io.cfg_addr, UInt<1>("h00")) @[ConfigMem.scala 39:38]
    node _T_2 = and(io.cfg_en, _T_1) @[ConfigMem.scala 39:22]
    when _T_2 : @[ConfigMem.scala 39:47]
      node _T_3 = bits(regs[0], 47, 32) @[ConfigMem.scala 41:33]
      node _T_4 = cat(_T_3, io.cfg_data) @[Cat.scala 29:58]
      regs[0] <= _T_4 @[ConfigMem.scala 41:19]
      skip @[ConfigMem.scala 39:47]
    node _T_5 = eq(io.cfg_addr, UInt<1>("h01")) @[ConfigMem.scala 39:38]
    node _T_6 = and(io.cfg_en, _T_5) @[ConfigMem.scala 39:22]
    when _T_6 : @[ConfigMem.scala 39:47]
      node _T_7 = bits(regs[0], 31, 0) @[ConfigMem.scala 43:46]
      node _T_8 = cat(io.cfg_data, _T_7) @[Cat.scala 29:58]
      regs[0] <= _T_8 @[ConfigMem.scala 43:19]
      skip @[ConfigMem.scala 39:47]
    io.out[0] <= regs[0] @[ConfigMem.scala 52:45]
    
  module GPE_34 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<12>, flip cfg_data : UInt<32>, flip en : UInt<1>, flip in : UInt<32>[8], out : UInt<32>[1]}
    
    inst alu of ALU_34 @[PE.scala 50:19]
    alu.clock <= clock
    alu.reset <= reset
    inst rf of RF_34 @[PE.scala 51:18]
    rf.clock <= clock
    rf.reset <= reset
    inst DelayPipe of DelayPipe_68 @[PE.scala 52:54]
    DelayPipe.clock <= clock
    DelayPipe.reset <= reset
    inst DelayPipe_1 of DelayPipe_69 @[PE.scala 52:54]
    DelayPipe_1.clock <= clock
    DelayPipe_1.reset <= reset
    wire const : UInt<32> @[PE.scala 54:19]
    inst Muxn of Muxn_84 @[PE.scala 55:49]
    Muxn.clock <= clock
    Muxn.reset <= reset
    inst Muxn_1 of Muxn_85 @[PE.scala 55:49]
    Muxn_1.clock <= clock
    Muxn_1.reset <= reset
    Muxn.io.in[0] <= io.in[0] @[PE.scala 62:12]
    Muxn.io.in[1] <= io.in[1] @[PE.scala 62:12]
    Muxn.io.in[2] <= io.in[2] @[PE.scala 62:12]
    Muxn.io.in[3] <= io.in[3] @[PE.scala 62:12]
    Muxn.io.in[4] <= const @[PE.scala 64:12]
    Muxn.io.in[5] <= rf.io.out[1] @[PE.scala 66:12]
    DelayPipe.io.en <= io.en @[PE.scala 69:23]
    DelayPipe.io.in <= Muxn.io.out @[PE.scala 70:23]
    alu.io.in[0] <= DelayPipe.io.out @[PE.scala 71:18]
    Muxn_1.io.in[0] <= io.in[4] @[PE.scala 62:12]
    Muxn_1.io.in[1] <= io.in[5] @[PE.scala 62:12]
    Muxn_1.io.in[2] <= io.in[6] @[PE.scala 62:12]
    Muxn_1.io.in[3] <= io.in[7] @[PE.scala 62:12]
    Muxn_1.io.in[4] <= const @[PE.scala 64:12]
    Muxn_1.io.in[5] <= rf.io.out[1] @[PE.scala 66:12]
    DelayPipe_1.io.en <= io.en @[PE.scala 69:23]
    DelayPipe_1.io.in <= Muxn_1.io.out @[PE.scala 70:23]
    alu.io.in[1] <= DelayPipe_1.io.out @[PE.scala 71:18]
    rf.io.en <= io.en @[PE.scala 75:12]
    rf.io.in[0] <= alu.io.out @[PE.scala 76:15]
    io.out[0] <= rf.io.out[0] @[PE.scala 77:13]
    inst cfg of ConfigMem_50 @[PE.scala 89:19]
    cfg.clock <= clock
    cfg.reset <= reset
    node _T = bits(io.cfg_addr, 11, 2) @[PE.scala 90:63]
    node _T_1 = eq(UInt<7>("h066"), _T) @[PE.scala 90:48]
    node _T_2 = and(io.cfg_en, _T_1) @[PE.scala 90:30]
    cfg.io.cfg_en <= _T_2 @[PE.scala 90:17]
    node _T_3 = bits(io.cfg_addr, 1, 0) @[PE.scala 91:33]
    cfg.io.cfg_addr <= _T_3 @[PE.scala 91:19]
    cfg.io.cfg_data <= io.cfg_data @[PE.scala 92:19]
    wire cfgOut : UInt<48> @[PE.scala 96:20]
    cfgOut <= cfg.io.out[0] @[PE.scala 97:10]
    node _T_4 = bits(cfgOut, 31, 0) @[PE.scala 98:18]
    const <= _T_4 @[PE.scala 98:9]
    node _T_5 = bits(cfgOut, 35, 32) @[PE.scala 100:28]
    alu.io.config <= _T_5 @[PE.scala 100:19]
    rf.io.config is invalid @[PE.scala 107:18]
    node _T_6 = bits(cfgOut, 38, 36) @[PE.scala 113:38]
    DelayPipe.io.config <= _T_6 @[PE.scala 113:29]
    node _T_7 = bits(cfgOut, 41, 39) @[PE.scala 113:38]
    DelayPipe_1.io.config <= _T_7 @[PE.scala 113:29]
    node _T_8 = bits(cfgOut, 44, 42) @[PE.scala 121:32]
    Muxn.io.config <= _T_8 @[PE.scala 121:23]
    node _T_9 = bits(cfgOut, 47, 45) @[PE.scala 121:32]
    Muxn_1.io.config <= _T_9 @[PE.scala 121:23]
    
  module ALU_35 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<4>, flip in : UInt<32>[2], out : UInt<32>}
    
    node _T = bits(io.in[0], 31, 0) @[Operations.scala 122:31]
    node _T_1 = bits(io.in[0], 31, 0) @[Operations.scala 124:31]
    node _T_2 = bits(io.in[1], 31, 0) @[Operations.scala 124:49]
    node _T_3 = add(_T_1, _T_2) @[Operations.scala 124:41]
    node _T_4 = tail(_T_3, 1) @[Operations.scala 124:41]
    node _T_5 = bits(io.in[0], 31, 0) @[Operations.scala 126:31]
    node _T_6 = bits(io.in[1], 31, 0) @[Operations.scala 126:49]
    node _T_7 = sub(_T_5, _T_6) @[Operations.scala 126:41]
    node _T_8 = tail(_T_7, 1) @[Operations.scala 126:41]
    node _T_9 = bits(io.in[0], 31, 0) @[Operations.scala 128:31]
    node _T_10 = bits(io.in[1], 31, 0) @[Operations.scala 128:49]
    node _T_11 = mul(_T_9, _T_10) @[Operations.scala 128:41]
    node _T_12 = bits(io.in[0], 31, 0) @[Operations.scala 138:31]
    node _T_13 = bits(io.in[1], 31, 0) @[Operations.scala 138:49]
    node _T_14 = and(_T_12, _T_13) @[Operations.scala 138:41]
    node _T_15 = bits(io.in[0], 31, 0) @[Operations.scala 140:31]
    node _T_16 = bits(io.in[1], 31, 0) @[Operations.scala 140:49]
    node _T_17 = or(_T_15, _T_16) @[Operations.scala 140:41]
    node _T_18 = bits(io.in[0], 31, 0) @[Operations.scala 142:31]
    node _T_19 = bits(io.in[1], 31, 0) @[Operations.scala 142:49]
    node _T_20 = xor(_T_18, _T_19) @[Operations.scala 142:41]
    node _T_21 = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_22 = mux(_T_21, _T, UInt<1>("h00")) @[Mux.scala 80:57]
    node _T_23 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_24 = mux(_T_23, _T_4, _T_22) @[Mux.scala 80:57]
    node _T_25 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_26 = mux(_T_25, _T_8, _T_24) @[Mux.scala 80:57]
    node _T_27 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_28 = mux(_T_27, _T_11, _T_26) @[Mux.scala 80:57]
    node _T_29 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_30 = mux(_T_29, _T_14, _T_28) @[Mux.scala 80:57]
    node _T_31 = eq(UInt<3>("h05"), io.config) @[Mux.scala 80:60]
    node _T_32 = mux(_T_31, _T_17, _T_30) @[Mux.scala 80:57]
    node _T_33 = eq(UInt<3>("h06"), io.config) @[Mux.scala 80:60]
    node _T_34 = mux(_T_33, _T_20, _T_32) @[Mux.scala 80:57]
    io.out <= _T_34 @[ALU.scala 25:10]
    
  module RF_35 : 
    input clock : Clock
    input reset : Reset
    output io : {flip en : UInt<1>, flip config : UInt<0>, flip in : UInt<32>[1], out : UInt<32>[2]}
    
    wire _T : UInt<32>[1] @[RegFile.scala 24:29]
    _T[0] <= UInt<32>("h00") @[RegFile.scala 24:29]
    reg regs : UInt<32>[1], clock with : (reset => (reset, _T)) @[RegFile.scala 24:21]
    when io.en : @[RegFile.scala 34:16]
      regs[0] <= io.in[0] @[RegFile.scala 35:41]
      skip @[RegFile.scala 34:16]
    io.out[0] <= regs[0] @[RegFile.scala 37:42]
    io.out[1] <= regs[0] @[RegFile.scala 37:42]
    
  module DelayPipe_70 : 
    input clock : Clock
    input reset : Reset
    output io : {flip en : UInt<1>, flip config : UInt<3>, flip in : UInt<32>, out : UInt<32>}
    
    wire _T : UInt<32>[5] @[DelayPipe.scala 22:29]
    _T[0] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[1] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[2] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[3] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[4] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    reg regs : UInt<32>[5], clock with : (reset => (reset, _T)) @[DelayPipe.scala 22:21]
    reg wptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 23:21]
    reg rptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 24:21]
    node _T_1 = lt(wptr, UInt<3>("h04")) @[DelayPipe.scala 26:23]
    node _T_2 = and(io.en, _T_1) @[DelayPipe.scala 26:14]
    when _T_2 : @[DelayPipe.scala 26:37]
      node _T_3 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 27:17]
      node _T_4 = tail(_T_3, 1) @[DelayPipe.scala 27:17]
      wptr <= _T_4 @[DelayPipe.scala 27:10]
      skip @[DelayPipe.scala 26:37]
    else : @[DelayPipe.scala 28:14]
      wptr <= UInt<1>("h00") @[DelayPipe.scala 29:10]
      skip @[DelayPipe.scala 28:14]
    node _T_5 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 32:12]
    node _T_6 = tail(_T_5, 1) @[DelayPipe.scala 32:12]
    node _T_7 = geq(_T_6, io.config) @[DelayPipe.scala 32:17]
    when _T_7 : @[DelayPipe.scala 32:30]
      node _T_8 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 33:18]
      node _T_9 = tail(_T_8, 1) @[DelayPipe.scala 33:18]
      node _T_10 = sub(_T_9, io.config) @[DelayPipe.scala 33:24]
      node _T_11 = tail(_T_10, 1) @[DelayPipe.scala 33:24]
      rptr <= _T_11 @[DelayPipe.scala 33:10]
      skip @[DelayPipe.scala 32:30]
    else : @[DelayPipe.scala 34:14]
      node _T_12 = add(UInt<3>("h06"), wptr) @[DelayPipe.scala 35:30]
      node _T_13 = tail(_T_12, 1) @[DelayPipe.scala 35:30]
      node _T_14 = sub(_T_13, io.config) @[DelayPipe.scala 35:37]
      node _T_15 = tail(_T_14, 1) @[DelayPipe.scala 35:37]
      rptr <= _T_15 @[DelayPipe.scala 35:10]
      skip @[DelayPipe.scala 34:14]
    node _T_16 = gt(io.config, UInt<1>("h00")) @[DelayPipe.scala 39:28]
    node _T_17 = and(io.en, _T_16) @[DelayPipe.scala 39:14]
    when _T_17 : @[DelayPipe.scala 39:35]
      regs[wptr] <= io.in @[DelayPipe.scala 40:16]
      skip @[DelayPipe.scala 39:35]
    reg cnt : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 43:20]
    node _T_18 = eq(io.en, UInt<1>("h00")) @[DelayPipe.scala 44:8]
    when _T_18 : @[DelayPipe.scala 44:15]
      cnt <= UInt<1>("h00") @[DelayPipe.scala 45:9]
      skip @[DelayPipe.scala 44:15]
    else : @[DelayPipe.scala 46:30]
      node _T_19 = lt(cnt, io.config) @[DelayPipe.scala 46:18]
      when _T_19 : @[DelayPipe.scala 46:30]
        node _T_20 = add(cnt, UInt<1>("h01")) @[DelayPipe.scala 47:16]
        node _T_21 = tail(_T_20, 1) @[DelayPipe.scala 47:16]
        cnt <= _T_21 @[DelayPipe.scala 47:9]
        skip @[DelayPipe.scala 46:30]
    node _T_22 = eq(UInt<1>("h00"), io.config) @[DelayPipe.scala 50:22]
    node _T_23 = and(io.en, _T_22) @[DelayPipe.scala 50:14]
    when _T_23 : @[DelayPipe.scala 50:37]
      io.out <= io.in @[DelayPipe.scala 51:12]
      skip @[DelayPipe.scala 50:37]
    else : @[DelayPipe.scala 52:43]
      node _T_24 = eq(cnt, io.config) @[DelayPipe.scala 52:28]
      node _T_25 = and(io.en, _T_24) @[DelayPipe.scala 52:20]
      when _T_25 : @[DelayPipe.scala 52:43]
        io.out <= regs[rptr] @[DelayPipe.scala 53:12]
        skip @[DelayPipe.scala 52:43]
      else : @[DelayPipe.scala 54:14]
        io.out <= UInt<1>("h00") @[DelayPipe.scala 55:12]
        skip @[DelayPipe.scala 54:14]
    
  module DelayPipe_71 : 
    input clock : Clock
    input reset : Reset
    output io : {flip en : UInt<1>, flip config : UInt<3>, flip in : UInt<32>, out : UInt<32>}
    
    wire _T : UInt<32>[5] @[DelayPipe.scala 22:29]
    _T[0] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[1] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[2] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[3] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[4] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    reg regs : UInt<32>[5], clock with : (reset => (reset, _T)) @[DelayPipe.scala 22:21]
    reg wptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 23:21]
    reg rptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 24:21]
    node _T_1 = lt(wptr, UInt<3>("h04")) @[DelayPipe.scala 26:23]
    node _T_2 = and(io.en, _T_1) @[DelayPipe.scala 26:14]
    when _T_2 : @[DelayPipe.scala 26:37]
      node _T_3 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 27:17]
      node _T_4 = tail(_T_3, 1) @[DelayPipe.scala 27:17]
      wptr <= _T_4 @[DelayPipe.scala 27:10]
      skip @[DelayPipe.scala 26:37]
    else : @[DelayPipe.scala 28:14]
      wptr <= UInt<1>("h00") @[DelayPipe.scala 29:10]
      skip @[DelayPipe.scala 28:14]
    node _T_5 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 32:12]
    node _T_6 = tail(_T_5, 1) @[DelayPipe.scala 32:12]
    node _T_7 = geq(_T_6, io.config) @[DelayPipe.scala 32:17]
    when _T_7 : @[DelayPipe.scala 32:30]
      node _T_8 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 33:18]
      node _T_9 = tail(_T_8, 1) @[DelayPipe.scala 33:18]
      node _T_10 = sub(_T_9, io.config) @[DelayPipe.scala 33:24]
      node _T_11 = tail(_T_10, 1) @[DelayPipe.scala 33:24]
      rptr <= _T_11 @[DelayPipe.scala 33:10]
      skip @[DelayPipe.scala 32:30]
    else : @[DelayPipe.scala 34:14]
      node _T_12 = add(UInt<3>("h06"), wptr) @[DelayPipe.scala 35:30]
      node _T_13 = tail(_T_12, 1) @[DelayPipe.scala 35:30]
      node _T_14 = sub(_T_13, io.config) @[DelayPipe.scala 35:37]
      node _T_15 = tail(_T_14, 1) @[DelayPipe.scala 35:37]
      rptr <= _T_15 @[DelayPipe.scala 35:10]
      skip @[DelayPipe.scala 34:14]
    node _T_16 = gt(io.config, UInt<1>("h00")) @[DelayPipe.scala 39:28]
    node _T_17 = and(io.en, _T_16) @[DelayPipe.scala 39:14]
    when _T_17 : @[DelayPipe.scala 39:35]
      regs[wptr] <= io.in @[DelayPipe.scala 40:16]
      skip @[DelayPipe.scala 39:35]
    reg cnt : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 43:20]
    node _T_18 = eq(io.en, UInt<1>("h00")) @[DelayPipe.scala 44:8]
    when _T_18 : @[DelayPipe.scala 44:15]
      cnt <= UInt<1>("h00") @[DelayPipe.scala 45:9]
      skip @[DelayPipe.scala 44:15]
    else : @[DelayPipe.scala 46:30]
      node _T_19 = lt(cnt, io.config) @[DelayPipe.scala 46:18]
      when _T_19 : @[DelayPipe.scala 46:30]
        node _T_20 = add(cnt, UInt<1>("h01")) @[DelayPipe.scala 47:16]
        node _T_21 = tail(_T_20, 1) @[DelayPipe.scala 47:16]
        cnt <= _T_21 @[DelayPipe.scala 47:9]
        skip @[DelayPipe.scala 46:30]
    node _T_22 = eq(UInt<1>("h00"), io.config) @[DelayPipe.scala 50:22]
    node _T_23 = and(io.en, _T_22) @[DelayPipe.scala 50:14]
    when _T_23 : @[DelayPipe.scala 50:37]
      io.out <= io.in @[DelayPipe.scala 51:12]
      skip @[DelayPipe.scala 50:37]
    else : @[DelayPipe.scala 52:43]
      node _T_24 = eq(cnt, io.config) @[DelayPipe.scala 52:28]
      node _T_25 = and(io.en, _T_24) @[DelayPipe.scala 52:20]
      when _T_25 : @[DelayPipe.scala 52:43]
        io.out <= regs[rptr] @[DelayPipe.scala 53:12]
        skip @[DelayPipe.scala 52:43]
      else : @[DelayPipe.scala 54:14]
        io.out <= UInt<1>("h00") @[DelayPipe.scala 55:12]
        skip @[DelayPipe.scala 54:14]
    
  module Muxn_86 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[6], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    node _T_10 = eq(UInt<3>("h05"), io.config) @[Mux.scala 80:60]
    node _T_11 = mux(_T_10, io.in[5], _T_9) @[Mux.scala 80:57]
    io.out <= _T_11 @[Multiplexer.scala 20:10]
    
  module Muxn_87 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[6], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    node _T_10 = eq(UInt<3>("h05"), io.config) @[Mux.scala 80:60]
    node _T_11 = mux(_T_10, io.in[5], _T_9) @[Mux.scala 80:57]
    io.out <= _T_11 @[Multiplexer.scala 20:10]
    
  module ConfigMem_51 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<1>, flip cfg_data : UInt<32>, out : UInt<48>[1]}
    
    wire _T : UInt<48>[1] @[ConfigMem.scala 27:29]
    _T[0] <= UInt<48>("h00") @[ConfigMem.scala 27:29]
    reg regs : UInt<48>[1], clock with : (reset => (reset, _T)) @[ConfigMem.scala 27:21]
    node _T_1 = eq(io.cfg_addr, UInt<1>("h00")) @[ConfigMem.scala 39:38]
    node _T_2 = and(io.cfg_en, _T_1) @[ConfigMem.scala 39:22]
    when _T_2 : @[ConfigMem.scala 39:47]
      node _T_3 = bits(regs[0], 47, 32) @[ConfigMem.scala 41:33]
      node _T_4 = cat(_T_3, io.cfg_data) @[Cat.scala 29:58]
      regs[0] <= _T_4 @[ConfigMem.scala 41:19]
      skip @[ConfigMem.scala 39:47]
    node _T_5 = eq(io.cfg_addr, UInt<1>("h01")) @[ConfigMem.scala 39:38]
    node _T_6 = and(io.cfg_en, _T_5) @[ConfigMem.scala 39:22]
    when _T_6 : @[ConfigMem.scala 39:47]
      node _T_7 = bits(regs[0], 31, 0) @[ConfigMem.scala 43:46]
      node _T_8 = cat(io.cfg_data, _T_7) @[Cat.scala 29:58]
      regs[0] <= _T_8 @[ConfigMem.scala 43:19]
      skip @[ConfigMem.scala 39:47]
    io.out[0] <= regs[0] @[ConfigMem.scala 52:45]
    
  module GPE_35 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<12>, flip cfg_data : UInt<32>, flip en : UInt<1>, flip in : UInt<32>[8], out : UInt<32>[1]}
    
    inst alu of ALU_35 @[PE.scala 50:19]
    alu.clock <= clock
    alu.reset <= reset
    inst rf of RF_35 @[PE.scala 51:18]
    rf.clock <= clock
    rf.reset <= reset
    inst DelayPipe of DelayPipe_70 @[PE.scala 52:54]
    DelayPipe.clock <= clock
    DelayPipe.reset <= reset
    inst DelayPipe_1 of DelayPipe_71 @[PE.scala 52:54]
    DelayPipe_1.clock <= clock
    DelayPipe_1.reset <= reset
    wire const : UInt<32> @[PE.scala 54:19]
    inst Muxn of Muxn_86 @[PE.scala 55:49]
    Muxn.clock <= clock
    Muxn.reset <= reset
    inst Muxn_1 of Muxn_87 @[PE.scala 55:49]
    Muxn_1.clock <= clock
    Muxn_1.reset <= reset
    Muxn.io.in[0] <= io.in[0] @[PE.scala 62:12]
    Muxn.io.in[1] <= io.in[1] @[PE.scala 62:12]
    Muxn.io.in[2] <= io.in[2] @[PE.scala 62:12]
    Muxn.io.in[3] <= io.in[3] @[PE.scala 62:12]
    Muxn.io.in[4] <= const @[PE.scala 64:12]
    Muxn.io.in[5] <= rf.io.out[1] @[PE.scala 66:12]
    DelayPipe.io.en <= io.en @[PE.scala 69:23]
    DelayPipe.io.in <= Muxn.io.out @[PE.scala 70:23]
    alu.io.in[0] <= DelayPipe.io.out @[PE.scala 71:18]
    Muxn_1.io.in[0] <= io.in[4] @[PE.scala 62:12]
    Muxn_1.io.in[1] <= io.in[5] @[PE.scala 62:12]
    Muxn_1.io.in[2] <= io.in[6] @[PE.scala 62:12]
    Muxn_1.io.in[3] <= io.in[7] @[PE.scala 62:12]
    Muxn_1.io.in[4] <= const @[PE.scala 64:12]
    Muxn_1.io.in[5] <= rf.io.out[1] @[PE.scala 66:12]
    DelayPipe_1.io.en <= io.en @[PE.scala 69:23]
    DelayPipe_1.io.in <= Muxn_1.io.out @[PE.scala 70:23]
    alu.io.in[1] <= DelayPipe_1.io.out @[PE.scala 71:18]
    rf.io.en <= io.en @[PE.scala 75:12]
    rf.io.in[0] <= alu.io.out @[PE.scala 76:15]
    io.out[0] <= rf.io.out[0] @[PE.scala 77:13]
    inst cfg of ConfigMem_51 @[PE.scala 89:19]
    cfg.clock <= clock
    cfg.reset <= reset
    node _T = bits(io.cfg_addr, 11, 2) @[PE.scala 90:63]
    node _T_1 = eq(UInt<7>("h067"), _T) @[PE.scala 90:48]
    node _T_2 = and(io.cfg_en, _T_1) @[PE.scala 90:30]
    cfg.io.cfg_en <= _T_2 @[PE.scala 90:17]
    node _T_3 = bits(io.cfg_addr, 1, 0) @[PE.scala 91:33]
    cfg.io.cfg_addr <= _T_3 @[PE.scala 91:19]
    cfg.io.cfg_data <= io.cfg_data @[PE.scala 92:19]
    wire cfgOut : UInt<48> @[PE.scala 96:20]
    cfgOut <= cfg.io.out[0] @[PE.scala 97:10]
    node _T_4 = bits(cfgOut, 31, 0) @[PE.scala 98:18]
    const <= _T_4 @[PE.scala 98:9]
    node _T_5 = bits(cfgOut, 35, 32) @[PE.scala 100:28]
    alu.io.config <= _T_5 @[PE.scala 100:19]
    rf.io.config is invalid @[PE.scala 107:18]
    node _T_6 = bits(cfgOut, 38, 36) @[PE.scala 113:38]
    DelayPipe.io.config <= _T_6 @[PE.scala 113:29]
    node _T_7 = bits(cfgOut, 41, 39) @[PE.scala 113:38]
    DelayPipe_1.io.config <= _T_7 @[PE.scala 113:29]
    node _T_8 = bits(cfgOut, 44, 42) @[PE.scala 121:32]
    Muxn.io.config <= _T_8 @[PE.scala 121:23]
    node _T_9 = bits(cfgOut, 47, 45) @[PE.scala 121:32]
    Muxn_1.io.config <= _T_9 @[PE.scala 121:23]
    
  module ALU_36 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<4>, flip in : UInt<32>[2], out : UInt<32>}
    
    node _T = bits(io.in[0], 31, 0) @[Operations.scala 122:31]
    node _T_1 = bits(io.in[0], 31, 0) @[Operations.scala 124:31]
    node _T_2 = bits(io.in[1], 31, 0) @[Operations.scala 124:49]
    node _T_3 = add(_T_1, _T_2) @[Operations.scala 124:41]
    node _T_4 = tail(_T_3, 1) @[Operations.scala 124:41]
    node _T_5 = bits(io.in[0], 31, 0) @[Operations.scala 126:31]
    node _T_6 = bits(io.in[1], 31, 0) @[Operations.scala 126:49]
    node _T_7 = sub(_T_5, _T_6) @[Operations.scala 126:41]
    node _T_8 = tail(_T_7, 1) @[Operations.scala 126:41]
    node _T_9 = bits(io.in[0], 31, 0) @[Operations.scala 128:31]
    node _T_10 = bits(io.in[1], 31, 0) @[Operations.scala 128:49]
    node _T_11 = mul(_T_9, _T_10) @[Operations.scala 128:41]
    node _T_12 = bits(io.in[0], 31, 0) @[Operations.scala 138:31]
    node _T_13 = bits(io.in[1], 31, 0) @[Operations.scala 138:49]
    node _T_14 = and(_T_12, _T_13) @[Operations.scala 138:41]
    node _T_15 = bits(io.in[0], 31, 0) @[Operations.scala 140:31]
    node _T_16 = bits(io.in[1], 31, 0) @[Operations.scala 140:49]
    node _T_17 = or(_T_15, _T_16) @[Operations.scala 140:41]
    node _T_18 = bits(io.in[0], 31, 0) @[Operations.scala 142:31]
    node _T_19 = bits(io.in[1], 31, 0) @[Operations.scala 142:49]
    node _T_20 = xor(_T_18, _T_19) @[Operations.scala 142:41]
    node _T_21 = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_22 = mux(_T_21, _T, UInt<1>("h00")) @[Mux.scala 80:57]
    node _T_23 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_24 = mux(_T_23, _T_4, _T_22) @[Mux.scala 80:57]
    node _T_25 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_26 = mux(_T_25, _T_8, _T_24) @[Mux.scala 80:57]
    node _T_27 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_28 = mux(_T_27, _T_11, _T_26) @[Mux.scala 80:57]
    node _T_29 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_30 = mux(_T_29, _T_14, _T_28) @[Mux.scala 80:57]
    node _T_31 = eq(UInt<3>("h05"), io.config) @[Mux.scala 80:60]
    node _T_32 = mux(_T_31, _T_17, _T_30) @[Mux.scala 80:57]
    node _T_33 = eq(UInt<3>("h06"), io.config) @[Mux.scala 80:60]
    node _T_34 = mux(_T_33, _T_20, _T_32) @[Mux.scala 80:57]
    io.out <= _T_34 @[ALU.scala 25:10]
    
  module RF_36 : 
    input clock : Clock
    input reset : Reset
    output io : {flip en : UInt<1>, flip config : UInt<0>, flip in : UInt<32>[1], out : UInt<32>[2]}
    
    wire _T : UInt<32>[1] @[RegFile.scala 24:29]
    _T[0] <= UInt<32>("h00") @[RegFile.scala 24:29]
    reg regs : UInt<32>[1], clock with : (reset => (reset, _T)) @[RegFile.scala 24:21]
    when io.en : @[RegFile.scala 34:16]
      regs[0] <= io.in[0] @[RegFile.scala 35:41]
      skip @[RegFile.scala 34:16]
    io.out[0] <= regs[0] @[RegFile.scala 37:42]
    io.out[1] <= regs[0] @[RegFile.scala 37:42]
    
  module DelayPipe_72 : 
    input clock : Clock
    input reset : Reset
    output io : {flip en : UInt<1>, flip config : UInt<3>, flip in : UInt<32>, out : UInt<32>}
    
    wire _T : UInt<32>[5] @[DelayPipe.scala 22:29]
    _T[0] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[1] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[2] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[3] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[4] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    reg regs : UInt<32>[5], clock with : (reset => (reset, _T)) @[DelayPipe.scala 22:21]
    reg wptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 23:21]
    reg rptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 24:21]
    node _T_1 = lt(wptr, UInt<3>("h04")) @[DelayPipe.scala 26:23]
    node _T_2 = and(io.en, _T_1) @[DelayPipe.scala 26:14]
    when _T_2 : @[DelayPipe.scala 26:37]
      node _T_3 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 27:17]
      node _T_4 = tail(_T_3, 1) @[DelayPipe.scala 27:17]
      wptr <= _T_4 @[DelayPipe.scala 27:10]
      skip @[DelayPipe.scala 26:37]
    else : @[DelayPipe.scala 28:14]
      wptr <= UInt<1>("h00") @[DelayPipe.scala 29:10]
      skip @[DelayPipe.scala 28:14]
    node _T_5 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 32:12]
    node _T_6 = tail(_T_5, 1) @[DelayPipe.scala 32:12]
    node _T_7 = geq(_T_6, io.config) @[DelayPipe.scala 32:17]
    when _T_7 : @[DelayPipe.scala 32:30]
      node _T_8 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 33:18]
      node _T_9 = tail(_T_8, 1) @[DelayPipe.scala 33:18]
      node _T_10 = sub(_T_9, io.config) @[DelayPipe.scala 33:24]
      node _T_11 = tail(_T_10, 1) @[DelayPipe.scala 33:24]
      rptr <= _T_11 @[DelayPipe.scala 33:10]
      skip @[DelayPipe.scala 32:30]
    else : @[DelayPipe.scala 34:14]
      node _T_12 = add(UInt<3>("h06"), wptr) @[DelayPipe.scala 35:30]
      node _T_13 = tail(_T_12, 1) @[DelayPipe.scala 35:30]
      node _T_14 = sub(_T_13, io.config) @[DelayPipe.scala 35:37]
      node _T_15 = tail(_T_14, 1) @[DelayPipe.scala 35:37]
      rptr <= _T_15 @[DelayPipe.scala 35:10]
      skip @[DelayPipe.scala 34:14]
    node _T_16 = gt(io.config, UInt<1>("h00")) @[DelayPipe.scala 39:28]
    node _T_17 = and(io.en, _T_16) @[DelayPipe.scala 39:14]
    when _T_17 : @[DelayPipe.scala 39:35]
      regs[wptr] <= io.in @[DelayPipe.scala 40:16]
      skip @[DelayPipe.scala 39:35]
    reg cnt : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 43:20]
    node _T_18 = eq(io.en, UInt<1>("h00")) @[DelayPipe.scala 44:8]
    when _T_18 : @[DelayPipe.scala 44:15]
      cnt <= UInt<1>("h00") @[DelayPipe.scala 45:9]
      skip @[DelayPipe.scala 44:15]
    else : @[DelayPipe.scala 46:30]
      node _T_19 = lt(cnt, io.config) @[DelayPipe.scala 46:18]
      when _T_19 : @[DelayPipe.scala 46:30]
        node _T_20 = add(cnt, UInt<1>("h01")) @[DelayPipe.scala 47:16]
        node _T_21 = tail(_T_20, 1) @[DelayPipe.scala 47:16]
        cnt <= _T_21 @[DelayPipe.scala 47:9]
        skip @[DelayPipe.scala 46:30]
    node _T_22 = eq(UInt<1>("h00"), io.config) @[DelayPipe.scala 50:22]
    node _T_23 = and(io.en, _T_22) @[DelayPipe.scala 50:14]
    when _T_23 : @[DelayPipe.scala 50:37]
      io.out <= io.in @[DelayPipe.scala 51:12]
      skip @[DelayPipe.scala 50:37]
    else : @[DelayPipe.scala 52:43]
      node _T_24 = eq(cnt, io.config) @[DelayPipe.scala 52:28]
      node _T_25 = and(io.en, _T_24) @[DelayPipe.scala 52:20]
      when _T_25 : @[DelayPipe.scala 52:43]
        io.out <= regs[rptr] @[DelayPipe.scala 53:12]
        skip @[DelayPipe.scala 52:43]
      else : @[DelayPipe.scala 54:14]
        io.out <= UInt<1>("h00") @[DelayPipe.scala 55:12]
        skip @[DelayPipe.scala 54:14]
    
  module DelayPipe_73 : 
    input clock : Clock
    input reset : Reset
    output io : {flip en : UInt<1>, flip config : UInt<3>, flip in : UInt<32>, out : UInt<32>}
    
    wire _T : UInt<32>[5] @[DelayPipe.scala 22:29]
    _T[0] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[1] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[2] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[3] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[4] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    reg regs : UInt<32>[5], clock with : (reset => (reset, _T)) @[DelayPipe.scala 22:21]
    reg wptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 23:21]
    reg rptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 24:21]
    node _T_1 = lt(wptr, UInt<3>("h04")) @[DelayPipe.scala 26:23]
    node _T_2 = and(io.en, _T_1) @[DelayPipe.scala 26:14]
    when _T_2 : @[DelayPipe.scala 26:37]
      node _T_3 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 27:17]
      node _T_4 = tail(_T_3, 1) @[DelayPipe.scala 27:17]
      wptr <= _T_4 @[DelayPipe.scala 27:10]
      skip @[DelayPipe.scala 26:37]
    else : @[DelayPipe.scala 28:14]
      wptr <= UInt<1>("h00") @[DelayPipe.scala 29:10]
      skip @[DelayPipe.scala 28:14]
    node _T_5 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 32:12]
    node _T_6 = tail(_T_5, 1) @[DelayPipe.scala 32:12]
    node _T_7 = geq(_T_6, io.config) @[DelayPipe.scala 32:17]
    when _T_7 : @[DelayPipe.scala 32:30]
      node _T_8 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 33:18]
      node _T_9 = tail(_T_8, 1) @[DelayPipe.scala 33:18]
      node _T_10 = sub(_T_9, io.config) @[DelayPipe.scala 33:24]
      node _T_11 = tail(_T_10, 1) @[DelayPipe.scala 33:24]
      rptr <= _T_11 @[DelayPipe.scala 33:10]
      skip @[DelayPipe.scala 32:30]
    else : @[DelayPipe.scala 34:14]
      node _T_12 = add(UInt<3>("h06"), wptr) @[DelayPipe.scala 35:30]
      node _T_13 = tail(_T_12, 1) @[DelayPipe.scala 35:30]
      node _T_14 = sub(_T_13, io.config) @[DelayPipe.scala 35:37]
      node _T_15 = tail(_T_14, 1) @[DelayPipe.scala 35:37]
      rptr <= _T_15 @[DelayPipe.scala 35:10]
      skip @[DelayPipe.scala 34:14]
    node _T_16 = gt(io.config, UInt<1>("h00")) @[DelayPipe.scala 39:28]
    node _T_17 = and(io.en, _T_16) @[DelayPipe.scala 39:14]
    when _T_17 : @[DelayPipe.scala 39:35]
      regs[wptr] <= io.in @[DelayPipe.scala 40:16]
      skip @[DelayPipe.scala 39:35]
    reg cnt : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 43:20]
    node _T_18 = eq(io.en, UInt<1>("h00")) @[DelayPipe.scala 44:8]
    when _T_18 : @[DelayPipe.scala 44:15]
      cnt <= UInt<1>("h00") @[DelayPipe.scala 45:9]
      skip @[DelayPipe.scala 44:15]
    else : @[DelayPipe.scala 46:30]
      node _T_19 = lt(cnt, io.config) @[DelayPipe.scala 46:18]
      when _T_19 : @[DelayPipe.scala 46:30]
        node _T_20 = add(cnt, UInt<1>("h01")) @[DelayPipe.scala 47:16]
        node _T_21 = tail(_T_20, 1) @[DelayPipe.scala 47:16]
        cnt <= _T_21 @[DelayPipe.scala 47:9]
        skip @[DelayPipe.scala 46:30]
    node _T_22 = eq(UInt<1>("h00"), io.config) @[DelayPipe.scala 50:22]
    node _T_23 = and(io.en, _T_22) @[DelayPipe.scala 50:14]
    when _T_23 : @[DelayPipe.scala 50:37]
      io.out <= io.in @[DelayPipe.scala 51:12]
      skip @[DelayPipe.scala 50:37]
    else : @[DelayPipe.scala 52:43]
      node _T_24 = eq(cnt, io.config) @[DelayPipe.scala 52:28]
      node _T_25 = and(io.en, _T_24) @[DelayPipe.scala 52:20]
      when _T_25 : @[DelayPipe.scala 52:43]
        io.out <= regs[rptr] @[DelayPipe.scala 53:12]
        skip @[DelayPipe.scala 52:43]
      else : @[DelayPipe.scala 54:14]
        io.out <= UInt<1>("h00") @[DelayPipe.scala 55:12]
        skip @[DelayPipe.scala 54:14]
    
  module Muxn_88 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[6], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    node _T_10 = eq(UInt<3>("h05"), io.config) @[Mux.scala 80:60]
    node _T_11 = mux(_T_10, io.in[5], _T_9) @[Mux.scala 80:57]
    io.out <= _T_11 @[Multiplexer.scala 20:10]
    
  module Muxn_89 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[6], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    node _T_10 = eq(UInt<3>("h05"), io.config) @[Mux.scala 80:60]
    node _T_11 = mux(_T_10, io.in[5], _T_9) @[Mux.scala 80:57]
    io.out <= _T_11 @[Multiplexer.scala 20:10]
    
  module ConfigMem_52 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<1>, flip cfg_data : UInt<32>, out : UInt<48>[1]}
    
    wire _T : UInt<48>[1] @[ConfigMem.scala 27:29]
    _T[0] <= UInt<48>("h00") @[ConfigMem.scala 27:29]
    reg regs : UInt<48>[1], clock with : (reset => (reset, _T)) @[ConfigMem.scala 27:21]
    node _T_1 = eq(io.cfg_addr, UInt<1>("h00")) @[ConfigMem.scala 39:38]
    node _T_2 = and(io.cfg_en, _T_1) @[ConfigMem.scala 39:22]
    when _T_2 : @[ConfigMem.scala 39:47]
      node _T_3 = bits(regs[0], 47, 32) @[ConfigMem.scala 41:33]
      node _T_4 = cat(_T_3, io.cfg_data) @[Cat.scala 29:58]
      regs[0] <= _T_4 @[ConfigMem.scala 41:19]
      skip @[ConfigMem.scala 39:47]
    node _T_5 = eq(io.cfg_addr, UInt<1>("h01")) @[ConfigMem.scala 39:38]
    node _T_6 = and(io.cfg_en, _T_5) @[ConfigMem.scala 39:22]
    when _T_6 : @[ConfigMem.scala 39:47]
      node _T_7 = bits(regs[0], 31, 0) @[ConfigMem.scala 43:46]
      node _T_8 = cat(io.cfg_data, _T_7) @[Cat.scala 29:58]
      regs[0] <= _T_8 @[ConfigMem.scala 43:19]
      skip @[ConfigMem.scala 39:47]
    io.out[0] <= regs[0] @[ConfigMem.scala 52:45]
    
  module GPE_36 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<12>, flip cfg_data : UInt<32>, flip en : UInt<1>, flip in : UInt<32>[8], out : UInt<32>[1]}
    
    inst alu of ALU_36 @[PE.scala 50:19]
    alu.clock <= clock
    alu.reset <= reset
    inst rf of RF_36 @[PE.scala 51:18]
    rf.clock <= clock
    rf.reset <= reset
    inst DelayPipe of DelayPipe_72 @[PE.scala 52:54]
    DelayPipe.clock <= clock
    DelayPipe.reset <= reset
    inst DelayPipe_1 of DelayPipe_73 @[PE.scala 52:54]
    DelayPipe_1.clock <= clock
    DelayPipe_1.reset <= reset
    wire const : UInt<32> @[PE.scala 54:19]
    inst Muxn of Muxn_88 @[PE.scala 55:49]
    Muxn.clock <= clock
    Muxn.reset <= reset
    inst Muxn_1 of Muxn_89 @[PE.scala 55:49]
    Muxn_1.clock <= clock
    Muxn_1.reset <= reset
    Muxn.io.in[0] <= io.in[0] @[PE.scala 62:12]
    Muxn.io.in[1] <= io.in[1] @[PE.scala 62:12]
    Muxn.io.in[2] <= io.in[2] @[PE.scala 62:12]
    Muxn.io.in[3] <= io.in[3] @[PE.scala 62:12]
    Muxn.io.in[4] <= const @[PE.scala 64:12]
    Muxn.io.in[5] <= rf.io.out[1] @[PE.scala 66:12]
    DelayPipe.io.en <= io.en @[PE.scala 69:23]
    DelayPipe.io.in <= Muxn.io.out @[PE.scala 70:23]
    alu.io.in[0] <= DelayPipe.io.out @[PE.scala 71:18]
    Muxn_1.io.in[0] <= io.in[4] @[PE.scala 62:12]
    Muxn_1.io.in[1] <= io.in[5] @[PE.scala 62:12]
    Muxn_1.io.in[2] <= io.in[6] @[PE.scala 62:12]
    Muxn_1.io.in[3] <= io.in[7] @[PE.scala 62:12]
    Muxn_1.io.in[4] <= const @[PE.scala 64:12]
    Muxn_1.io.in[5] <= rf.io.out[1] @[PE.scala 66:12]
    DelayPipe_1.io.en <= io.en @[PE.scala 69:23]
    DelayPipe_1.io.in <= Muxn_1.io.out @[PE.scala 70:23]
    alu.io.in[1] <= DelayPipe_1.io.out @[PE.scala 71:18]
    rf.io.en <= io.en @[PE.scala 75:12]
    rf.io.in[0] <= alu.io.out @[PE.scala 76:15]
    io.out[0] <= rf.io.out[0] @[PE.scala 77:13]
    inst cfg of ConfigMem_52 @[PE.scala 89:19]
    cfg.clock <= clock
    cfg.reset <= reset
    node _T = bits(io.cfg_addr, 11, 2) @[PE.scala 90:63]
    node _T_1 = eq(UInt<7>("h068"), _T) @[PE.scala 90:48]
    node _T_2 = and(io.cfg_en, _T_1) @[PE.scala 90:30]
    cfg.io.cfg_en <= _T_2 @[PE.scala 90:17]
    node _T_3 = bits(io.cfg_addr, 1, 0) @[PE.scala 91:33]
    cfg.io.cfg_addr <= _T_3 @[PE.scala 91:19]
    cfg.io.cfg_data <= io.cfg_data @[PE.scala 92:19]
    wire cfgOut : UInt<48> @[PE.scala 96:20]
    cfgOut <= cfg.io.out[0] @[PE.scala 97:10]
    node _T_4 = bits(cfgOut, 31, 0) @[PE.scala 98:18]
    const <= _T_4 @[PE.scala 98:9]
    node _T_5 = bits(cfgOut, 35, 32) @[PE.scala 100:28]
    alu.io.config <= _T_5 @[PE.scala 100:19]
    rf.io.config is invalid @[PE.scala 107:18]
    node _T_6 = bits(cfgOut, 38, 36) @[PE.scala 113:38]
    DelayPipe.io.config <= _T_6 @[PE.scala 113:29]
    node _T_7 = bits(cfgOut, 41, 39) @[PE.scala 113:38]
    DelayPipe_1.io.config <= _T_7 @[PE.scala 113:29]
    node _T_8 = bits(cfgOut, 44, 42) @[PE.scala 121:32]
    Muxn.io.config <= _T_8 @[PE.scala 121:23]
    node _T_9 = bits(cfgOut, 47, 45) @[PE.scala 121:32]
    Muxn_1.io.config <= _T_9 @[PE.scala 121:23]
    
  module ALU_37 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<4>, flip in : UInt<32>[2], out : UInt<32>}
    
    node _T = bits(io.in[0], 31, 0) @[Operations.scala 122:31]
    node _T_1 = bits(io.in[0], 31, 0) @[Operations.scala 124:31]
    node _T_2 = bits(io.in[1], 31, 0) @[Operations.scala 124:49]
    node _T_3 = add(_T_1, _T_2) @[Operations.scala 124:41]
    node _T_4 = tail(_T_3, 1) @[Operations.scala 124:41]
    node _T_5 = bits(io.in[0], 31, 0) @[Operations.scala 126:31]
    node _T_6 = bits(io.in[1], 31, 0) @[Operations.scala 126:49]
    node _T_7 = sub(_T_5, _T_6) @[Operations.scala 126:41]
    node _T_8 = tail(_T_7, 1) @[Operations.scala 126:41]
    node _T_9 = bits(io.in[0], 31, 0) @[Operations.scala 128:31]
    node _T_10 = bits(io.in[1], 31, 0) @[Operations.scala 128:49]
    node _T_11 = mul(_T_9, _T_10) @[Operations.scala 128:41]
    node _T_12 = bits(io.in[0], 31, 0) @[Operations.scala 138:31]
    node _T_13 = bits(io.in[1], 31, 0) @[Operations.scala 138:49]
    node _T_14 = and(_T_12, _T_13) @[Operations.scala 138:41]
    node _T_15 = bits(io.in[0], 31, 0) @[Operations.scala 140:31]
    node _T_16 = bits(io.in[1], 31, 0) @[Operations.scala 140:49]
    node _T_17 = or(_T_15, _T_16) @[Operations.scala 140:41]
    node _T_18 = bits(io.in[0], 31, 0) @[Operations.scala 142:31]
    node _T_19 = bits(io.in[1], 31, 0) @[Operations.scala 142:49]
    node _T_20 = xor(_T_18, _T_19) @[Operations.scala 142:41]
    node _T_21 = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_22 = mux(_T_21, _T, UInt<1>("h00")) @[Mux.scala 80:57]
    node _T_23 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_24 = mux(_T_23, _T_4, _T_22) @[Mux.scala 80:57]
    node _T_25 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_26 = mux(_T_25, _T_8, _T_24) @[Mux.scala 80:57]
    node _T_27 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_28 = mux(_T_27, _T_11, _T_26) @[Mux.scala 80:57]
    node _T_29 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_30 = mux(_T_29, _T_14, _T_28) @[Mux.scala 80:57]
    node _T_31 = eq(UInt<3>("h05"), io.config) @[Mux.scala 80:60]
    node _T_32 = mux(_T_31, _T_17, _T_30) @[Mux.scala 80:57]
    node _T_33 = eq(UInt<3>("h06"), io.config) @[Mux.scala 80:60]
    node _T_34 = mux(_T_33, _T_20, _T_32) @[Mux.scala 80:57]
    io.out <= _T_34 @[ALU.scala 25:10]
    
  module RF_37 : 
    input clock : Clock
    input reset : Reset
    output io : {flip en : UInt<1>, flip config : UInt<0>, flip in : UInt<32>[1], out : UInt<32>[2]}
    
    wire _T : UInt<32>[1] @[RegFile.scala 24:29]
    _T[0] <= UInt<32>("h00") @[RegFile.scala 24:29]
    reg regs : UInt<32>[1], clock with : (reset => (reset, _T)) @[RegFile.scala 24:21]
    when io.en : @[RegFile.scala 34:16]
      regs[0] <= io.in[0] @[RegFile.scala 35:41]
      skip @[RegFile.scala 34:16]
    io.out[0] <= regs[0] @[RegFile.scala 37:42]
    io.out[1] <= regs[0] @[RegFile.scala 37:42]
    
  module DelayPipe_74 : 
    input clock : Clock
    input reset : Reset
    output io : {flip en : UInt<1>, flip config : UInt<3>, flip in : UInt<32>, out : UInt<32>}
    
    wire _T : UInt<32>[5] @[DelayPipe.scala 22:29]
    _T[0] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[1] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[2] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[3] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[4] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    reg regs : UInt<32>[5], clock with : (reset => (reset, _T)) @[DelayPipe.scala 22:21]
    reg wptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 23:21]
    reg rptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 24:21]
    node _T_1 = lt(wptr, UInt<3>("h04")) @[DelayPipe.scala 26:23]
    node _T_2 = and(io.en, _T_1) @[DelayPipe.scala 26:14]
    when _T_2 : @[DelayPipe.scala 26:37]
      node _T_3 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 27:17]
      node _T_4 = tail(_T_3, 1) @[DelayPipe.scala 27:17]
      wptr <= _T_4 @[DelayPipe.scala 27:10]
      skip @[DelayPipe.scala 26:37]
    else : @[DelayPipe.scala 28:14]
      wptr <= UInt<1>("h00") @[DelayPipe.scala 29:10]
      skip @[DelayPipe.scala 28:14]
    node _T_5 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 32:12]
    node _T_6 = tail(_T_5, 1) @[DelayPipe.scala 32:12]
    node _T_7 = geq(_T_6, io.config) @[DelayPipe.scala 32:17]
    when _T_7 : @[DelayPipe.scala 32:30]
      node _T_8 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 33:18]
      node _T_9 = tail(_T_8, 1) @[DelayPipe.scala 33:18]
      node _T_10 = sub(_T_9, io.config) @[DelayPipe.scala 33:24]
      node _T_11 = tail(_T_10, 1) @[DelayPipe.scala 33:24]
      rptr <= _T_11 @[DelayPipe.scala 33:10]
      skip @[DelayPipe.scala 32:30]
    else : @[DelayPipe.scala 34:14]
      node _T_12 = add(UInt<3>("h06"), wptr) @[DelayPipe.scala 35:30]
      node _T_13 = tail(_T_12, 1) @[DelayPipe.scala 35:30]
      node _T_14 = sub(_T_13, io.config) @[DelayPipe.scala 35:37]
      node _T_15 = tail(_T_14, 1) @[DelayPipe.scala 35:37]
      rptr <= _T_15 @[DelayPipe.scala 35:10]
      skip @[DelayPipe.scala 34:14]
    node _T_16 = gt(io.config, UInt<1>("h00")) @[DelayPipe.scala 39:28]
    node _T_17 = and(io.en, _T_16) @[DelayPipe.scala 39:14]
    when _T_17 : @[DelayPipe.scala 39:35]
      regs[wptr] <= io.in @[DelayPipe.scala 40:16]
      skip @[DelayPipe.scala 39:35]
    reg cnt : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 43:20]
    node _T_18 = eq(io.en, UInt<1>("h00")) @[DelayPipe.scala 44:8]
    when _T_18 : @[DelayPipe.scala 44:15]
      cnt <= UInt<1>("h00") @[DelayPipe.scala 45:9]
      skip @[DelayPipe.scala 44:15]
    else : @[DelayPipe.scala 46:30]
      node _T_19 = lt(cnt, io.config) @[DelayPipe.scala 46:18]
      when _T_19 : @[DelayPipe.scala 46:30]
        node _T_20 = add(cnt, UInt<1>("h01")) @[DelayPipe.scala 47:16]
        node _T_21 = tail(_T_20, 1) @[DelayPipe.scala 47:16]
        cnt <= _T_21 @[DelayPipe.scala 47:9]
        skip @[DelayPipe.scala 46:30]
    node _T_22 = eq(UInt<1>("h00"), io.config) @[DelayPipe.scala 50:22]
    node _T_23 = and(io.en, _T_22) @[DelayPipe.scala 50:14]
    when _T_23 : @[DelayPipe.scala 50:37]
      io.out <= io.in @[DelayPipe.scala 51:12]
      skip @[DelayPipe.scala 50:37]
    else : @[DelayPipe.scala 52:43]
      node _T_24 = eq(cnt, io.config) @[DelayPipe.scala 52:28]
      node _T_25 = and(io.en, _T_24) @[DelayPipe.scala 52:20]
      when _T_25 : @[DelayPipe.scala 52:43]
        io.out <= regs[rptr] @[DelayPipe.scala 53:12]
        skip @[DelayPipe.scala 52:43]
      else : @[DelayPipe.scala 54:14]
        io.out <= UInt<1>("h00") @[DelayPipe.scala 55:12]
        skip @[DelayPipe.scala 54:14]
    
  module DelayPipe_75 : 
    input clock : Clock
    input reset : Reset
    output io : {flip en : UInt<1>, flip config : UInt<3>, flip in : UInt<32>, out : UInt<32>}
    
    wire _T : UInt<32>[5] @[DelayPipe.scala 22:29]
    _T[0] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[1] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[2] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[3] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[4] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    reg regs : UInt<32>[5], clock with : (reset => (reset, _T)) @[DelayPipe.scala 22:21]
    reg wptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 23:21]
    reg rptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 24:21]
    node _T_1 = lt(wptr, UInt<3>("h04")) @[DelayPipe.scala 26:23]
    node _T_2 = and(io.en, _T_1) @[DelayPipe.scala 26:14]
    when _T_2 : @[DelayPipe.scala 26:37]
      node _T_3 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 27:17]
      node _T_4 = tail(_T_3, 1) @[DelayPipe.scala 27:17]
      wptr <= _T_4 @[DelayPipe.scala 27:10]
      skip @[DelayPipe.scala 26:37]
    else : @[DelayPipe.scala 28:14]
      wptr <= UInt<1>("h00") @[DelayPipe.scala 29:10]
      skip @[DelayPipe.scala 28:14]
    node _T_5 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 32:12]
    node _T_6 = tail(_T_5, 1) @[DelayPipe.scala 32:12]
    node _T_7 = geq(_T_6, io.config) @[DelayPipe.scala 32:17]
    when _T_7 : @[DelayPipe.scala 32:30]
      node _T_8 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 33:18]
      node _T_9 = tail(_T_8, 1) @[DelayPipe.scala 33:18]
      node _T_10 = sub(_T_9, io.config) @[DelayPipe.scala 33:24]
      node _T_11 = tail(_T_10, 1) @[DelayPipe.scala 33:24]
      rptr <= _T_11 @[DelayPipe.scala 33:10]
      skip @[DelayPipe.scala 32:30]
    else : @[DelayPipe.scala 34:14]
      node _T_12 = add(UInt<3>("h06"), wptr) @[DelayPipe.scala 35:30]
      node _T_13 = tail(_T_12, 1) @[DelayPipe.scala 35:30]
      node _T_14 = sub(_T_13, io.config) @[DelayPipe.scala 35:37]
      node _T_15 = tail(_T_14, 1) @[DelayPipe.scala 35:37]
      rptr <= _T_15 @[DelayPipe.scala 35:10]
      skip @[DelayPipe.scala 34:14]
    node _T_16 = gt(io.config, UInt<1>("h00")) @[DelayPipe.scala 39:28]
    node _T_17 = and(io.en, _T_16) @[DelayPipe.scala 39:14]
    when _T_17 : @[DelayPipe.scala 39:35]
      regs[wptr] <= io.in @[DelayPipe.scala 40:16]
      skip @[DelayPipe.scala 39:35]
    reg cnt : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 43:20]
    node _T_18 = eq(io.en, UInt<1>("h00")) @[DelayPipe.scala 44:8]
    when _T_18 : @[DelayPipe.scala 44:15]
      cnt <= UInt<1>("h00") @[DelayPipe.scala 45:9]
      skip @[DelayPipe.scala 44:15]
    else : @[DelayPipe.scala 46:30]
      node _T_19 = lt(cnt, io.config) @[DelayPipe.scala 46:18]
      when _T_19 : @[DelayPipe.scala 46:30]
        node _T_20 = add(cnt, UInt<1>("h01")) @[DelayPipe.scala 47:16]
        node _T_21 = tail(_T_20, 1) @[DelayPipe.scala 47:16]
        cnt <= _T_21 @[DelayPipe.scala 47:9]
        skip @[DelayPipe.scala 46:30]
    node _T_22 = eq(UInt<1>("h00"), io.config) @[DelayPipe.scala 50:22]
    node _T_23 = and(io.en, _T_22) @[DelayPipe.scala 50:14]
    when _T_23 : @[DelayPipe.scala 50:37]
      io.out <= io.in @[DelayPipe.scala 51:12]
      skip @[DelayPipe.scala 50:37]
    else : @[DelayPipe.scala 52:43]
      node _T_24 = eq(cnt, io.config) @[DelayPipe.scala 52:28]
      node _T_25 = and(io.en, _T_24) @[DelayPipe.scala 52:20]
      when _T_25 : @[DelayPipe.scala 52:43]
        io.out <= regs[rptr] @[DelayPipe.scala 53:12]
        skip @[DelayPipe.scala 52:43]
      else : @[DelayPipe.scala 54:14]
        io.out <= UInt<1>("h00") @[DelayPipe.scala 55:12]
        skip @[DelayPipe.scala 54:14]
    
  module Muxn_90 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[6], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    node _T_10 = eq(UInt<3>("h05"), io.config) @[Mux.scala 80:60]
    node _T_11 = mux(_T_10, io.in[5], _T_9) @[Mux.scala 80:57]
    io.out <= _T_11 @[Multiplexer.scala 20:10]
    
  module Muxn_91 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[6], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    node _T_10 = eq(UInt<3>("h05"), io.config) @[Mux.scala 80:60]
    node _T_11 = mux(_T_10, io.in[5], _T_9) @[Mux.scala 80:57]
    io.out <= _T_11 @[Multiplexer.scala 20:10]
    
  module ConfigMem_53 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<1>, flip cfg_data : UInt<32>, out : UInt<48>[1]}
    
    wire _T : UInt<48>[1] @[ConfigMem.scala 27:29]
    _T[0] <= UInt<48>("h00") @[ConfigMem.scala 27:29]
    reg regs : UInt<48>[1], clock with : (reset => (reset, _T)) @[ConfigMem.scala 27:21]
    node _T_1 = eq(io.cfg_addr, UInt<1>("h00")) @[ConfigMem.scala 39:38]
    node _T_2 = and(io.cfg_en, _T_1) @[ConfigMem.scala 39:22]
    when _T_2 : @[ConfigMem.scala 39:47]
      node _T_3 = bits(regs[0], 47, 32) @[ConfigMem.scala 41:33]
      node _T_4 = cat(_T_3, io.cfg_data) @[Cat.scala 29:58]
      regs[0] <= _T_4 @[ConfigMem.scala 41:19]
      skip @[ConfigMem.scala 39:47]
    node _T_5 = eq(io.cfg_addr, UInt<1>("h01")) @[ConfigMem.scala 39:38]
    node _T_6 = and(io.cfg_en, _T_5) @[ConfigMem.scala 39:22]
    when _T_6 : @[ConfigMem.scala 39:47]
      node _T_7 = bits(regs[0], 31, 0) @[ConfigMem.scala 43:46]
      node _T_8 = cat(io.cfg_data, _T_7) @[Cat.scala 29:58]
      regs[0] <= _T_8 @[ConfigMem.scala 43:19]
      skip @[ConfigMem.scala 39:47]
    io.out[0] <= regs[0] @[ConfigMem.scala 52:45]
    
  module GPE_37 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<12>, flip cfg_data : UInt<32>, flip en : UInt<1>, flip in : UInt<32>[8], out : UInt<32>[1]}
    
    inst alu of ALU_37 @[PE.scala 50:19]
    alu.clock <= clock
    alu.reset <= reset
    inst rf of RF_37 @[PE.scala 51:18]
    rf.clock <= clock
    rf.reset <= reset
    inst DelayPipe of DelayPipe_74 @[PE.scala 52:54]
    DelayPipe.clock <= clock
    DelayPipe.reset <= reset
    inst DelayPipe_1 of DelayPipe_75 @[PE.scala 52:54]
    DelayPipe_1.clock <= clock
    DelayPipe_1.reset <= reset
    wire const : UInt<32> @[PE.scala 54:19]
    inst Muxn of Muxn_90 @[PE.scala 55:49]
    Muxn.clock <= clock
    Muxn.reset <= reset
    inst Muxn_1 of Muxn_91 @[PE.scala 55:49]
    Muxn_1.clock <= clock
    Muxn_1.reset <= reset
    Muxn.io.in[0] <= io.in[0] @[PE.scala 62:12]
    Muxn.io.in[1] <= io.in[1] @[PE.scala 62:12]
    Muxn.io.in[2] <= io.in[2] @[PE.scala 62:12]
    Muxn.io.in[3] <= io.in[3] @[PE.scala 62:12]
    Muxn.io.in[4] <= const @[PE.scala 64:12]
    Muxn.io.in[5] <= rf.io.out[1] @[PE.scala 66:12]
    DelayPipe.io.en <= io.en @[PE.scala 69:23]
    DelayPipe.io.in <= Muxn.io.out @[PE.scala 70:23]
    alu.io.in[0] <= DelayPipe.io.out @[PE.scala 71:18]
    Muxn_1.io.in[0] <= io.in[4] @[PE.scala 62:12]
    Muxn_1.io.in[1] <= io.in[5] @[PE.scala 62:12]
    Muxn_1.io.in[2] <= io.in[6] @[PE.scala 62:12]
    Muxn_1.io.in[3] <= io.in[7] @[PE.scala 62:12]
    Muxn_1.io.in[4] <= const @[PE.scala 64:12]
    Muxn_1.io.in[5] <= rf.io.out[1] @[PE.scala 66:12]
    DelayPipe_1.io.en <= io.en @[PE.scala 69:23]
    DelayPipe_1.io.in <= Muxn_1.io.out @[PE.scala 70:23]
    alu.io.in[1] <= DelayPipe_1.io.out @[PE.scala 71:18]
    rf.io.en <= io.en @[PE.scala 75:12]
    rf.io.in[0] <= alu.io.out @[PE.scala 76:15]
    io.out[0] <= rf.io.out[0] @[PE.scala 77:13]
    inst cfg of ConfigMem_53 @[PE.scala 89:19]
    cfg.clock <= clock
    cfg.reset <= reset
    node _T = bits(io.cfg_addr, 11, 2) @[PE.scala 90:63]
    node _T_1 = eq(UInt<7>("h069"), _T) @[PE.scala 90:48]
    node _T_2 = and(io.cfg_en, _T_1) @[PE.scala 90:30]
    cfg.io.cfg_en <= _T_2 @[PE.scala 90:17]
    node _T_3 = bits(io.cfg_addr, 1, 0) @[PE.scala 91:33]
    cfg.io.cfg_addr <= _T_3 @[PE.scala 91:19]
    cfg.io.cfg_data <= io.cfg_data @[PE.scala 92:19]
    wire cfgOut : UInt<48> @[PE.scala 96:20]
    cfgOut <= cfg.io.out[0] @[PE.scala 97:10]
    node _T_4 = bits(cfgOut, 31, 0) @[PE.scala 98:18]
    const <= _T_4 @[PE.scala 98:9]
    node _T_5 = bits(cfgOut, 35, 32) @[PE.scala 100:28]
    alu.io.config <= _T_5 @[PE.scala 100:19]
    rf.io.config is invalid @[PE.scala 107:18]
    node _T_6 = bits(cfgOut, 38, 36) @[PE.scala 113:38]
    DelayPipe.io.config <= _T_6 @[PE.scala 113:29]
    node _T_7 = bits(cfgOut, 41, 39) @[PE.scala 113:38]
    DelayPipe_1.io.config <= _T_7 @[PE.scala 113:29]
    node _T_8 = bits(cfgOut, 44, 42) @[PE.scala 121:32]
    Muxn.io.config <= _T_8 @[PE.scala 121:23]
    node _T_9 = bits(cfgOut, 47, 45) @[PE.scala 121:32]
    Muxn_1.io.config <= _T_9 @[PE.scala 121:23]
    
  module ALU_38 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<4>, flip in : UInt<32>[2], out : UInt<32>}
    
    node _T = bits(io.in[0], 31, 0) @[Operations.scala 122:31]
    node _T_1 = bits(io.in[0], 31, 0) @[Operations.scala 124:31]
    node _T_2 = bits(io.in[1], 31, 0) @[Operations.scala 124:49]
    node _T_3 = add(_T_1, _T_2) @[Operations.scala 124:41]
    node _T_4 = tail(_T_3, 1) @[Operations.scala 124:41]
    node _T_5 = bits(io.in[0], 31, 0) @[Operations.scala 126:31]
    node _T_6 = bits(io.in[1], 31, 0) @[Operations.scala 126:49]
    node _T_7 = sub(_T_5, _T_6) @[Operations.scala 126:41]
    node _T_8 = tail(_T_7, 1) @[Operations.scala 126:41]
    node _T_9 = bits(io.in[0], 31, 0) @[Operations.scala 128:31]
    node _T_10 = bits(io.in[1], 31, 0) @[Operations.scala 128:49]
    node _T_11 = mul(_T_9, _T_10) @[Operations.scala 128:41]
    node _T_12 = bits(io.in[0], 31, 0) @[Operations.scala 138:31]
    node _T_13 = bits(io.in[1], 31, 0) @[Operations.scala 138:49]
    node _T_14 = and(_T_12, _T_13) @[Operations.scala 138:41]
    node _T_15 = bits(io.in[0], 31, 0) @[Operations.scala 140:31]
    node _T_16 = bits(io.in[1], 31, 0) @[Operations.scala 140:49]
    node _T_17 = or(_T_15, _T_16) @[Operations.scala 140:41]
    node _T_18 = bits(io.in[0], 31, 0) @[Operations.scala 142:31]
    node _T_19 = bits(io.in[1], 31, 0) @[Operations.scala 142:49]
    node _T_20 = xor(_T_18, _T_19) @[Operations.scala 142:41]
    node _T_21 = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_22 = mux(_T_21, _T, UInt<1>("h00")) @[Mux.scala 80:57]
    node _T_23 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_24 = mux(_T_23, _T_4, _T_22) @[Mux.scala 80:57]
    node _T_25 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_26 = mux(_T_25, _T_8, _T_24) @[Mux.scala 80:57]
    node _T_27 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_28 = mux(_T_27, _T_11, _T_26) @[Mux.scala 80:57]
    node _T_29 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_30 = mux(_T_29, _T_14, _T_28) @[Mux.scala 80:57]
    node _T_31 = eq(UInt<3>("h05"), io.config) @[Mux.scala 80:60]
    node _T_32 = mux(_T_31, _T_17, _T_30) @[Mux.scala 80:57]
    node _T_33 = eq(UInt<3>("h06"), io.config) @[Mux.scala 80:60]
    node _T_34 = mux(_T_33, _T_20, _T_32) @[Mux.scala 80:57]
    io.out <= _T_34 @[ALU.scala 25:10]
    
  module RF_38 : 
    input clock : Clock
    input reset : Reset
    output io : {flip en : UInt<1>, flip config : UInt<0>, flip in : UInt<32>[1], out : UInt<32>[2]}
    
    wire _T : UInt<32>[1] @[RegFile.scala 24:29]
    _T[0] <= UInt<32>("h00") @[RegFile.scala 24:29]
    reg regs : UInt<32>[1], clock with : (reset => (reset, _T)) @[RegFile.scala 24:21]
    when io.en : @[RegFile.scala 34:16]
      regs[0] <= io.in[0] @[RegFile.scala 35:41]
      skip @[RegFile.scala 34:16]
    io.out[0] <= regs[0] @[RegFile.scala 37:42]
    io.out[1] <= regs[0] @[RegFile.scala 37:42]
    
  module DelayPipe_76 : 
    input clock : Clock
    input reset : Reset
    output io : {flip en : UInt<1>, flip config : UInt<3>, flip in : UInt<32>, out : UInt<32>}
    
    wire _T : UInt<32>[5] @[DelayPipe.scala 22:29]
    _T[0] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[1] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[2] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[3] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[4] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    reg regs : UInt<32>[5], clock with : (reset => (reset, _T)) @[DelayPipe.scala 22:21]
    reg wptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 23:21]
    reg rptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 24:21]
    node _T_1 = lt(wptr, UInt<3>("h04")) @[DelayPipe.scala 26:23]
    node _T_2 = and(io.en, _T_1) @[DelayPipe.scala 26:14]
    when _T_2 : @[DelayPipe.scala 26:37]
      node _T_3 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 27:17]
      node _T_4 = tail(_T_3, 1) @[DelayPipe.scala 27:17]
      wptr <= _T_4 @[DelayPipe.scala 27:10]
      skip @[DelayPipe.scala 26:37]
    else : @[DelayPipe.scala 28:14]
      wptr <= UInt<1>("h00") @[DelayPipe.scala 29:10]
      skip @[DelayPipe.scala 28:14]
    node _T_5 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 32:12]
    node _T_6 = tail(_T_5, 1) @[DelayPipe.scala 32:12]
    node _T_7 = geq(_T_6, io.config) @[DelayPipe.scala 32:17]
    when _T_7 : @[DelayPipe.scala 32:30]
      node _T_8 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 33:18]
      node _T_9 = tail(_T_8, 1) @[DelayPipe.scala 33:18]
      node _T_10 = sub(_T_9, io.config) @[DelayPipe.scala 33:24]
      node _T_11 = tail(_T_10, 1) @[DelayPipe.scala 33:24]
      rptr <= _T_11 @[DelayPipe.scala 33:10]
      skip @[DelayPipe.scala 32:30]
    else : @[DelayPipe.scala 34:14]
      node _T_12 = add(UInt<3>("h06"), wptr) @[DelayPipe.scala 35:30]
      node _T_13 = tail(_T_12, 1) @[DelayPipe.scala 35:30]
      node _T_14 = sub(_T_13, io.config) @[DelayPipe.scala 35:37]
      node _T_15 = tail(_T_14, 1) @[DelayPipe.scala 35:37]
      rptr <= _T_15 @[DelayPipe.scala 35:10]
      skip @[DelayPipe.scala 34:14]
    node _T_16 = gt(io.config, UInt<1>("h00")) @[DelayPipe.scala 39:28]
    node _T_17 = and(io.en, _T_16) @[DelayPipe.scala 39:14]
    when _T_17 : @[DelayPipe.scala 39:35]
      regs[wptr] <= io.in @[DelayPipe.scala 40:16]
      skip @[DelayPipe.scala 39:35]
    reg cnt : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 43:20]
    node _T_18 = eq(io.en, UInt<1>("h00")) @[DelayPipe.scala 44:8]
    when _T_18 : @[DelayPipe.scala 44:15]
      cnt <= UInt<1>("h00") @[DelayPipe.scala 45:9]
      skip @[DelayPipe.scala 44:15]
    else : @[DelayPipe.scala 46:30]
      node _T_19 = lt(cnt, io.config) @[DelayPipe.scala 46:18]
      when _T_19 : @[DelayPipe.scala 46:30]
        node _T_20 = add(cnt, UInt<1>("h01")) @[DelayPipe.scala 47:16]
        node _T_21 = tail(_T_20, 1) @[DelayPipe.scala 47:16]
        cnt <= _T_21 @[DelayPipe.scala 47:9]
        skip @[DelayPipe.scala 46:30]
    node _T_22 = eq(UInt<1>("h00"), io.config) @[DelayPipe.scala 50:22]
    node _T_23 = and(io.en, _T_22) @[DelayPipe.scala 50:14]
    when _T_23 : @[DelayPipe.scala 50:37]
      io.out <= io.in @[DelayPipe.scala 51:12]
      skip @[DelayPipe.scala 50:37]
    else : @[DelayPipe.scala 52:43]
      node _T_24 = eq(cnt, io.config) @[DelayPipe.scala 52:28]
      node _T_25 = and(io.en, _T_24) @[DelayPipe.scala 52:20]
      when _T_25 : @[DelayPipe.scala 52:43]
        io.out <= regs[rptr] @[DelayPipe.scala 53:12]
        skip @[DelayPipe.scala 52:43]
      else : @[DelayPipe.scala 54:14]
        io.out <= UInt<1>("h00") @[DelayPipe.scala 55:12]
        skip @[DelayPipe.scala 54:14]
    
  module DelayPipe_77 : 
    input clock : Clock
    input reset : Reset
    output io : {flip en : UInt<1>, flip config : UInt<3>, flip in : UInt<32>, out : UInt<32>}
    
    wire _T : UInt<32>[5] @[DelayPipe.scala 22:29]
    _T[0] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[1] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[2] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[3] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[4] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    reg regs : UInt<32>[5], clock with : (reset => (reset, _T)) @[DelayPipe.scala 22:21]
    reg wptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 23:21]
    reg rptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 24:21]
    node _T_1 = lt(wptr, UInt<3>("h04")) @[DelayPipe.scala 26:23]
    node _T_2 = and(io.en, _T_1) @[DelayPipe.scala 26:14]
    when _T_2 : @[DelayPipe.scala 26:37]
      node _T_3 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 27:17]
      node _T_4 = tail(_T_3, 1) @[DelayPipe.scala 27:17]
      wptr <= _T_4 @[DelayPipe.scala 27:10]
      skip @[DelayPipe.scala 26:37]
    else : @[DelayPipe.scala 28:14]
      wptr <= UInt<1>("h00") @[DelayPipe.scala 29:10]
      skip @[DelayPipe.scala 28:14]
    node _T_5 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 32:12]
    node _T_6 = tail(_T_5, 1) @[DelayPipe.scala 32:12]
    node _T_7 = geq(_T_6, io.config) @[DelayPipe.scala 32:17]
    when _T_7 : @[DelayPipe.scala 32:30]
      node _T_8 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 33:18]
      node _T_9 = tail(_T_8, 1) @[DelayPipe.scala 33:18]
      node _T_10 = sub(_T_9, io.config) @[DelayPipe.scala 33:24]
      node _T_11 = tail(_T_10, 1) @[DelayPipe.scala 33:24]
      rptr <= _T_11 @[DelayPipe.scala 33:10]
      skip @[DelayPipe.scala 32:30]
    else : @[DelayPipe.scala 34:14]
      node _T_12 = add(UInt<3>("h06"), wptr) @[DelayPipe.scala 35:30]
      node _T_13 = tail(_T_12, 1) @[DelayPipe.scala 35:30]
      node _T_14 = sub(_T_13, io.config) @[DelayPipe.scala 35:37]
      node _T_15 = tail(_T_14, 1) @[DelayPipe.scala 35:37]
      rptr <= _T_15 @[DelayPipe.scala 35:10]
      skip @[DelayPipe.scala 34:14]
    node _T_16 = gt(io.config, UInt<1>("h00")) @[DelayPipe.scala 39:28]
    node _T_17 = and(io.en, _T_16) @[DelayPipe.scala 39:14]
    when _T_17 : @[DelayPipe.scala 39:35]
      regs[wptr] <= io.in @[DelayPipe.scala 40:16]
      skip @[DelayPipe.scala 39:35]
    reg cnt : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 43:20]
    node _T_18 = eq(io.en, UInt<1>("h00")) @[DelayPipe.scala 44:8]
    when _T_18 : @[DelayPipe.scala 44:15]
      cnt <= UInt<1>("h00") @[DelayPipe.scala 45:9]
      skip @[DelayPipe.scala 44:15]
    else : @[DelayPipe.scala 46:30]
      node _T_19 = lt(cnt, io.config) @[DelayPipe.scala 46:18]
      when _T_19 : @[DelayPipe.scala 46:30]
        node _T_20 = add(cnt, UInt<1>("h01")) @[DelayPipe.scala 47:16]
        node _T_21 = tail(_T_20, 1) @[DelayPipe.scala 47:16]
        cnt <= _T_21 @[DelayPipe.scala 47:9]
        skip @[DelayPipe.scala 46:30]
    node _T_22 = eq(UInt<1>("h00"), io.config) @[DelayPipe.scala 50:22]
    node _T_23 = and(io.en, _T_22) @[DelayPipe.scala 50:14]
    when _T_23 : @[DelayPipe.scala 50:37]
      io.out <= io.in @[DelayPipe.scala 51:12]
      skip @[DelayPipe.scala 50:37]
    else : @[DelayPipe.scala 52:43]
      node _T_24 = eq(cnt, io.config) @[DelayPipe.scala 52:28]
      node _T_25 = and(io.en, _T_24) @[DelayPipe.scala 52:20]
      when _T_25 : @[DelayPipe.scala 52:43]
        io.out <= regs[rptr] @[DelayPipe.scala 53:12]
        skip @[DelayPipe.scala 52:43]
      else : @[DelayPipe.scala 54:14]
        io.out <= UInt<1>("h00") @[DelayPipe.scala 55:12]
        skip @[DelayPipe.scala 54:14]
    
  module Muxn_92 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[6], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    node _T_10 = eq(UInt<3>("h05"), io.config) @[Mux.scala 80:60]
    node _T_11 = mux(_T_10, io.in[5], _T_9) @[Mux.scala 80:57]
    io.out <= _T_11 @[Multiplexer.scala 20:10]
    
  module Muxn_93 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[6], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    node _T_10 = eq(UInt<3>("h05"), io.config) @[Mux.scala 80:60]
    node _T_11 = mux(_T_10, io.in[5], _T_9) @[Mux.scala 80:57]
    io.out <= _T_11 @[Multiplexer.scala 20:10]
    
  module ConfigMem_54 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<1>, flip cfg_data : UInt<32>, out : UInt<48>[1]}
    
    wire _T : UInt<48>[1] @[ConfigMem.scala 27:29]
    _T[0] <= UInt<48>("h00") @[ConfigMem.scala 27:29]
    reg regs : UInt<48>[1], clock with : (reset => (reset, _T)) @[ConfigMem.scala 27:21]
    node _T_1 = eq(io.cfg_addr, UInt<1>("h00")) @[ConfigMem.scala 39:38]
    node _T_2 = and(io.cfg_en, _T_1) @[ConfigMem.scala 39:22]
    when _T_2 : @[ConfigMem.scala 39:47]
      node _T_3 = bits(regs[0], 47, 32) @[ConfigMem.scala 41:33]
      node _T_4 = cat(_T_3, io.cfg_data) @[Cat.scala 29:58]
      regs[0] <= _T_4 @[ConfigMem.scala 41:19]
      skip @[ConfigMem.scala 39:47]
    node _T_5 = eq(io.cfg_addr, UInt<1>("h01")) @[ConfigMem.scala 39:38]
    node _T_6 = and(io.cfg_en, _T_5) @[ConfigMem.scala 39:22]
    when _T_6 : @[ConfigMem.scala 39:47]
      node _T_7 = bits(regs[0], 31, 0) @[ConfigMem.scala 43:46]
      node _T_8 = cat(io.cfg_data, _T_7) @[Cat.scala 29:58]
      regs[0] <= _T_8 @[ConfigMem.scala 43:19]
      skip @[ConfigMem.scala 39:47]
    io.out[0] <= regs[0] @[ConfigMem.scala 52:45]
    
  module GPE_38 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<12>, flip cfg_data : UInt<32>, flip en : UInt<1>, flip in : UInt<32>[8], out : UInt<32>[1]}
    
    inst alu of ALU_38 @[PE.scala 50:19]
    alu.clock <= clock
    alu.reset <= reset
    inst rf of RF_38 @[PE.scala 51:18]
    rf.clock <= clock
    rf.reset <= reset
    inst DelayPipe of DelayPipe_76 @[PE.scala 52:54]
    DelayPipe.clock <= clock
    DelayPipe.reset <= reset
    inst DelayPipe_1 of DelayPipe_77 @[PE.scala 52:54]
    DelayPipe_1.clock <= clock
    DelayPipe_1.reset <= reset
    wire const : UInt<32> @[PE.scala 54:19]
    inst Muxn of Muxn_92 @[PE.scala 55:49]
    Muxn.clock <= clock
    Muxn.reset <= reset
    inst Muxn_1 of Muxn_93 @[PE.scala 55:49]
    Muxn_1.clock <= clock
    Muxn_1.reset <= reset
    Muxn.io.in[0] <= io.in[0] @[PE.scala 62:12]
    Muxn.io.in[1] <= io.in[1] @[PE.scala 62:12]
    Muxn.io.in[2] <= io.in[2] @[PE.scala 62:12]
    Muxn.io.in[3] <= io.in[3] @[PE.scala 62:12]
    Muxn.io.in[4] <= const @[PE.scala 64:12]
    Muxn.io.in[5] <= rf.io.out[1] @[PE.scala 66:12]
    DelayPipe.io.en <= io.en @[PE.scala 69:23]
    DelayPipe.io.in <= Muxn.io.out @[PE.scala 70:23]
    alu.io.in[0] <= DelayPipe.io.out @[PE.scala 71:18]
    Muxn_1.io.in[0] <= io.in[4] @[PE.scala 62:12]
    Muxn_1.io.in[1] <= io.in[5] @[PE.scala 62:12]
    Muxn_1.io.in[2] <= io.in[6] @[PE.scala 62:12]
    Muxn_1.io.in[3] <= io.in[7] @[PE.scala 62:12]
    Muxn_1.io.in[4] <= const @[PE.scala 64:12]
    Muxn_1.io.in[5] <= rf.io.out[1] @[PE.scala 66:12]
    DelayPipe_1.io.en <= io.en @[PE.scala 69:23]
    DelayPipe_1.io.in <= Muxn_1.io.out @[PE.scala 70:23]
    alu.io.in[1] <= DelayPipe_1.io.out @[PE.scala 71:18]
    rf.io.en <= io.en @[PE.scala 75:12]
    rf.io.in[0] <= alu.io.out @[PE.scala 76:15]
    io.out[0] <= rf.io.out[0] @[PE.scala 77:13]
    inst cfg of ConfigMem_54 @[PE.scala 89:19]
    cfg.clock <= clock
    cfg.reset <= reset
    node _T = bits(io.cfg_addr, 11, 2) @[PE.scala 90:63]
    node _T_1 = eq(UInt<7>("h06a"), _T) @[PE.scala 90:48]
    node _T_2 = and(io.cfg_en, _T_1) @[PE.scala 90:30]
    cfg.io.cfg_en <= _T_2 @[PE.scala 90:17]
    node _T_3 = bits(io.cfg_addr, 1, 0) @[PE.scala 91:33]
    cfg.io.cfg_addr <= _T_3 @[PE.scala 91:19]
    cfg.io.cfg_data <= io.cfg_data @[PE.scala 92:19]
    wire cfgOut : UInt<48> @[PE.scala 96:20]
    cfgOut <= cfg.io.out[0] @[PE.scala 97:10]
    node _T_4 = bits(cfgOut, 31, 0) @[PE.scala 98:18]
    const <= _T_4 @[PE.scala 98:9]
    node _T_5 = bits(cfgOut, 35, 32) @[PE.scala 100:28]
    alu.io.config <= _T_5 @[PE.scala 100:19]
    rf.io.config is invalid @[PE.scala 107:18]
    node _T_6 = bits(cfgOut, 38, 36) @[PE.scala 113:38]
    DelayPipe.io.config <= _T_6 @[PE.scala 113:29]
    node _T_7 = bits(cfgOut, 41, 39) @[PE.scala 113:38]
    DelayPipe_1.io.config <= _T_7 @[PE.scala 113:29]
    node _T_8 = bits(cfgOut, 44, 42) @[PE.scala 121:32]
    Muxn.io.config <= _T_8 @[PE.scala 121:23]
    node _T_9 = bits(cfgOut, 47, 45) @[PE.scala 121:32]
    Muxn_1.io.config <= _T_9 @[PE.scala 121:23]
    
  module ALU_39 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<4>, flip in : UInt<32>[2], out : UInt<32>}
    
    node _T = bits(io.in[0], 31, 0) @[Operations.scala 122:31]
    node _T_1 = bits(io.in[0], 31, 0) @[Operations.scala 124:31]
    node _T_2 = bits(io.in[1], 31, 0) @[Operations.scala 124:49]
    node _T_3 = add(_T_1, _T_2) @[Operations.scala 124:41]
    node _T_4 = tail(_T_3, 1) @[Operations.scala 124:41]
    node _T_5 = bits(io.in[0], 31, 0) @[Operations.scala 126:31]
    node _T_6 = bits(io.in[1], 31, 0) @[Operations.scala 126:49]
    node _T_7 = sub(_T_5, _T_6) @[Operations.scala 126:41]
    node _T_8 = tail(_T_7, 1) @[Operations.scala 126:41]
    node _T_9 = bits(io.in[0], 31, 0) @[Operations.scala 128:31]
    node _T_10 = bits(io.in[1], 31, 0) @[Operations.scala 128:49]
    node _T_11 = mul(_T_9, _T_10) @[Operations.scala 128:41]
    node _T_12 = bits(io.in[0], 31, 0) @[Operations.scala 138:31]
    node _T_13 = bits(io.in[1], 31, 0) @[Operations.scala 138:49]
    node _T_14 = and(_T_12, _T_13) @[Operations.scala 138:41]
    node _T_15 = bits(io.in[0], 31, 0) @[Operations.scala 140:31]
    node _T_16 = bits(io.in[1], 31, 0) @[Operations.scala 140:49]
    node _T_17 = or(_T_15, _T_16) @[Operations.scala 140:41]
    node _T_18 = bits(io.in[0], 31, 0) @[Operations.scala 142:31]
    node _T_19 = bits(io.in[1], 31, 0) @[Operations.scala 142:49]
    node _T_20 = xor(_T_18, _T_19) @[Operations.scala 142:41]
    node _T_21 = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_22 = mux(_T_21, _T, UInt<1>("h00")) @[Mux.scala 80:57]
    node _T_23 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_24 = mux(_T_23, _T_4, _T_22) @[Mux.scala 80:57]
    node _T_25 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_26 = mux(_T_25, _T_8, _T_24) @[Mux.scala 80:57]
    node _T_27 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_28 = mux(_T_27, _T_11, _T_26) @[Mux.scala 80:57]
    node _T_29 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_30 = mux(_T_29, _T_14, _T_28) @[Mux.scala 80:57]
    node _T_31 = eq(UInt<3>("h05"), io.config) @[Mux.scala 80:60]
    node _T_32 = mux(_T_31, _T_17, _T_30) @[Mux.scala 80:57]
    node _T_33 = eq(UInt<3>("h06"), io.config) @[Mux.scala 80:60]
    node _T_34 = mux(_T_33, _T_20, _T_32) @[Mux.scala 80:57]
    io.out <= _T_34 @[ALU.scala 25:10]
    
  module RF_39 : 
    input clock : Clock
    input reset : Reset
    output io : {flip en : UInt<1>, flip config : UInt<0>, flip in : UInt<32>[1], out : UInt<32>[2]}
    
    wire _T : UInt<32>[1] @[RegFile.scala 24:29]
    _T[0] <= UInt<32>("h00") @[RegFile.scala 24:29]
    reg regs : UInt<32>[1], clock with : (reset => (reset, _T)) @[RegFile.scala 24:21]
    when io.en : @[RegFile.scala 34:16]
      regs[0] <= io.in[0] @[RegFile.scala 35:41]
      skip @[RegFile.scala 34:16]
    io.out[0] <= regs[0] @[RegFile.scala 37:42]
    io.out[1] <= regs[0] @[RegFile.scala 37:42]
    
  module DelayPipe_78 : 
    input clock : Clock
    input reset : Reset
    output io : {flip en : UInt<1>, flip config : UInt<3>, flip in : UInt<32>, out : UInt<32>}
    
    wire _T : UInt<32>[5] @[DelayPipe.scala 22:29]
    _T[0] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[1] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[2] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[3] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[4] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    reg regs : UInt<32>[5], clock with : (reset => (reset, _T)) @[DelayPipe.scala 22:21]
    reg wptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 23:21]
    reg rptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 24:21]
    node _T_1 = lt(wptr, UInt<3>("h04")) @[DelayPipe.scala 26:23]
    node _T_2 = and(io.en, _T_1) @[DelayPipe.scala 26:14]
    when _T_2 : @[DelayPipe.scala 26:37]
      node _T_3 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 27:17]
      node _T_4 = tail(_T_3, 1) @[DelayPipe.scala 27:17]
      wptr <= _T_4 @[DelayPipe.scala 27:10]
      skip @[DelayPipe.scala 26:37]
    else : @[DelayPipe.scala 28:14]
      wptr <= UInt<1>("h00") @[DelayPipe.scala 29:10]
      skip @[DelayPipe.scala 28:14]
    node _T_5 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 32:12]
    node _T_6 = tail(_T_5, 1) @[DelayPipe.scala 32:12]
    node _T_7 = geq(_T_6, io.config) @[DelayPipe.scala 32:17]
    when _T_7 : @[DelayPipe.scala 32:30]
      node _T_8 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 33:18]
      node _T_9 = tail(_T_8, 1) @[DelayPipe.scala 33:18]
      node _T_10 = sub(_T_9, io.config) @[DelayPipe.scala 33:24]
      node _T_11 = tail(_T_10, 1) @[DelayPipe.scala 33:24]
      rptr <= _T_11 @[DelayPipe.scala 33:10]
      skip @[DelayPipe.scala 32:30]
    else : @[DelayPipe.scala 34:14]
      node _T_12 = add(UInt<3>("h06"), wptr) @[DelayPipe.scala 35:30]
      node _T_13 = tail(_T_12, 1) @[DelayPipe.scala 35:30]
      node _T_14 = sub(_T_13, io.config) @[DelayPipe.scala 35:37]
      node _T_15 = tail(_T_14, 1) @[DelayPipe.scala 35:37]
      rptr <= _T_15 @[DelayPipe.scala 35:10]
      skip @[DelayPipe.scala 34:14]
    node _T_16 = gt(io.config, UInt<1>("h00")) @[DelayPipe.scala 39:28]
    node _T_17 = and(io.en, _T_16) @[DelayPipe.scala 39:14]
    when _T_17 : @[DelayPipe.scala 39:35]
      regs[wptr] <= io.in @[DelayPipe.scala 40:16]
      skip @[DelayPipe.scala 39:35]
    reg cnt : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 43:20]
    node _T_18 = eq(io.en, UInt<1>("h00")) @[DelayPipe.scala 44:8]
    when _T_18 : @[DelayPipe.scala 44:15]
      cnt <= UInt<1>("h00") @[DelayPipe.scala 45:9]
      skip @[DelayPipe.scala 44:15]
    else : @[DelayPipe.scala 46:30]
      node _T_19 = lt(cnt, io.config) @[DelayPipe.scala 46:18]
      when _T_19 : @[DelayPipe.scala 46:30]
        node _T_20 = add(cnt, UInt<1>("h01")) @[DelayPipe.scala 47:16]
        node _T_21 = tail(_T_20, 1) @[DelayPipe.scala 47:16]
        cnt <= _T_21 @[DelayPipe.scala 47:9]
        skip @[DelayPipe.scala 46:30]
    node _T_22 = eq(UInt<1>("h00"), io.config) @[DelayPipe.scala 50:22]
    node _T_23 = and(io.en, _T_22) @[DelayPipe.scala 50:14]
    when _T_23 : @[DelayPipe.scala 50:37]
      io.out <= io.in @[DelayPipe.scala 51:12]
      skip @[DelayPipe.scala 50:37]
    else : @[DelayPipe.scala 52:43]
      node _T_24 = eq(cnt, io.config) @[DelayPipe.scala 52:28]
      node _T_25 = and(io.en, _T_24) @[DelayPipe.scala 52:20]
      when _T_25 : @[DelayPipe.scala 52:43]
        io.out <= regs[rptr] @[DelayPipe.scala 53:12]
        skip @[DelayPipe.scala 52:43]
      else : @[DelayPipe.scala 54:14]
        io.out <= UInt<1>("h00") @[DelayPipe.scala 55:12]
        skip @[DelayPipe.scala 54:14]
    
  module DelayPipe_79 : 
    input clock : Clock
    input reset : Reset
    output io : {flip en : UInt<1>, flip config : UInt<3>, flip in : UInt<32>, out : UInt<32>}
    
    wire _T : UInt<32>[5] @[DelayPipe.scala 22:29]
    _T[0] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[1] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[2] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[3] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[4] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    reg regs : UInt<32>[5], clock with : (reset => (reset, _T)) @[DelayPipe.scala 22:21]
    reg wptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 23:21]
    reg rptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 24:21]
    node _T_1 = lt(wptr, UInt<3>("h04")) @[DelayPipe.scala 26:23]
    node _T_2 = and(io.en, _T_1) @[DelayPipe.scala 26:14]
    when _T_2 : @[DelayPipe.scala 26:37]
      node _T_3 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 27:17]
      node _T_4 = tail(_T_3, 1) @[DelayPipe.scala 27:17]
      wptr <= _T_4 @[DelayPipe.scala 27:10]
      skip @[DelayPipe.scala 26:37]
    else : @[DelayPipe.scala 28:14]
      wptr <= UInt<1>("h00") @[DelayPipe.scala 29:10]
      skip @[DelayPipe.scala 28:14]
    node _T_5 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 32:12]
    node _T_6 = tail(_T_5, 1) @[DelayPipe.scala 32:12]
    node _T_7 = geq(_T_6, io.config) @[DelayPipe.scala 32:17]
    when _T_7 : @[DelayPipe.scala 32:30]
      node _T_8 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 33:18]
      node _T_9 = tail(_T_8, 1) @[DelayPipe.scala 33:18]
      node _T_10 = sub(_T_9, io.config) @[DelayPipe.scala 33:24]
      node _T_11 = tail(_T_10, 1) @[DelayPipe.scala 33:24]
      rptr <= _T_11 @[DelayPipe.scala 33:10]
      skip @[DelayPipe.scala 32:30]
    else : @[DelayPipe.scala 34:14]
      node _T_12 = add(UInt<3>("h06"), wptr) @[DelayPipe.scala 35:30]
      node _T_13 = tail(_T_12, 1) @[DelayPipe.scala 35:30]
      node _T_14 = sub(_T_13, io.config) @[DelayPipe.scala 35:37]
      node _T_15 = tail(_T_14, 1) @[DelayPipe.scala 35:37]
      rptr <= _T_15 @[DelayPipe.scala 35:10]
      skip @[DelayPipe.scala 34:14]
    node _T_16 = gt(io.config, UInt<1>("h00")) @[DelayPipe.scala 39:28]
    node _T_17 = and(io.en, _T_16) @[DelayPipe.scala 39:14]
    when _T_17 : @[DelayPipe.scala 39:35]
      regs[wptr] <= io.in @[DelayPipe.scala 40:16]
      skip @[DelayPipe.scala 39:35]
    reg cnt : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 43:20]
    node _T_18 = eq(io.en, UInt<1>("h00")) @[DelayPipe.scala 44:8]
    when _T_18 : @[DelayPipe.scala 44:15]
      cnt <= UInt<1>("h00") @[DelayPipe.scala 45:9]
      skip @[DelayPipe.scala 44:15]
    else : @[DelayPipe.scala 46:30]
      node _T_19 = lt(cnt, io.config) @[DelayPipe.scala 46:18]
      when _T_19 : @[DelayPipe.scala 46:30]
        node _T_20 = add(cnt, UInt<1>("h01")) @[DelayPipe.scala 47:16]
        node _T_21 = tail(_T_20, 1) @[DelayPipe.scala 47:16]
        cnt <= _T_21 @[DelayPipe.scala 47:9]
        skip @[DelayPipe.scala 46:30]
    node _T_22 = eq(UInt<1>("h00"), io.config) @[DelayPipe.scala 50:22]
    node _T_23 = and(io.en, _T_22) @[DelayPipe.scala 50:14]
    when _T_23 : @[DelayPipe.scala 50:37]
      io.out <= io.in @[DelayPipe.scala 51:12]
      skip @[DelayPipe.scala 50:37]
    else : @[DelayPipe.scala 52:43]
      node _T_24 = eq(cnt, io.config) @[DelayPipe.scala 52:28]
      node _T_25 = and(io.en, _T_24) @[DelayPipe.scala 52:20]
      when _T_25 : @[DelayPipe.scala 52:43]
        io.out <= regs[rptr] @[DelayPipe.scala 53:12]
        skip @[DelayPipe.scala 52:43]
      else : @[DelayPipe.scala 54:14]
        io.out <= UInt<1>("h00") @[DelayPipe.scala 55:12]
        skip @[DelayPipe.scala 54:14]
    
  module Muxn_94 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[6], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    node _T_10 = eq(UInt<3>("h05"), io.config) @[Mux.scala 80:60]
    node _T_11 = mux(_T_10, io.in[5], _T_9) @[Mux.scala 80:57]
    io.out <= _T_11 @[Multiplexer.scala 20:10]
    
  module Muxn_95 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[6], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    node _T_10 = eq(UInt<3>("h05"), io.config) @[Mux.scala 80:60]
    node _T_11 = mux(_T_10, io.in[5], _T_9) @[Mux.scala 80:57]
    io.out <= _T_11 @[Multiplexer.scala 20:10]
    
  module ConfigMem_55 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<1>, flip cfg_data : UInt<32>, out : UInt<48>[1]}
    
    wire _T : UInt<48>[1] @[ConfigMem.scala 27:29]
    _T[0] <= UInt<48>("h00") @[ConfigMem.scala 27:29]
    reg regs : UInt<48>[1], clock with : (reset => (reset, _T)) @[ConfigMem.scala 27:21]
    node _T_1 = eq(io.cfg_addr, UInt<1>("h00")) @[ConfigMem.scala 39:38]
    node _T_2 = and(io.cfg_en, _T_1) @[ConfigMem.scala 39:22]
    when _T_2 : @[ConfigMem.scala 39:47]
      node _T_3 = bits(regs[0], 47, 32) @[ConfigMem.scala 41:33]
      node _T_4 = cat(_T_3, io.cfg_data) @[Cat.scala 29:58]
      regs[0] <= _T_4 @[ConfigMem.scala 41:19]
      skip @[ConfigMem.scala 39:47]
    node _T_5 = eq(io.cfg_addr, UInt<1>("h01")) @[ConfigMem.scala 39:38]
    node _T_6 = and(io.cfg_en, _T_5) @[ConfigMem.scala 39:22]
    when _T_6 : @[ConfigMem.scala 39:47]
      node _T_7 = bits(regs[0], 31, 0) @[ConfigMem.scala 43:46]
      node _T_8 = cat(io.cfg_data, _T_7) @[Cat.scala 29:58]
      regs[0] <= _T_8 @[ConfigMem.scala 43:19]
      skip @[ConfigMem.scala 39:47]
    io.out[0] <= regs[0] @[ConfigMem.scala 52:45]
    
  module GPE_39 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<12>, flip cfg_data : UInt<32>, flip en : UInt<1>, flip in : UInt<32>[8], out : UInt<32>[1]}
    
    inst alu of ALU_39 @[PE.scala 50:19]
    alu.clock <= clock
    alu.reset <= reset
    inst rf of RF_39 @[PE.scala 51:18]
    rf.clock <= clock
    rf.reset <= reset
    inst DelayPipe of DelayPipe_78 @[PE.scala 52:54]
    DelayPipe.clock <= clock
    DelayPipe.reset <= reset
    inst DelayPipe_1 of DelayPipe_79 @[PE.scala 52:54]
    DelayPipe_1.clock <= clock
    DelayPipe_1.reset <= reset
    wire const : UInt<32> @[PE.scala 54:19]
    inst Muxn of Muxn_94 @[PE.scala 55:49]
    Muxn.clock <= clock
    Muxn.reset <= reset
    inst Muxn_1 of Muxn_95 @[PE.scala 55:49]
    Muxn_1.clock <= clock
    Muxn_1.reset <= reset
    Muxn.io.in[0] <= io.in[0] @[PE.scala 62:12]
    Muxn.io.in[1] <= io.in[1] @[PE.scala 62:12]
    Muxn.io.in[2] <= io.in[2] @[PE.scala 62:12]
    Muxn.io.in[3] <= io.in[3] @[PE.scala 62:12]
    Muxn.io.in[4] <= const @[PE.scala 64:12]
    Muxn.io.in[5] <= rf.io.out[1] @[PE.scala 66:12]
    DelayPipe.io.en <= io.en @[PE.scala 69:23]
    DelayPipe.io.in <= Muxn.io.out @[PE.scala 70:23]
    alu.io.in[0] <= DelayPipe.io.out @[PE.scala 71:18]
    Muxn_1.io.in[0] <= io.in[4] @[PE.scala 62:12]
    Muxn_1.io.in[1] <= io.in[5] @[PE.scala 62:12]
    Muxn_1.io.in[2] <= io.in[6] @[PE.scala 62:12]
    Muxn_1.io.in[3] <= io.in[7] @[PE.scala 62:12]
    Muxn_1.io.in[4] <= const @[PE.scala 64:12]
    Muxn_1.io.in[5] <= rf.io.out[1] @[PE.scala 66:12]
    DelayPipe_1.io.en <= io.en @[PE.scala 69:23]
    DelayPipe_1.io.in <= Muxn_1.io.out @[PE.scala 70:23]
    alu.io.in[1] <= DelayPipe_1.io.out @[PE.scala 71:18]
    rf.io.en <= io.en @[PE.scala 75:12]
    rf.io.in[0] <= alu.io.out @[PE.scala 76:15]
    io.out[0] <= rf.io.out[0] @[PE.scala 77:13]
    inst cfg of ConfigMem_55 @[PE.scala 89:19]
    cfg.clock <= clock
    cfg.reset <= reset
    node _T = bits(io.cfg_addr, 11, 2) @[PE.scala 90:63]
    node _T_1 = eq(UInt<7>("h06b"), _T) @[PE.scala 90:48]
    node _T_2 = and(io.cfg_en, _T_1) @[PE.scala 90:30]
    cfg.io.cfg_en <= _T_2 @[PE.scala 90:17]
    node _T_3 = bits(io.cfg_addr, 1, 0) @[PE.scala 91:33]
    cfg.io.cfg_addr <= _T_3 @[PE.scala 91:19]
    cfg.io.cfg_data <= io.cfg_data @[PE.scala 92:19]
    wire cfgOut : UInt<48> @[PE.scala 96:20]
    cfgOut <= cfg.io.out[0] @[PE.scala 97:10]
    node _T_4 = bits(cfgOut, 31, 0) @[PE.scala 98:18]
    const <= _T_4 @[PE.scala 98:9]
    node _T_5 = bits(cfgOut, 35, 32) @[PE.scala 100:28]
    alu.io.config <= _T_5 @[PE.scala 100:19]
    rf.io.config is invalid @[PE.scala 107:18]
    node _T_6 = bits(cfgOut, 38, 36) @[PE.scala 113:38]
    DelayPipe.io.config <= _T_6 @[PE.scala 113:29]
    node _T_7 = bits(cfgOut, 41, 39) @[PE.scala 113:38]
    DelayPipe_1.io.config <= _T_7 @[PE.scala 113:29]
    node _T_8 = bits(cfgOut, 44, 42) @[PE.scala 121:32]
    Muxn.io.config <= _T_8 @[PE.scala 121:23]
    node _T_9 = bits(cfgOut, 47, 45) @[PE.scala 121:32]
    Muxn_1.io.config <= _T_9 @[PE.scala 121:23]
    
  module ALU_40 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<4>, flip in : UInt<32>[2], out : UInt<32>}
    
    node _T = bits(io.in[0], 31, 0) @[Operations.scala 122:31]
    node _T_1 = bits(io.in[0], 31, 0) @[Operations.scala 124:31]
    node _T_2 = bits(io.in[1], 31, 0) @[Operations.scala 124:49]
    node _T_3 = add(_T_1, _T_2) @[Operations.scala 124:41]
    node _T_4 = tail(_T_3, 1) @[Operations.scala 124:41]
    node _T_5 = bits(io.in[0], 31, 0) @[Operations.scala 126:31]
    node _T_6 = bits(io.in[1], 31, 0) @[Operations.scala 126:49]
    node _T_7 = sub(_T_5, _T_6) @[Operations.scala 126:41]
    node _T_8 = tail(_T_7, 1) @[Operations.scala 126:41]
    node _T_9 = bits(io.in[0], 31, 0) @[Operations.scala 128:31]
    node _T_10 = bits(io.in[1], 31, 0) @[Operations.scala 128:49]
    node _T_11 = mul(_T_9, _T_10) @[Operations.scala 128:41]
    node _T_12 = bits(io.in[0], 31, 0) @[Operations.scala 138:31]
    node _T_13 = bits(io.in[1], 31, 0) @[Operations.scala 138:49]
    node _T_14 = and(_T_12, _T_13) @[Operations.scala 138:41]
    node _T_15 = bits(io.in[0], 31, 0) @[Operations.scala 140:31]
    node _T_16 = bits(io.in[1], 31, 0) @[Operations.scala 140:49]
    node _T_17 = or(_T_15, _T_16) @[Operations.scala 140:41]
    node _T_18 = bits(io.in[0], 31, 0) @[Operations.scala 142:31]
    node _T_19 = bits(io.in[1], 31, 0) @[Operations.scala 142:49]
    node _T_20 = xor(_T_18, _T_19) @[Operations.scala 142:41]
    node _T_21 = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_22 = mux(_T_21, _T, UInt<1>("h00")) @[Mux.scala 80:57]
    node _T_23 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_24 = mux(_T_23, _T_4, _T_22) @[Mux.scala 80:57]
    node _T_25 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_26 = mux(_T_25, _T_8, _T_24) @[Mux.scala 80:57]
    node _T_27 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_28 = mux(_T_27, _T_11, _T_26) @[Mux.scala 80:57]
    node _T_29 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_30 = mux(_T_29, _T_14, _T_28) @[Mux.scala 80:57]
    node _T_31 = eq(UInt<3>("h05"), io.config) @[Mux.scala 80:60]
    node _T_32 = mux(_T_31, _T_17, _T_30) @[Mux.scala 80:57]
    node _T_33 = eq(UInt<3>("h06"), io.config) @[Mux.scala 80:60]
    node _T_34 = mux(_T_33, _T_20, _T_32) @[Mux.scala 80:57]
    io.out <= _T_34 @[ALU.scala 25:10]
    
  module RF_40 : 
    input clock : Clock
    input reset : Reset
    output io : {flip en : UInt<1>, flip config : UInt<0>, flip in : UInt<32>[1], out : UInt<32>[2]}
    
    wire _T : UInt<32>[1] @[RegFile.scala 24:29]
    _T[0] <= UInt<32>("h00") @[RegFile.scala 24:29]
    reg regs : UInt<32>[1], clock with : (reset => (reset, _T)) @[RegFile.scala 24:21]
    when io.en : @[RegFile.scala 34:16]
      regs[0] <= io.in[0] @[RegFile.scala 35:41]
      skip @[RegFile.scala 34:16]
    io.out[0] <= regs[0] @[RegFile.scala 37:42]
    io.out[1] <= regs[0] @[RegFile.scala 37:42]
    
  module DelayPipe_80 : 
    input clock : Clock
    input reset : Reset
    output io : {flip en : UInt<1>, flip config : UInt<3>, flip in : UInt<32>, out : UInt<32>}
    
    wire _T : UInt<32>[5] @[DelayPipe.scala 22:29]
    _T[0] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[1] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[2] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[3] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[4] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    reg regs : UInt<32>[5], clock with : (reset => (reset, _T)) @[DelayPipe.scala 22:21]
    reg wptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 23:21]
    reg rptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 24:21]
    node _T_1 = lt(wptr, UInt<3>("h04")) @[DelayPipe.scala 26:23]
    node _T_2 = and(io.en, _T_1) @[DelayPipe.scala 26:14]
    when _T_2 : @[DelayPipe.scala 26:37]
      node _T_3 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 27:17]
      node _T_4 = tail(_T_3, 1) @[DelayPipe.scala 27:17]
      wptr <= _T_4 @[DelayPipe.scala 27:10]
      skip @[DelayPipe.scala 26:37]
    else : @[DelayPipe.scala 28:14]
      wptr <= UInt<1>("h00") @[DelayPipe.scala 29:10]
      skip @[DelayPipe.scala 28:14]
    node _T_5 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 32:12]
    node _T_6 = tail(_T_5, 1) @[DelayPipe.scala 32:12]
    node _T_7 = geq(_T_6, io.config) @[DelayPipe.scala 32:17]
    when _T_7 : @[DelayPipe.scala 32:30]
      node _T_8 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 33:18]
      node _T_9 = tail(_T_8, 1) @[DelayPipe.scala 33:18]
      node _T_10 = sub(_T_9, io.config) @[DelayPipe.scala 33:24]
      node _T_11 = tail(_T_10, 1) @[DelayPipe.scala 33:24]
      rptr <= _T_11 @[DelayPipe.scala 33:10]
      skip @[DelayPipe.scala 32:30]
    else : @[DelayPipe.scala 34:14]
      node _T_12 = add(UInt<3>("h06"), wptr) @[DelayPipe.scala 35:30]
      node _T_13 = tail(_T_12, 1) @[DelayPipe.scala 35:30]
      node _T_14 = sub(_T_13, io.config) @[DelayPipe.scala 35:37]
      node _T_15 = tail(_T_14, 1) @[DelayPipe.scala 35:37]
      rptr <= _T_15 @[DelayPipe.scala 35:10]
      skip @[DelayPipe.scala 34:14]
    node _T_16 = gt(io.config, UInt<1>("h00")) @[DelayPipe.scala 39:28]
    node _T_17 = and(io.en, _T_16) @[DelayPipe.scala 39:14]
    when _T_17 : @[DelayPipe.scala 39:35]
      regs[wptr] <= io.in @[DelayPipe.scala 40:16]
      skip @[DelayPipe.scala 39:35]
    reg cnt : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 43:20]
    node _T_18 = eq(io.en, UInt<1>("h00")) @[DelayPipe.scala 44:8]
    when _T_18 : @[DelayPipe.scala 44:15]
      cnt <= UInt<1>("h00") @[DelayPipe.scala 45:9]
      skip @[DelayPipe.scala 44:15]
    else : @[DelayPipe.scala 46:30]
      node _T_19 = lt(cnt, io.config) @[DelayPipe.scala 46:18]
      when _T_19 : @[DelayPipe.scala 46:30]
        node _T_20 = add(cnt, UInt<1>("h01")) @[DelayPipe.scala 47:16]
        node _T_21 = tail(_T_20, 1) @[DelayPipe.scala 47:16]
        cnt <= _T_21 @[DelayPipe.scala 47:9]
        skip @[DelayPipe.scala 46:30]
    node _T_22 = eq(UInt<1>("h00"), io.config) @[DelayPipe.scala 50:22]
    node _T_23 = and(io.en, _T_22) @[DelayPipe.scala 50:14]
    when _T_23 : @[DelayPipe.scala 50:37]
      io.out <= io.in @[DelayPipe.scala 51:12]
      skip @[DelayPipe.scala 50:37]
    else : @[DelayPipe.scala 52:43]
      node _T_24 = eq(cnt, io.config) @[DelayPipe.scala 52:28]
      node _T_25 = and(io.en, _T_24) @[DelayPipe.scala 52:20]
      when _T_25 : @[DelayPipe.scala 52:43]
        io.out <= regs[rptr] @[DelayPipe.scala 53:12]
        skip @[DelayPipe.scala 52:43]
      else : @[DelayPipe.scala 54:14]
        io.out <= UInt<1>("h00") @[DelayPipe.scala 55:12]
        skip @[DelayPipe.scala 54:14]
    
  module DelayPipe_81 : 
    input clock : Clock
    input reset : Reset
    output io : {flip en : UInt<1>, flip config : UInt<3>, flip in : UInt<32>, out : UInt<32>}
    
    wire _T : UInt<32>[5] @[DelayPipe.scala 22:29]
    _T[0] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[1] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[2] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[3] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[4] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    reg regs : UInt<32>[5], clock with : (reset => (reset, _T)) @[DelayPipe.scala 22:21]
    reg wptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 23:21]
    reg rptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 24:21]
    node _T_1 = lt(wptr, UInt<3>("h04")) @[DelayPipe.scala 26:23]
    node _T_2 = and(io.en, _T_1) @[DelayPipe.scala 26:14]
    when _T_2 : @[DelayPipe.scala 26:37]
      node _T_3 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 27:17]
      node _T_4 = tail(_T_3, 1) @[DelayPipe.scala 27:17]
      wptr <= _T_4 @[DelayPipe.scala 27:10]
      skip @[DelayPipe.scala 26:37]
    else : @[DelayPipe.scala 28:14]
      wptr <= UInt<1>("h00") @[DelayPipe.scala 29:10]
      skip @[DelayPipe.scala 28:14]
    node _T_5 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 32:12]
    node _T_6 = tail(_T_5, 1) @[DelayPipe.scala 32:12]
    node _T_7 = geq(_T_6, io.config) @[DelayPipe.scala 32:17]
    when _T_7 : @[DelayPipe.scala 32:30]
      node _T_8 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 33:18]
      node _T_9 = tail(_T_8, 1) @[DelayPipe.scala 33:18]
      node _T_10 = sub(_T_9, io.config) @[DelayPipe.scala 33:24]
      node _T_11 = tail(_T_10, 1) @[DelayPipe.scala 33:24]
      rptr <= _T_11 @[DelayPipe.scala 33:10]
      skip @[DelayPipe.scala 32:30]
    else : @[DelayPipe.scala 34:14]
      node _T_12 = add(UInt<3>("h06"), wptr) @[DelayPipe.scala 35:30]
      node _T_13 = tail(_T_12, 1) @[DelayPipe.scala 35:30]
      node _T_14 = sub(_T_13, io.config) @[DelayPipe.scala 35:37]
      node _T_15 = tail(_T_14, 1) @[DelayPipe.scala 35:37]
      rptr <= _T_15 @[DelayPipe.scala 35:10]
      skip @[DelayPipe.scala 34:14]
    node _T_16 = gt(io.config, UInt<1>("h00")) @[DelayPipe.scala 39:28]
    node _T_17 = and(io.en, _T_16) @[DelayPipe.scala 39:14]
    when _T_17 : @[DelayPipe.scala 39:35]
      regs[wptr] <= io.in @[DelayPipe.scala 40:16]
      skip @[DelayPipe.scala 39:35]
    reg cnt : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 43:20]
    node _T_18 = eq(io.en, UInt<1>("h00")) @[DelayPipe.scala 44:8]
    when _T_18 : @[DelayPipe.scala 44:15]
      cnt <= UInt<1>("h00") @[DelayPipe.scala 45:9]
      skip @[DelayPipe.scala 44:15]
    else : @[DelayPipe.scala 46:30]
      node _T_19 = lt(cnt, io.config) @[DelayPipe.scala 46:18]
      when _T_19 : @[DelayPipe.scala 46:30]
        node _T_20 = add(cnt, UInt<1>("h01")) @[DelayPipe.scala 47:16]
        node _T_21 = tail(_T_20, 1) @[DelayPipe.scala 47:16]
        cnt <= _T_21 @[DelayPipe.scala 47:9]
        skip @[DelayPipe.scala 46:30]
    node _T_22 = eq(UInt<1>("h00"), io.config) @[DelayPipe.scala 50:22]
    node _T_23 = and(io.en, _T_22) @[DelayPipe.scala 50:14]
    when _T_23 : @[DelayPipe.scala 50:37]
      io.out <= io.in @[DelayPipe.scala 51:12]
      skip @[DelayPipe.scala 50:37]
    else : @[DelayPipe.scala 52:43]
      node _T_24 = eq(cnt, io.config) @[DelayPipe.scala 52:28]
      node _T_25 = and(io.en, _T_24) @[DelayPipe.scala 52:20]
      when _T_25 : @[DelayPipe.scala 52:43]
        io.out <= regs[rptr] @[DelayPipe.scala 53:12]
        skip @[DelayPipe.scala 52:43]
      else : @[DelayPipe.scala 54:14]
        io.out <= UInt<1>("h00") @[DelayPipe.scala 55:12]
        skip @[DelayPipe.scala 54:14]
    
  module Muxn_96 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[6], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    node _T_10 = eq(UInt<3>("h05"), io.config) @[Mux.scala 80:60]
    node _T_11 = mux(_T_10, io.in[5], _T_9) @[Mux.scala 80:57]
    io.out <= _T_11 @[Multiplexer.scala 20:10]
    
  module Muxn_97 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[6], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    node _T_10 = eq(UInt<3>("h05"), io.config) @[Mux.scala 80:60]
    node _T_11 = mux(_T_10, io.in[5], _T_9) @[Mux.scala 80:57]
    io.out <= _T_11 @[Multiplexer.scala 20:10]
    
  module ConfigMem_56 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<1>, flip cfg_data : UInt<32>, out : UInt<48>[1]}
    
    wire _T : UInt<48>[1] @[ConfigMem.scala 27:29]
    _T[0] <= UInt<48>("h00") @[ConfigMem.scala 27:29]
    reg regs : UInt<48>[1], clock with : (reset => (reset, _T)) @[ConfigMem.scala 27:21]
    node _T_1 = eq(io.cfg_addr, UInt<1>("h00")) @[ConfigMem.scala 39:38]
    node _T_2 = and(io.cfg_en, _T_1) @[ConfigMem.scala 39:22]
    when _T_2 : @[ConfigMem.scala 39:47]
      node _T_3 = bits(regs[0], 47, 32) @[ConfigMem.scala 41:33]
      node _T_4 = cat(_T_3, io.cfg_data) @[Cat.scala 29:58]
      regs[0] <= _T_4 @[ConfigMem.scala 41:19]
      skip @[ConfigMem.scala 39:47]
    node _T_5 = eq(io.cfg_addr, UInt<1>("h01")) @[ConfigMem.scala 39:38]
    node _T_6 = and(io.cfg_en, _T_5) @[ConfigMem.scala 39:22]
    when _T_6 : @[ConfigMem.scala 39:47]
      node _T_7 = bits(regs[0], 31, 0) @[ConfigMem.scala 43:46]
      node _T_8 = cat(io.cfg_data, _T_7) @[Cat.scala 29:58]
      regs[0] <= _T_8 @[ConfigMem.scala 43:19]
      skip @[ConfigMem.scala 39:47]
    io.out[0] <= regs[0] @[ConfigMem.scala 52:45]
    
  module GPE_40 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<12>, flip cfg_data : UInt<32>, flip en : UInt<1>, flip in : UInt<32>[8], out : UInt<32>[1]}
    
    inst alu of ALU_40 @[PE.scala 50:19]
    alu.clock <= clock
    alu.reset <= reset
    inst rf of RF_40 @[PE.scala 51:18]
    rf.clock <= clock
    rf.reset <= reset
    inst DelayPipe of DelayPipe_80 @[PE.scala 52:54]
    DelayPipe.clock <= clock
    DelayPipe.reset <= reset
    inst DelayPipe_1 of DelayPipe_81 @[PE.scala 52:54]
    DelayPipe_1.clock <= clock
    DelayPipe_1.reset <= reset
    wire const : UInt<32> @[PE.scala 54:19]
    inst Muxn of Muxn_96 @[PE.scala 55:49]
    Muxn.clock <= clock
    Muxn.reset <= reset
    inst Muxn_1 of Muxn_97 @[PE.scala 55:49]
    Muxn_1.clock <= clock
    Muxn_1.reset <= reset
    Muxn.io.in[0] <= io.in[0] @[PE.scala 62:12]
    Muxn.io.in[1] <= io.in[1] @[PE.scala 62:12]
    Muxn.io.in[2] <= io.in[2] @[PE.scala 62:12]
    Muxn.io.in[3] <= io.in[3] @[PE.scala 62:12]
    Muxn.io.in[4] <= const @[PE.scala 64:12]
    Muxn.io.in[5] <= rf.io.out[1] @[PE.scala 66:12]
    DelayPipe.io.en <= io.en @[PE.scala 69:23]
    DelayPipe.io.in <= Muxn.io.out @[PE.scala 70:23]
    alu.io.in[0] <= DelayPipe.io.out @[PE.scala 71:18]
    Muxn_1.io.in[0] <= io.in[4] @[PE.scala 62:12]
    Muxn_1.io.in[1] <= io.in[5] @[PE.scala 62:12]
    Muxn_1.io.in[2] <= io.in[6] @[PE.scala 62:12]
    Muxn_1.io.in[3] <= io.in[7] @[PE.scala 62:12]
    Muxn_1.io.in[4] <= const @[PE.scala 64:12]
    Muxn_1.io.in[5] <= rf.io.out[1] @[PE.scala 66:12]
    DelayPipe_1.io.en <= io.en @[PE.scala 69:23]
    DelayPipe_1.io.in <= Muxn_1.io.out @[PE.scala 70:23]
    alu.io.in[1] <= DelayPipe_1.io.out @[PE.scala 71:18]
    rf.io.en <= io.en @[PE.scala 75:12]
    rf.io.in[0] <= alu.io.out @[PE.scala 76:15]
    io.out[0] <= rf.io.out[0] @[PE.scala 77:13]
    inst cfg of ConfigMem_56 @[PE.scala 89:19]
    cfg.clock <= clock
    cfg.reset <= reset
    node _T = bits(io.cfg_addr, 11, 2) @[PE.scala 90:63]
    node _T_1 = eq(UInt<7>("h076"), _T) @[PE.scala 90:48]
    node _T_2 = and(io.cfg_en, _T_1) @[PE.scala 90:30]
    cfg.io.cfg_en <= _T_2 @[PE.scala 90:17]
    node _T_3 = bits(io.cfg_addr, 1, 0) @[PE.scala 91:33]
    cfg.io.cfg_addr <= _T_3 @[PE.scala 91:19]
    cfg.io.cfg_data <= io.cfg_data @[PE.scala 92:19]
    wire cfgOut : UInt<48> @[PE.scala 96:20]
    cfgOut <= cfg.io.out[0] @[PE.scala 97:10]
    node _T_4 = bits(cfgOut, 31, 0) @[PE.scala 98:18]
    const <= _T_4 @[PE.scala 98:9]
    node _T_5 = bits(cfgOut, 35, 32) @[PE.scala 100:28]
    alu.io.config <= _T_5 @[PE.scala 100:19]
    rf.io.config is invalid @[PE.scala 107:18]
    node _T_6 = bits(cfgOut, 38, 36) @[PE.scala 113:38]
    DelayPipe.io.config <= _T_6 @[PE.scala 113:29]
    node _T_7 = bits(cfgOut, 41, 39) @[PE.scala 113:38]
    DelayPipe_1.io.config <= _T_7 @[PE.scala 113:29]
    node _T_8 = bits(cfgOut, 44, 42) @[PE.scala 121:32]
    Muxn.io.config <= _T_8 @[PE.scala 121:23]
    node _T_9 = bits(cfgOut, 47, 45) @[PE.scala 121:32]
    Muxn_1.io.config <= _T_9 @[PE.scala 121:23]
    
  module ALU_41 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<4>, flip in : UInt<32>[2], out : UInt<32>}
    
    node _T = bits(io.in[0], 31, 0) @[Operations.scala 122:31]
    node _T_1 = bits(io.in[0], 31, 0) @[Operations.scala 124:31]
    node _T_2 = bits(io.in[1], 31, 0) @[Operations.scala 124:49]
    node _T_3 = add(_T_1, _T_2) @[Operations.scala 124:41]
    node _T_4 = tail(_T_3, 1) @[Operations.scala 124:41]
    node _T_5 = bits(io.in[0], 31, 0) @[Operations.scala 126:31]
    node _T_6 = bits(io.in[1], 31, 0) @[Operations.scala 126:49]
    node _T_7 = sub(_T_5, _T_6) @[Operations.scala 126:41]
    node _T_8 = tail(_T_7, 1) @[Operations.scala 126:41]
    node _T_9 = bits(io.in[0], 31, 0) @[Operations.scala 128:31]
    node _T_10 = bits(io.in[1], 31, 0) @[Operations.scala 128:49]
    node _T_11 = mul(_T_9, _T_10) @[Operations.scala 128:41]
    node _T_12 = bits(io.in[0], 31, 0) @[Operations.scala 138:31]
    node _T_13 = bits(io.in[1], 31, 0) @[Operations.scala 138:49]
    node _T_14 = and(_T_12, _T_13) @[Operations.scala 138:41]
    node _T_15 = bits(io.in[0], 31, 0) @[Operations.scala 140:31]
    node _T_16 = bits(io.in[1], 31, 0) @[Operations.scala 140:49]
    node _T_17 = or(_T_15, _T_16) @[Operations.scala 140:41]
    node _T_18 = bits(io.in[0], 31, 0) @[Operations.scala 142:31]
    node _T_19 = bits(io.in[1], 31, 0) @[Operations.scala 142:49]
    node _T_20 = xor(_T_18, _T_19) @[Operations.scala 142:41]
    node _T_21 = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_22 = mux(_T_21, _T, UInt<1>("h00")) @[Mux.scala 80:57]
    node _T_23 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_24 = mux(_T_23, _T_4, _T_22) @[Mux.scala 80:57]
    node _T_25 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_26 = mux(_T_25, _T_8, _T_24) @[Mux.scala 80:57]
    node _T_27 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_28 = mux(_T_27, _T_11, _T_26) @[Mux.scala 80:57]
    node _T_29 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_30 = mux(_T_29, _T_14, _T_28) @[Mux.scala 80:57]
    node _T_31 = eq(UInt<3>("h05"), io.config) @[Mux.scala 80:60]
    node _T_32 = mux(_T_31, _T_17, _T_30) @[Mux.scala 80:57]
    node _T_33 = eq(UInt<3>("h06"), io.config) @[Mux.scala 80:60]
    node _T_34 = mux(_T_33, _T_20, _T_32) @[Mux.scala 80:57]
    io.out <= _T_34 @[ALU.scala 25:10]
    
  module RF_41 : 
    input clock : Clock
    input reset : Reset
    output io : {flip en : UInt<1>, flip config : UInt<0>, flip in : UInt<32>[1], out : UInt<32>[2]}
    
    wire _T : UInt<32>[1] @[RegFile.scala 24:29]
    _T[0] <= UInt<32>("h00") @[RegFile.scala 24:29]
    reg regs : UInt<32>[1], clock with : (reset => (reset, _T)) @[RegFile.scala 24:21]
    when io.en : @[RegFile.scala 34:16]
      regs[0] <= io.in[0] @[RegFile.scala 35:41]
      skip @[RegFile.scala 34:16]
    io.out[0] <= regs[0] @[RegFile.scala 37:42]
    io.out[1] <= regs[0] @[RegFile.scala 37:42]
    
  module DelayPipe_82 : 
    input clock : Clock
    input reset : Reset
    output io : {flip en : UInt<1>, flip config : UInt<3>, flip in : UInt<32>, out : UInt<32>}
    
    wire _T : UInt<32>[5] @[DelayPipe.scala 22:29]
    _T[0] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[1] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[2] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[3] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[4] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    reg regs : UInt<32>[5], clock with : (reset => (reset, _T)) @[DelayPipe.scala 22:21]
    reg wptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 23:21]
    reg rptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 24:21]
    node _T_1 = lt(wptr, UInt<3>("h04")) @[DelayPipe.scala 26:23]
    node _T_2 = and(io.en, _T_1) @[DelayPipe.scala 26:14]
    when _T_2 : @[DelayPipe.scala 26:37]
      node _T_3 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 27:17]
      node _T_4 = tail(_T_3, 1) @[DelayPipe.scala 27:17]
      wptr <= _T_4 @[DelayPipe.scala 27:10]
      skip @[DelayPipe.scala 26:37]
    else : @[DelayPipe.scala 28:14]
      wptr <= UInt<1>("h00") @[DelayPipe.scala 29:10]
      skip @[DelayPipe.scala 28:14]
    node _T_5 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 32:12]
    node _T_6 = tail(_T_5, 1) @[DelayPipe.scala 32:12]
    node _T_7 = geq(_T_6, io.config) @[DelayPipe.scala 32:17]
    when _T_7 : @[DelayPipe.scala 32:30]
      node _T_8 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 33:18]
      node _T_9 = tail(_T_8, 1) @[DelayPipe.scala 33:18]
      node _T_10 = sub(_T_9, io.config) @[DelayPipe.scala 33:24]
      node _T_11 = tail(_T_10, 1) @[DelayPipe.scala 33:24]
      rptr <= _T_11 @[DelayPipe.scala 33:10]
      skip @[DelayPipe.scala 32:30]
    else : @[DelayPipe.scala 34:14]
      node _T_12 = add(UInt<3>("h06"), wptr) @[DelayPipe.scala 35:30]
      node _T_13 = tail(_T_12, 1) @[DelayPipe.scala 35:30]
      node _T_14 = sub(_T_13, io.config) @[DelayPipe.scala 35:37]
      node _T_15 = tail(_T_14, 1) @[DelayPipe.scala 35:37]
      rptr <= _T_15 @[DelayPipe.scala 35:10]
      skip @[DelayPipe.scala 34:14]
    node _T_16 = gt(io.config, UInt<1>("h00")) @[DelayPipe.scala 39:28]
    node _T_17 = and(io.en, _T_16) @[DelayPipe.scala 39:14]
    when _T_17 : @[DelayPipe.scala 39:35]
      regs[wptr] <= io.in @[DelayPipe.scala 40:16]
      skip @[DelayPipe.scala 39:35]
    reg cnt : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 43:20]
    node _T_18 = eq(io.en, UInt<1>("h00")) @[DelayPipe.scala 44:8]
    when _T_18 : @[DelayPipe.scala 44:15]
      cnt <= UInt<1>("h00") @[DelayPipe.scala 45:9]
      skip @[DelayPipe.scala 44:15]
    else : @[DelayPipe.scala 46:30]
      node _T_19 = lt(cnt, io.config) @[DelayPipe.scala 46:18]
      when _T_19 : @[DelayPipe.scala 46:30]
        node _T_20 = add(cnt, UInt<1>("h01")) @[DelayPipe.scala 47:16]
        node _T_21 = tail(_T_20, 1) @[DelayPipe.scala 47:16]
        cnt <= _T_21 @[DelayPipe.scala 47:9]
        skip @[DelayPipe.scala 46:30]
    node _T_22 = eq(UInt<1>("h00"), io.config) @[DelayPipe.scala 50:22]
    node _T_23 = and(io.en, _T_22) @[DelayPipe.scala 50:14]
    when _T_23 : @[DelayPipe.scala 50:37]
      io.out <= io.in @[DelayPipe.scala 51:12]
      skip @[DelayPipe.scala 50:37]
    else : @[DelayPipe.scala 52:43]
      node _T_24 = eq(cnt, io.config) @[DelayPipe.scala 52:28]
      node _T_25 = and(io.en, _T_24) @[DelayPipe.scala 52:20]
      when _T_25 : @[DelayPipe.scala 52:43]
        io.out <= regs[rptr] @[DelayPipe.scala 53:12]
        skip @[DelayPipe.scala 52:43]
      else : @[DelayPipe.scala 54:14]
        io.out <= UInt<1>("h00") @[DelayPipe.scala 55:12]
        skip @[DelayPipe.scala 54:14]
    
  module DelayPipe_83 : 
    input clock : Clock
    input reset : Reset
    output io : {flip en : UInt<1>, flip config : UInt<3>, flip in : UInt<32>, out : UInt<32>}
    
    wire _T : UInt<32>[5] @[DelayPipe.scala 22:29]
    _T[0] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[1] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[2] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[3] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[4] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    reg regs : UInt<32>[5], clock with : (reset => (reset, _T)) @[DelayPipe.scala 22:21]
    reg wptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 23:21]
    reg rptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 24:21]
    node _T_1 = lt(wptr, UInt<3>("h04")) @[DelayPipe.scala 26:23]
    node _T_2 = and(io.en, _T_1) @[DelayPipe.scala 26:14]
    when _T_2 : @[DelayPipe.scala 26:37]
      node _T_3 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 27:17]
      node _T_4 = tail(_T_3, 1) @[DelayPipe.scala 27:17]
      wptr <= _T_4 @[DelayPipe.scala 27:10]
      skip @[DelayPipe.scala 26:37]
    else : @[DelayPipe.scala 28:14]
      wptr <= UInt<1>("h00") @[DelayPipe.scala 29:10]
      skip @[DelayPipe.scala 28:14]
    node _T_5 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 32:12]
    node _T_6 = tail(_T_5, 1) @[DelayPipe.scala 32:12]
    node _T_7 = geq(_T_6, io.config) @[DelayPipe.scala 32:17]
    when _T_7 : @[DelayPipe.scala 32:30]
      node _T_8 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 33:18]
      node _T_9 = tail(_T_8, 1) @[DelayPipe.scala 33:18]
      node _T_10 = sub(_T_9, io.config) @[DelayPipe.scala 33:24]
      node _T_11 = tail(_T_10, 1) @[DelayPipe.scala 33:24]
      rptr <= _T_11 @[DelayPipe.scala 33:10]
      skip @[DelayPipe.scala 32:30]
    else : @[DelayPipe.scala 34:14]
      node _T_12 = add(UInt<3>("h06"), wptr) @[DelayPipe.scala 35:30]
      node _T_13 = tail(_T_12, 1) @[DelayPipe.scala 35:30]
      node _T_14 = sub(_T_13, io.config) @[DelayPipe.scala 35:37]
      node _T_15 = tail(_T_14, 1) @[DelayPipe.scala 35:37]
      rptr <= _T_15 @[DelayPipe.scala 35:10]
      skip @[DelayPipe.scala 34:14]
    node _T_16 = gt(io.config, UInt<1>("h00")) @[DelayPipe.scala 39:28]
    node _T_17 = and(io.en, _T_16) @[DelayPipe.scala 39:14]
    when _T_17 : @[DelayPipe.scala 39:35]
      regs[wptr] <= io.in @[DelayPipe.scala 40:16]
      skip @[DelayPipe.scala 39:35]
    reg cnt : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 43:20]
    node _T_18 = eq(io.en, UInt<1>("h00")) @[DelayPipe.scala 44:8]
    when _T_18 : @[DelayPipe.scala 44:15]
      cnt <= UInt<1>("h00") @[DelayPipe.scala 45:9]
      skip @[DelayPipe.scala 44:15]
    else : @[DelayPipe.scala 46:30]
      node _T_19 = lt(cnt, io.config) @[DelayPipe.scala 46:18]
      when _T_19 : @[DelayPipe.scala 46:30]
        node _T_20 = add(cnt, UInt<1>("h01")) @[DelayPipe.scala 47:16]
        node _T_21 = tail(_T_20, 1) @[DelayPipe.scala 47:16]
        cnt <= _T_21 @[DelayPipe.scala 47:9]
        skip @[DelayPipe.scala 46:30]
    node _T_22 = eq(UInt<1>("h00"), io.config) @[DelayPipe.scala 50:22]
    node _T_23 = and(io.en, _T_22) @[DelayPipe.scala 50:14]
    when _T_23 : @[DelayPipe.scala 50:37]
      io.out <= io.in @[DelayPipe.scala 51:12]
      skip @[DelayPipe.scala 50:37]
    else : @[DelayPipe.scala 52:43]
      node _T_24 = eq(cnt, io.config) @[DelayPipe.scala 52:28]
      node _T_25 = and(io.en, _T_24) @[DelayPipe.scala 52:20]
      when _T_25 : @[DelayPipe.scala 52:43]
        io.out <= regs[rptr] @[DelayPipe.scala 53:12]
        skip @[DelayPipe.scala 52:43]
      else : @[DelayPipe.scala 54:14]
        io.out <= UInt<1>("h00") @[DelayPipe.scala 55:12]
        skip @[DelayPipe.scala 54:14]
    
  module Muxn_98 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[6], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    node _T_10 = eq(UInt<3>("h05"), io.config) @[Mux.scala 80:60]
    node _T_11 = mux(_T_10, io.in[5], _T_9) @[Mux.scala 80:57]
    io.out <= _T_11 @[Multiplexer.scala 20:10]
    
  module Muxn_99 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[6], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    node _T_10 = eq(UInt<3>("h05"), io.config) @[Mux.scala 80:60]
    node _T_11 = mux(_T_10, io.in[5], _T_9) @[Mux.scala 80:57]
    io.out <= _T_11 @[Multiplexer.scala 20:10]
    
  module ConfigMem_57 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<1>, flip cfg_data : UInt<32>, out : UInt<48>[1]}
    
    wire _T : UInt<48>[1] @[ConfigMem.scala 27:29]
    _T[0] <= UInt<48>("h00") @[ConfigMem.scala 27:29]
    reg regs : UInt<48>[1], clock with : (reset => (reset, _T)) @[ConfigMem.scala 27:21]
    node _T_1 = eq(io.cfg_addr, UInt<1>("h00")) @[ConfigMem.scala 39:38]
    node _T_2 = and(io.cfg_en, _T_1) @[ConfigMem.scala 39:22]
    when _T_2 : @[ConfigMem.scala 39:47]
      node _T_3 = bits(regs[0], 47, 32) @[ConfigMem.scala 41:33]
      node _T_4 = cat(_T_3, io.cfg_data) @[Cat.scala 29:58]
      regs[0] <= _T_4 @[ConfigMem.scala 41:19]
      skip @[ConfigMem.scala 39:47]
    node _T_5 = eq(io.cfg_addr, UInt<1>("h01")) @[ConfigMem.scala 39:38]
    node _T_6 = and(io.cfg_en, _T_5) @[ConfigMem.scala 39:22]
    when _T_6 : @[ConfigMem.scala 39:47]
      node _T_7 = bits(regs[0], 31, 0) @[ConfigMem.scala 43:46]
      node _T_8 = cat(io.cfg_data, _T_7) @[Cat.scala 29:58]
      regs[0] <= _T_8 @[ConfigMem.scala 43:19]
      skip @[ConfigMem.scala 39:47]
    io.out[0] <= regs[0] @[ConfigMem.scala 52:45]
    
  module GPE_41 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<12>, flip cfg_data : UInt<32>, flip en : UInt<1>, flip in : UInt<32>[8], out : UInt<32>[1]}
    
    inst alu of ALU_41 @[PE.scala 50:19]
    alu.clock <= clock
    alu.reset <= reset
    inst rf of RF_41 @[PE.scala 51:18]
    rf.clock <= clock
    rf.reset <= reset
    inst DelayPipe of DelayPipe_82 @[PE.scala 52:54]
    DelayPipe.clock <= clock
    DelayPipe.reset <= reset
    inst DelayPipe_1 of DelayPipe_83 @[PE.scala 52:54]
    DelayPipe_1.clock <= clock
    DelayPipe_1.reset <= reset
    wire const : UInt<32> @[PE.scala 54:19]
    inst Muxn of Muxn_98 @[PE.scala 55:49]
    Muxn.clock <= clock
    Muxn.reset <= reset
    inst Muxn_1 of Muxn_99 @[PE.scala 55:49]
    Muxn_1.clock <= clock
    Muxn_1.reset <= reset
    Muxn.io.in[0] <= io.in[0] @[PE.scala 62:12]
    Muxn.io.in[1] <= io.in[1] @[PE.scala 62:12]
    Muxn.io.in[2] <= io.in[2] @[PE.scala 62:12]
    Muxn.io.in[3] <= io.in[3] @[PE.scala 62:12]
    Muxn.io.in[4] <= const @[PE.scala 64:12]
    Muxn.io.in[5] <= rf.io.out[1] @[PE.scala 66:12]
    DelayPipe.io.en <= io.en @[PE.scala 69:23]
    DelayPipe.io.in <= Muxn.io.out @[PE.scala 70:23]
    alu.io.in[0] <= DelayPipe.io.out @[PE.scala 71:18]
    Muxn_1.io.in[0] <= io.in[4] @[PE.scala 62:12]
    Muxn_1.io.in[1] <= io.in[5] @[PE.scala 62:12]
    Muxn_1.io.in[2] <= io.in[6] @[PE.scala 62:12]
    Muxn_1.io.in[3] <= io.in[7] @[PE.scala 62:12]
    Muxn_1.io.in[4] <= const @[PE.scala 64:12]
    Muxn_1.io.in[5] <= rf.io.out[1] @[PE.scala 66:12]
    DelayPipe_1.io.en <= io.en @[PE.scala 69:23]
    DelayPipe_1.io.in <= Muxn_1.io.out @[PE.scala 70:23]
    alu.io.in[1] <= DelayPipe_1.io.out @[PE.scala 71:18]
    rf.io.en <= io.en @[PE.scala 75:12]
    rf.io.in[0] <= alu.io.out @[PE.scala 76:15]
    io.out[0] <= rf.io.out[0] @[PE.scala 77:13]
    inst cfg of ConfigMem_57 @[PE.scala 89:19]
    cfg.clock <= clock
    cfg.reset <= reset
    node _T = bits(io.cfg_addr, 11, 2) @[PE.scala 90:63]
    node _T_1 = eq(UInt<7>("h077"), _T) @[PE.scala 90:48]
    node _T_2 = and(io.cfg_en, _T_1) @[PE.scala 90:30]
    cfg.io.cfg_en <= _T_2 @[PE.scala 90:17]
    node _T_3 = bits(io.cfg_addr, 1, 0) @[PE.scala 91:33]
    cfg.io.cfg_addr <= _T_3 @[PE.scala 91:19]
    cfg.io.cfg_data <= io.cfg_data @[PE.scala 92:19]
    wire cfgOut : UInt<48> @[PE.scala 96:20]
    cfgOut <= cfg.io.out[0] @[PE.scala 97:10]
    node _T_4 = bits(cfgOut, 31, 0) @[PE.scala 98:18]
    const <= _T_4 @[PE.scala 98:9]
    node _T_5 = bits(cfgOut, 35, 32) @[PE.scala 100:28]
    alu.io.config <= _T_5 @[PE.scala 100:19]
    rf.io.config is invalid @[PE.scala 107:18]
    node _T_6 = bits(cfgOut, 38, 36) @[PE.scala 113:38]
    DelayPipe.io.config <= _T_6 @[PE.scala 113:29]
    node _T_7 = bits(cfgOut, 41, 39) @[PE.scala 113:38]
    DelayPipe_1.io.config <= _T_7 @[PE.scala 113:29]
    node _T_8 = bits(cfgOut, 44, 42) @[PE.scala 121:32]
    Muxn.io.config <= _T_8 @[PE.scala 121:23]
    node _T_9 = bits(cfgOut, 47, 45) @[PE.scala 121:32]
    Muxn_1.io.config <= _T_9 @[PE.scala 121:23]
    
  module ALU_42 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<4>, flip in : UInt<32>[2], out : UInt<32>}
    
    node _T = bits(io.in[0], 31, 0) @[Operations.scala 122:31]
    node _T_1 = bits(io.in[0], 31, 0) @[Operations.scala 124:31]
    node _T_2 = bits(io.in[1], 31, 0) @[Operations.scala 124:49]
    node _T_3 = add(_T_1, _T_2) @[Operations.scala 124:41]
    node _T_4 = tail(_T_3, 1) @[Operations.scala 124:41]
    node _T_5 = bits(io.in[0], 31, 0) @[Operations.scala 126:31]
    node _T_6 = bits(io.in[1], 31, 0) @[Operations.scala 126:49]
    node _T_7 = sub(_T_5, _T_6) @[Operations.scala 126:41]
    node _T_8 = tail(_T_7, 1) @[Operations.scala 126:41]
    node _T_9 = bits(io.in[0], 31, 0) @[Operations.scala 128:31]
    node _T_10 = bits(io.in[1], 31, 0) @[Operations.scala 128:49]
    node _T_11 = mul(_T_9, _T_10) @[Operations.scala 128:41]
    node _T_12 = bits(io.in[0], 31, 0) @[Operations.scala 138:31]
    node _T_13 = bits(io.in[1], 31, 0) @[Operations.scala 138:49]
    node _T_14 = and(_T_12, _T_13) @[Operations.scala 138:41]
    node _T_15 = bits(io.in[0], 31, 0) @[Operations.scala 140:31]
    node _T_16 = bits(io.in[1], 31, 0) @[Operations.scala 140:49]
    node _T_17 = or(_T_15, _T_16) @[Operations.scala 140:41]
    node _T_18 = bits(io.in[0], 31, 0) @[Operations.scala 142:31]
    node _T_19 = bits(io.in[1], 31, 0) @[Operations.scala 142:49]
    node _T_20 = xor(_T_18, _T_19) @[Operations.scala 142:41]
    node _T_21 = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_22 = mux(_T_21, _T, UInt<1>("h00")) @[Mux.scala 80:57]
    node _T_23 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_24 = mux(_T_23, _T_4, _T_22) @[Mux.scala 80:57]
    node _T_25 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_26 = mux(_T_25, _T_8, _T_24) @[Mux.scala 80:57]
    node _T_27 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_28 = mux(_T_27, _T_11, _T_26) @[Mux.scala 80:57]
    node _T_29 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_30 = mux(_T_29, _T_14, _T_28) @[Mux.scala 80:57]
    node _T_31 = eq(UInt<3>("h05"), io.config) @[Mux.scala 80:60]
    node _T_32 = mux(_T_31, _T_17, _T_30) @[Mux.scala 80:57]
    node _T_33 = eq(UInt<3>("h06"), io.config) @[Mux.scala 80:60]
    node _T_34 = mux(_T_33, _T_20, _T_32) @[Mux.scala 80:57]
    io.out <= _T_34 @[ALU.scala 25:10]
    
  module RF_42 : 
    input clock : Clock
    input reset : Reset
    output io : {flip en : UInt<1>, flip config : UInt<0>, flip in : UInt<32>[1], out : UInt<32>[2]}
    
    wire _T : UInt<32>[1] @[RegFile.scala 24:29]
    _T[0] <= UInt<32>("h00") @[RegFile.scala 24:29]
    reg regs : UInt<32>[1], clock with : (reset => (reset, _T)) @[RegFile.scala 24:21]
    when io.en : @[RegFile.scala 34:16]
      regs[0] <= io.in[0] @[RegFile.scala 35:41]
      skip @[RegFile.scala 34:16]
    io.out[0] <= regs[0] @[RegFile.scala 37:42]
    io.out[1] <= regs[0] @[RegFile.scala 37:42]
    
  module DelayPipe_84 : 
    input clock : Clock
    input reset : Reset
    output io : {flip en : UInt<1>, flip config : UInt<3>, flip in : UInt<32>, out : UInt<32>}
    
    wire _T : UInt<32>[5] @[DelayPipe.scala 22:29]
    _T[0] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[1] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[2] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[3] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[4] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    reg regs : UInt<32>[5], clock with : (reset => (reset, _T)) @[DelayPipe.scala 22:21]
    reg wptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 23:21]
    reg rptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 24:21]
    node _T_1 = lt(wptr, UInt<3>("h04")) @[DelayPipe.scala 26:23]
    node _T_2 = and(io.en, _T_1) @[DelayPipe.scala 26:14]
    when _T_2 : @[DelayPipe.scala 26:37]
      node _T_3 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 27:17]
      node _T_4 = tail(_T_3, 1) @[DelayPipe.scala 27:17]
      wptr <= _T_4 @[DelayPipe.scala 27:10]
      skip @[DelayPipe.scala 26:37]
    else : @[DelayPipe.scala 28:14]
      wptr <= UInt<1>("h00") @[DelayPipe.scala 29:10]
      skip @[DelayPipe.scala 28:14]
    node _T_5 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 32:12]
    node _T_6 = tail(_T_5, 1) @[DelayPipe.scala 32:12]
    node _T_7 = geq(_T_6, io.config) @[DelayPipe.scala 32:17]
    when _T_7 : @[DelayPipe.scala 32:30]
      node _T_8 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 33:18]
      node _T_9 = tail(_T_8, 1) @[DelayPipe.scala 33:18]
      node _T_10 = sub(_T_9, io.config) @[DelayPipe.scala 33:24]
      node _T_11 = tail(_T_10, 1) @[DelayPipe.scala 33:24]
      rptr <= _T_11 @[DelayPipe.scala 33:10]
      skip @[DelayPipe.scala 32:30]
    else : @[DelayPipe.scala 34:14]
      node _T_12 = add(UInt<3>("h06"), wptr) @[DelayPipe.scala 35:30]
      node _T_13 = tail(_T_12, 1) @[DelayPipe.scala 35:30]
      node _T_14 = sub(_T_13, io.config) @[DelayPipe.scala 35:37]
      node _T_15 = tail(_T_14, 1) @[DelayPipe.scala 35:37]
      rptr <= _T_15 @[DelayPipe.scala 35:10]
      skip @[DelayPipe.scala 34:14]
    node _T_16 = gt(io.config, UInt<1>("h00")) @[DelayPipe.scala 39:28]
    node _T_17 = and(io.en, _T_16) @[DelayPipe.scala 39:14]
    when _T_17 : @[DelayPipe.scala 39:35]
      regs[wptr] <= io.in @[DelayPipe.scala 40:16]
      skip @[DelayPipe.scala 39:35]
    reg cnt : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 43:20]
    node _T_18 = eq(io.en, UInt<1>("h00")) @[DelayPipe.scala 44:8]
    when _T_18 : @[DelayPipe.scala 44:15]
      cnt <= UInt<1>("h00") @[DelayPipe.scala 45:9]
      skip @[DelayPipe.scala 44:15]
    else : @[DelayPipe.scala 46:30]
      node _T_19 = lt(cnt, io.config) @[DelayPipe.scala 46:18]
      when _T_19 : @[DelayPipe.scala 46:30]
        node _T_20 = add(cnt, UInt<1>("h01")) @[DelayPipe.scala 47:16]
        node _T_21 = tail(_T_20, 1) @[DelayPipe.scala 47:16]
        cnt <= _T_21 @[DelayPipe.scala 47:9]
        skip @[DelayPipe.scala 46:30]
    node _T_22 = eq(UInt<1>("h00"), io.config) @[DelayPipe.scala 50:22]
    node _T_23 = and(io.en, _T_22) @[DelayPipe.scala 50:14]
    when _T_23 : @[DelayPipe.scala 50:37]
      io.out <= io.in @[DelayPipe.scala 51:12]
      skip @[DelayPipe.scala 50:37]
    else : @[DelayPipe.scala 52:43]
      node _T_24 = eq(cnt, io.config) @[DelayPipe.scala 52:28]
      node _T_25 = and(io.en, _T_24) @[DelayPipe.scala 52:20]
      when _T_25 : @[DelayPipe.scala 52:43]
        io.out <= regs[rptr] @[DelayPipe.scala 53:12]
        skip @[DelayPipe.scala 52:43]
      else : @[DelayPipe.scala 54:14]
        io.out <= UInt<1>("h00") @[DelayPipe.scala 55:12]
        skip @[DelayPipe.scala 54:14]
    
  module DelayPipe_85 : 
    input clock : Clock
    input reset : Reset
    output io : {flip en : UInt<1>, flip config : UInt<3>, flip in : UInt<32>, out : UInt<32>}
    
    wire _T : UInt<32>[5] @[DelayPipe.scala 22:29]
    _T[0] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[1] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[2] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[3] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[4] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    reg regs : UInt<32>[5], clock with : (reset => (reset, _T)) @[DelayPipe.scala 22:21]
    reg wptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 23:21]
    reg rptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 24:21]
    node _T_1 = lt(wptr, UInt<3>("h04")) @[DelayPipe.scala 26:23]
    node _T_2 = and(io.en, _T_1) @[DelayPipe.scala 26:14]
    when _T_2 : @[DelayPipe.scala 26:37]
      node _T_3 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 27:17]
      node _T_4 = tail(_T_3, 1) @[DelayPipe.scala 27:17]
      wptr <= _T_4 @[DelayPipe.scala 27:10]
      skip @[DelayPipe.scala 26:37]
    else : @[DelayPipe.scala 28:14]
      wptr <= UInt<1>("h00") @[DelayPipe.scala 29:10]
      skip @[DelayPipe.scala 28:14]
    node _T_5 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 32:12]
    node _T_6 = tail(_T_5, 1) @[DelayPipe.scala 32:12]
    node _T_7 = geq(_T_6, io.config) @[DelayPipe.scala 32:17]
    when _T_7 : @[DelayPipe.scala 32:30]
      node _T_8 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 33:18]
      node _T_9 = tail(_T_8, 1) @[DelayPipe.scala 33:18]
      node _T_10 = sub(_T_9, io.config) @[DelayPipe.scala 33:24]
      node _T_11 = tail(_T_10, 1) @[DelayPipe.scala 33:24]
      rptr <= _T_11 @[DelayPipe.scala 33:10]
      skip @[DelayPipe.scala 32:30]
    else : @[DelayPipe.scala 34:14]
      node _T_12 = add(UInt<3>("h06"), wptr) @[DelayPipe.scala 35:30]
      node _T_13 = tail(_T_12, 1) @[DelayPipe.scala 35:30]
      node _T_14 = sub(_T_13, io.config) @[DelayPipe.scala 35:37]
      node _T_15 = tail(_T_14, 1) @[DelayPipe.scala 35:37]
      rptr <= _T_15 @[DelayPipe.scala 35:10]
      skip @[DelayPipe.scala 34:14]
    node _T_16 = gt(io.config, UInt<1>("h00")) @[DelayPipe.scala 39:28]
    node _T_17 = and(io.en, _T_16) @[DelayPipe.scala 39:14]
    when _T_17 : @[DelayPipe.scala 39:35]
      regs[wptr] <= io.in @[DelayPipe.scala 40:16]
      skip @[DelayPipe.scala 39:35]
    reg cnt : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 43:20]
    node _T_18 = eq(io.en, UInt<1>("h00")) @[DelayPipe.scala 44:8]
    when _T_18 : @[DelayPipe.scala 44:15]
      cnt <= UInt<1>("h00") @[DelayPipe.scala 45:9]
      skip @[DelayPipe.scala 44:15]
    else : @[DelayPipe.scala 46:30]
      node _T_19 = lt(cnt, io.config) @[DelayPipe.scala 46:18]
      when _T_19 : @[DelayPipe.scala 46:30]
        node _T_20 = add(cnt, UInt<1>("h01")) @[DelayPipe.scala 47:16]
        node _T_21 = tail(_T_20, 1) @[DelayPipe.scala 47:16]
        cnt <= _T_21 @[DelayPipe.scala 47:9]
        skip @[DelayPipe.scala 46:30]
    node _T_22 = eq(UInt<1>("h00"), io.config) @[DelayPipe.scala 50:22]
    node _T_23 = and(io.en, _T_22) @[DelayPipe.scala 50:14]
    when _T_23 : @[DelayPipe.scala 50:37]
      io.out <= io.in @[DelayPipe.scala 51:12]
      skip @[DelayPipe.scala 50:37]
    else : @[DelayPipe.scala 52:43]
      node _T_24 = eq(cnt, io.config) @[DelayPipe.scala 52:28]
      node _T_25 = and(io.en, _T_24) @[DelayPipe.scala 52:20]
      when _T_25 : @[DelayPipe.scala 52:43]
        io.out <= regs[rptr] @[DelayPipe.scala 53:12]
        skip @[DelayPipe.scala 52:43]
      else : @[DelayPipe.scala 54:14]
        io.out <= UInt<1>("h00") @[DelayPipe.scala 55:12]
        skip @[DelayPipe.scala 54:14]
    
  module Muxn_100 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[6], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    node _T_10 = eq(UInt<3>("h05"), io.config) @[Mux.scala 80:60]
    node _T_11 = mux(_T_10, io.in[5], _T_9) @[Mux.scala 80:57]
    io.out <= _T_11 @[Multiplexer.scala 20:10]
    
  module Muxn_101 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[6], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    node _T_10 = eq(UInt<3>("h05"), io.config) @[Mux.scala 80:60]
    node _T_11 = mux(_T_10, io.in[5], _T_9) @[Mux.scala 80:57]
    io.out <= _T_11 @[Multiplexer.scala 20:10]
    
  module ConfigMem_58 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<1>, flip cfg_data : UInt<32>, out : UInt<48>[1]}
    
    wire _T : UInt<48>[1] @[ConfigMem.scala 27:29]
    _T[0] <= UInt<48>("h00") @[ConfigMem.scala 27:29]
    reg regs : UInt<48>[1], clock with : (reset => (reset, _T)) @[ConfigMem.scala 27:21]
    node _T_1 = eq(io.cfg_addr, UInt<1>("h00")) @[ConfigMem.scala 39:38]
    node _T_2 = and(io.cfg_en, _T_1) @[ConfigMem.scala 39:22]
    when _T_2 : @[ConfigMem.scala 39:47]
      node _T_3 = bits(regs[0], 47, 32) @[ConfigMem.scala 41:33]
      node _T_4 = cat(_T_3, io.cfg_data) @[Cat.scala 29:58]
      regs[0] <= _T_4 @[ConfigMem.scala 41:19]
      skip @[ConfigMem.scala 39:47]
    node _T_5 = eq(io.cfg_addr, UInt<1>("h01")) @[ConfigMem.scala 39:38]
    node _T_6 = and(io.cfg_en, _T_5) @[ConfigMem.scala 39:22]
    when _T_6 : @[ConfigMem.scala 39:47]
      node _T_7 = bits(regs[0], 31, 0) @[ConfigMem.scala 43:46]
      node _T_8 = cat(io.cfg_data, _T_7) @[Cat.scala 29:58]
      regs[0] <= _T_8 @[ConfigMem.scala 43:19]
      skip @[ConfigMem.scala 39:47]
    io.out[0] <= regs[0] @[ConfigMem.scala 52:45]
    
  module GPE_42 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<12>, flip cfg_data : UInt<32>, flip en : UInt<1>, flip in : UInt<32>[8], out : UInt<32>[1]}
    
    inst alu of ALU_42 @[PE.scala 50:19]
    alu.clock <= clock
    alu.reset <= reset
    inst rf of RF_42 @[PE.scala 51:18]
    rf.clock <= clock
    rf.reset <= reset
    inst DelayPipe of DelayPipe_84 @[PE.scala 52:54]
    DelayPipe.clock <= clock
    DelayPipe.reset <= reset
    inst DelayPipe_1 of DelayPipe_85 @[PE.scala 52:54]
    DelayPipe_1.clock <= clock
    DelayPipe_1.reset <= reset
    wire const : UInt<32> @[PE.scala 54:19]
    inst Muxn of Muxn_100 @[PE.scala 55:49]
    Muxn.clock <= clock
    Muxn.reset <= reset
    inst Muxn_1 of Muxn_101 @[PE.scala 55:49]
    Muxn_1.clock <= clock
    Muxn_1.reset <= reset
    Muxn.io.in[0] <= io.in[0] @[PE.scala 62:12]
    Muxn.io.in[1] <= io.in[1] @[PE.scala 62:12]
    Muxn.io.in[2] <= io.in[2] @[PE.scala 62:12]
    Muxn.io.in[3] <= io.in[3] @[PE.scala 62:12]
    Muxn.io.in[4] <= const @[PE.scala 64:12]
    Muxn.io.in[5] <= rf.io.out[1] @[PE.scala 66:12]
    DelayPipe.io.en <= io.en @[PE.scala 69:23]
    DelayPipe.io.in <= Muxn.io.out @[PE.scala 70:23]
    alu.io.in[0] <= DelayPipe.io.out @[PE.scala 71:18]
    Muxn_1.io.in[0] <= io.in[4] @[PE.scala 62:12]
    Muxn_1.io.in[1] <= io.in[5] @[PE.scala 62:12]
    Muxn_1.io.in[2] <= io.in[6] @[PE.scala 62:12]
    Muxn_1.io.in[3] <= io.in[7] @[PE.scala 62:12]
    Muxn_1.io.in[4] <= const @[PE.scala 64:12]
    Muxn_1.io.in[5] <= rf.io.out[1] @[PE.scala 66:12]
    DelayPipe_1.io.en <= io.en @[PE.scala 69:23]
    DelayPipe_1.io.in <= Muxn_1.io.out @[PE.scala 70:23]
    alu.io.in[1] <= DelayPipe_1.io.out @[PE.scala 71:18]
    rf.io.en <= io.en @[PE.scala 75:12]
    rf.io.in[0] <= alu.io.out @[PE.scala 76:15]
    io.out[0] <= rf.io.out[0] @[PE.scala 77:13]
    inst cfg of ConfigMem_58 @[PE.scala 89:19]
    cfg.clock <= clock
    cfg.reset <= reset
    node _T = bits(io.cfg_addr, 11, 2) @[PE.scala 90:63]
    node _T_1 = eq(UInt<7>("h078"), _T) @[PE.scala 90:48]
    node _T_2 = and(io.cfg_en, _T_1) @[PE.scala 90:30]
    cfg.io.cfg_en <= _T_2 @[PE.scala 90:17]
    node _T_3 = bits(io.cfg_addr, 1, 0) @[PE.scala 91:33]
    cfg.io.cfg_addr <= _T_3 @[PE.scala 91:19]
    cfg.io.cfg_data <= io.cfg_data @[PE.scala 92:19]
    wire cfgOut : UInt<48> @[PE.scala 96:20]
    cfgOut <= cfg.io.out[0] @[PE.scala 97:10]
    node _T_4 = bits(cfgOut, 31, 0) @[PE.scala 98:18]
    const <= _T_4 @[PE.scala 98:9]
    node _T_5 = bits(cfgOut, 35, 32) @[PE.scala 100:28]
    alu.io.config <= _T_5 @[PE.scala 100:19]
    rf.io.config is invalid @[PE.scala 107:18]
    node _T_6 = bits(cfgOut, 38, 36) @[PE.scala 113:38]
    DelayPipe.io.config <= _T_6 @[PE.scala 113:29]
    node _T_7 = bits(cfgOut, 41, 39) @[PE.scala 113:38]
    DelayPipe_1.io.config <= _T_7 @[PE.scala 113:29]
    node _T_8 = bits(cfgOut, 44, 42) @[PE.scala 121:32]
    Muxn.io.config <= _T_8 @[PE.scala 121:23]
    node _T_9 = bits(cfgOut, 47, 45) @[PE.scala 121:32]
    Muxn_1.io.config <= _T_9 @[PE.scala 121:23]
    
  module ALU_43 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<4>, flip in : UInt<32>[2], out : UInt<32>}
    
    node _T = bits(io.in[0], 31, 0) @[Operations.scala 122:31]
    node _T_1 = bits(io.in[0], 31, 0) @[Operations.scala 124:31]
    node _T_2 = bits(io.in[1], 31, 0) @[Operations.scala 124:49]
    node _T_3 = add(_T_1, _T_2) @[Operations.scala 124:41]
    node _T_4 = tail(_T_3, 1) @[Operations.scala 124:41]
    node _T_5 = bits(io.in[0], 31, 0) @[Operations.scala 126:31]
    node _T_6 = bits(io.in[1], 31, 0) @[Operations.scala 126:49]
    node _T_7 = sub(_T_5, _T_6) @[Operations.scala 126:41]
    node _T_8 = tail(_T_7, 1) @[Operations.scala 126:41]
    node _T_9 = bits(io.in[0], 31, 0) @[Operations.scala 128:31]
    node _T_10 = bits(io.in[1], 31, 0) @[Operations.scala 128:49]
    node _T_11 = mul(_T_9, _T_10) @[Operations.scala 128:41]
    node _T_12 = bits(io.in[0], 31, 0) @[Operations.scala 138:31]
    node _T_13 = bits(io.in[1], 31, 0) @[Operations.scala 138:49]
    node _T_14 = and(_T_12, _T_13) @[Operations.scala 138:41]
    node _T_15 = bits(io.in[0], 31, 0) @[Operations.scala 140:31]
    node _T_16 = bits(io.in[1], 31, 0) @[Operations.scala 140:49]
    node _T_17 = or(_T_15, _T_16) @[Operations.scala 140:41]
    node _T_18 = bits(io.in[0], 31, 0) @[Operations.scala 142:31]
    node _T_19 = bits(io.in[1], 31, 0) @[Operations.scala 142:49]
    node _T_20 = xor(_T_18, _T_19) @[Operations.scala 142:41]
    node _T_21 = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_22 = mux(_T_21, _T, UInt<1>("h00")) @[Mux.scala 80:57]
    node _T_23 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_24 = mux(_T_23, _T_4, _T_22) @[Mux.scala 80:57]
    node _T_25 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_26 = mux(_T_25, _T_8, _T_24) @[Mux.scala 80:57]
    node _T_27 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_28 = mux(_T_27, _T_11, _T_26) @[Mux.scala 80:57]
    node _T_29 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_30 = mux(_T_29, _T_14, _T_28) @[Mux.scala 80:57]
    node _T_31 = eq(UInt<3>("h05"), io.config) @[Mux.scala 80:60]
    node _T_32 = mux(_T_31, _T_17, _T_30) @[Mux.scala 80:57]
    node _T_33 = eq(UInt<3>("h06"), io.config) @[Mux.scala 80:60]
    node _T_34 = mux(_T_33, _T_20, _T_32) @[Mux.scala 80:57]
    io.out <= _T_34 @[ALU.scala 25:10]
    
  module RF_43 : 
    input clock : Clock
    input reset : Reset
    output io : {flip en : UInt<1>, flip config : UInt<0>, flip in : UInt<32>[1], out : UInt<32>[2]}
    
    wire _T : UInt<32>[1] @[RegFile.scala 24:29]
    _T[0] <= UInt<32>("h00") @[RegFile.scala 24:29]
    reg regs : UInt<32>[1], clock with : (reset => (reset, _T)) @[RegFile.scala 24:21]
    when io.en : @[RegFile.scala 34:16]
      regs[0] <= io.in[0] @[RegFile.scala 35:41]
      skip @[RegFile.scala 34:16]
    io.out[0] <= regs[0] @[RegFile.scala 37:42]
    io.out[1] <= regs[0] @[RegFile.scala 37:42]
    
  module DelayPipe_86 : 
    input clock : Clock
    input reset : Reset
    output io : {flip en : UInt<1>, flip config : UInt<3>, flip in : UInt<32>, out : UInt<32>}
    
    wire _T : UInt<32>[5] @[DelayPipe.scala 22:29]
    _T[0] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[1] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[2] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[3] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[4] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    reg regs : UInt<32>[5], clock with : (reset => (reset, _T)) @[DelayPipe.scala 22:21]
    reg wptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 23:21]
    reg rptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 24:21]
    node _T_1 = lt(wptr, UInt<3>("h04")) @[DelayPipe.scala 26:23]
    node _T_2 = and(io.en, _T_1) @[DelayPipe.scala 26:14]
    when _T_2 : @[DelayPipe.scala 26:37]
      node _T_3 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 27:17]
      node _T_4 = tail(_T_3, 1) @[DelayPipe.scala 27:17]
      wptr <= _T_4 @[DelayPipe.scala 27:10]
      skip @[DelayPipe.scala 26:37]
    else : @[DelayPipe.scala 28:14]
      wptr <= UInt<1>("h00") @[DelayPipe.scala 29:10]
      skip @[DelayPipe.scala 28:14]
    node _T_5 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 32:12]
    node _T_6 = tail(_T_5, 1) @[DelayPipe.scala 32:12]
    node _T_7 = geq(_T_6, io.config) @[DelayPipe.scala 32:17]
    when _T_7 : @[DelayPipe.scala 32:30]
      node _T_8 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 33:18]
      node _T_9 = tail(_T_8, 1) @[DelayPipe.scala 33:18]
      node _T_10 = sub(_T_9, io.config) @[DelayPipe.scala 33:24]
      node _T_11 = tail(_T_10, 1) @[DelayPipe.scala 33:24]
      rptr <= _T_11 @[DelayPipe.scala 33:10]
      skip @[DelayPipe.scala 32:30]
    else : @[DelayPipe.scala 34:14]
      node _T_12 = add(UInt<3>("h06"), wptr) @[DelayPipe.scala 35:30]
      node _T_13 = tail(_T_12, 1) @[DelayPipe.scala 35:30]
      node _T_14 = sub(_T_13, io.config) @[DelayPipe.scala 35:37]
      node _T_15 = tail(_T_14, 1) @[DelayPipe.scala 35:37]
      rptr <= _T_15 @[DelayPipe.scala 35:10]
      skip @[DelayPipe.scala 34:14]
    node _T_16 = gt(io.config, UInt<1>("h00")) @[DelayPipe.scala 39:28]
    node _T_17 = and(io.en, _T_16) @[DelayPipe.scala 39:14]
    when _T_17 : @[DelayPipe.scala 39:35]
      regs[wptr] <= io.in @[DelayPipe.scala 40:16]
      skip @[DelayPipe.scala 39:35]
    reg cnt : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 43:20]
    node _T_18 = eq(io.en, UInt<1>("h00")) @[DelayPipe.scala 44:8]
    when _T_18 : @[DelayPipe.scala 44:15]
      cnt <= UInt<1>("h00") @[DelayPipe.scala 45:9]
      skip @[DelayPipe.scala 44:15]
    else : @[DelayPipe.scala 46:30]
      node _T_19 = lt(cnt, io.config) @[DelayPipe.scala 46:18]
      when _T_19 : @[DelayPipe.scala 46:30]
        node _T_20 = add(cnt, UInt<1>("h01")) @[DelayPipe.scala 47:16]
        node _T_21 = tail(_T_20, 1) @[DelayPipe.scala 47:16]
        cnt <= _T_21 @[DelayPipe.scala 47:9]
        skip @[DelayPipe.scala 46:30]
    node _T_22 = eq(UInt<1>("h00"), io.config) @[DelayPipe.scala 50:22]
    node _T_23 = and(io.en, _T_22) @[DelayPipe.scala 50:14]
    when _T_23 : @[DelayPipe.scala 50:37]
      io.out <= io.in @[DelayPipe.scala 51:12]
      skip @[DelayPipe.scala 50:37]
    else : @[DelayPipe.scala 52:43]
      node _T_24 = eq(cnt, io.config) @[DelayPipe.scala 52:28]
      node _T_25 = and(io.en, _T_24) @[DelayPipe.scala 52:20]
      when _T_25 : @[DelayPipe.scala 52:43]
        io.out <= regs[rptr] @[DelayPipe.scala 53:12]
        skip @[DelayPipe.scala 52:43]
      else : @[DelayPipe.scala 54:14]
        io.out <= UInt<1>("h00") @[DelayPipe.scala 55:12]
        skip @[DelayPipe.scala 54:14]
    
  module DelayPipe_87 : 
    input clock : Clock
    input reset : Reset
    output io : {flip en : UInt<1>, flip config : UInt<3>, flip in : UInt<32>, out : UInt<32>}
    
    wire _T : UInt<32>[5] @[DelayPipe.scala 22:29]
    _T[0] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[1] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[2] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[3] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[4] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    reg regs : UInt<32>[5], clock with : (reset => (reset, _T)) @[DelayPipe.scala 22:21]
    reg wptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 23:21]
    reg rptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 24:21]
    node _T_1 = lt(wptr, UInt<3>("h04")) @[DelayPipe.scala 26:23]
    node _T_2 = and(io.en, _T_1) @[DelayPipe.scala 26:14]
    when _T_2 : @[DelayPipe.scala 26:37]
      node _T_3 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 27:17]
      node _T_4 = tail(_T_3, 1) @[DelayPipe.scala 27:17]
      wptr <= _T_4 @[DelayPipe.scala 27:10]
      skip @[DelayPipe.scala 26:37]
    else : @[DelayPipe.scala 28:14]
      wptr <= UInt<1>("h00") @[DelayPipe.scala 29:10]
      skip @[DelayPipe.scala 28:14]
    node _T_5 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 32:12]
    node _T_6 = tail(_T_5, 1) @[DelayPipe.scala 32:12]
    node _T_7 = geq(_T_6, io.config) @[DelayPipe.scala 32:17]
    when _T_7 : @[DelayPipe.scala 32:30]
      node _T_8 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 33:18]
      node _T_9 = tail(_T_8, 1) @[DelayPipe.scala 33:18]
      node _T_10 = sub(_T_9, io.config) @[DelayPipe.scala 33:24]
      node _T_11 = tail(_T_10, 1) @[DelayPipe.scala 33:24]
      rptr <= _T_11 @[DelayPipe.scala 33:10]
      skip @[DelayPipe.scala 32:30]
    else : @[DelayPipe.scala 34:14]
      node _T_12 = add(UInt<3>("h06"), wptr) @[DelayPipe.scala 35:30]
      node _T_13 = tail(_T_12, 1) @[DelayPipe.scala 35:30]
      node _T_14 = sub(_T_13, io.config) @[DelayPipe.scala 35:37]
      node _T_15 = tail(_T_14, 1) @[DelayPipe.scala 35:37]
      rptr <= _T_15 @[DelayPipe.scala 35:10]
      skip @[DelayPipe.scala 34:14]
    node _T_16 = gt(io.config, UInt<1>("h00")) @[DelayPipe.scala 39:28]
    node _T_17 = and(io.en, _T_16) @[DelayPipe.scala 39:14]
    when _T_17 : @[DelayPipe.scala 39:35]
      regs[wptr] <= io.in @[DelayPipe.scala 40:16]
      skip @[DelayPipe.scala 39:35]
    reg cnt : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 43:20]
    node _T_18 = eq(io.en, UInt<1>("h00")) @[DelayPipe.scala 44:8]
    when _T_18 : @[DelayPipe.scala 44:15]
      cnt <= UInt<1>("h00") @[DelayPipe.scala 45:9]
      skip @[DelayPipe.scala 44:15]
    else : @[DelayPipe.scala 46:30]
      node _T_19 = lt(cnt, io.config) @[DelayPipe.scala 46:18]
      when _T_19 : @[DelayPipe.scala 46:30]
        node _T_20 = add(cnt, UInt<1>("h01")) @[DelayPipe.scala 47:16]
        node _T_21 = tail(_T_20, 1) @[DelayPipe.scala 47:16]
        cnt <= _T_21 @[DelayPipe.scala 47:9]
        skip @[DelayPipe.scala 46:30]
    node _T_22 = eq(UInt<1>("h00"), io.config) @[DelayPipe.scala 50:22]
    node _T_23 = and(io.en, _T_22) @[DelayPipe.scala 50:14]
    when _T_23 : @[DelayPipe.scala 50:37]
      io.out <= io.in @[DelayPipe.scala 51:12]
      skip @[DelayPipe.scala 50:37]
    else : @[DelayPipe.scala 52:43]
      node _T_24 = eq(cnt, io.config) @[DelayPipe.scala 52:28]
      node _T_25 = and(io.en, _T_24) @[DelayPipe.scala 52:20]
      when _T_25 : @[DelayPipe.scala 52:43]
        io.out <= regs[rptr] @[DelayPipe.scala 53:12]
        skip @[DelayPipe.scala 52:43]
      else : @[DelayPipe.scala 54:14]
        io.out <= UInt<1>("h00") @[DelayPipe.scala 55:12]
        skip @[DelayPipe.scala 54:14]
    
  module Muxn_102 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[6], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    node _T_10 = eq(UInt<3>("h05"), io.config) @[Mux.scala 80:60]
    node _T_11 = mux(_T_10, io.in[5], _T_9) @[Mux.scala 80:57]
    io.out <= _T_11 @[Multiplexer.scala 20:10]
    
  module Muxn_103 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[6], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    node _T_10 = eq(UInt<3>("h05"), io.config) @[Mux.scala 80:60]
    node _T_11 = mux(_T_10, io.in[5], _T_9) @[Mux.scala 80:57]
    io.out <= _T_11 @[Multiplexer.scala 20:10]
    
  module ConfigMem_59 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<1>, flip cfg_data : UInt<32>, out : UInt<48>[1]}
    
    wire _T : UInt<48>[1] @[ConfigMem.scala 27:29]
    _T[0] <= UInt<48>("h00") @[ConfigMem.scala 27:29]
    reg regs : UInt<48>[1], clock with : (reset => (reset, _T)) @[ConfigMem.scala 27:21]
    node _T_1 = eq(io.cfg_addr, UInt<1>("h00")) @[ConfigMem.scala 39:38]
    node _T_2 = and(io.cfg_en, _T_1) @[ConfigMem.scala 39:22]
    when _T_2 : @[ConfigMem.scala 39:47]
      node _T_3 = bits(regs[0], 47, 32) @[ConfigMem.scala 41:33]
      node _T_4 = cat(_T_3, io.cfg_data) @[Cat.scala 29:58]
      regs[0] <= _T_4 @[ConfigMem.scala 41:19]
      skip @[ConfigMem.scala 39:47]
    node _T_5 = eq(io.cfg_addr, UInt<1>("h01")) @[ConfigMem.scala 39:38]
    node _T_6 = and(io.cfg_en, _T_5) @[ConfigMem.scala 39:22]
    when _T_6 : @[ConfigMem.scala 39:47]
      node _T_7 = bits(regs[0], 31, 0) @[ConfigMem.scala 43:46]
      node _T_8 = cat(io.cfg_data, _T_7) @[Cat.scala 29:58]
      regs[0] <= _T_8 @[ConfigMem.scala 43:19]
      skip @[ConfigMem.scala 39:47]
    io.out[0] <= regs[0] @[ConfigMem.scala 52:45]
    
  module GPE_43 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<12>, flip cfg_data : UInt<32>, flip en : UInt<1>, flip in : UInt<32>[8], out : UInt<32>[1]}
    
    inst alu of ALU_43 @[PE.scala 50:19]
    alu.clock <= clock
    alu.reset <= reset
    inst rf of RF_43 @[PE.scala 51:18]
    rf.clock <= clock
    rf.reset <= reset
    inst DelayPipe of DelayPipe_86 @[PE.scala 52:54]
    DelayPipe.clock <= clock
    DelayPipe.reset <= reset
    inst DelayPipe_1 of DelayPipe_87 @[PE.scala 52:54]
    DelayPipe_1.clock <= clock
    DelayPipe_1.reset <= reset
    wire const : UInt<32> @[PE.scala 54:19]
    inst Muxn of Muxn_102 @[PE.scala 55:49]
    Muxn.clock <= clock
    Muxn.reset <= reset
    inst Muxn_1 of Muxn_103 @[PE.scala 55:49]
    Muxn_1.clock <= clock
    Muxn_1.reset <= reset
    Muxn.io.in[0] <= io.in[0] @[PE.scala 62:12]
    Muxn.io.in[1] <= io.in[1] @[PE.scala 62:12]
    Muxn.io.in[2] <= io.in[2] @[PE.scala 62:12]
    Muxn.io.in[3] <= io.in[3] @[PE.scala 62:12]
    Muxn.io.in[4] <= const @[PE.scala 64:12]
    Muxn.io.in[5] <= rf.io.out[1] @[PE.scala 66:12]
    DelayPipe.io.en <= io.en @[PE.scala 69:23]
    DelayPipe.io.in <= Muxn.io.out @[PE.scala 70:23]
    alu.io.in[0] <= DelayPipe.io.out @[PE.scala 71:18]
    Muxn_1.io.in[0] <= io.in[4] @[PE.scala 62:12]
    Muxn_1.io.in[1] <= io.in[5] @[PE.scala 62:12]
    Muxn_1.io.in[2] <= io.in[6] @[PE.scala 62:12]
    Muxn_1.io.in[3] <= io.in[7] @[PE.scala 62:12]
    Muxn_1.io.in[4] <= const @[PE.scala 64:12]
    Muxn_1.io.in[5] <= rf.io.out[1] @[PE.scala 66:12]
    DelayPipe_1.io.en <= io.en @[PE.scala 69:23]
    DelayPipe_1.io.in <= Muxn_1.io.out @[PE.scala 70:23]
    alu.io.in[1] <= DelayPipe_1.io.out @[PE.scala 71:18]
    rf.io.en <= io.en @[PE.scala 75:12]
    rf.io.in[0] <= alu.io.out @[PE.scala 76:15]
    io.out[0] <= rf.io.out[0] @[PE.scala 77:13]
    inst cfg of ConfigMem_59 @[PE.scala 89:19]
    cfg.clock <= clock
    cfg.reset <= reset
    node _T = bits(io.cfg_addr, 11, 2) @[PE.scala 90:63]
    node _T_1 = eq(UInt<7>("h079"), _T) @[PE.scala 90:48]
    node _T_2 = and(io.cfg_en, _T_1) @[PE.scala 90:30]
    cfg.io.cfg_en <= _T_2 @[PE.scala 90:17]
    node _T_3 = bits(io.cfg_addr, 1, 0) @[PE.scala 91:33]
    cfg.io.cfg_addr <= _T_3 @[PE.scala 91:19]
    cfg.io.cfg_data <= io.cfg_data @[PE.scala 92:19]
    wire cfgOut : UInt<48> @[PE.scala 96:20]
    cfgOut <= cfg.io.out[0] @[PE.scala 97:10]
    node _T_4 = bits(cfgOut, 31, 0) @[PE.scala 98:18]
    const <= _T_4 @[PE.scala 98:9]
    node _T_5 = bits(cfgOut, 35, 32) @[PE.scala 100:28]
    alu.io.config <= _T_5 @[PE.scala 100:19]
    rf.io.config is invalid @[PE.scala 107:18]
    node _T_6 = bits(cfgOut, 38, 36) @[PE.scala 113:38]
    DelayPipe.io.config <= _T_6 @[PE.scala 113:29]
    node _T_7 = bits(cfgOut, 41, 39) @[PE.scala 113:38]
    DelayPipe_1.io.config <= _T_7 @[PE.scala 113:29]
    node _T_8 = bits(cfgOut, 44, 42) @[PE.scala 121:32]
    Muxn.io.config <= _T_8 @[PE.scala 121:23]
    node _T_9 = bits(cfgOut, 47, 45) @[PE.scala 121:32]
    Muxn_1.io.config <= _T_9 @[PE.scala 121:23]
    
  module ALU_44 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<4>, flip in : UInt<32>[2], out : UInt<32>}
    
    node _T = bits(io.in[0], 31, 0) @[Operations.scala 122:31]
    node _T_1 = bits(io.in[0], 31, 0) @[Operations.scala 124:31]
    node _T_2 = bits(io.in[1], 31, 0) @[Operations.scala 124:49]
    node _T_3 = add(_T_1, _T_2) @[Operations.scala 124:41]
    node _T_4 = tail(_T_3, 1) @[Operations.scala 124:41]
    node _T_5 = bits(io.in[0], 31, 0) @[Operations.scala 126:31]
    node _T_6 = bits(io.in[1], 31, 0) @[Operations.scala 126:49]
    node _T_7 = sub(_T_5, _T_6) @[Operations.scala 126:41]
    node _T_8 = tail(_T_7, 1) @[Operations.scala 126:41]
    node _T_9 = bits(io.in[0], 31, 0) @[Operations.scala 128:31]
    node _T_10 = bits(io.in[1], 31, 0) @[Operations.scala 128:49]
    node _T_11 = mul(_T_9, _T_10) @[Operations.scala 128:41]
    node _T_12 = bits(io.in[0], 31, 0) @[Operations.scala 138:31]
    node _T_13 = bits(io.in[1], 31, 0) @[Operations.scala 138:49]
    node _T_14 = and(_T_12, _T_13) @[Operations.scala 138:41]
    node _T_15 = bits(io.in[0], 31, 0) @[Operations.scala 140:31]
    node _T_16 = bits(io.in[1], 31, 0) @[Operations.scala 140:49]
    node _T_17 = or(_T_15, _T_16) @[Operations.scala 140:41]
    node _T_18 = bits(io.in[0], 31, 0) @[Operations.scala 142:31]
    node _T_19 = bits(io.in[1], 31, 0) @[Operations.scala 142:49]
    node _T_20 = xor(_T_18, _T_19) @[Operations.scala 142:41]
    node _T_21 = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_22 = mux(_T_21, _T, UInt<1>("h00")) @[Mux.scala 80:57]
    node _T_23 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_24 = mux(_T_23, _T_4, _T_22) @[Mux.scala 80:57]
    node _T_25 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_26 = mux(_T_25, _T_8, _T_24) @[Mux.scala 80:57]
    node _T_27 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_28 = mux(_T_27, _T_11, _T_26) @[Mux.scala 80:57]
    node _T_29 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_30 = mux(_T_29, _T_14, _T_28) @[Mux.scala 80:57]
    node _T_31 = eq(UInt<3>("h05"), io.config) @[Mux.scala 80:60]
    node _T_32 = mux(_T_31, _T_17, _T_30) @[Mux.scala 80:57]
    node _T_33 = eq(UInt<3>("h06"), io.config) @[Mux.scala 80:60]
    node _T_34 = mux(_T_33, _T_20, _T_32) @[Mux.scala 80:57]
    io.out <= _T_34 @[ALU.scala 25:10]
    
  module RF_44 : 
    input clock : Clock
    input reset : Reset
    output io : {flip en : UInt<1>, flip config : UInt<0>, flip in : UInt<32>[1], out : UInt<32>[2]}
    
    wire _T : UInt<32>[1] @[RegFile.scala 24:29]
    _T[0] <= UInt<32>("h00") @[RegFile.scala 24:29]
    reg regs : UInt<32>[1], clock with : (reset => (reset, _T)) @[RegFile.scala 24:21]
    when io.en : @[RegFile.scala 34:16]
      regs[0] <= io.in[0] @[RegFile.scala 35:41]
      skip @[RegFile.scala 34:16]
    io.out[0] <= regs[0] @[RegFile.scala 37:42]
    io.out[1] <= regs[0] @[RegFile.scala 37:42]
    
  module DelayPipe_88 : 
    input clock : Clock
    input reset : Reset
    output io : {flip en : UInt<1>, flip config : UInt<3>, flip in : UInt<32>, out : UInt<32>}
    
    wire _T : UInt<32>[5] @[DelayPipe.scala 22:29]
    _T[0] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[1] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[2] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[3] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[4] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    reg regs : UInt<32>[5], clock with : (reset => (reset, _T)) @[DelayPipe.scala 22:21]
    reg wptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 23:21]
    reg rptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 24:21]
    node _T_1 = lt(wptr, UInt<3>("h04")) @[DelayPipe.scala 26:23]
    node _T_2 = and(io.en, _T_1) @[DelayPipe.scala 26:14]
    when _T_2 : @[DelayPipe.scala 26:37]
      node _T_3 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 27:17]
      node _T_4 = tail(_T_3, 1) @[DelayPipe.scala 27:17]
      wptr <= _T_4 @[DelayPipe.scala 27:10]
      skip @[DelayPipe.scala 26:37]
    else : @[DelayPipe.scala 28:14]
      wptr <= UInt<1>("h00") @[DelayPipe.scala 29:10]
      skip @[DelayPipe.scala 28:14]
    node _T_5 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 32:12]
    node _T_6 = tail(_T_5, 1) @[DelayPipe.scala 32:12]
    node _T_7 = geq(_T_6, io.config) @[DelayPipe.scala 32:17]
    when _T_7 : @[DelayPipe.scala 32:30]
      node _T_8 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 33:18]
      node _T_9 = tail(_T_8, 1) @[DelayPipe.scala 33:18]
      node _T_10 = sub(_T_9, io.config) @[DelayPipe.scala 33:24]
      node _T_11 = tail(_T_10, 1) @[DelayPipe.scala 33:24]
      rptr <= _T_11 @[DelayPipe.scala 33:10]
      skip @[DelayPipe.scala 32:30]
    else : @[DelayPipe.scala 34:14]
      node _T_12 = add(UInt<3>("h06"), wptr) @[DelayPipe.scala 35:30]
      node _T_13 = tail(_T_12, 1) @[DelayPipe.scala 35:30]
      node _T_14 = sub(_T_13, io.config) @[DelayPipe.scala 35:37]
      node _T_15 = tail(_T_14, 1) @[DelayPipe.scala 35:37]
      rptr <= _T_15 @[DelayPipe.scala 35:10]
      skip @[DelayPipe.scala 34:14]
    node _T_16 = gt(io.config, UInt<1>("h00")) @[DelayPipe.scala 39:28]
    node _T_17 = and(io.en, _T_16) @[DelayPipe.scala 39:14]
    when _T_17 : @[DelayPipe.scala 39:35]
      regs[wptr] <= io.in @[DelayPipe.scala 40:16]
      skip @[DelayPipe.scala 39:35]
    reg cnt : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 43:20]
    node _T_18 = eq(io.en, UInt<1>("h00")) @[DelayPipe.scala 44:8]
    when _T_18 : @[DelayPipe.scala 44:15]
      cnt <= UInt<1>("h00") @[DelayPipe.scala 45:9]
      skip @[DelayPipe.scala 44:15]
    else : @[DelayPipe.scala 46:30]
      node _T_19 = lt(cnt, io.config) @[DelayPipe.scala 46:18]
      when _T_19 : @[DelayPipe.scala 46:30]
        node _T_20 = add(cnt, UInt<1>("h01")) @[DelayPipe.scala 47:16]
        node _T_21 = tail(_T_20, 1) @[DelayPipe.scala 47:16]
        cnt <= _T_21 @[DelayPipe.scala 47:9]
        skip @[DelayPipe.scala 46:30]
    node _T_22 = eq(UInt<1>("h00"), io.config) @[DelayPipe.scala 50:22]
    node _T_23 = and(io.en, _T_22) @[DelayPipe.scala 50:14]
    when _T_23 : @[DelayPipe.scala 50:37]
      io.out <= io.in @[DelayPipe.scala 51:12]
      skip @[DelayPipe.scala 50:37]
    else : @[DelayPipe.scala 52:43]
      node _T_24 = eq(cnt, io.config) @[DelayPipe.scala 52:28]
      node _T_25 = and(io.en, _T_24) @[DelayPipe.scala 52:20]
      when _T_25 : @[DelayPipe.scala 52:43]
        io.out <= regs[rptr] @[DelayPipe.scala 53:12]
        skip @[DelayPipe.scala 52:43]
      else : @[DelayPipe.scala 54:14]
        io.out <= UInt<1>("h00") @[DelayPipe.scala 55:12]
        skip @[DelayPipe.scala 54:14]
    
  module DelayPipe_89 : 
    input clock : Clock
    input reset : Reset
    output io : {flip en : UInt<1>, flip config : UInt<3>, flip in : UInt<32>, out : UInt<32>}
    
    wire _T : UInt<32>[5] @[DelayPipe.scala 22:29]
    _T[0] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[1] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[2] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[3] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[4] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    reg regs : UInt<32>[5], clock with : (reset => (reset, _T)) @[DelayPipe.scala 22:21]
    reg wptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 23:21]
    reg rptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 24:21]
    node _T_1 = lt(wptr, UInt<3>("h04")) @[DelayPipe.scala 26:23]
    node _T_2 = and(io.en, _T_1) @[DelayPipe.scala 26:14]
    when _T_2 : @[DelayPipe.scala 26:37]
      node _T_3 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 27:17]
      node _T_4 = tail(_T_3, 1) @[DelayPipe.scala 27:17]
      wptr <= _T_4 @[DelayPipe.scala 27:10]
      skip @[DelayPipe.scala 26:37]
    else : @[DelayPipe.scala 28:14]
      wptr <= UInt<1>("h00") @[DelayPipe.scala 29:10]
      skip @[DelayPipe.scala 28:14]
    node _T_5 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 32:12]
    node _T_6 = tail(_T_5, 1) @[DelayPipe.scala 32:12]
    node _T_7 = geq(_T_6, io.config) @[DelayPipe.scala 32:17]
    when _T_7 : @[DelayPipe.scala 32:30]
      node _T_8 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 33:18]
      node _T_9 = tail(_T_8, 1) @[DelayPipe.scala 33:18]
      node _T_10 = sub(_T_9, io.config) @[DelayPipe.scala 33:24]
      node _T_11 = tail(_T_10, 1) @[DelayPipe.scala 33:24]
      rptr <= _T_11 @[DelayPipe.scala 33:10]
      skip @[DelayPipe.scala 32:30]
    else : @[DelayPipe.scala 34:14]
      node _T_12 = add(UInt<3>("h06"), wptr) @[DelayPipe.scala 35:30]
      node _T_13 = tail(_T_12, 1) @[DelayPipe.scala 35:30]
      node _T_14 = sub(_T_13, io.config) @[DelayPipe.scala 35:37]
      node _T_15 = tail(_T_14, 1) @[DelayPipe.scala 35:37]
      rptr <= _T_15 @[DelayPipe.scala 35:10]
      skip @[DelayPipe.scala 34:14]
    node _T_16 = gt(io.config, UInt<1>("h00")) @[DelayPipe.scala 39:28]
    node _T_17 = and(io.en, _T_16) @[DelayPipe.scala 39:14]
    when _T_17 : @[DelayPipe.scala 39:35]
      regs[wptr] <= io.in @[DelayPipe.scala 40:16]
      skip @[DelayPipe.scala 39:35]
    reg cnt : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 43:20]
    node _T_18 = eq(io.en, UInt<1>("h00")) @[DelayPipe.scala 44:8]
    when _T_18 : @[DelayPipe.scala 44:15]
      cnt <= UInt<1>("h00") @[DelayPipe.scala 45:9]
      skip @[DelayPipe.scala 44:15]
    else : @[DelayPipe.scala 46:30]
      node _T_19 = lt(cnt, io.config) @[DelayPipe.scala 46:18]
      when _T_19 : @[DelayPipe.scala 46:30]
        node _T_20 = add(cnt, UInt<1>("h01")) @[DelayPipe.scala 47:16]
        node _T_21 = tail(_T_20, 1) @[DelayPipe.scala 47:16]
        cnt <= _T_21 @[DelayPipe.scala 47:9]
        skip @[DelayPipe.scala 46:30]
    node _T_22 = eq(UInt<1>("h00"), io.config) @[DelayPipe.scala 50:22]
    node _T_23 = and(io.en, _T_22) @[DelayPipe.scala 50:14]
    when _T_23 : @[DelayPipe.scala 50:37]
      io.out <= io.in @[DelayPipe.scala 51:12]
      skip @[DelayPipe.scala 50:37]
    else : @[DelayPipe.scala 52:43]
      node _T_24 = eq(cnt, io.config) @[DelayPipe.scala 52:28]
      node _T_25 = and(io.en, _T_24) @[DelayPipe.scala 52:20]
      when _T_25 : @[DelayPipe.scala 52:43]
        io.out <= regs[rptr] @[DelayPipe.scala 53:12]
        skip @[DelayPipe.scala 52:43]
      else : @[DelayPipe.scala 54:14]
        io.out <= UInt<1>("h00") @[DelayPipe.scala 55:12]
        skip @[DelayPipe.scala 54:14]
    
  module Muxn_104 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[6], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    node _T_10 = eq(UInt<3>("h05"), io.config) @[Mux.scala 80:60]
    node _T_11 = mux(_T_10, io.in[5], _T_9) @[Mux.scala 80:57]
    io.out <= _T_11 @[Multiplexer.scala 20:10]
    
  module Muxn_105 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[6], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    node _T_10 = eq(UInt<3>("h05"), io.config) @[Mux.scala 80:60]
    node _T_11 = mux(_T_10, io.in[5], _T_9) @[Mux.scala 80:57]
    io.out <= _T_11 @[Multiplexer.scala 20:10]
    
  module ConfigMem_60 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<1>, flip cfg_data : UInt<32>, out : UInt<48>[1]}
    
    wire _T : UInt<48>[1] @[ConfigMem.scala 27:29]
    _T[0] <= UInt<48>("h00") @[ConfigMem.scala 27:29]
    reg regs : UInt<48>[1], clock with : (reset => (reset, _T)) @[ConfigMem.scala 27:21]
    node _T_1 = eq(io.cfg_addr, UInt<1>("h00")) @[ConfigMem.scala 39:38]
    node _T_2 = and(io.cfg_en, _T_1) @[ConfigMem.scala 39:22]
    when _T_2 : @[ConfigMem.scala 39:47]
      node _T_3 = bits(regs[0], 47, 32) @[ConfigMem.scala 41:33]
      node _T_4 = cat(_T_3, io.cfg_data) @[Cat.scala 29:58]
      regs[0] <= _T_4 @[ConfigMem.scala 41:19]
      skip @[ConfigMem.scala 39:47]
    node _T_5 = eq(io.cfg_addr, UInt<1>("h01")) @[ConfigMem.scala 39:38]
    node _T_6 = and(io.cfg_en, _T_5) @[ConfigMem.scala 39:22]
    when _T_6 : @[ConfigMem.scala 39:47]
      node _T_7 = bits(regs[0], 31, 0) @[ConfigMem.scala 43:46]
      node _T_8 = cat(io.cfg_data, _T_7) @[Cat.scala 29:58]
      regs[0] <= _T_8 @[ConfigMem.scala 43:19]
      skip @[ConfigMem.scala 39:47]
    io.out[0] <= regs[0] @[ConfigMem.scala 52:45]
    
  module GPE_44 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<12>, flip cfg_data : UInt<32>, flip en : UInt<1>, flip in : UInt<32>[8], out : UInt<32>[1]}
    
    inst alu of ALU_44 @[PE.scala 50:19]
    alu.clock <= clock
    alu.reset <= reset
    inst rf of RF_44 @[PE.scala 51:18]
    rf.clock <= clock
    rf.reset <= reset
    inst DelayPipe of DelayPipe_88 @[PE.scala 52:54]
    DelayPipe.clock <= clock
    DelayPipe.reset <= reset
    inst DelayPipe_1 of DelayPipe_89 @[PE.scala 52:54]
    DelayPipe_1.clock <= clock
    DelayPipe_1.reset <= reset
    wire const : UInt<32> @[PE.scala 54:19]
    inst Muxn of Muxn_104 @[PE.scala 55:49]
    Muxn.clock <= clock
    Muxn.reset <= reset
    inst Muxn_1 of Muxn_105 @[PE.scala 55:49]
    Muxn_1.clock <= clock
    Muxn_1.reset <= reset
    Muxn.io.in[0] <= io.in[0] @[PE.scala 62:12]
    Muxn.io.in[1] <= io.in[1] @[PE.scala 62:12]
    Muxn.io.in[2] <= io.in[2] @[PE.scala 62:12]
    Muxn.io.in[3] <= io.in[3] @[PE.scala 62:12]
    Muxn.io.in[4] <= const @[PE.scala 64:12]
    Muxn.io.in[5] <= rf.io.out[1] @[PE.scala 66:12]
    DelayPipe.io.en <= io.en @[PE.scala 69:23]
    DelayPipe.io.in <= Muxn.io.out @[PE.scala 70:23]
    alu.io.in[0] <= DelayPipe.io.out @[PE.scala 71:18]
    Muxn_1.io.in[0] <= io.in[4] @[PE.scala 62:12]
    Muxn_1.io.in[1] <= io.in[5] @[PE.scala 62:12]
    Muxn_1.io.in[2] <= io.in[6] @[PE.scala 62:12]
    Muxn_1.io.in[3] <= io.in[7] @[PE.scala 62:12]
    Muxn_1.io.in[4] <= const @[PE.scala 64:12]
    Muxn_1.io.in[5] <= rf.io.out[1] @[PE.scala 66:12]
    DelayPipe_1.io.en <= io.en @[PE.scala 69:23]
    DelayPipe_1.io.in <= Muxn_1.io.out @[PE.scala 70:23]
    alu.io.in[1] <= DelayPipe_1.io.out @[PE.scala 71:18]
    rf.io.en <= io.en @[PE.scala 75:12]
    rf.io.in[0] <= alu.io.out @[PE.scala 76:15]
    io.out[0] <= rf.io.out[0] @[PE.scala 77:13]
    inst cfg of ConfigMem_60 @[PE.scala 89:19]
    cfg.clock <= clock
    cfg.reset <= reset
    node _T = bits(io.cfg_addr, 11, 2) @[PE.scala 90:63]
    node _T_1 = eq(UInt<7>("h07a"), _T) @[PE.scala 90:48]
    node _T_2 = and(io.cfg_en, _T_1) @[PE.scala 90:30]
    cfg.io.cfg_en <= _T_2 @[PE.scala 90:17]
    node _T_3 = bits(io.cfg_addr, 1, 0) @[PE.scala 91:33]
    cfg.io.cfg_addr <= _T_3 @[PE.scala 91:19]
    cfg.io.cfg_data <= io.cfg_data @[PE.scala 92:19]
    wire cfgOut : UInt<48> @[PE.scala 96:20]
    cfgOut <= cfg.io.out[0] @[PE.scala 97:10]
    node _T_4 = bits(cfgOut, 31, 0) @[PE.scala 98:18]
    const <= _T_4 @[PE.scala 98:9]
    node _T_5 = bits(cfgOut, 35, 32) @[PE.scala 100:28]
    alu.io.config <= _T_5 @[PE.scala 100:19]
    rf.io.config is invalid @[PE.scala 107:18]
    node _T_6 = bits(cfgOut, 38, 36) @[PE.scala 113:38]
    DelayPipe.io.config <= _T_6 @[PE.scala 113:29]
    node _T_7 = bits(cfgOut, 41, 39) @[PE.scala 113:38]
    DelayPipe_1.io.config <= _T_7 @[PE.scala 113:29]
    node _T_8 = bits(cfgOut, 44, 42) @[PE.scala 121:32]
    Muxn.io.config <= _T_8 @[PE.scala 121:23]
    node _T_9 = bits(cfgOut, 47, 45) @[PE.scala 121:32]
    Muxn_1.io.config <= _T_9 @[PE.scala 121:23]
    
  module ALU_45 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<4>, flip in : UInt<32>[2], out : UInt<32>}
    
    node _T = bits(io.in[0], 31, 0) @[Operations.scala 122:31]
    node _T_1 = bits(io.in[0], 31, 0) @[Operations.scala 124:31]
    node _T_2 = bits(io.in[1], 31, 0) @[Operations.scala 124:49]
    node _T_3 = add(_T_1, _T_2) @[Operations.scala 124:41]
    node _T_4 = tail(_T_3, 1) @[Operations.scala 124:41]
    node _T_5 = bits(io.in[0], 31, 0) @[Operations.scala 126:31]
    node _T_6 = bits(io.in[1], 31, 0) @[Operations.scala 126:49]
    node _T_7 = sub(_T_5, _T_6) @[Operations.scala 126:41]
    node _T_8 = tail(_T_7, 1) @[Operations.scala 126:41]
    node _T_9 = bits(io.in[0], 31, 0) @[Operations.scala 128:31]
    node _T_10 = bits(io.in[1], 31, 0) @[Operations.scala 128:49]
    node _T_11 = mul(_T_9, _T_10) @[Operations.scala 128:41]
    node _T_12 = bits(io.in[0], 31, 0) @[Operations.scala 138:31]
    node _T_13 = bits(io.in[1], 31, 0) @[Operations.scala 138:49]
    node _T_14 = and(_T_12, _T_13) @[Operations.scala 138:41]
    node _T_15 = bits(io.in[0], 31, 0) @[Operations.scala 140:31]
    node _T_16 = bits(io.in[1], 31, 0) @[Operations.scala 140:49]
    node _T_17 = or(_T_15, _T_16) @[Operations.scala 140:41]
    node _T_18 = bits(io.in[0], 31, 0) @[Operations.scala 142:31]
    node _T_19 = bits(io.in[1], 31, 0) @[Operations.scala 142:49]
    node _T_20 = xor(_T_18, _T_19) @[Operations.scala 142:41]
    node _T_21 = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_22 = mux(_T_21, _T, UInt<1>("h00")) @[Mux.scala 80:57]
    node _T_23 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_24 = mux(_T_23, _T_4, _T_22) @[Mux.scala 80:57]
    node _T_25 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_26 = mux(_T_25, _T_8, _T_24) @[Mux.scala 80:57]
    node _T_27 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_28 = mux(_T_27, _T_11, _T_26) @[Mux.scala 80:57]
    node _T_29 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_30 = mux(_T_29, _T_14, _T_28) @[Mux.scala 80:57]
    node _T_31 = eq(UInt<3>("h05"), io.config) @[Mux.scala 80:60]
    node _T_32 = mux(_T_31, _T_17, _T_30) @[Mux.scala 80:57]
    node _T_33 = eq(UInt<3>("h06"), io.config) @[Mux.scala 80:60]
    node _T_34 = mux(_T_33, _T_20, _T_32) @[Mux.scala 80:57]
    io.out <= _T_34 @[ALU.scala 25:10]
    
  module RF_45 : 
    input clock : Clock
    input reset : Reset
    output io : {flip en : UInt<1>, flip config : UInt<0>, flip in : UInt<32>[1], out : UInt<32>[2]}
    
    wire _T : UInt<32>[1] @[RegFile.scala 24:29]
    _T[0] <= UInt<32>("h00") @[RegFile.scala 24:29]
    reg regs : UInt<32>[1], clock with : (reset => (reset, _T)) @[RegFile.scala 24:21]
    when io.en : @[RegFile.scala 34:16]
      regs[0] <= io.in[0] @[RegFile.scala 35:41]
      skip @[RegFile.scala 34:16]
    io.out[0] <= regs[0] @[RegFile.scala 37:42]
    io.out[1] <= regs[0] @[RegFile.scala 37:42]
    
  module DelayPipe_90 : 
    input clock : Clock
    input reset : Reset
    output io : {flip en : UInt<1>, flip config : UInt<3>, flip in : UInt<32>, out : UInt<32>}
    
    wire _T : UInt<32>[5] @[DelayPipe.scala 22:29]
    _T[0] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[1] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[2] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[3] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[4] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    reg regs : UInt<32>[5], clock with : (reset => (reset, _T)) @[DelayPipe.scala 22:21]
    reg wptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 23:21]
    reg rptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 24:21]
    node _T_1 = lt(wptr, UInt<3>("h04")) @[DelayPipe.scala 26:23]
    node _T_2 = and(io.en, _T_1) @[DelayPipe.scala 26:14]
    when _T_2 : @[DelayPipe.scala 26:37]
      node _T_3 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 27:17]
      node _T_4 = tail(_T_3, 1) @[DelayPipe.scala 27:17]
      wptr <= _T_4 @[DelayPipe.scala 27:10]
      skip @[DelayPipe.scala 26:37]
    else : @[DelayPipe.scala 28:14]
      wptr <= UInt<1>("h00") @[DelayPipe.scala 29:10]
      skip @[DelayPipe.scala 28:14]
    node _T_5 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 32:12]
    node _T_6 = tail(_T_5, 1) @[DelayPipe.scala 32:12]
    node _T_7 = geq(_T_6, io.config) @[DelayPipe.scala 32:17]
    when _T_7 : @[DelayPipe.scala 32:30]
      node _T_8 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 33:18]
      node _T_9 = tail(_T_8, 1) @[DelayPipe.scala 33:18]
      node _T_10 = sub(_T_9, io.config) @[DelayPipe.scala 33:24]
      node _T_11 = tail(_T_10, 1) @[DelayPipe.scala 33:24]
      rptr <= _T_11 @[DelayPipe.scala 33:10]
      skip @[DelayPipe.scala 32:30]
    else : @[DelayPipe.scala 34:14]
      node _T_12 = add(UInt<3>("h06"), wptr) @[DelayPipe.scala 35:30]
      node _T_13 = tail(_T_12, 1) @[DelayPipe.scala 35:30]
      node _T_14 = sub(_T_13, io.config) @[DelayPipe.scala 35:37]
      node _T_15 = tail(_T_14, 1) @[DelayPipe.scala 35:37]
      rptr <= _T_15 @[DelayPipe.scala 35:10]
      skip @[DelayPipe.scala 34:14]
    node _T_16 = gt(io.config, UInt<1>("h00")) @[DelayPipe.scala 39:28]
    node _T_17 = and(io.en, _T_16) @[DelayPipe.scala 39:14]
    when _T_17 : @[DelayPipe.scala 39:35]
      regs[wptr] <= io.in @[DelayPipe.scala 40:16]
      skip @[DelayPipe.scala 39:35]
    reg cnt : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 43:20]
    node _T_18 = eq(io.en, UInt<1>("h00")) @[DelayPipe.scala 44:8]
    when _T_18 : @[DelayPipe.scala 44:15]
      cnt <= UInt<1>("h00") @[DelayPipe.scala 45:9]
      skip @[DelayPipe.scala 44:15]
    else : @[DelayPipe.scala 46:30]
      node _T_19 = lt(cnt, io.config) @[DelayPipe.scala 46:18]
      when _T_19 : @[DelayPipe.scala 46:30]
        node _T_20 = add(cnt, UInt<1>("h01")) @[DelayPipe.scala 47:16]
        node _T_21 = tail(_T_20, 1) @[DelayPipe.scala 47:16]
        cnt <= _T_21 @[DelayPipe.scala 47:9]
        skip @[DelayPipe.scala 46:30]
    node _T_22 = eq(UInt<1>("h00"), io.config) @[DelayPipe.scala 50:22]
    node _T_23 = and(io.en, _T_22) @[DelayPipe.scala 50:14]
    when _T_23 : @[DelayPipe.scala 50:37]
      io.out <= io.in @[DelayPipe.scala 51:12]
      skip @[DelayPipe.scala 50:37]
    else : @[DelayPipe.scala 52:43]
      node _T_24 = eq(cnt, io.config) @[DelayPipe.scala 52:28]
      node _T_25 = and(io.en, _T_24) @[DelayPipe.scala 52:20]
      when _T_25 : @[DelayPipe.scala 52:43]
        io.out <= regs[rptr] @[DelayPipe.scala 53:12]
        skip @[DelayPipe.scala 52:43]
      else : @[DelayPipe.scala 54:14]
        io.out <= UInt<1>("h00") @[DelayPipe.scala 55:12]
        skip @[DelayPipe.scala 54:14]
    
  module DelayPipe_91 : 
    input clock : Clock
    input reset : Reset
    output io : {flip en : UInt<1>, flip config : UInt<3>, flip in : UInt<32>, out : UInt<32>}
    
    wire _T : UInt<32>[5] @[DelayPipe.scala 22:29]
    _T[0] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[1] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[2] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[3] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[4] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    reg regs : UInt<32>[5], clock with : (reset => (reset, _T)) @[DelayPipe.scala 22:21]
    reg wptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 23:21]
    reg rptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 24:21]
    node _T_1 = lt(wptr, UInt<3>("h04")) @[DelayPipe.scala 26:23]
    node _T_2 = and(io.en, _T_1) @[DelayPipe.scala 26:14]
    when _T_2 : @[DelayPipe.scala 26:37]
      node _T_3 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 27:17]
      node _T_4 = tail(_T_3, 1) @[DelayPipe.scala 27:17]
      wptr <= _T_4 @[DelayPipe.scala 27:10]
      skip @[DelayPipe.scala 26:37]
    else : @[DelayPipe.scala 28:14]
      wptr <= UInt<1>("h00") @[DelayPipe.scala 29:10]
      skip @[DelayPipe.scala 28:14]
    node _T_5 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 32:12]
    node _T_6 = tail(_T_5, 1) @[DelayPipe.scala 32:12]
    node _T_7 = geq(_T_6, io.config) @[DelayPipe.scala 32:17]
    when _T_7 : @[DelayPipe.scala 32:30]
      node _T_8 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 33:18]
      node _T_9 = tail(_T_8, 1) @[DelayPipe.scala 33:18]
      node _T_10 = sub(_T_9, io.config) @[DelayPipe.scala 33:24]
      node _T_11 = tail(_T_10, 1) @[DelayPipe.scala 33:24]
      rptr <= _T_11 @[DelayPipe.scala 33:10]
      skip @[DelayPipe.scala 32:30]
    else : @[DelayPipe.scala 34:14]
      node _T_12 = add(UInt<3>("h06"), wptr) @[DelayPipe.scala 35:30]
      node _T_13 = tail(_T_12, 1) @[DelayPipe.scala 35:30]
      node _T_14 = sub(_T_13, io.config) @[DelayPipe.scala 35:37]
      node _T_15 = tail(_T_14, 1) @[DelayPipe.scala 35:37]
      rptr <= _T_15 @[DelayPipe.scala 35:10]
      skip @[DelayPipe.scala 34:14]
    node _T_16 = gt(io.config, UInt<1>("h00")) @[DelayPipe.scala 39:28]
    node _T_17 = and(io.en, _T_16) @[DelayPipe.scala 39:14]
    when _T_17 : @[DelayPipe.scala 39:35]
      regs[wptr] <= io.in @[DelayPipe.scala 40:16]
      skip @[DelayPipe.scala 39:35]
    reg cnt : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 43:20]
    node _T_18 = eq(io.en, UInt<1>("h00")) @[DelayPipe.scala 44:8]
    when _T_18 : @[DelayPipe.scala 44:15]
      cnt <= UInt<1>("h00") @[DelayPipe.scala 45:9]
      skip @[DelayPipe.scala 44:15]
    else : @[DelayPipe.scala 46:30]
      node _T_19 = lt(cnt, io.config) @[DelayPipe.scala 46:18]
      when _T_19 : @[DelayPipe.scala 46:30]
        node _T_20 = add(cnt, UInt<1>("h01")) @[DelayPipe.scala 47:16]
        node _T_21 = tail(_T_20, 1) @[DelayPipe.scala 47:16]
        cnt <= _T_21 @[DelayPipe.scala 47:9]
        skip @[DelayPipe.scala 46:30]
    node _T_22 = eq(UInt<1>("h00"), io.config) @[DelayPipe.scala 50:22]
    node _T_23 = and(io.en, _T_22) @[DelayPipe.scala 50:14]
    when _T_23 : @[DelayPipe.scala 50:37]
      io.out <= io.in @[DelayPipe.scala 51:12]
      skip @[DelayPipe.scala 50:37]
    else : @[DelayPipe.scala 52:43]
      node _T_24 = eq(cnt, io.config) @[DelayPipe.scala 52:28]
      node _T_25 = and(io.en, _T_24) @[DelayPipe.scala 52:20]
      when _T_25 : @[DelayPipe.scala 52:43]
        io.out <= regs[rptr] @[DelayPipe.scala 53:12]
        skip @[DelayPipe.scala 52:43]
      else : @[DelayPipe.scala 54:14]
        io.out <= UInt<1>("h00") @[DelayPipe.scala 55:12]
        skip @[DelayPipe.scala 54:14]
    
  module Muxn_106 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[6], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    node _T_10 = eq(UInt<3>("h05"), io.config) @[Mux.scala 80:60]
    node _T_11 = mux(_T_10, io.in[5], _T_9) @[Mux.scala 80:57]
    io.out <= _T_11 @[Multiplexer.scala 20:10]
    
  module Muxn_107 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[6], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    node _T_10 = eq(UInt<3>("h05"), io.config) @[Mux.scala 80:60]
    node _T_11 = mux(_T_10, io.in[5], _T_9) @[Mux.scala 80:57]
    io.out <= _T_11 @[Multiplexer.scala 20:10]
    
  module ConfigMem_61 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<1>, flip cfg_data : UInt<32>, out : UInt<48>[1]}
    
    wire _T : UInt<48>[1] @[ConfigMem.scala 27:29]
    _T[0] <= UInt<48>("h00") @[ConfigMem.scala 27:29]
    reg regs : UInt<48>[1], clock with : (reset => (reset, _T)) @[ConfigMem.scala 27:21]
    node _T_1 = eq(io.cfg_addr, UInt<1>("h00")) @[ConfigMem.scala 39:38]
    node _T_2 = and(io.cfg_en, _T_1) @[ConfigMem.scala 39:22]
    when _T_2 : @[ConfigMem.scala 39:47]
      node _T_3 = bits(regs[0], 47, 32) @[ConfigMem.scala 41:33]
      node _T_4 = cat(_T_3, io.cfg_data) @[Cat.scala 29:58]
      regs[0] <= _T_4 @[ConfigMem.scala 41:19]
      skip @[ConfigMem.scala 39:47]
    node _T_5 = eq(io.cfg_addr, UInt<1>("h01")) @[ConfigMem.scala 39:38]
    node _T_6 = and(io.cfg_en, _T_5) @[ConfigMem.scala 39:22]
    when _T_6 : @[ConfigMem.scala 39:47]
      node _T_7 = bits(regs[0], 31, 0) @[ConfigMem.scala 43:46]
      node _T_8 = cat(io.cfg_data, _T_7) @[Cat.scala 29:58]
      regs[0] <= _T_8 @[ConfigMem.scala 43:19]
      skip @[ConfigMem.scala 39:47]
    io.out[0] <= regs[0] @[ConfigMem.scala 52:45]
    
  module GPE_45 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<12>, flip cfg_data : UInt<32>, flip en : UInt<1>, flip in : UInt<32>[8], out : UInt<32>[1]}
    
    inst alu of ALU_45 @[PE.scala 50:19]
    alu.clock <= clock
    alu.reset <= reset
    inst rf of RF_45 @[PE.scala 51:18]
    rf.clock <= clock
    rf.reset <= reset
    inst DelayPipe of DelayPipe_90 @[PE.scala 52:54]
    DelayPipe.clock <= clock
    DelayPipe.reset <= reset
    inst DelayPipe_1 of DelayPipe_91 @[PE.scala 52:54]
    DelayPipe_1.clock <= clock
    DelayPipe_1.reset <= reset
    wire const : UInt<32> @[PE.scala 54:19]
    inst Muxn of Muxn_106 @[PE.scala 55:49]
    Muxn.clock <= clock
    Muxn.reset <= reset
    inst Muxn_1 of Muxn_107 @[PE.scala 55:49]
    Muxn_1.clock <= clock
    Muxn_1.reset <= reset
    Muxn.io.in[0] <= io.in[0] @[PE.scala 62:12]
    Muxn.io.in[1] <= io.in[1] @[PE.scala 62:12]
    Muxn.io.in[2] <= io.in[2] @[PE.scala 62:12]
    Muxn.io.in[3] <= io.in[3] @[PE.scala 62:12]
    Muxn.io.in[4] <= const @[PE.scala 64:12]
    Muxn.io.in[5] <= rf.io.out[1] @[PE.scala 66:12]
    DelayPipe.io.en <= io.en @[PE.scala 69:23]
    DelayPipe.io.in <= Muxn.io.out @[PE.scala 70:23]
    alu.io.in[0] <= DelayPipe.io.out @[PE.scala 71:18]
    Muxn_1.io.in[0] <= io.in[4] @[PE.scala 62:12]
    Muxn_1.io.in[1] <= io.in[5] @[PE.scala 62:12]
    Muxn_1.io.in[2] <= io.in[6] @[PE.scala 62:12]
    Muxn_1.io.in[3] <= io.in[7] @[PE.scala 62:12]
    Muxn_1.io.in[4] <= const @[PE.scala 64:12]
    Muxn_1.io.in[5] <= rf.io.out[1] @[PE.scala 66:12]
    DelayPipe_1.io.en <= io.en @[PE.scala 69:23]
    DelayPipe_1.io.in <= Muxn_1.io.out @[PE.scala 70:23]
    alu.io.in[1] <= DelayPipe_1.io.out @[PE.scala 71:18]
    rf.io.en <= io.en @[PE.scala 75:12]
    rf.io.in[0] <= alu.io.out @[PE.scala 76:15]
    io.out[0] <= rf.io.out[0] @[PE.scala 77:13]
    inst cfg of ConfigMem_61 @[PE.scala 89:19]
    cfg.clock <= clock
    cfg.reset <= reset
    node _T = bits(io.cfg_addr, 11, 2) @[PE.scala 90:63]
    node _T_1 = eq(UInt<7>("h07b"), _T) @[PE.scala 90:48]
    node _T_2 = and(io.cfg_en, _T_1) @[PE.scala 90:30]
    cfg.io.cfg_en <= _T_2 @[PE.scala 90:17]
    node _T_3 = bits(io.cfg_addr, 1, 0) @[PE.scala 91:33]
    cfg.io.cfg_addr <= _T_3 @[PE.scala 91:19]
    cfg.io.cfg_data <= io.cfg_data @[PE.scala 92:19]
    wire cfgOut : UInt<48> @[PE.scala 96:20]
    cfgOut <= cfg.io.out[0] @[PE.scala 97:10]
    node _T_4 = bits(cfgOut, 31, 0) @[PE.scala 98:18]
    const <= _T_4 @[PE.scala 98:9]
    node _T_5 = bits(cfgOut, 35, 32) @[PE.scala 100:28]
    alu.io.config <= _T_5 @[PE.scala 100:19]
    rf.io.config is invalid @[PE.scala 107:18]
    node _T_6 = bits(cfgOut, 38, 36) @[PE.scala 113:38]
    DelayPipe.io.config <= _T_6 @[PE.scala 113:29]
    node _T_7 = bits(cfgOut, 41, 39) @[PE.scala 113:38]
    DelayPipe_1.io.config <= _T_7 @[PE.scala 113:29]
    node _T_8 = bits(cfgOut, 44, 42) @[PE.scala 121:32]
    Muxn.io.config <= _T_8 @[PE.scala 121:23]
    node _T_9 = bits(cfgOut, 47, 45) @[PE.scala 121:32]
    Muxn_1.io.config <= _T_9 @[PE.scala 121:23]
    
  module ALU_46 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<4>, flip in : UInt<32>[2], out : UInt<32>}
    
    node _T = bits(io.in[0], 31, 0) @[Operations.scala 122:31]
    node _T_1 = bits(io.in[0], 31, 0) @[Operations.scala 124:31]
    node _T_2 = bits(io.in[1], 31, 0) @[Operations.scala 124:49]
    node _T_3 = add(_T_1, _T_2) @[Operations.scala 124:41]
    node _T_4 = tail(_T_3, 1) @[Operations.scala 124:41]
    node _T_5 = bits(io.in[0], 31, 0) @[Operations.scala 126:31]
    node _T_6 = bits(io.in[1], 31, 0) @[Operations.scala 126:49]
    node _T_7 = sub(_T_5, _T_6) @[Operations.scala 126:41]
    node _T_8 = tail(_T_7, 1) @[Operations.scala 126:41]
    node _T_9 = bits(io.in[0], 31, 0) @[Operations.scala 128:31]
    node _T_10 = bits(io.in[1], 31, 0) @[Operations.scala 128:49]
    node _T_11 = mul(_T_9, _T_10) @[Operations.scala 128:41]
    node _T_12 = bits(io.in[0], 31, 0) @[Operations.scala 138:31]
    node _T_13 = bits(io.in[1], 31, 0) @[Operations.scala 138:49]
    node _T_14 = and(_T_12, _T_13) @[Operations.scala 138:41]
    node _T_15 = bits(io.in[0], 31, 0) @[Operations.scala 140:31]
    node _T_16 = bits(io.in[1], 31, 0) @[Operations.scala 140:49]
    node _T_17 = or(_T_15, _T_16) @[Operations.scala 140:41]
    node _T_18 = bits(io.in[0], 31, 0) @[Operations.scala 142:31]
    node _T_19 = bits(io.in[1], 31, 0) @[Operations.scala 142:49]
    node _T_20 = xor(_T_18, _T_19) @[Operations.scala 142:41]
    node _T_21 = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_22 = mux(_T_21, _T, UInt<1>("h00")) @[Mux.scala 80:57]
    node _T_23 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_24 = mux(_T_23, _T_4, _T_22) @[Mux.scala 80:57]
    node _T_25 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_26 = mux(_T_25, _T_8, _T_24) @[Mux.scala 80:57]
    node _T_27 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_28 = mux(_T_27, _T_11, _T_26) @[Mux.scala 80:57]
    node _T_29 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_30 = mux(_T_29, _T_14, _T_28) @[Mux.scala 80:57]
    node _T_31 = eq(UInt<3>("h05"), io.config) @[Mux.scala 80:60]
    node _T_32 = mux(_T_31, _T_17, _T_30) @[Mux.scala 80:57]
    node _T_33 = eq(UInt<3>("h06"), io.config) @[Mux.scala 80:60]
    node _T_34 = mux(_T_33, _T_20, _T_32) @[Mux.scala 80:57]
    io.out <= _T_34 @[ALU.scala 25:10]
    
  module RF_46 : 
    input clock : Clock
    input reset : Reset
    output io : {flip en : UInt<1>, flip config : UInt<0>, flip in : UInt<32>[1], out : UInt<32>[2]}
    
    wire _T : UInt<32>[1] @[RegFile.scala 24:29]
    _T[0] <= UInt<32>("h00") @[RegFile.scala 24:29]
    reg regs : UInt<32>[1], clock with : (reset => (reset, _T)) @[RegFile.scala 24:21]
    when io.en : @[RegFile.scala 34:16]
      regs[0] <= io.in[0] @[RegFile.scala 35:41]
      skip @[RegFile.scala 34:16]
    io.out[0] <= regs[0] @[RegFile.scala 37:42]
    io.out[1] <= regs[0] @[RegFile.scala 37:42]
    
  module DelayPipe_92 : 
    input clock : Clock
    input reset : Reset
    output io : {flip en : UInt<1>, flip config : UInt<3>, flip in : UInt<32>, out : UInt<32>}
    
    wire _T : UInt<32>[5] @[DelayPipe.scala 22:29]
    _T[0] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[1] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[2] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[3] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[4] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    reg regs : UInt<32>[5], clock with : (reset => (reset, _T)) @[DelayPipe.scala 22:21]
    reg wptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 23:21]
    reg rptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 24:21]
    node _T_1 = lt(wptr, UInt<3>("h04")) @[DelayPipe.scala 26:23]
    node _T_2 = and(io.en, _T_1) @[DelayPipe.scala 26:14]
    when _T_2 : @[DelayPipe.scala 26:37]
      node _T_3 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 27:17]
      node _T_4 = tail(_T_3, 1) @[DelayPipe.scala 27:17]
      wptr <= _T_4 @[DelayPipe.scala 27:10]
      skip @[DelayPipe.scala 26:37]
    else : @[DelayPipe.scala 28:14]
      wptr <= UInt<1>("h00") @[DelayPipe.scala 29:10]
      skip @[DelayPipe.scala 28:14]
    node _T_5 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 32:12]
    node _T_6 = tail(_T_5, 1) @[DelayPipe.scala 32:12]
    node _T_7 = geq(_T_6, io.config) @[DelayPipe.scala 32:17]
    when _T_7 : @[DelayPipe.scala 32:30]
      node _T_8 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 33:18]
      node _T_9 = tail(_T_8, 1) @[DelayPipe.scala 33:18]
      node _T_10 = sub(_T_9, io.config) @[DelayPipe.scala 33:24]
      node _T_11 = tail(_T_10, 1) @[DelayPipe.scala 33:24]
      rptr <= _T_11 @[DelayPipe.scala 33:10]
      skip @[DelayPipe.scala 32:30]
    else : @[DelayPipe.scala 34:14]
      node _T_12 = add(UInt<3>("h06"), wptr) @[DelayPipe.scala 35:30]
      node _T_13 = tail(_T_12, 1) @[DelayPipe.scala 35:30]
      node _T_14 = sub(_T_13, io.config) @[DelayPipe.scala 35:37]
      node _T_15 = tail(_T_14, 1) @[DelayPipe.scala 35:37]
      rptr <= _T_15 @[DelayPipe.scala 35:10]
      skip @[DelayPipe.scala 34:14]
    node _T_16 = gt(io.config, UInt<1>("h00")) @[DelayPipe.scala 39:28]
    node _T_17 = and(io.en, _T_16) @[DelayPipe.scala 39:14]
    when _T_17 : @[DelayPipe.scala 39:35]
      regs[wptr] <= io.in @[DelayPipe.scala 40:16]
      skip @[DelayPipe.scala 39:35]
    reg cnt : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 43:20]
    node _T_18 = eq(io.en, UInt<1>("h00")) @[DelayPipe.scala 44:8]
    when _T_18 : @[DelayPipe.scala 44:15]
      cnt <= UInt<1>("h00") @[DelayPipe.scala 45:9]
      skip @[DelayPipe.scala 44:15]
    else : @[DelayPipe.scala 46:30]
      node _T_19 = lt(cnt, io.config) @[DelayPipe.scala 46:18]
      when _T_19 : @[DelayPipe.scala 46:30]
        node _T_20 = add(cnt, UInt<1>("h01")) @[DelayPipe.scala 47:16]
        node _T_21 = tail(_T_20, 1) @[DelayPipe.scala 47:16]
        cnt <= _T_21 @[DelayPipe.scala 47:9]
        skip @[DelayPipe.scala 46:30]
    node _T_22 = eq(UInt<1>("h00"), io.config) @[DelayPipe.scala 50:22]
    node _T_23 = and(io.en, _T_22) @[DelayPipe.scala 50:14]
    when _T_23 : @[DelayPipe.scala 50:37]
      io.out <= io.in @[DelayPipe.scala 51:12]
      skip @[DelayPipe.scala 50:37]
    else : @[DelayPipe.scala 52:43]
      node _T_24 = eq(cnt, io.config) @[DelayPipe.scala 52:28]
      node _T_25 = and(io.en, _T_24) @[DelayPipe.scala 52:20]
      when _T_25 : @[DelayPipe.scala 52:43]
        io.out <= regs[rptr] @[DelayPipe.scala 53:12]
        skip @[DelayPipe.scala 52:43]
      else : @[DelayPipe.scala 54:14]
        io.out <= UInt<1>("h00") @[DelayPipe.scala 55:12]
        skip @[DelayPipe.scala 54:14]
    
  module DelayPipe_93 : 
    input clock : Clock
    input reset : Reset
    output io : {flip en : UInt<1>, flip config : UInt<3>, flip in : UInt<32>, out : UInt<32>}
    
    wire _T : UInt<32>[5] @[DelayPipe.scala 22:29]
    _T[0] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[1] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[2] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[3] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[4] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    reg regs : UInt<32>[5], clock with : (reset => (reset, _T)) @[DelayPipe.scala 22:21]
    reg wptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 23:21]
    reg rptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 24:21]
    node _T_1 = lt(wptr, UInt<3>("h04")) @[DelayPipe.scala 26:23]
    node _T_2 = and(io.en, _T_1) @[DelayPipe.scala 26:14]
    when _T_2 : @[DelayPipe.scala 26:37]
      node _T_3 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 27:17]
      node _T_4 = tail(_T_3, 1) @[DelayPipe.scala 27:17]
      wptr <= _T_4 @[DelayPipe.scala 27:10]
      skip @[DelayPipe.scala 26:37]
    else : @[DelayPipe.scala 28:14]
      wptr <= UInt<1>("h00") @[DelayPipe.scala 29:10]
      skip @[DelayPipe.scala 28:14]
    node _T_5 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 32:12]
    node _T_6 = tail(_T_5, 1) @[DelayPipe.scala 32:12]
    node _T_7 = geq(_T_6, io.config) @[DelayPipe.scala 32:17]
    when _T_7 : @[DelayPipe.scala 32:30]
      node _T_8 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 33:18]
      node _T_9 = tail(_T_8, 1) @[DelayPipe.scala 33:18]
      node _T_10 = sub(_T_9, io.config) @[DelayPipe.scala 33:24]
      node _T_11 = tail(_T_10, 1) @[DelayPipe.scala 33:24]
      rptr <= _T_11 @[DelayPipe.scala 33:10]
      skip @[DelayPipe.scala 32:30]
    else : @[DelayPipe.scala 34:14]
      node _T_12 = add(UInt<3>("h06"), wptr) @[DelayPipe.scala 35:30]
      node _T_13 = tail(_T_12, 1) @[DelayPipe.scala 35:30]
      node _T_14 = sub(_T_13, io.config) @[DelayPipe.scala 35:37]
      node _T_15 = tail(_T_14, 1) @[DelayPipe.scala 35:37]
      rptr <= _T_15 @[DelayPipe.scala 35:10]
      skip @[DelayPipe.scala 34:14]
    node _T_16 = gt(io.config, UInt<1>("h00")) @[DelayPipe.scala 39:28]
    node _T_17 = and(io.en, _T_16) @[DelayPipe.scala 39:14]
    when _T_17 : @[DelayPipe.scala 39:35]
      regs[wptr] <= io.in @[DelayPipe.scala 40:16]
      skip @[DelayPipe.scala 39:35]
    reg cnt : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 43:20]
    node _T_18 = eq(io.en, UInt<1>("h00")) @[DelayPipe.scala 44:8]
    when _T_18 : @[DelayPipe.scala 44:15]
      cnt <= UInt<1>("h00") @[DelayPipe.scala 45:9]
      skip @[DelayPipe.scala 44:15]
    else : @[DelayPipe.scala 46:30]
      node _T_19 = lt(cnt, io.config) @[DelayPipe.scala 46:18]
      when _T_19 : @[DelayPipe.scala 46:30]
        node _T_20 = add(cnt, UInt<1>("h01")) @[DelayPipe.scala 47:16]
        node _T_21 = tail(_T_20, 1) @[DelayPipe.scala 47:16]
        cnt <= _T_21 @[DelayPipe.scala 47:9]
        skip @[DelayPipe.scala 46:30]
    node _T_22 = eq(UInt<1>("h00"), io.config) @[DelayPipe.scala 50:22]
    node _T_23 = and(io.en, _T_22) @[DelayPipe.scala 50:14]
    when _T_23 : @[DelayPipe.scala 50:37]
      io.out <= io.in @[DelayPipe.scala 51:12]
      skip @[DelayPipe.scala 50:37]
    else : @[DelayPipe.scala 52:43]
      node _T_24 = eq(cnt, io.config) @[DelayPipe.scala 52:28]
      node _T_25 = and(io.en, _T_24) @[DelayPipe.scala 52:20]
      when _T_25 : @[DelayPipe.scala 52:43]
        io.out <= regs[rptr] @[DelayPipe.scala 53:12]
        skip @[DelayPipe.scala 52:43]
      else : @[DelayPipe.scala 54:14]
        io.out <= UInt<1>("h00") @[DelayPipe.scala 55:12]
        skip @[DelayPipe.scala 54:14]
    
  module Muxn_108 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[6], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    node _T_10 = eq(UInt<3>("h05"), io.config) @[Mux.scala 80:60]
    node _T_11 = mux(_T_10, io.in[5], _T_9) @[Mux.scala 80:57]
    io.out <= _T_11 @[Multiplexer.scala 20:10]
    
  module Muxn_109 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[6], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    node _T_10 = eq(UInt<3>("h05"), io.config) @[Mux.scala 80:60]
    node _T_11 = mux(_T_10, io.in[5], _T_9) @[Mux.scala 80:57]
    io.out <= _T_11 @[Multiplexer.scala 20:10]
    
  module ConfigMem_62 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<1>, flip cfg_data : UInt<32>, out : UInt<48>[1]}
    
    wire _T : UInt<48>[1] @[ConfigMem.scala 27:29]
    _T[0] <= UInt<48>("h00") @[ConfigMem.scala 27:29]
    reg regs : UInt<48>[1], clock with : (reset => (reset, _T)) @[ConfigMem.scala 27:21]
    node _T_1 = eq(io.cfg_addr, UInt<1>("h00")) @[ConfigMem.scala 39:38]
    node _T_2 = and(io.cfg_en, _T_1) @[ConfigMem.scala 39:22]
    when _T_2 : @[ConfigMem.scala 39:47]
      node _T_3 = bits(regs[0], 47, 32) @[ConfigMem.scala 41:33]
      node _T_4 = cat(_T_3, io.cfg_data) @[Cat.scala 29:58]
      regs[0] <= _T_4 @[ConfigMem.scala 41:19]
      skip @[ConfigMem.scala 39:47]
    node _T_5 = eq(io.cfg_addr, UInt<1>("h01")) @[ConfigMem.scala 39:38]
    node _T_6 = and(io.cfg_en, _T_5) @[ConfigMem.scala 39:22]
    when _T_6 : @[ConfigMem.scala 39:47]
      node _T_7 = bits(regs[0], 31, 0) @[ConfigMem.scala 43:46]
      node _T_8 = cat(io.cfg_data, _T_7) @[Cat.scala 29:58]
      regs[0] <= _T_8 @[ConfigMem.scala 43:19]
      skip @[ConfigMem.scala 39:47]
    io.out[0] <= regs[0] @[ConfigMem.scala 52:45]
    
  module GPE_46 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<12>, flip cfg_data : UInt<32>, flip en : UInt<1>, flip in : UInt<32>[8], out : UInt<32>[1]}
    
    inst alu of ALU_46 @[PE.scala 50:19]
    alu.clock <= clock
    alu.reset <= reset
    inst rf of RF_46 @[PE.scala 51:18]
    rf.clock <= clock
    rf.reset <= reset
    inst DelayPipe of DelayPipe_92 @[PE.scala 52:54]
    DelayPipe.clock <= clock
    DelayPipe.reset <= reset
    inst DelayPipe_1 of DelayPipe_93 @[PE.scala 52:54]
    DelayPipe_1.clock <= clock
    DelayPipe_1.reset <= reset
    wire const : UInt<32> @[PE.scala 54:19]
    inst Muxn of Muxn_108 @[PE.scala 55:49]
    Muxn.clock <= clock
    Muxn.reset <= reset
    inst Muxn_1 of Muxn_109 @[PE.scala 55:49]
    Muxn_1.clock <= clock
    Muxn_1.reset <= reset
    Muxn.io.in[0] <= io.in[0] @[PE.scala 62:12]
    Muxn.io.in[1] <= io.in[1] @[PE.scala 62:12]
    Muxn.io.in[2] <= io.in[2] @[PE.scala 62:12]
    Muxn.io.in[3] <= io.in[3] @[PE.scala 62:12]
    Muxn.io.in[4] <= const @[PE.scala 64:12]
    Muxn.io.in[5] <= rf.io.out[1] @[PE.scala 66:12]
    DelayPipe.io.en <= io.en @[PE.scala 69:23]
    DelayPipe.io.in <= Muxn.io.out @[PE.scala 70:23]
    alu.io.in[0] <= DelayPipe.io.out @[PE.scala 71:18]
    Muxn_1.io.in[0] <= io.in[4] @[PE.scala 62:12]
    Muxn_1.io.in[1] <= io.in[5] @[PE.scala 62:12]
    Muxn_1.io.in[2] <= io.in[6] @[PE.scala 62:12]
    Muxn_1.io.in[3] <= io.in[7] @[PE.scala 62:12]
    Muxn_1.io.in[4] <= const @[PE.scala 64:12]
    Muxn_1.io.in[5] <= rf.io.out[1] @[PE.scala 66:12]
    DelayPipe_1.io.en <= io.en @[PE.scala 69:23]
    DelayPipe_1.io.in <= Muxn_1.io.out @[PE.scala 70:23]
    alu.io.in[1] <= DelayPipe_1.io.out @[PE.scala 71:18]
    rf.io.en <= io.en @[PE.scala 75:12]
    rf.io.in[0] <= alu.io.out @[PE.scala 76:15]
    io.out[0] <= rf.io.out[0] @[PE.scala 77:13]
    inst cfg of ConfigMem_62 @[PE.scala 89:19]
    cfg.clock <= clock
    cfg.reset <= reset
    node _T = bits(io.cfg_addr, 11, 2) @[PE.scala 90:63]
    node _T_1 = eq(UInt<7>("h07c"), _T) @[PE.scala 90:48]
    node _T_2 = and(io.cfg_en, _T_1) @[PE.scala 90:30]
    cfg.io.cfg_en <= _T_2 @[PE.scala 90:17]
    node _T_3 = bits(io.cfg_addr, 1, 0) @[PE.scala 91:33]
    cfg.io.cfg_addr <= _T_3 @[PE.scala 91:19]
    cfg.io.cfg_data <= io.cfg_data @[PE.scala 92:19]
    wire cfgOut : UInt<48> @[PE.scala 96:20]
    cfgOut <= cfg.io.out[0] @[PE.scala 97:10]
    node _T_4 = bits(cfgOut, 31, 0) @[PE.scala 98:18]
    const <= _T_4 @[PE.scala 98:9]
    node _T_5 = bits(cfgOut, 35, 32) @[PE.scala 100:28]
    alu.io.config <= _T_5 @[PE.scala 100:19]
    rf.io.config is invalid @[PE.scala 107:18]
    node _T_6 = bits(cfgOut, 38, 36) @[PE.scala 113:38]
    DelayPipe.io.config <= _T_6 @[PE.scala 113:29]
    node _T_7 = bits(cfgOut, 41, 39) @[PE.scala 113:38]
    DelayPipe_1.io.config <= _T_7 @[PE.scala 113:29]
    node _T_8 = bits(cfgOut, 44, 42) @[PE.scala 121:32]
    Muxn.io.config <= _T_8 @[PE.scala 121:23]
    node _T_9 = bits(cfgOut, 47, 45) @[PE.scala 121:32]
    Muxn_1.io.config <= _T_9 @[PE.scala 121:23]
    
  module ALU_47 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<4>, flip in : UInt<32>[2], out : UInt<32>}
    
    node _T = bits(io.in[0], 31, 0) @[Operations.scala 122:31]
    node _T_1 = bits(io.in[0], 31, 0) @[Operations.scala 124:31]
    node _T_2 = bits(io.in[1], 31, 0) @[Operations.scala 124:49]
    node _T_3 = add(_T_1, _T_2) @[Operations.scala 124:41]
    node _T_4 = tail(_T_3, 1) @[Operations.scala 124:41]
    node _T_5 = bits(io.in[0], 31, 0) @[Operations.scala 126:31]
    node _T_6 = bits(io.in[1], 31, 0) @[Operations.scala 126:49]
    node _T_7 = sub(_T_5, _T_6) @[Operations.scala 126:41]
    node _T_8 = tail(_T_7, 1) @[Operations.scala 126:41]
    node _T_9 = bits(io.in[0], 31, 0) @[Operations.scala 128:31]
    node _T_10 = bits(io.in[1], 31, 0) @[Operations.scala 128:49]
    node _T_11 = mul(_T_9, _T_10) @[Operations.scala 128:41]
    node _T_12 = bits(io.in[0], 31, 0) @[Operations.scala 138:31]
    node _T_13 = bits(io.in[1], 31, 0) @[Operations.scala 138:49]
    node _T_14 = and(_T_12, _T_13) @[Operations.scala 138:41]
    node _T_15 = bits(io.in[0], 31, 0) @[Operations.scala 140:31]
    node _T_16 = bits(io.in[1], 31, 0) @[Operations.scala 140:49]
    node _T_17 = or(_T_15, _T_16) @[Operations.scala 140:41]
    node _T_18 = bits(io.in[0], 31, 0) @[Operations.scala 142:31]
    node _T_19 = bits(io.in[1], 31, 0) @[Operations.scala 142:49]
    node _T_20 = xor(_T_18, _T_19) @[Operations.scala 142:41]
    node _T_21 = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_22 = mux(_T_21, _T, UInt<1>("h00")) @[Mux.scala 80:57]
    node _T_23 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_24 = mux(_T_23, _T_4, _T_22) @[Mux.scala 80:57]
    node _T_25 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_26 = mux(_T_25, _T_8, _T_24) @[Mux.scala 80:57]
    node _T_27 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_28 = mux(_T_27, _T_11, _T_26) @[Mux.scala 80:57]
    node _T_29 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_30 = mux(_T_29, _T_14, _T_28) @[Mux.scala 80:57]
    node _T_31 = eq(UInt<3>("h05"), io.config) @[Mux.scala 80:60]
    node _T_32 = mux(_T_31, _T_17, _T_30) @[Mux.scala 80:57]
    node _T_33 = eq(UInt<3>("h06"), io.config) @[Mux.scala 80:60]
    node _T_34 = mux(_T_33, _T_20, _T_32) @[Mux.scala 80:57]
    io.out <= _T_34 @[ALU.scala 25:10]
    
  module RF_47 : 
    input clock : Clock
    input reset : Reset
    output io : {flip en : UInt<1>, flip config : UInt<0>, flip in : UInt<32>[1], out : UInt<32>[2]}
    
    wire _T : UInt<32>[1] @[RegFile.scala 24:29]
    _T[0] <= UInt<32>("h00") @[RegFile.scala 24:29]
    reg regs : UInt<32>[1], clock with : (reset => (reset, _T)) @[RegFile.scala 24:21]
    when io.en : @[RegFile.scala 34:16]
      regs[0] <= io.in[0] @[RegFile.scala 35:41]
      skip @[RegFile.scala 34:16]
    io.out[0] <= regs[0] @[RegFile.scala 37:42]
    io.out[1] <= regs[0] @[RegFile.scala 37:42]
    
  module DelayPipe_94 : 
    input clock : Clock
    input reset : Reset
    output io : {flip en : UInt<1>, flip config : UInt<3>, flip in : UInt<32>, out : UInt<32>}
    
    wire _T : UInt<32>[5] @[DelayPipe.scala 22:29]
    _T[0] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[1] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[2] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[3] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[4] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    reg regs : UInt<32>[5], clock with : (reset => (reset, _T)) @[DelayPipe.scala 22:21]
    reg wptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 23:21]
    reg rptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 24:21]
    node _T_1 = lt(wptr, UInt<3>("h04")) @[DelayPipe.scala 26:23]
    node _T_2 = and(io.en, _T_1) @[DelayPipe.scala 26:14]
    when _T_2 : @[DelayPipe.scala 26:37]
      node _T_3 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 27:17]
      node _T_4 = tail(_T_3, 1) @[DelayPipe.scala 27:17]
      wptr <= _T_4 @[DelayPipe.scala 27:10]
      skip @[DelayPipe.scala 26:37]
    else : @[DelayPipe.scala 28:14]
      wptr <= UInt<1>("h00") @[DelayPipe.scala 29:10]
      skip @[DelayPipe.scala 28:14]
    node _T_5 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 32:12]
    node _T_6 = tail(_T_5, 1) @[DelayPipe.scala 32:12]
    node _T_7 = geq(_T_6, io.config) @[DelayPipe.scala 32:17]
    when _T_7 : @[DelayPipe.scala 32:30]
      node _T_8 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 33:18]
      node _T_9 = tail(_T_8, 1) @[DelayPipe.scala 33:18]
      node _T_10 = sub(_T_9, io.config) @[DelayPipe.scala 33:24]
      node _T_11 = tail(_T_10, 1) @[DelayPipe.scala 33:24]
      rptr <= _T_11 @[DelayPipe.scala 33:10]
      skip @[DelayPipe.scala 32:30]
    else : @[DelayPipe.scala 34:14]
      node _T_12 = add(UInt<3>("h06"), wptr) @[DelayPipe.scala 35:30]
      node _T_13 = tail(_T_12, 1) @[DelayPipe.scala 35:30]
      node _T_14 = sub(_T_13, io.config) @[DelayPipe.scala 35:37]
      node _T_15 = tail(_T_14, 1) @[DelayPipe.scala 35:37]
      rptr <= _T_15 @[DelayPipe.scala 35:10]
      skip @[DelayPipe.scala 34:14]
    node _T_16 = gt(io.config, UInt<1>("h00")) @[DelayPipe.scala 39:28]
    node _T_17 = and(io.en, _T_16) @[DelayPipe.scala 39:14]
    when _T_17 : @[DelayPipe.scala 39:35]
      regs[wptr] <= io.in @[DelayPipe.scala 40:16]
      skip @[DelayPipe.scala 39:35]
    reg cnt : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 43:20]
    node _T_18 = eq(io.en, UInt<1>("h00")) @[DelayPipe.scala 44:8]
    when _T_18 : @[DelayPipe.scala 44:15]
      cnt <= UInt<1>("h00") @[DelayPipe.scala 45:9]
      skip @[DelayPipe.scala 44:15]
    else : @[DelayPipe.scala 46:30]
      node _T_19 = lt(cnt, io.config) @[DelayPipe.scala 46:18]
      when _T_19 : @[DelayPipe.scala 46:30]
        node _T_20 = add(cnt, UInt<1>("h01")) @[DelayPipe.scala 47:16]
        node _T_21 = tail(_T_20, 1) @[DelayPipe.scala 47:16]
        cnt <= _T_21 @[DelayPipe.scala 47:9]
        skip @[DelayPipe.scala 46:30]
    node _T_22 = eq(UInt<1>("h00"), io.config) @[DelayPipe.scala 50:22]
    node _T_23 = and(io.en, _T_22) @[DelayPipe.scala 50:14]
    when _T_23 : @[DelayPipe.scala 50:37]
      io.out <= io.in @[DelayPipe.scala 51:12]
      skip @[DelayPipe.scala 50:37]
    else : @[DelayPipe.scala 52:43]
      node _T_24 = eq(cnt, io.config) @[DelayPipe.scala 52:28]
      node _T_25 = and(io.en, _T_24) @[DelayPipe.scala 52:20]
      when _T_25 : @[DelayPipe.scala 52:43]
        io.out <= regs[rptr] @[DelayPipe.scala 53:12]
        skip @[DelayPipe.scala 52:43]
      else : @[DelayPipe.scala 54:14]
        io.out <= UInt<1>("h00") @[DelayPipe.scala 55:12]
        skip @[DelayPipe.scala 54:14]
    
  module DelayPipe_95 : 
    input clock : Clock
    input reset : Reset
    output io : {flip en : UInt<1>, flip config : UInt<3>, flip in : UInt<32>, out : UInt<32>}
    
    wire _T : UInt<32>[5] @[DelayPipe.scala 22:29]
    _T[0] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[1] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[2] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[3] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[4] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    reg regs : UInt<32>[5], clock with : (reset => (reset, _T)) @[DelayPipe.scala 22:21]
    reg wptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 23:21]
    reg rptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 24:21]
    node _T_1 = lt(wptr, UInt<3>("h04")) @[DelayPipe.scala 26:23]
    node _T_2 = and(io.en, _T_1) @[DelayPipe.scala 26:14]
    when _T_2 : @[DelayPipe.scala 26:37]
      node _T_3 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 27:17]
      node _T_4 = tail(_T_3, 1) @[DelayPipe.scala 27:17]
      wptr <= _T_4 @[DelayPipe.scala 27:10]
      skip @[DelayPipe.scala 26:37]
    else : @[DelayPipe.scala 28:14]
      wptr <= UInt<1>("h00") @[DelayPipe.scala 29:10]
      skip @[DelayPipe.scala 28:14]
    node _T_5 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 32:12]
    node _T_6 = tail(_T_5, 1) @[DelayPipe.scala 32:12]
    node _T_7 = geq(_T_6, io.config) @[DelayPipe.scala 32:17]
    when _T_7 : @[DelayPipe.scala 32:30]
      node _T_8 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 33:18]
      node _T_9 = tail(_T_8, 1) @[DelayPipe.scala 33:18]
      node _T_10 = sub(_T_9, io.config) @[DelayPipe.scala 33:24]
      node _T_11 = tail(_T_10, 1) @[DelayPipe.scala 33:24]
      rptr <= _T_11 @[DelayPipe.scala 33:10]
      skip @[DelayPipe.scala 32:30]
    else : @[DelayPipe.scala 34:14]
      node _T_12 = add(UInt<3>("h06"), wptr) @[DelayPipe.scala 35:30]
      node _T_13 = tail(_T_12, 1) @[DelayPipe.scala 35:30]
      node _T_14 = sub(_T_13, io.config) @[DelayPipe.scala 35:37]
      node _T_15 = tail(_T_14, 1) @[DelayPipe.scala 35:37]
      rptr <= _T_15 @[DelayPipe.scala 35:10]
      skip @[DelayPipe.scala 34:14]
    node _T_16 = gt(io.config, UInt<1>("h00")) @[DelayPipe.scala 39:28]
    node _T_17 = and(io.en, _T_16) @[DelayPipe.scala 39:14]
    when _T_17 : @[DelayPipe.scala 39:35]
      regs[wptr] <= io.in @[DelayPipe.scala 40:16]
      skip @[DelayPipe.scala 39:35]
    reg cnt : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 43:20]
    node _T_18 = eq(io.en, UInt<1>("h00")) @[DelayPipe.scala 44:8]
    when _T_18 : @[DelayPipe.scala 44:15]
      cnt <= UInt<1>("h00") @[DelayPipe.scala 45:9]
      skip @[DelayPipe.scala 44:15]
    else : @[DelayPipe.scala 46:30]
      node _T_19 = lt(cnt, io.config) @[DelayPipe.scala 46:18]
      when _T_19 : @[DelayPipe.scala 46:30]
        node _T_20 = add(cnt, UInt<1>("h01")) @[DelayPipe.scala 47:16]
        node _T_21 = tail(_T_20, 1) @[DelayPipe.scala 47:16]
        cnt <= _T_21 @[DelayPipe.scala 47:9]
        skip @[DelayPipe.scala 46:30]
    node _T_22 = eq(UInt<1>("h00"), io.config) @[DelayPipe.scala 50:22]
    node _T_23 = and(io.en, _T_22) @[DelayPipe.scala 50:14]
    when _T_23 : @[DelayPipe.scala 50:37]
      io.out <= io.in @[DelayPipe.scala 51:12]
      skip @[DelayPipe.scala 50:37]
    else : @[DelayPipe.scala 52:43]
      node _T_24 = eq(cnt, io.config) @[DelayPipe.scala 52:28]
      node _T_25 = and(io.en, _T_24) @[DelayPipe.scala 52:20]
      when _T_25 : @[DelayPipe.scala 52:43]
        io.out <= regs[rptr] @[DelayPipe.scala 53:12]
        skip @[DelayPipe.scala 52:43]
      else : @[DelayPipe.scala 54:14]
        io.out <= UInt<1>("h00") @[DelayPipe.scala 55:12]
        skip @[DelayPipe.scala 54:14]
    
  module Muxn_110 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[6], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    node _T_10 = eq(UInt<3>("h05"), io.config) @[Mux.scala 80:60]
    node _T_11 = mux(_T_10, io.in[5], _T_9) @[Mux.scala 80:57]
    io.out <= _T_11 @[Multiplexer.scala 20:10]
    
  module Muxn_111 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[6], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    node _T_10 = eq(UInt<3>("h05"), io.config) @[Mux.scala 80:60]
    node _T_11 = mux(_T_10, io.in[5], _T_9) @[Mux.scala 80:57]
    io.out <= _T_11 @[Multiplexer.scala 20:10]
    
  module ConfigMem_63 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<1>, flip cfg_data : UInt<32>, out : UInt<48>[1]}
    
    wire _T : UInt<48>[1] @[ConfigMem.scala 27:29]
    _T[0] <= UInt<48>("h00") @[ConfigMem.scala 27:29]
    reg regs : UInt<48>[1], clock with : (reset => (reset, _T)) @[ConfigMem.scala 27:21]
    node _T_1 = eq(io.cfg_addr, UInt<1>("h00")) @[ConfigMem.scala 39:38]
    node _T_2 = and(io.cfg_en, _T_1) @[ConfigMem.scala 39:22]
    when _T_2 : @[ConfigMem.scala 39:47]
      node _T_3 = bits(regs[0], 47, 32) @[ConfigMem.scala 41:33]
      node _T_4 = cat(_T_3, io.cfg_data) @[Cat.scala 29:58]
      regs[0] <= _T_4 @[ConfigMem.scala 41:19]
      skip @[ConfigMem.scala 39:47]
    node _T_5 = eq(io.cfg_addr, UInt<1>("h01")) @[ConfigMem.scala 39:38]
    node _T_6 = and(io.cfg_en, _T_5) @[ConfigMem.scala 39:22]
    when _T_6 : @[ConfigMem.scala 39:47]
      node _T_7 = bits(regs[0], 31, 0) @[ConfigMem.scala 43:46]
      node _T_8 = cat(io.cfg_data, _T_7) @[Cat.scala 29:58]
      regs[0] <= _T_8 @[ConfigMem.scala 43:19]
      skip @[ConfigMem.scala 39:47]
    io.out[0] <= regs[0] @[ConfigMem.scala 52:45]
    
  module GPE_47 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<12>, flip cfg_data : UInt<32>, flip en : UInt<1>, flip in : UInt<32>[8], out : UInt<32>[1]}
    
    inst alu of ALU_47 @[PE.scala 50:19]
    alu.clock <= clock
    alu.reset <= reset
    inst rf of RF_47 @[PE.scala 51:18]
    rf.clock <= clock
    rf.reset <= reset
    inst DelayPipe of DelayPipe_94 @[PE.scala 52:54]
    DelayPipe.clock <= clock
    DelayPipe.reset <= reset
    inst DelayPipe_1 of DelayPipe_95 @[PE.scala 52:54]
    DelayPipe_1.clock <= clock
    DelayPipe_1.reset <= reset
    wire const : UInt<32> @[PE.scala 54:19]
    inst Muxn of Muxn_110 @[PE.scala 55:49]
    Muxn.clock <= clock
    Muxn.reset <= reset
    inst Muxn_1 of Muxn_111 @[PE.scala 55:49]
    Muxn_1.clock <= clock
    Muxn_1.reset <= reset
    Muxn.io.in[0] <= io.in[0] @[PE.scala 62:12]
    Muxn.io.in[1] <= io.in[1] @[PE.scala 62:12]
    Muxn.io.in[2] <= io.in[2] @[PE.scala 62:12]
    Muxn.io.in[3] <= io.in[3] @[PE.scala 62:12]
    Muxn.io.in[4] <= const @[PE.scala 64:12]
    Muxn.io.in[5] <= rf.io.out[1] @[PE.scala 66:12]
    DelayPipe.io.en <= io.en @[PE.scala 69:23]
    DelayPipe.io.in <= Muxn.io.out @[PE.scala 70:23]
    alu.io.in[0] <= DelayPipe.io.out @[PE.scala 71:18]
    Muxn_1.io.in[0] <= io.in[4] @[PE.scala 62:12]
    Muxn_1.io.in[1] <= io.in[5] @[PE.scala 62:12]
    Muxn_1.io.in[2] <= io.in[6] @[PE.scala 62:12]
    Muxn_1.io.in[3] <= io.in[7] @[PE.scala 62:12]
    Muxn_1.io.in[4] <= const @[PE.scala 64:12]
    Muxn_1.io.in[5] <= rf.io.out[1] @[PE.scala 66:12]
    DelayPipe_1.io.en <= io.en @[PE.scala 69:23]
    DelayPipe_1.io.in <= Muxn_1.io.out @[PE.scala 70:23]
    alu.io.in[1] <= DelayPipe_1.io.out @[PE.scala 71:18]
    rf.io.en <= io.en @[PE.scala 75:12]
    rf.io.in[0] <= alu.io.out @[PE.scala 76:15]
    io.out[0] <= rf.io.out[0] @[PE.scala 77:13]
    inst cfg of ConfigMem_63 @[PE.scala 89:19]
    cfg.clock <= clock
    cfg.reset <= reset
    node _T = bits(io.cfg_addr, 11, 2) @[PE.scala 90:63]
    node _T_1 = eq(UInt<7>("h07d"), _T) @[PE.scala 90:48]
    node _T_2 = and(io.cfg_en, _T_1) @[PE.scala 90:30]
    cfg.io.cfg_en <= _T_2 @[PE.scala 90:17]
    node _T_3 = bits(io.cfg_addr, 1, 0) @[PE.scala 91:33]
    cfg.io.cfg_addr <= _T_3 @[PE.scala 91:19]
    cfg.io.cfg_data <= io.cfg_data @[PE.scala 92:19]
    wire cfgOut : UInt<48> @[PE.scala 96:20]
    cfgOut <= cfg.io.out[0] @[PE.scala 97:10]
    node _T_4 = bits(cfgOut, 31, 0) @[PE.scala 98:18]
    const <= _T_4 @[PE.scala 98:9]
    node _T_5 = bits(cfgOut, 35, 32) @[PE.scala 100:28]
    alu.io.config <= _T_5 @[PE.scala 100:19]
    rf.io.config is invalid @[PE.scala 107:18]
    node _T_6 = bits(cfgOut, 38, 36) @[PE.scala 113:38]
    DelayPipe.io.config <= _T_6 @[PE.scala 113:29]
    node _T_7 = bits(cfgOut, 41, 39) @[PE.scala 113:38]
    DelayPipe_1.io.config <= _T_7 @[PE.scala 113:29]
    node _T_8 = bits(cfgOut, 44, 42) @[PE.scala 121:32]
    Muxn.io.config <= _T_8 @[PE.scala 121:23]
    node _T_9 = bits(cfgOut, 47, 45) @[PE.scala 121:32]
    Muxn_1.io.config <= _T_9 @[PE.scala 121:23]
    
  module ALU_48 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<4>, flip in : UInt<32>[2], out : UInt<32>}
    
    node _T = bits(io.in[0], 31, 0) @[Operations.scala 122:31]
    node _T_1 = bits(io.in[0], 31, 0) @[Operations.scala 124:31]
    node _T_2 = bits(io.in[1], 31, 0) @[Operations.scala 124:49]
    node _T_3 = add(_T_1, _T_2) @[Operations.scala 124:41]
    node _T_4 = tail(_T_3, 1) @[Operations.scala 124:41]
    node _T_5 = bits(io.in[0], 31, 0) @[Operations.scala 126:31]
    node _T_6 = bits(io.in[1], 31, 0) @[Operations.scala 126:49]
    node _T_7 = sub(_T_5, _T_6) @[Operations.scala 126:41]
    node _T_8 = tail(_T_7, 1) @[Operations.scala 126:41]
    node _T_9 = bits(io.in[0], 31, 0) @[Operations.scala 128:31]
    node _T_10 = bits(io.in[1], 31, 0) @[Operations.scala 128:49]
    node _T_11 = mul(_T_9, _T_10) @[Operations.scala 128:41]
    node _T_12 = bits(io.in[0], 31, 0) @[Operations.scala 138:31]
    node _T_13 = bits(io.in[1], 31, 0) @[Operations.scala 138:49]
    node _T_14 = and(_T_12, _T_13) @[Operations.scala 138:41]
    node _T_15 = bits(io.in[0], 31, 0) @[Operations.scala 140:31]
    node _T_16 = bits(io.in[1], 31, 0) @[Operations.scala 140:49]
    node _T_17 = or(_T_15, _T_16) @[Operations.scala 140:41]
    node _T_18 = bits(io.in[0], 31, 0) @[Operations.scala 142:31]
    node _T_19 = bits(io.in[1], 31, 0) @[Operations.scala 142:49]
    node _T_20 = xor(_T_18, _T_19) @[Operations.scala 142:41]
    node _T_21 = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_22 = mux(_T_21, _T, UInt<1>("h00")) @[Mux.scala 80:57]
    node _T_23 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_24 = mux(_T_23, _T_4, _T_22) @[Mux.scala 80:57]
    node _T_25 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_26 = mux(_T_25, _T_8, _T_24) @[Mux.scala 80:57]
    node _T_27 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_28 = mux(_T_27, _T_11, _T_26) @[Mux.scala 80:57]
    node _T_29 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_30 = mux(_T_29, _T_14, _T_28) @[Mux.scala 80:57]
    node _T_31 = eq(UInt<3>("h05"), io.config) @[Mux.scala 80:60]
    node _T_32 = mux(_T_31, _T_17, _T_30) @[Mux.scala 80:57]
    node _T_33 = eq(UInt<3>("h06"), io.config) @[Mux.scala 80:60]
    node _T_34 = mux(_T_33, _T_20, _T_32) @[Mux.scala 80:57]
    io.out <= _T_34 @[ALU.scala 25:10]
    
  module RF_48 : 
    input clock : Clock
    input reset : Reset
    output io : {flip en : UInt<1>, flip config : UInt<0>, flip in : UInt<32>[1], out : UInt<32>[2]}
    
    wire _T : UInt<32>[1] @[RegFile.scala 24:29]
    _T[0] <= UInt<32>("h00") @[RegFile.scala 24:29]
    reg regs : UInt<32>[1], clock with : (reset => (reset, _T)) @[RegFile.scala 24:21]
    when io.en : @[RegFile.scala 34:16]
      regs[0] <= io.in[0] @[RegFile.scala 35:41]
      skip @[RegFile.scala 34:16]
    io.out[0] <= regs[0] @[RegFile.scala 37:42]
    io.out[1] <= regs[0] @[RegFile.scala 37:42]
    
  module DelayPipe_96 : 
    input clock : Clock
    input reset : Reset
    output io : {flip en : UInt<1>, flip config : UInt<3>, flip in : UInt<32>, out : UInt<32>}
    
    wire _T : UInt<32>[5] @[DelayPipe.scala 22:29]
    _T[0] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[1] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[2] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[3] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[4] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    reg regs : UInt<32>[5], clock with : (reset => (reset, _T)) @[DelayPipe.scala 22:21]
    reg wptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 23:21]
    reg rptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 24:21]
    node _T_1 = lt(wptr, UInt<3>("h04")) @[DelayPipe.scala 26:23]
    node _T_2 = and(io.en, _T_1) @[DelayPipe.scala 26:14]
    when _T_2 : @[DelayPipe.scala 26:37]
      node _T_3 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 27:17]
      node _T_4 = tail(_T_3, 1) @[DelayPipe.scala 27:17]
      wptr <= _T_4 @[DelayPipe.scala 27:10]
      skip @[DelayPipe.scala 26:37]
    else : @[DelayPipe.scala 28:14]
      wptr <= UInt<1>("h00") @[DelayPipe.scala 29:10]
      skip @[DelayPipe.scala 28:14]
    node _T_5 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 32:12]
    node _T_6 = tail(_T_5, 1) @[DelayPipe.scala 32:12]
    node _T_7 = geq(_T_6, io.config) @[DelayPipe.scala 32:17]
    when _T_7 : @[DelayPipe.scala 32:30]
      node _T_8 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 33:18]
      node _T_9 = tail(_T_8, 1) @[DelayPipe.scala 33:18]
      node _T_10 = sub(_T_9, io.config) @[DelayPipe.scala 33:24]
      node _T_11 = tail(_T_10, 1) @[DelayPipe.scala 33:24]
      rptr <= _T_11 @[DelayPipe.scala 33:10]
      skip @[DelayPipe.scala 32:30]
    else : @[DelayPipe.scala 34:14]
      node _T_12 = add(UInt<3>("h06"), wptr) @[DelayPipe.scala 35:30]
      node _T_13 = tail(_T_12, 1) @[DelayPipe.scala 35:30]
      node _T_14 = sub(_T_13, io.config) @[DelayPipe.scala 35:37]
      node _T_15 = tail(_T_14, 1) @[DelayPipe.scala 35:37]
      rptr <= _T_15 @[DelayPipe.scala 35:10]
      skip @[DelayPipe.scala 34:14]
    node _T_16 = gt(io.config, UInt<1>("h00")) @[DelayPipe.scala 39:28]
    node _T_17 = and(io.en, _T_16) @[DelayPipe.scala 39:14]
    when _T_17 : @[DelayPipe.scala 39:35]
      regs[wptr] <= io.in @[DelayPipe.scala 40:16]
      skip @[DelayPipe.scala 39:35]
    reg cnt : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 43:20]
    node _T_18 = eq(io.en, UInt<1>("h00")) @[DelayPipe.scala 44:8]
    when _T_18 : @[DelayPipe.scala 44:15]
      cnt <= UInt<1>("h00") @[DelayPipe.scala 45:9]
      skip @[DelayPipe.scala 44:15]
    else : @[DelayPipe.scala 46:30]
      node _T_19 = lt(cnt, io.config) @[DelayPipe.scala 46:18]
      when _T_19 : @[DelayPipe.scala 46:30]
        node _T_20 = add(cnt, UInt<1>("h01")) @[DelayPipe.scala 47:16]
        node _T_21 = tail(_T_20, 1) @[DelayPipe.scala 47:16]
        cnt <= _T_21 @[DelayPipe.scala 47:9]
        skip @[DelayPipe.scala 46:30]
    node _T_22 = eq(UInt<1>("h00"), io.config) @[DelayPipe.scala 50:22]
    node _T_23 = and(io.en, _T_22) @[DelayPipe.scala 50:14]
    when _T_23 : @[DelayPipe.scala 50:37]
      io.out <= io.in @[DelayPipe.scala 51:12]
      skip @[DelayPipe.scala 50:37]
    else : @[DelayPipe.scala 52:43]
      node _T_24 = eq(cnt, io.config) @[DelayPipe.scala 52:28]
      node _T_25 = and(io.en, _T_24) @[DelayPipe.scala 52:20]
      when _T_25 : @[DelayPipe.scala 52:43]
        io.out <= regs[rptr] @[DelayPipe.scala 53:12]
        skip @[DelayPipe.scala 52:43]
      else : @[DelayPipe.scala 54:14]
        io.out <= UInt<1>("h00") @[DelayPipe.scala 55:12]
        skip @[DelayPipe.scala 54:14]
    
  module DelayPipe_97 : 
    input clock : Clock
    input reset : Reset
    output io : {flip en : UInt<1>, flip config : UInt<3>, flip in : UInt<32>, out : UInt<32>}
    
    wire _T : UInt<32>[5] @[DelayPipe.scala 22:29]
    _T[0] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[1] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[2] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[3] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[4] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    reg regs : UInt<32>[5], clock with : (reset => (reset, _T)) @[DelayPipe.scala 22:21]
    reg wptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 23:21]
    reg rptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 24:21]
    node _T_1 = lt(wptr, UInt<3>("h04")) @[DelayPipe.scala 26:23]
    node _T_2 = and(io.en, _T_1) @[DelayPipe.scala 26:14]
    when _T_2 : @[DelayPipe.scala 26:37]
      node _T_3 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 27:17]
      node _T_4 = tail(_T_3, 1) @[DelayPipe.scala 27:17]
      wptr <= _T_4 @[DelayPipe.scala 27:10]
      skip @[DelayPipe.scala 26:37]
    else : @[DelayPipe.scala 28:14]
      wptr <= UInt<1>("h00") @[DelayPipe.scala 29:10]
      skip @[DelayPipe.scala 28:14]
    node _T_5 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 32:12]
    node _T_6 = tail(_T_5, 1) @[DelayPipe.scala 32:12]
    node _T_7 = geq(_T_6, io.config) @[DelayPipe.scala 32:17]
    when _T_7 : @[DelayPipe.scala 32:30]
      node _T_8 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 33:18]
      node _T_9 = tail(_T_8, 1) @[DelayPipe.scala 33:18]
      node _T_10 = sub(_T_9, io.config) @[DelayPipe.scala 33:24]
      node _T_11 = tail(_T_10, 1) @[DelayPipe.scala 33:24]
      rptr <= _T_11 @[DelayPipe.scala 33:10]
      skip @[DelayPipe.scala 32:30]
    else : @[DelayPipe.scala 34:14]
      node _T_12 = add(UInt<3>("h06"), wptr) @[DelayPipe.scala 35:30]
      node _T_13 = tail(_T_12, 1) @[DelayPipe.scala 35:30]
      node _T_14 = sub(_T_13, io.config) @[DelayPipe.scala 35:37]
      node _T_15 = tail(_T_14, 1) @[DelayPipe.scala 35:37]
      rptr <= _T_15 @[DelayPipe.scala 35:10]
      skip @[DelayPipe.scala 34:14]
    node _T_16 = gt(io.config, UInt<1>("h00")) @[DelayPipe.scala 39:28]
    node _T_17 = and(io.en, _T_16) @[DelayPipe.scala 39:14]
    when _T_17 : @[DelayPipe.scala 39:35]
      regs[wptr] <= io.in @[DelayPipe.scala 40:16]
      skip @[DelayPipe.scala 39:35]
    reg cnt : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 43:20]
    node _T_18 = eq(io.en, UInt<1>("h00")) @[DelayPipe.scala 44:8]
    when _T_18 : @[DelayPipe.scala 44:15]
      cnt <= UInt<1>("h00") @[DelayPipe.scala 45:9]
      skip @[DelayPipe.scala 44:15]
    else : @[DelayPipe.scala 46:30]
      node _T_19 = lt(cnt, io.config) @[DelayPipe.scala 46:18]
      when _T_19 : @[DelayPipe.scala 46:30]
        node _T_20 = add(cnt, UInt<1>("h01")) @[DelayPipe.scala 47:16]
        node _T_21 = tail(_T_20, 1) @[DelayPipe.scala 47:16]
        cnt <= _T_21 @[DelayPipe.scala 47:9]
        skip @[DelayPipe.scala 46:30]
    node _T_22 = eq(UInt<1>("h00"), io.config) @[DelayPipe.scala 50:22]
    node _T_23 = and(io.en, _T_22) @[DelayPipe.scala 50:14]
    when _T_23 : @[DelayPipe.scala 50:37]
      io.out <= io.in @[DelayPipe.scala 51:12]
      skip @[DelayPipe.scala 50:37]
    else : @[DelayPipe.scala 52:43]
      node _T_24 = eq(cnt, io.config) @[DelayPipe.scala 52:28]
      node _T_25 = and(io.en, _T_24) @[DelayPipe.scala 52:20]
      when _T_25 : @[DelayPipe.scala 52:43]
        io.out <= regs[rptr] @[DelayPipe.scala 53:12]
        skip @[DelayPipe.scala 52:43]
      else : @[DelayPipe.scala 54:14]
        io.out <= UInt<1>("h00") @[DelayPipe.scala 55:12]
        skip @[DelayPipe.scala 54:14]
    
  module Muxn_112 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[6], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    node _T_10 = eq(UInt<3>("h05"), io.config) @[Mux.scala 80:60]
    node _T_11 = mux(_T_10, io.in[5], _T_9) @[Mux.scala 80:57]
    io.out <= _T_11 @[Multiplexer.scala 20:10]
    
  module Muxn_113 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[6], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    node _T_10 = eq(UInt<3>("h05"), io.config) @[Mux.scala 80:60]
    node _T_11 = mux(_T_10, io.in[5], _T_9) @[Mux.scala 80:57]
    io.out <= _T_11 @[Multiplexer.scala 20:10]
    
  module ConfigMem_64 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<1>, flip cfg_data : UInt<32>, out : UInt<48>[1]}
    
    wire _T : UInt<48>[1] @[ConfigMem.scala 27:29]
    _T[0] <= UInt<48>("h00") @[ConfigMem.scala 27:29]
    reg regs : UInt<48>[1], clock with : (reset => (reset, _T)) @[ConfigMem.scala 27:21]
    node _T_1 = eq(io.cfg_addr, UInt<1>("h00")) @[ConfigMem.scala 39:38]
    node _T_2 = and(io.cfg_en, _T_1) @[ConfigMem.scala 39:22]
    when _T_2 : @[ConfigMem.scala 39:47]
      node _T_3 = bits(regs[0], 47, 32) @[ConfigMem.scala 41:33]
      node _T_4 = cat(_T_3, io.cfg_data) @[Cat.scala 29:58]
      regs[0] <= _T_4 @[ConfigMem.scala 41:19]
      skip @[ConfigMem.scala 39:47]
    node _T_5 = eq(io.cfg_addr, UInt<1>("h01")) @[ConfigMem.scala 39:38]
    node _T_6 = and(io.cfg_en, _T_5) @[ConfigMem.scala 39:22]
    when _T_6 : @[ConfigMem.scala 39:47]
      node _T_7 = bits(regs[0], 31, 0) @[ConfigMem.scala 43:46]
      node _T_8 = cat(io.cfg_data, _T_7) @[Cat.scala 29:58]
      regs[0] <= _T_8 @[ConfigMem.scala 43:19]
      skip @[ConfigMem.scala 39:47]
    io.out[0] <= regs[0] @[ConfigMem.scala 52:45]
    
  module GPE_48 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<12>, flip cfg_data : UInt<32>, flip en : UInt<1>, flip in : UInt<32>[8], out : UInt<32>[1]}
    
    inst alu of ALU_48 @[PE.scala 50:19]
    alu.clock <= clock
    alu.reset <= reset
    inst rf of RF_48 @[PE.scala 51:18]
    rf.clock <= clock
    rf.reset <= reset
    inst DelayPipe of DelayPipe_96 @[PE.scala 52:54]
    DelayPipe.clock <= clock
    DelayPipe.reset <= reset
    inst DelayPipe_1 of DelayPipe_97 @[PE.scala 52:54]
    DelayPipe_1.clock <= clock
    DelayPipe_1.reset <= reset
    wire const : UInt<32> @[PE.scala 54:19]
    inst Muxn of Muxn_112 @[PE.scala 55:49]
    Muxn.clock <= clock
    Muxn.reset <= reset
    inst Muxn_1 of Muxn_113 @[PE.scala 55:49]
    Muxn_1.clock <= clock
    Muxn_1.reset <= reset
    Muxn.io.in[0] <= io.in[0] @[PE.scala 62:12]
    Muxn.io.in[1] <= io.in[1] @[PE.scala 62:12]
    Muxn.io.in[2] <= io.in[2] @[PE.scala 62:12]
    Muxn.io.in[3] <= io.in[3] @[PE.scala 62:12]
    Muxn.io.in[4] <= const @[PE.scala 64:12]
    Muxn.io.in[5] <= rf.io.out[1] @[PE.scala 66:12]
    DelayPipe.io.en <= io.en @[PE.scala 69:23]
    DelayPipe.io.in <= Muxn.io.out @[PE.scala 70:23]
    alu.io.in[0] <= DelayPipe.io.out @[PE.scala 71:18]
    Muxn_1.io.in[0] <= io.in[4] @[PE.scala 62:12]
    Muxn_1.io.in[1] <= io.in[5] @[PE.scala 62:12]
    Muxn_1.io.in[2] <= io.in[6] @[PE.scala 62:12]
    Muxn_1.io.in[3] <= io.in[7] @[PE.scala 62:12]
    Muxn_1.io.in[4] <= const @[PE.scala 64:12]
    Muxn_1.io.in[5] <= rf.io.out[1] @[PE.scala 66:12]
    DelayPipe_1.io.en <= io.en @[PE.scala 69:23]
    DelayPipe_1.io.in <= Muxn_1.io.out @[PE.scala 70:23]
    alu.io.in[1] <= DelayPipe_1.io.out @[PE.scala 71:18]
    rf.io.en <= io.en @[PE.scala 75:12]
    rf.io.in[0] <= alu.io.out @[PE.scala 76:15]
    io.out[0] <= rf.io.out[0] @[PE.scala 77:13]
    inst cfg of ConfigMem_64 @[PE.scala 89:19]
    cfg.clock <= clock
    cfg.reset <= reset
    node _T = bits(io.cfg_addr, 11, 2) @[PE.scala 90:63]
    node _T_1 = eq(UInt<8>("h088"), _T) @[PE.scala 90:48]
    node _T_2 = and(io.cfg_en, _T_1) @[PE.scala 90:30]
    cfg.io.cfg_en <= _T_2 @[PE.scala 90:17]
    node _T_3 = bits(io.cfg_addr, 1, 0) @[PE.scala 91:33]
    cfg.io.cfg_addr <= _T_3 @[PE.scala 91:19]
    cfg.io.cfg_data <= io.cfg_data @[PE.scala 92:19]
    wire cfgOut : UInt<48> @[PE.scala 96:20]
    cfgOut <= cfg.io.out[0] @[PE.scala 97:10]
    node _T_4 = bits(cfgOut, 31, 0) @[PE.scala 98:18]
    const <= _T_4 @[PE.scala 98:9]
    node _T_5 = bits(cfgOut, 35, 32) @[PE.scala 100:28]
    alu.io.config <= _T_5 @[PE.scala 100:19]
    rf.io.config is invalid @[PE.scala 107:18]
    node _T_6 = bits(cfgOut, 38, 36) @[PE.scala 113:38]
    DelayPipe.io.config <= _T_6 @[PE.scala 113:29]
    node _T_7 = bits(cfgOut, 41, 39) @[PE.scala 113:38]
    DelayPipe_1.io.config <= _T_7 @[PE.scala 113:29]
    node _T_8 = bits(cfgOut, 44, 42) @[PE.scala 121:32]
    Muxn.io.config <= _T_8 @[PE.scala 121:23]
    node _T_9 = bits(cfgOut, 47, 45) @[PE.scala 121:32]
    Muxn_1.io.config <= _T_9 @[PE.scala 121:23]
    
  module ALU_49 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<4>, flip in : UInt<32>[2], out : UInt<32>}
    
    node _T = bits(io.in[0], 31, 0) @[Operations.scala 122:31]
    node _T_1 = bits(io.in[0], 31, 0) @[Operations.scala 124:31]
    node _T_2 = bits(io.in[1], 31, 0) @[Operations.scala 124:49]
    node _T_3 = add(_T_1, _T_2) @[Operations.scala 124:41]
    node _T_4 = tail(_T_3, 1) @[Operations.scala 124:41]
    node _T_5 = bits(io.in[0], 31, 0) @[Operations.scala 126:31]
    node _T_6 = bits(io.in[1], 31, 0) @[Operations.scala 126:49]
    node _T_7 = sub(_T_5, _T_6) @[Operations.scala 126:41]
    node _T_8 = tail(_T_7, 1) @[Operations.scala 126:41]
    node _T_9 = bits(io.in[0], 31, 0) @[Operations.scala 128:31]
    node _T_10 = bits(io.in[1], 31, 0) @[Operations.scala 128:49]
    node _T_11 = mul(_T_9, _T_10) @[Operations.scala 128:41]
    node _T_12 = bits(io.in[0], 31, 0) @[Operations.scala 138:31]
    node _T_13 = bits(io.in[1], 31, 0) @[Operations.scala 138:49]
    node _T_14 = and(_T_12, _T_13) @[Operations.scala 138:41]
    node _T_15 = bits(io.in[0], 31, 0) @[Operations.scala 140:31]
    node _T_16 = bits(io.in[1], 31, 0) @[Operations.scala 140:49]
    node _T_17 = or(_T_15, _T_16) @[Operations.scala 140:41]
    node _T_18 = bits(io.in[0], 31, 0) @[Operations.scala 142:31]
    node _T_19 = bits(io.in[1], 31, 0) @[Operations.scala 142:49]
    node _T_20 = xor(_T_18, _T_19) @[Operations.scala 142:41]
    node _T_21 = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_22 = mux(_T_21, _T, UInt<1>("h00")) @[Mux.scala 80:57]
    node _T_23 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_24 = mux(_T_23, _T_4, _T_22) @[Mux.scala 80:57]
    node _T_25 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_26 = mux(_T_25, _T_8, _T_24) @[Mux.scala 80:57]
    node _T_27 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_28 = mux(_T_27, _T_11, _T_26) @[Mux.scala 80:57]
    node _T_29 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_30 = mux(_T_29, _T_14, _T_28) @[Mux.scala 80:57]
    node _T_31 = eq(UInt<3>("h05"), io.config) @[Mux.scala 80:60]
    node _T_32 = mux(_T_31, _T_17, _T_30) @[Mux.scala 80:57]
    node _T_33 = eq(UInt<3>("h06"), io.config) @[Mux.scala 80:60]
    node _T_34 = mux(_T_33, _T_20, _T_32) @[Mux.scala 80:57]
    io.out <= _T_34 @[ALU.scala 25:10]
    
  module RF_49 : 
    input clock : Clock
    input reset : Reset
    output io : {flip en : UInt<1>, flip config : UInt<0>, flip in : UInt<32>[1], out : UInt<32>[2]}
    
    wire _T : UInt<32>[1] @[RegFile.scala 24:29]
    _T[0] <= UInt<32>("h00") @[RegFile.scala 24:29]
    reg regs : UInt<32>[1], clock with : (reset => (reset, _T)) @[RegFile.scala 24:21]
    when io.en : @[RegFile.scala 34:16]
      regs[0] <= io.in[0] @[RegFile.scala 35:41]
      skip @[RegFile.scala 34:16]
    io.out[0] <= regs[0] @[RegFile.scala 37:42]
    io.out[1] <= regs[0] @[RegFile.scala 37:42]
    
  module DelayPipe_98 : 
    input clock : Clock
    input reset : Reset
    output io : {flip en : UInt<1>, flip config : UInt<3>, flip in : UInt<32>, out : UInt<32>}
    
    wire _T : UInt<32>[5] @[DelayPipe.scala 22:29]
    _T[0] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[1] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[2] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[3] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[4] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    reg regs : UInt<32>[5], clock with : (reset => (reset, _T)) @[DelayPipe.scala 22:21]
    reg wptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 23:21]
    reg rptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 24:21]
    node _T_1 = lt(wptr, UInt<3>("h04")) @[DelayPipe.scala 26:23]
    node _T_2 = and(io.en, _T_1) @[DelayPipe.scala 26:14]
    when _T_2 : @[DelayPipe.scala 26:37]
      node _T_3 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 27:17]
      node _T_4 = tail(_T_3, 1) @[DelayPipe.scala 27:17]
      wptr <= _T_4 @[DelayPipe.scala 27:10]
      skip @[DelayPipe.scala 26:37]
    else : @[DelayPipe.scala 28:14]
      wptr <= UInt<1>("h00") @[DelayPipe.scala 29:10]
      skip @[DelayPipe.scala 28:14]
    node _T_5 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 32:12]
    node _T_6 = tail(_T_5, 1) @[DelayPipe.scala 32:12]
    node _T_7 = geq(_T_6, io.config) @[DelayPipe.scala 32:17]
    when _T_7 : @[DelayPipe.scala 32:30]
      node _T_8 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 33:18]
      node _T_9 = tail(_T_8, 1) @[DelayPipe.scala 33:18]
      node _T_10 = sub(_T_9, io.config) @[DelayPipe.scala 33:24]
      node _T_11 = tail(_T_10, 1) @[DelayPipe.scala 33:24]
      rptr <= _T_11 @[DelayPipe.scala 33:10]
      skip @[DelayPipe.scala 32:30]
    else : @[DelayPipe.scala 34:14]
      node _T_12 = add(UInt<3>("h06"), wptr) @[DelayPipe.scala 35:30]
      node _T_13 = tail(_T_12, 1) @[DelayPipe.scala 35:30]
      node _T_14 = sub(_T_13, io.config) @[DelayPipe.scala 35:37]
      node _T_15 = tail(_T_14, 1) @[DelayPipe.scala 35:37]
      rptr <= _T_15 @[DelayPipe.scala 35:10]
      skip @[DelayPipe.scala 34:14]
    node _T_16 = gt(io.config, UInt<1>("h00")) @[DelayPipe.scala 39:28]
    node _T_17 = and(io.en, _T_16) @[DelayPipe.scala 39:14]
    when _T_17 : @[DelayPipe.scala 39:35]
      regs[wptr] <= io.in @[DelayPipe.scala 40:16]
      skip @[DelayPipe.scala 39:35]
    reg cnt : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 43:20]
    node _T_18 = eq(io.en, UInt<1>("h00")) @[DelayPipe.scala 44:8]
    when _T_18 : @[DelayPipe.scala 44:15]
      cnt <= UInt<1>("h00") @[DelayPipe.scala 45:9]
      skip @[DelayPipe.scala 44:15]
    else : @[DelayPipe.scala 46:30]
      node _T_19 = lt(cnt, io.config) @[DelayPipe.scala 46:18]
      when _T_19 : @[DelayPipe.scala 46:30]
        node _T_20 = add(cnt, UInt<1>("h01")) @[DelayPipe.scala 47:16]
        node _T_21 = tail(_T_20, 1) @[DelayPipe.scala 47:16]
        cnt <= _T_21 @[DelayPipe.scala 47:9]
        skip @[DelayPipe.scala 46:30]
    node _T_22 = eq(UInt<1>("h00"), io.config) @[DelayPipe.scala 50:22]
    node _T_23 = and(io.en, _T_22) @[DelayPipe.scala 50:14]
    when _T_23 : @[DelayPipe.scala 50:37]
      io.out <= io.in @[DelayPipe.scala 51:12]
      skip @[DelayPipe.scala 50:37]
    else : @[DelayPipe.scala 52:43]
      node _T_24 = eq(cnt, io.config) @[DelayPipe.scala 52:28]
      node _T_25 = and(io.en, _T_24) @[DelayPipe.scala 52:20]
      when _T_25 : @[DelayPipe.scala 52:43]
        io.out <= regs[rptr] @[DelayPipe.scala 53:12]
        skip @[DelayPipe.scala 52:43]
      else : @[DelayPipe.scala 54:14]
        io.out <= UInt<1>("h00") @[DelayPipe.scala 55:12]
        skip @[DelayPipe.scala 54:14]
    
  module DelayPipe_99 : 
    input clock : Clock
    input reset : Reset
    output io : {flip en : UInt<1>, flip config : UInt<3>, flip in : UInt<32>, out : UInt<32>}
    
    wire _T : UInt<32>[5] @[DelayPipe.scala 22:29]
    _T[0] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[1] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[2] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[3] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[4] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    reg regs : UInt<32>[5], clock with : (reset => (reset, _T)) @[DelayPipe.scala 22:21]
    reg wptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 23:21]
    reg rptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 24:21]
    node _T_1 = lt(wptr, UInt<3>("h04")) @[DelayPipe.scala 26:23]
    node _T_2 = and(io.en, _T_1) @[DelayPipe.scala 26:14]
    when _T_2 : @[DelayPipe.scala 26:37]
      node _T_3 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 27:17]
      node _T_4 = tail(_T_3, 1) @[DelayPipe.scala 27:17]
      wptr <= _T_4 @[DelayPipe.scala 27:10]
      skip @[DelayPipe.scala 26:37]
    else : @[DelayPipe.scala 28:14]
      wptr <= UInt<1>("h00") @[DelayPipe.scala 29:10]
      skip @[DelayPipe.scala 28:14]
    node _T_5 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 32:12]
    node _T_6 = tail(_T_5, 1) @[DelayPipe.scala 32:12]
    node _T_7 = geq(_T_6, io.config) @[DelayPipe.scala 32:17]
    when _T_7 : @[DelayPipe.scala 32:30]
      node _T_8 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 33:18]
      node _T_9 = tail(_T_8, 1) @[DelayPipe.scala 33:18]
      node _T_10 = sub(_T_9, io.config) @[DelayPipe.scala 33:24]
      node _T_11 = tail(_T_10, 1) @[DelayPipe.scala 33:24]
      rptr <= _T_11 @[DelayPipe.scala 33:10]
      skip @[DelayPipe.scala 32:30]
    else : @[DelayPipe.scala 34:14]
      node _T_12 = add(UInt<3>("h06"), wptr) @[DelayPipe.scala 35:30]
      node _T_13 = tail(_T_12, 1) @[DelayPipe.scala 35:30]
      node _T_14 = sub(_T_13, io.config) @[DelayPipe.scala 35:37]
      node _T_15 = tail(_T_14, 1) @[DelayPipe.scala 35:37]
      rptr <= _T_15 @[DelayPipe.scala 35:10]
      skip @[DelayPipe.scala 34:14]
    node _T_16 = gt(io.config, UInt<1>("h00")) @[DelayPipe.scala 39:28]
    node _T_17 = and(io.en, _T_16) @[DelayPipe.scala 39:14]
    when _T_17 : @[DelayPipe.scala 39:35]
      regs[wptr] <= io.in @[DelayPipe.scala 40:16]
      skip @[DelayPipe.scala 39:35]
    reg cnt : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 43:20]
    node _T_18 = eq(io.en, UInt<1>("h00")) @[DelayPipe.scala 44:8]
    when _T_18 : @[DelayPipe.scala 44:15]
      cnt <= UInt<1>("h00") @[DelayPipe.scala 45:9]
      skip @[DelayPipe.scala 44:15]
    else : @[DelayPipe.scala 46:30]
      node _T_19 = lt(cnt, io.config) @[DelayPipe.scala 46:18]
      when _T_19 : @[DelayPipe.scala 46:30]
        node _T_20 = add(cnt, UInt<1>("h01")) @[DelayPipe.scala 47:16]
        node _T_21 = tail(_T_20, 1) @[DelayPipe.scala 47:16]
        cnt <= _T_21 @[DelayPipe.scala 47:9]
        skip @[DelayPipe.scala 46:30]
    node _T_22 = eq(UInt<1>("h00"), io.config) @[DelayPipe.scala 50:22]
    node _T_23 = and(io.en, _T_22) @[DelayPipe.scala 50:14]
    when _T_23 : @[DelayPipe.scala 50:37]
      io.out <= io.in @[DelayPipe.scala 51:12]
      skip @[DelayPipe.scala 50:37]
    else : @[DelayPipe.scala 52:43]
      node _T_24 = eq(cnt, io.config) @[DelayPipe.scala 52:28]
      node _T_25 = and(io.en, _T_24) @[DelayPipe.scala 52:20]
      when _T_25 : @[DelayPipe.scala 52:43]
        io.out <= regs[rptr] @[DelayPipe.scala 53:12]
        skip @[DelayPipe.scala 52:43]
      else : @[DelayPipe.scala 54:14]
        io.out <= UInt<1>("h00") @[DelayPipe.scala 55:12]
        skip @[DelayPipe.scala 54:14]
    
  module Muxn_114 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[6], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    node _T_10 = eq(UInt<3>("h05"), io.config) @[Mux.scala 80:60]
    node _T_11 = mux(_T_10, io.in[5], _T_9) @[Mux.scala 80:57]
    io.out <= _T_11 @[Multiplexer.scala 20:10]
    
  module Muxn_115 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[6], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    node _T_10 = eq(UInt<3>("h05"), io.config) @[Mux.scala 80:60]
    node _T_11 = mux(_T_10, io.in[5], _T_9) @[Mux.scala 80:57]
    io.out <= _T_11 @[Multiplexer.scala 20:10]
    
  module ConfigMem_65 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<1>, flip cfg_data : UInt<32>, out : UInt<48>[1]}
    
    wire _T : UInt<48>[1] @[ConfigMem.scala 27:29]
    _T[0] <= UInt<48>("h00") @[ConfigMem.scala 27:29]
    reg regs : UInt<48>[1], clock with : (reset => (reset, _T)) @[ConfigMem.scala 27:21]
    node _T_1 = eq(io.cfg_addr, UInt<1>("h00")) @[ConfigMem.scala 39:38]
    node _T_2 = and(io.cfg_en, _T_1) @[ConfigMem.scala 39:22]
    when _T_2 : @[ConfigMem.scala 39:47]
      node _T_3 = bits(regs[0], 47, 32) @[ConfigMem.scala 41:33]
      node _T_4 = cat(_T_3, io.cfg_data) @[Cat.scala 29:58]
      regs[0] <= _T_4 @[ConfigMem.scala 41:19]
      skip @[ConfigMem.scala 39:47]
    node _T_5 = eq(io.cfg_addr, UInt<1>("h01")) @[ConfigMem.scala 39:38]
    node _T_6 = and(io.cfg_en, _T_5) @[ConfigMem.scala 39:22]
    when _T_6 : @[ConfigMem.scala 39:47]
      node _T_7 = bits(regs[0], 31, 0) @[ConfigMem.scala 43:46]
      node _T_8 = cat(io.cfg_data, _T_7) @[Cat.scala 29:58]
      regs[0] <= _T_8 @[ConfigMem.scala 43:19]
      skip @[ConfigMem.scala 39:47]
    io.out[0] <= regs[0] @[ConfigMem.scala 52:45]
    
  module GPE_49 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<12>, flip cfg_data : UInt<32>, flip en : UInt<1>, flip in : UInt<32>[8], out : UInt<32>[1]}
    
    inst alu of ALU_49 @[PE.scala 50:19]
    alu.clock <= clock
    alu.reset <= reset
    inst rf of RF_49 @[PE.scala 51:18]
    rf.clock <= clock
    rf.reset <= reset
    inst DelayPipe of DelayPipe_98 @[PE.scala 52:54]
    DelayPipe.clock <= clock
    DelayPipe.reset <= reset
    inst DelayPipe_1 of DelayPipe_99 @[PE.scala 52:54]
    DelayPipe_1.clock <= clock
    DelayPipe_1.reset <= reset
    wire const : UInt<32> @[PE.scala 54:19]
    inst Muxn of Muxn_114 @[PE.scala 55:49]
    Muxn.clock <= clock
    Muxn.reset <= reset
    inst Muxn_1 of Muxn_115 @[PE.scala 55:49]
    Muxn_1.clock <= clock
    Muxn_1.reset <= reset
    Muxn.io.in[0] <= io.in[0] @[PE.scala 62:12]
    Muxn.io.in[1] <= io.in[1] @[PE.scala 62:12]
    Muxn.io.in[2] <= io.in[2] @[PE.scala 62:12]
    Muxn.io.in[3] <= io.in[3] @[PE.scala 62:12]
    Muxn.io.in[4] <= const @[PE.scala 64:12]
    Muxn.io.in[5] <= rf.io.out[1] @[PE.scala 66:12]
    DelayPipe.io.en <= io.en @[PE.scala 69:23]
    DelayPipe.io.in <= Muxn.io.out @[PE.scala 70:23]
    alu.io.in[0] <= DelayPipe.io.out @[PE.scala 71:18]
    Muxn_1.io.in[0] <= io.in[4] @[PE.scala 62:12]
    Muxn_1.io.in[1] <= io.in[5] @[PE.scala 62:12]
    Muxn_1.io.in[2] <= io.in[6] @[PE.scala 62:12]
    Muxn_1.io.in[3] <= io.in[7] @[PE.scala 62:12]
    Muxn_1.io.in[4] <= const @[PE.scala 64:12]
    Muxn_1.io.in[5] <= rf.io.out[1] @[PE.scala 66:12]
    DelayPipe_1.io.en <= io.en @[PE.scala 69:23]
    DelayPipe_1.io.in <= Muxn_1.io.out @[PE.scala 70:23]
    alu.io.in[1] <= DelayPipe_1.io.out @[PE.scala 71:18]
    rf.io.en <= io.en @[PE.scala 75:12]
    rf.io.in[0] <= alu.io.out @[PE.scala 76:15]
    io.out[0] <= rf.io.out[0] @[PE.scala 77:13]
    inst cfg of ConfigMem_65 @[PE.scala 89:19]
    cfg.clock <= clock
    cfg.reset <= reset
    node _T = bits(io.cfg_addr, 11, 2) @[PE.scala 90:63]
    node _T_1 = eq(UInt<8>("h089"), _T) @[PE.scala 90:48]
    node _T_2 = and(io.cfg_en, _T_1) @[PE.scala 90:30]
    cfg.io.cfg_en <= _T_2 @[PE.scala 90:17]
    node _T_3 = bits(io.cfg_addr, 1, 0) @[PE.scala 91:33]
    cfg.io.cfg_addr <= _T_3 @[PE.scala 91:19]
    cfg.io.cfg_data <= io.cfg_data @[PE.scala 92:19]
    wire cfgOut : UInt<48> @[PE.scala 96:20]
    cfgOut <= cfg.io.out[0] @[PE.scala 97:10]
    node _T_4 = bits(cfgOut, 31, 0) @[PE.scala 98:18]
    const <= _T_4 @[PE.scala 98:9]
    node _T_5 = bits(cfgOut, 35, 32) @[PE.scala 100:28]
    alu.io.config <= _T_5 @[PE.scala 100:19]
    rf.io.config is invalid @[PE.scala 107:18]
    node _T_6 = bits(cfgOut, 38, 36) @[PE.scala 113:38]
    DelayPipe.io.config <= _T_6 @[PE.scala 113:29]
    node _T_7 = bits(cfgOut, 41, 39) @[PE.scala 113:38]
    DelayPipe_1.io.config <= _T_7 @[PE.scala 113:29]
    node _T_8 = bits(cfgOut, 44, 42) @[PE.scala 121:32]
    Muxn.io.config <= _T_8 @[PE.scala 121:23]
    node _T_9 = bits(cfgOut, 47, 45) @[PE.scala 121:32]
    Muxn_1.io.config <= _T_9 @[PE.scala 121:23]
    
  module ALU_50 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<4>, flip in : UInt<32>[2], out : UInt<32>}
    
    node _T = bits(io.in[0], 31, 0) @[Operations.scala 122:31]
    node _T_1 = bits(io.in[0], 31, 0) @[Operations.scala 124:31]
    node _T_2 = bits(io.in[1], 31, 0) @[Operations.scala 124:49]
    node _T_3 = add(_T_1, _T_2) @[Operations.scala 124:41]
    node _T_4 = tail(_T_3, 1) @[Operations.scala 124:41]
    node _T_5 = bits(io.in[0], 31, 0) @[Operations.scala 126:31]
    node _T_6 = bits(io.in[1], 31, 0) @[Operations.scala 126:49]
    node _T_7 = sub(_T_5, _T_6) @[Operations.scala 126:41]
    node _T_8 = tail(_T_7, 1) @[Operations.scala 126:41]
    node _T_9 = bits(io.in[0], 31, 0) @[Operations.scala 128:31]
    node _T_10 = bits(io.in[1], 31, 0) @[Operations.scala 128:49]
    node _T_11 = mul(_T_9, _T_10) @[Operations.scala 128:41]
    node _T_12 = bits(io.in[0], 31, 0) @[Operations.scala 138:31]
    node _T_13 = bits(io.in[1], 31, 0) @[Operations.scala 138:49]
    node _T_14 = and(_T_12, _T_13) @[Operations.scala 138:41]
    node _T_15 = bits(io.in[0], 31, 0) @[Operations.scala 140:31]
    node _T_16 = bits(io.in[1], 31, 0) @[Operations.scala 140:49]
    node _T_17 = or(_T_15, _T_16) @[Operations.scala 140:41]
    node _T_18 = bits(io.in[0], 31, 0) @[Operations.scala 142:31]
    node _T_19 = bits(io.in[1], 31, 0) @[Operations.scala 142:49]
    node _T_20 = xor(_T_18, _T_19) @[Operations.scala 142:41]
    node _T_21 = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_22 = mux(_T_21, _T, UInt<1>("h00")) @[Mux.scala 80:57]
    node _T_23 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_24 = mux(_T_23, _T_4, _T_22) @[Mux.scala 80:57]
    node _T_25 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_26 = mux(_T_25, _T_8, _T_24) @[Mux.scala 80:57]
    node _T_27 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_28 = mux(_T_27, _T_11, _T_26) @[Mux.scala 80:57]
    node _T_29 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_30 = mux(_T_29, _T_14, _T_28) @[Mux.scala 80:57]
    node _T_31 = eq(UInt<3>("h05"), io.config) @[Mux.scala 80:60]
    node _T_32 = mux(_T_31, _T_17, _T_30) @[Mux.scala 80:57]
    node _T_33 = eq(UInt<3>("h06"), io.config) @[Mux.scala 80:60]
    node _T_34 = mux(_T_33, _T_20, _T_32) @[Mux.scala 80:57]
    io.out <= _T_34 @[ALU.scala 25:10]
    
  module RF_50 : 
    input clock : Clock
    input reset : Reset
    output io : {flip en : UInt<1>, flip config : UInt<0>, flip in : UInt<32>[1], out : UInt<32>[2]}
    
    wire _T : UInt<32>[1] @[RegFile.scala 24:29]
    _T[0] <= UInt<32>("h00") @[RegFile.scala 24:29]
    reg regs : UInt<32>[1], clock with : (reset => (reset, _T)) @[RegFile.scala 24:21]
    when io.en : @[RegFile.scala 34:16]
      regs[0] <= io.in[0] @[RegFile.scala 35:41]
      skip @[RegFile.scala 34:16]
    io.out[0] <= regs[0] @[RegFile.scala 37:42]
    io.out[1] <= regs[0] @[RegFile.scala 37:42]
    
  module DelayPipe_100 : 
    input clock : Clock
    input reset : Reset
    output io : {flip en : UInt<1>, flip config : UInt<3>, flip in : UInt<32>, out : UInt<32>}
    
    wire _T : UInt<32>[5] @[DelayPipe.scala 22:29]
    _T[0] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[1] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[2] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[3] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[4] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    reg regs : UInt<32>[5], clock with : (reset => (reset, _T)) @[DelayPipe.scala 22:21]
    reg wptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 23:21]
    reg rptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 24:21]
    node _T_1 = lt(wptr, UInt<3>("h04")) @[DelayPipe.scala 26:23]
    node _T_2 = and(io.en, _T_1) @[DelayPipe.scala 26:14]
    when _T_2 : @[DelayPipe.scala 26:37]
      node _T_3 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 27:17]
      node _T_4 = tail(_T_3, 1) @[DelayPipe.scala 27:17]
      wptr <= _T_4 @[DelayPipe.scala 27:10]
      skip @[DelayPipe.scala 26:37]
    else : @[DelayPipe.scala 28:14]
      wptr <= UInt<1>("h00") @[DelayPipe.scala 29:10]
      skip @[DelayPipe.scala 28:14]
    node _T_5 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 32:12]
    node _T_6 = tail(_T_5, 1) @[DelayPipe.scala 32:12]
    node _T_7 = geq(_T_6, io.config) @[DelayPipe.scala 32:17]
    when _T_7 : @[DelayPipe.scala 32:30]
      node _T_8 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 33:18]
      node _T_9 = tail(_T_8, 1) @[DelayPipe.scala 33:18]
      node _T_10 = sub(_T_9, io.config) @[DelayPipe.scala 33:24]
      node _T_11 = tail(_T_10, 1) @[DelayPipe.scala 33:24]
      rptr <= _T_11 @[DelayPipe.scala 33:10]
      skip @[DelayPipe.scala 32:30]
    else : @[DelayPipe.scala 34:14]
      node _T_12 = add(UInt<3>("h06"), wptr) @[DelayPipe.scala 35:30]
      node _T_13 = tail(_T_12, 1) @[DelayPipe.scala 35:30]
      node _T_14 = sub(_T_13, io.config) @[DelayPipe.scala 35:37]
      node _T_15 = tail(_T_14, 1) @[DelayPipe.scala 35:37]
      rptr <= _T_15 @[DelayPipe.scala 35:10]
      skip @[DelayPipe.scala 34:14]
    node _T_16 = gt(io.config, UInt<1>("h00")) @[DelayPipe.scala 39:28]
    node _T_17 = and(io.en, _T_16) @[DelayPipe.scala 39:14]
    when _T_17 : @[DelayPipe.scala 39:35]
      regs[wptr] <= io.in @[DelayPipe.scala 40:16]
      skip @[DelayPipe.scala 39:35]
    reg cnt : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 43:20]
    node _T_18 = eq(io.en, UInt<1>("h00")) @[DelayPipe.scala 44:8]
    when _T_18 : @[DelayPipe.scala 44:15]
      cnt <= UInt<1>("h00") @[DelayPipe.scala 45:9]
      skip @[DelayPipe.scala 44:15]
    else : @[DelayPipe.scala 46:30]
      node _T_19 = lt(cnt, io.config) @[DelayPipe.scala 46:18]
      when _T_19 : @[DelayPipe.scala 46:30]
        node _T_20 = add(cnt, UInt<1>("h01")) @[DelayPipe.scala 47:16]
        node _T_21 = tail(_T_20, 1) @[DelayPipe.scala 47:16]
        cnt <= _T_21 @[DelayPipe.scala 47:9]
        skip @[DelayPipe.scala 46:30]
    node _T_22 = eq(UInt<1>("h00"), io.config) @[DelayPipe.scala 50:22]
    node _T_23 = and(io.en, _T_22) @[DelayPipe.scala 50:14]
    when _T_23 : @[DelayPipe.scala 50:37]
      io.out <= io.in @[DelayPipe.scala 51:12]
      skip @[DelayPipe.scala 50:37]
    else : @[DelayPipe.scala 52:43]
      node _T_24 = eq(cnt, io.config) @[DelayPipe.scala 52:28]
      node _T_25 = and(io.en, _T_24) @[DelayPipe.scala 52:20]
      when _T_25 : @[DelayPipe.scala 52:43]
        io.out <= regs[rptr] @[DelayPipe.scala 53:12]
        skip @[DelayPipe.scala 52:43]
      else : @[DelayPipe.scala 54:14]
        io.out <= UInt<1>("h00") @[DelayPipe.scala 55:12]
        skip @[DelayPipe.scala 54:14]
    
  module DelayPipe_101 : 
    input clock : Clock
    input reset : Reset
    output io : {flip en : UInt<1>, flip config : UInt<3>, flip in : UInt<32>, out : UInt<32>}
    
    wire _T : UInt<32>[5] @[DelayPipe.scala 22:29]
    _T[0] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[1] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[2] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[3] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[4] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    reg regs : UInt<32>[5], clock with : (reset => (reset, _T)) @[DelayPipe.scala 22:21]
    reg wptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 23:21]
    reg rptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 24:21]
    node _T_1 = lt(wptr, UInt<3>("h04")) @[DelayPipe.scala 26:23]
    node _T_2 = and(io.en, _T_1) @[DelayPipe.scala 26:14]
    when _T_2 : @[DelayPipe.scala 26:37]
      node _T_3 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 27:17]
      node _T_4 = tail(_T_3, 1) @[DelayPipe.scala 27:17]
      wptr <= _T_4 @[DelayPipe.scala 27:10]
      skip @[DelayPipe.scala 26:37]
    else : @[DelayPipe.scala 28:14]
      wptr <= UInt<1>("h00") @[DelayPipe.scala 29:10]
      skip @[DelayPipe.scala 28:14]
    node _T_5 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 32:12]
    node _T_6 = tail(_T_5, 1) @[DelayPipe.scala 32:12]
    node _T_7 = geq(_T_6, io.config) @[DelayPipe.scala 32:17]
    when _T_7 : @[DelayPipe.scala 32:30]
      node _T_8 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 33:18]
      node _T_9 = tail(_T_8, 1) @[DelayPipe.scala 33:18]
      node _T_10 = sub(_T_9, io.config) @[DelayPipe.scala 33:24]
      node _T_11 = tail(_T_10, 1) @[DelayPipe.scala 33:24]
      rptr <= _T_11 @[DelayPipe.scala 33:10]
      skip @[DelayPipe.scala 32:30]
    else : @[DelayPipe.scala 34:14]
      node _T_12 = add(UInt<3>("h06"), wptr) @[DelayPipe.scala 35:30]
      node _T_13 = tail(_T_12, 1) @[DelayPipe.scala 35:30]
      node _T_14 = sub(_T_13, io.config) @[DelayPipe.scala 35:37]
      node _T_15 = tail(_T_14, 1) @[DelayPipe.scala 35:37]
      rptr <= _T_15 @[DelayPipe.scala 35:10]
      skip @[DelayPipe.scala 34:14]
    node _T_16 = gt(io.config, UInt<1>("h00")) @[DelayPipe.scala 39:28]
    node _T_17 = and(io.en, _T_16) @[DelayPipe.scala 39:14]
    when _T_17 : @[DelayPipe.scala 39:35]
      regs[wptr] <= io.in @[DelayPipe.scala 40:16]
      skip @[DelayPipe.scala 39:35]
    reg cnt : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 43:20]
    node _T_18 = eq(io.en, UInt<1>("h00")) @[DelayPipe.scala 44:8]
    when _T_18 : @[DelayPipe.scala 44:15]
      cnt <= UInt<1>("h00") @[DelayPipe.scala 45:9]
      skip @[DelayPipe.scala 44:15]
    else : @[DelayPipe.scala 46:30]
      node _T_19 = lt(cnt, io.config) @[DelayPipe.scala 46:18]
      when _T_19 : @[DelayPipe.scala 46:30]
        node _T_20 = add(cnt, UInt<1>("h01")) @[DelayPipe.scala 47:16]
        node _T_21 = tail(_T_20, 1) @[DelayPipe.scala 47:16]
        cnt <= _T_21 @[DelayPipe.scala 47:9]
        skip @[DelayPipe.scala 46:30]
    node _T_22 = eq(UInt<1>("h00"), io.config) @[DelayPipe.scala 50:22]
    node _T_23 = and(io.en, _T_22) @[DelayPipe.scala 50:14]
    when _T_23 : @[DelayPipe.scala 50:37]
      io.out <= io.in @[DelayPipe.scala 51:12]
      skip @[DelayPipe.scala 50:37]
    else : @[DelayPipe.scala 52:43]
      node _T_24 = eq(cnt, io.config) @[DelayPipe.scala 52:28]
      node _T_25 = and(io.en, _T_24) @[DelayPipe.scala 52:20]
      when _T_25 : @[DelayPipe.scala 52:43]
        io.out <= regs[rptr] @[DelayPipe.scala 53:12]
        skip @[DelayPipe.scala 52:43]
      else : @[DelayPipe.scala 54:14]
        io.out <= UInt<1>("h00") @[DelayPipe.scala 55:12]
        skip @[DelayPipe.scala 54:14]
    
  module Muxn_116 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[6], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    node _T_10 = eq(UInt<3>("h05"), io.config) @[Mux.scala 80:60]
    node _T_11 = mux(_T_10, io.in[5], _T_9) @[Mux.scala 80:57]
    io.out <= _T_11 @[Multiplexer.scala 20:10]
    
  module Muxn_117 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[6], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    node _T_10 = eq(UInt<3>("h05"), io.config) @[Mux.scala 80:60]
    node _T_11 = mux(_T_10, io.in[5], _T_9) @[Mux.scala 80:57]
    io.out <= _T_11 @[Multiplexer.scala 20:10]
    
  module ConfigMem_66 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<1>, flip cfg_data : UInt<32>, out : UInt<48>[1]}
    
    wire _T : UInt<48>[1] @[ConfigMem.scala 27:29]
    _T[0] <= UInt<48>("h00") @[ConfigMem.scala 27:29]
    reg regs : UInt<48>[1], clock with : (reset => (reset, _T)) @[ConfigMem.scala 27:21]
    node _T_1 = eq(io.cfg_addr, UInt<1>("h00")) @[ConfigMem.scala 39:38]
    node _T_2 = and(io.cfg_en, _T_1) @[ConfigMem.scala 39:22]
    when _T_2 : @[ConfigMem.scala 39:47]
      node _T_3 = bits(regs[0], 47, 32) @[ConfigMem.scala 41:33]
      node _T_4 = cat(_T_3, io.cfg_data) @[Cat.scala 29:58]
      regs[0] <= _T_4 @[ConfigMem.scala 41:19]
      skip @[ConfigMem.scala 39:47]
    node _T_5 = eq(io.cfg_addr, UInt<1>("h01")) @[ConfigMem.scala 39:38]
    node _T_6 = and(io.cfg_en, _T_5) @[ConfigMem.scala 39:22]
    when _T_6 : @[ConfigMem.scala 39:47]
      node _T_7 = bits(regs[0], 31, 0) @[ConfigMem.scala 43:46]
      node _T_8 = cat(io.cfg_data, _T_7) @[Cat.scala 29:58]
      regs[0] <= _T_8 @[ConfigMem.scala 43:19]
      skip @[ConfigMem.scala 39:47]
    io.out[0] <= regs[0] @[ConfigMem.scala 52:45]
    
  module GPE_50 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<12>, flip cfg_data : UInt<32>, flip en : UInt<1>, flip in : UInt<32>[8], out : UInt<32>[1]}
    
    inst alu of ALU_50 @[PE.scala 50:19]
    alu.clock <= clock
    alu.reset <= reset
    inst rf of RF_50 @[PE.scala 51:18]
    rf.clock <= clock
    rf.reset <= reset
    inst DelayPipe of DelayPipe_100 @[PE.scala 52:54]
    DelayPipe.clock <= clock
    DelayPipe.reset <= reset
    inst DelayPipe_1 of DelayPipe_101 @[PE.scala 52:54]
    DelayPipe_1.clock <= clock
    DelayPipe_1.reset <= reset
    wire const : UInt<32> @[PE.scala 54:19]
    inst Muxn of Muxn_116 @[PE.scala 55:49]
    Muxn.clock <= clock
    Muxn.reset <= reset
    inst Muxn_1 of Muxn_117 @[PE.scala 55:49]
    Muxn_1.clock <= clock
    Muxn_1.reset <= reset
    Muxn.io.in[0] <= io.in[0] @[PE.scala 62:12]
    Muxn.io.in[1] <= io.in[1] @[PE.scala 62:12]
    Muxn.io.in[2] <= io.in[2] @[PE.scala 62:12]
    Muxn.io.in[3] <= io.in[3] @[PE.scala 62:12]
    Muxn.io.in[4] <= const @[PE.scala 64:12]
    Muxn.io.in[5] <= rf.io.out[1] @[PE.scala 66:12]
    DelayPipe.io.en <= io.en @[PE.scala 69:23]
    DelayPipe.io.in <= Muxn.io.out @[PE.scala 70:23]
    alu.io.in[0] <= DelayPipe.io.out @[PE.scala 71:18]
    Muxn_1.io.in[0] <= io.in[4] @[PE.scala 62:12]
    Muxn_1.io.in[1] <= io.in[5] @[PE.scala 62:12]
    Muxn_1.io.in[2] <= io.in[6] @[PE.scala 62:12]
    Muxn_1.io.in[3] <= io.in[7] @[PE.scala 62:12]
    Muxn_1.io.in[4] <= const @[PE.scala 64:12]
    Muxn_1.io.in[5] <= rf.io.out[1] @[PE.scala 66:12]
    DelayPipe_1.io.en <= io.en @[PE.scala 69:23]
    DelayPipe_1.io.in <= Muxn_1.io.out @[PE.scala 70:23]
    alu.io.in[1] <= DelayPipe_1.io.out @[PE.scala 71:18]
    rf.io.en <= io.en @[PE.scala 75:12]
    rf.io.in[0] <= alu.io.out @[PE.scala 76:15]
    io.out[0] <= rf.io.out[0] @[PE.scala 77:13]
    inst cfg of ConfigMem_66 @[PE.scala 89:19]
    cfg.clock <= clock
    cfg.reset <= reset
    node _T = bits(io.cfg_addr, 11, 2) @[PE.scala 90:63]
    node _T_1 = eq(UInt<8>("h08a"), _T) @[PE.scala 90:48]
    node _T_2 = and(io.cfg_en, _T_1) @[PE.scala 90:30]
    cfg.io.cfg_en <= _T_2 @[PE.scala 90:17]
    node _T_3 = bits(io.cfg_addr, 1, 0) @[PE.scala 91:33]
    cfg.io.cfg_addr <= _T_3 @[PE.scala 91:19]
    cfg.io.cfg_data <= io.cfg_data @[PE.scala 92:19]
    wire cfgOut : UInt<48> @[PE.scala 96:20]
    cfgOut <= cfg.io.out[0] @[PE.scala 97:10]
    node _T_4 = bits(cfgOut, 31, 0) @[PE.scala 98:18]
    const <= _T_4 @[PE.scala 98:9]
    node _T_5 = bits(cfgOut, 35, 32) @[PE.scala 100:28]
    alu.io.config <= _T_5 @[PE.scala 100:19]
    rf.io.config is invalid @[PE.scala 107:18]
    node _T_6 = bits(cfgOut, 38, 36) @[PE.scala 113:38]
    DelayPipe.io.config <= _T_6 @[PE.scala 113:29]
    node _T_7 = bits(cfgOut, 41, 39) @[PE.scala 113:38]
    DelayPipe_1.io.config <= _T_7 @[PE.scala 113:29]
    node _T_8 = bits(cfgOut, 44, 42) @[PE.scala 121:32]
    Muxn.io.config <= _T_8 @[PE.scala 121:23]
    node _T_9 = bits(cfgOut, 47, 45) @[PE.scala 121:32]
    Muxn_1.io.config <= _T_9 @[PE.scala 121:23]
    
  module ALU_51 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<4>, flip in : UInt<32>[2], out : UInt<32>}
    
    node _T = bits(io.in[0], 31, 0) @[Operations.scala 122:31]
    node _T_1 = bits(io.in[0], 31, 0) @[Operations.scala 124:31]
    node _T_2 = bits(io.in[1], 31, 0) @[Operations.scala 124:49]
    node _T_3 = add(_T_1, _T_2) @[Operations.scala 124:41]
    node _T_4 = tail(_T_3, 1) @[Operations.scala 124:41]
    node _T_5 = bits(io.in[0], 31, 0) @[Operations.scala 126:31]
    node _T_6 = bits(io.in[1], 31, 0) @[Operations.scala 126:49]
    node _T_7 = sub(_T_5, _T_6) @[Operations.scala 126:41]
    node _T_8 = tail(_T_7, 1) @[Operations.scala 126:41]
    node _T_9 = bits(io.in[0], 31, 0) @[Operations.scala 128:31]
    node _T_10 = bits(io.in[1], 31, 0) @[Operations.scala 128:49]
    node _T_11 = mul(_T_9, _T_10) @[Operations.scala 128:41]
    node _T_12 = bits(io.in[0], 31, 0) @[Operations.scala 138:31]
    node _T_13 = bits(io.in[1], 31, 0) @[Operations.scala 138:49]
    node _T_14 = and(_T_12, _T_13) @[Operations.scala 138:41]
    node _T_15 = bits(io.in[0], 31, 0) @[Operations.scala 140:31]
    node _T_16 = bits(io.in[1], 31, 0) @[Operations.scala 140:49]
    node _T_17 = or(_T_15, _T_16) @[Operations.scala 140:41]
    node _T_18 = bits(io.in[0], 31, 0) @[Operations.scala 142:31]
    node _T_19 = bits(io.in[1], 31, 0) @[Operations.scala 142:49]
    node _T_20 = xor(_T_18, _T_19) @[Operations.scala 142:41]
    node _T_21 = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_22 = mux(_T_21, _T, UInt<1>("h00")) @[Mux.scala 80:57]
    node _T_23 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_24 = mux(_T_23, _T_4, _T_22) @[Mux.scala 80:57]
    node _T_25 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_26 = mux(_T_25, _T_8, _T_24) @[Mux.scala 80:57]
    node _T_27 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_28 = mux(_T_27, _T_11, _T_26) @[Mux.scala 80:57]
    node _T_29 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_30 = mux(_T_29, _T_14, _T_28) @[Mux.scala 80:57]
    node _T_31 = eq(UInt<3>("h05"), io.config) @[Mux.scala 80:60]
    node _T_32 = mux(_T_31, _T_17, _T_30) @[Mux.scala 80:57]
    node _T_33 = eq(UInt<3>("h06"), io.config) @[Mux.scala 80:60]
    node _T_34 = mux(_T_33, _T_20, _T_32) @[Mux.scala 80:57]
    io.out <= _T_34 @[ALU.scala 25:10]
    
  module RF_51 : 
    input clock : Clock
    input reset : Reset
    output io : {flip en : UInt<1>, flip config : UInt<0>, flip in : UInt<32>[1], out : UInt<32>[2]}
    
    wire _T : UInt<32>[1] @[RegFile.scala 24:29]
    _T[0] <= UInt<32>("h00") @[RegFile.scala 24:29]
    reg regs : UInt<32>[1], clock with : (reset => (reset, _T)) @[RegFile.scala 24:21]
    when io.en : @[RegFile.scala 34:16]
      regs[0] <= io.in[0] @[RegFile.scala 35:41]
      skip @[RegFile.scala 34:16]
    io.out[0] <= regs[0] @[RegFile.scala 37:42]
    io.out[1] <= regs[0] @[RegFile.scala 37:42]
    
  module DelayPipe_102 : 
    input clock : Clock
    input reset : Reset
    output io : {flip en : UInt<1>, flip config : UInt<3>, flip in : UInt<32>, out : UInt<32>}
    
    wire _T : UInt<32>[5] @[DelayPipe.scala 22:29]
    _T[0] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[1] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[2] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[3] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[4] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    reg regs : UInt<32>[5], clock with : (reset => (reset, _T)) @[DelayPipe.scala 22:21]
    reg wptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 23:21]
    reg rptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 24:21]
    node _T_1 = lt(wptr, UInt<3>("h04")) @[DelayPipe.scala 26:23]
    node _T_2 = and(io.en, _T_1) @[DelayPipe.scala 26:14]
    when _T_2 : @[DelayPipe.scala 26:37]
      node _T_3 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 27:17]
      node _T_4 = tail(_T_3, 1) @[DelayPipe.scala 27:17]
      wptr <= _T_4 @[DelayPipe.scala 27:10]
      skip @[DelayPipe.scala 26:37]
    else : @[DelayPipe.scala 28:14]
      wptr <= UInt<1>("h00") @[DelayPipe.scala 29:10]
      skip @[DelayPipe.scala 28:14]
    node _T_5 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 32:12]
    node _T_6 = tail(_T_5, 1) @[DelayPipe.scala 32:12]
    node _T_7 = geq(_T_6, io.config) @[DelayPipe.scala 32:17]
    when _T_7 : @[DelayPipe.scala 32:30]
      node _T_8 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 33:18]
      node _T_9 = tail(_T_8, 1) @[DelayPipe.scala 33:18]
      node _T_10 = sub(_T_9, io.config) @[DelayPipe.scala 33:24]
      node _T_11 = tail(_T_10, 1) @[DelayPipe.scala 33:24]
      rptr <= _T_11 @[DelayPipe.scala 33:10]
      skip @[DelayPipe.scala 32:30]
    else : @[DelayPipe.scala 34:14]
      node _T_12 = add(UInt<3>("h06"), wptr) @[DelayPipe.scala 35:30]
      node _T_13 = tail(_T_12, 1) @[DelayPipe.scala 35:30]
      node _T_14 = sub(_T_13, io.config) @[DelayPipe.scala 35:37]
      node _T_15 = tail(_T_14, 1) @[DelayPipe.scala 35:37]
      rptr <= _T_15 @[DelayPipe.scala 35:10]
      skip @[DelayPipe.scala 34:14]
    node _T_16 = gt(io.config, UInt<1>("h00")) @[DelayPipe.scala 39:28]
    node _T_17 = and(io.en, _T_16) @[DelayPipe.scala 39:14]
    when _T_17 : @[DelayPipe.scala 39:35]
      regs[wptr] <= io.in @[DelayPipe.scala 40:16]
      skip @[DelayPipe.scala 39:35]
    reg cnt : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 43:20]
    node _T_18 = eq(io.en, UInt<1>("h00")) @[DelayPipe.scala 44:8]
    when _T_18 : @[DelayPipe.scala 44:15]
      cnt <= UInt<1>("h00") @[DelayPipe.scala 45:9]
      skip @[DelayPipe.scala 44:15]
    else : @[DelayPipe.scala 46:30]
      node _T_19 = lt(cnt, io.config) @[DelayPipe.scala 46:18]
      when _T_19 : @[DelayPipe.scala 46:30]
        node _T_20 = add(cnt, UInt<1>("h01")) @[DelayPipe.scala 47:16]
        node _T_21 = tail(_T_20, 1) @[DelayPipe.scala 47:16]
        cnt <= _T_21 @[DelayPipe.scala 47:9]
        skip @[DelayPipe.scala 46:30]
    node _T_22 = eq(UInt<1>("h00"), io.config) @[DelayPipe.scala 50:22]
    node _T_23 = and(io.en, _T_22) @[DelayPipe.scala 50:14]
    when _T_23 : @[DelayPipe.scala 50:37]
      io.out <= io.in @[DelayPipe.scala 51:12]
      skip @[DelayPipe.scala 50:37]
    else : @[DelayPipe.scala 52:43]
      node _T_24 = eq(cnt, io.config) @[DelayPipe.scala 52:28]
      node _T_25 = and(io.en, _T_24) @[DelayPipe.scala 52:20]
      when _T_25 : @[DelayPipe.scala 52:43]
        io.out <= regs[rptr] @[DelayPipe.scala 53:12]
        skip @[DelayPipe.scala 52:43]
      else : @[DelayPipe.scala 54:14]
        io.out <= UInt<1>("h00") @[DelayPipe.scala 55:12]
        skip @[DelayPipe.scala 54:14]
    
  module DelayPipe_103 : 
    input clock : Clock
    input reset : Reset
    output io : {flip en : UInt<1>, flip config : UInt<3>, flip in : UInt<32>, out : UInt<32>}
    
    wire _T : UInt<32>[5] @[DelayPipe.scala 22:29]
    _T[0] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[1] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[2] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[3] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[4] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    reg regs : UInt<32>[5], clock with : (reset => (reset, _T)) @[DelayPipe.scala 22:21]
    reg wptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 23:21]
    reg rptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 24:21]
    node _T_1 = lt(wptr, UInt<3>("h04")) @[DelayPipe.scala 26:23]
    node _T_2 = and(io.en, _T_1) @[DelayPipe.scala 26:14]
    when _T_2 : @[DelayPipe.scala 26:37]
      node _T_3 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 27:17]
      node _T_4 = tail(_T_3, 1) @[DelayPipe.scala 27:17]
      wptr <= _T_4 @[DelayPipe.scala 27:10]
      skip @[DelayPipe.scala 26:37]
    else : @[DelayPipe.scala 28:14]
      wptr <= UInt<1>("h00") @[DelayPipe.scala 29:10]
      skip @[DelayPipe.scala 28:14]
    node _T_5 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 32:12]
    node _T_6 = tail(_T_5, 1) @[DelayPipe.scala 32:12]
    node _T_7 = geq(_T_6, io.config) @[DelayPipe.scala 32:17]
    when _T_7 : @[DelayPipe.scala 32:30]
      node _T_8 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 33:18]
      node _T_9 = tail(_T_8, 1) @[DelayPipe.scala 33:18]
      node _T_10 = sub(_T_9, io.config) @[DelayPipe.scala 33:24]
      node _T_11 = tail(_T_10, 1) @[DelayPipe.scala 33:24]
      rptr <= _T_11 @[DelayPipe.scala 33:10]
      skip @[DelayPipe.scala 32:30]
    else : @[DelayPipe.scala 34:14]
      node _T_12 = add(UInt<3>("h06"), wptr) @[DelayPipe.scala 35:30]
      node _T_13 = tail(_T_12, 1) @[DelayPipe.scala 35:30]
      node _T_14 = sub(_T_13, io.config) @[DelayPipe.scala 35:37]
      node _T_15 = tail(_T_14, 1) @[DelayPipe.scala 35:37]
      rptr <= _T_15 @[DelayPipe.scala 35:10]
      skip @[DelayPipe.scala 34:14]
    node _T_16 = gt(io.config, UInt<1>("h00")) @[DelayPipe.scala 39:28]
    node _T_17 = and(io.en, _T_16) @[DelayPipe.scala 39:14]
    when _T_17 : @[DelayPipe.scala 39:35]
      regs[wptr] <= io.in @[DelayPipe.scala 40:16]
      skip @[DelayPipe.scala 39:35]
    reg cnt : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 43:20]
    node _T_18 = eq(io.en, UInt<1>("h00")) @[DelayPipe.scala 44:8]
    when _T_18 : @[DelayPipe.scala 44:15]
      cnt <= UInt<1>("h00") @[DelayPipe.scala 45:9]
      skip @[DelayPipe.scala 44:15]
    else : @[DelayPipe.scala 46:30]
      node _T_19 = lt(cnt, io.config) @[DelayPipe.scala 46:18]
      when _T_19 : @[DelayPipe.scala 46:30]
        node _T_20 = add(cnt, UInt<1>("h01")) @[DelayPipe.scala 47:16]
        node _T_21 = tail(_T_20, 1) @[DelayPipe.scala 47:16]
        cnt <= _T_21 @[DelayPipe.scala 47:9]
        skip @[DelayPipe.scala 46:30]
    node _T_22 = eq(UInt<1>("h00"), io.config) @[DelayPipe.scala 50:22]
    node _T_23 = and(io.en, _T_22) @[DelayPipe.scala 50:14]
    when _T_23 : @[DelayPipe.scala 50:37]
      io.out <= io.in @[DelayPipe.scala 51:12]
      skip @[DelayPipe.scala 50:37]
    else : @[DelayPipe.scala 52:43]
      node _T_24 = eq(cnt, io.config) @[DelayPipe.scala 52:28]
      node _T_25 = and(io.en, _T_24) @[DelayPipe.scala 52:20]
      when _T_25 : @[DelayPipe.scala 52:43]
        io.out <= regs[rptr] @[DelayPipe.scala 53:12]
        skip @[DelayPipe.scala 52:43]
      else : @[DelayPipe.scala 54:14]
        io.out <= UInt<1>("h00") @[DelayPipe.scala 55:12]
        skip @[DelayPipe.scala 54:14]
    
  module Muxn_118 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[6], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    node _T_10 = eq(UInt<3>("h05"), io.config) @[Mux.scala 80:60]
    node _T_11 = mux(_T_10, io.in[5], _T_9) @[Mux.scala 80:57]
    io.out <= _T_11 @[Multiplexer.scala 20:10]
    
  module Muxn_119 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[6], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    node _T_10 = eq(UInt<3>("h05"), io.config) @[Mux.scala 80:60]
    node _T_11 = mux(_T_10, io.in[5], _T_9) @[Mux.scala 80:57]
    io.out <= _T_11 @[Multiplexer.scala 20:10]
    
  module ConfigMem_67 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<1>, flip cfg_data : UInt<32>, out : UInt<48>[1]}
    
    wire _T : UInt<48>[1] @[ConfigMem.scala 27:29]
    _T[0] <= UInt<48>("h00") @[ConfigMem.scala 27:29]
    reg regs : UInt<48>[1], clock with : (reset => (reset, _T)) @[ConfigMem.scala 27:21]
    node _T_1 = eq(io.cfg_addr, UInt<1>("h00")) @[ConfigMem.scala 39:38]
    node _T_2 = and(io.cfg_en, _T_1) @[ConfigMem.scala 39:22]
    when _T_2 : @[ConfigMem.scala 39:47]
      node _T_3 = bits(regs[0], 47, 32) @[ConfigMem.scala 41:33]
      node _T_4 = cat(_T_3, io.cfg_data) @[Cat.scala 29:58]
      regs[0] <= _T_4 @[ConfigMem.scala 41:19]
      skip @[ConfigMem.scala 39:47]
    node _T_5 = eq(io.cfg_addr, UInt<1>("h01")) @[ConfigMem.scala 39:38]
    node _T_6 = and(io.cfg_en, _T_5) @[ConfigMem.scala 39:22]
    when _T_6 : @[ConfigMem.scala 39:47]
      node _T_7 = bits(regs[0], 31, 0) @[ConfigMem.scala 43:46]
      node _T_8 = cat(io.cfg_data, _T_7) @[Cat.scala 29:58]
      regs[0] <= _T_8 @[ConfigMem.scala 43:19]
      skip @[ConfigMem.scala 39:47]
    io.out[0] <= regs[0] @[ConfigMem.scala 52:45]
    
  module GPE_51 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<12>, flip cfg_data : UInt<32>, flip en : UInt<1>, flip in : UInt<32>[8], out : UInt<32>[1]}
    
    inst alu of ALU_51 @[PE.scala 50:19]
    alu.clock <= clock
    alu.reset <= reset
    inst rf of RF_51 @[PE.scala 51:18]
    rf.clock <= clock
    rf.reset <= reset
    inst DelayPipe of DelayPipe_102 @[PE.scala 52:54]
    DelayPipe.clock <= clock
    DelayPipe.reset <= reset
    inst DelayPipe_1 of DelayPipe_103 @[PE.scala 52:54]
    DelayPipe_1.clock <= clock
    DelayPipe_1.reset <= reset
    wire const : UInt<32> @[PE.scala 54:19]
    inst Muxn of Muxn_118 @[PE.scala 55:49]
    Muxn.clock <= clock
    Muxn.reset <= reset
    inst Muxn_1 of Muxn_119 @[PE.scala 55:49]
    Muxn_1.clock <= clock
    Muxn_1.reset <= reset
    Muxn.io.in[0] <= io.in[0] @[PE.scala 62:12]
    Muxn.io.in[1] <= io.in[1] @[PE.scala 62:12]
    Muxn.io.in[2] <= io.in[2] @[PE.scala 62:12]
    Muxn.io.in[3] <= io.in[3] @[PE.scala 62:12]
    Muxn.io.in[4] <= const @[PE.scala 64:12]
    Muxn.io.in[5] <= rf.io.out[1] @[PE.scala 66:12]
    DelayPipe.io.en <= io.en @[PE.scala 69:23]
    DelayPipe.io.in <= Muxn.io.out @[PE.scala 70:23]
    alu.io.in[0] <= DelayPipe.io.out @[PE.scala 71:18]
    Muxn_1.io.in[0] <= io.in[4] @[PE.scala 62:12]
    Muxn_1.io.in[1] <= io.in[5] @[PE.scala 62:12]
    Muxn_1.io.in[2] <= io.in[6] @[PE.scala 62:12]
    Muxn_1.io.in[3] <= io.in[7] @[PE.scala 62:12]
    Muxn_1.io.in[4] <= const @[PE.scala 64:12]
    Muxn_1.io.in[5] <= rf.io.out[1] @[PE.scala 66:12]
    DelayPipe_1.io.en <= io.en @[PE.scala 69:23]
    DelayPipe_1.io.in <= Muxn_1.io.out @[PE.scala 70:23]
    alu.io.in[1] <= DelayPipe_1.io.out @[PE.scala 71:18]
    rf.io.en <= io.en @[PE.scala 75:12]
    rf.io.in[0] <= alu.io.out @[PE.scala 76:15]
    io.out[0] <= rf.io.out[0] @[PE.scala 77:13]
    inst cfg of ConfigMem_67 @[PE.scala 89:19]
    cfg.clock <= clock
    cfg.reset <= reset
    node _T = bits(io.cfg_addr, 11, 2) @[PE.scala 90:63]
    node _T_1 = eq(UInt<8>("h08b"), _T) @[PE.scala 90:48]
    node _T_2 = and(io.cfg_en, _T_1) @[PE.scala 90:30]
    cfg.io.cfg_en <= _T_2 @[PE.scala 90:17]
    node _T_3 = bits(io.cfg_addr, 1, 0) @[PE.scala 91:33]
    cfg.io.cfg_addr <= _T_3 @[PE.scala 91:19]
    cfg.io.cfg_data <= io.cfg_data @[PE.scala 92:19]
    wire cfgOut : UInt<48> @[PE.scala 96:20]
    cfgOut <= cfg.io.out[0] @[PE.scala 97:10]
    node _T_4 = bits(cfgOut, 31, 0) @[PE.scala 98:18]
    const <= _T_4 @[PE.scala 98:9]
    node _T_5 = bits(cfgOut, 35, 32) @[PE.scala 100:28]
    alu.io.config <= _T_5 @[PE.scala 100:19]
    rf.io.config is invalid @[PE.scala 107:18]
    node _T_6 = bits(cfgOut, 38, 36) @[PE.scala 113:38]
    DelayPipe.io.config <= _T_6 @[PE.scala 113:29]
    node _T_7 = bits(cfgOut, 41, 39) @[PE.scala 113:38]
    DelayPipe_1.io.config <= _T_7 @[PE.scala 113:29]
    node _T_8 = bits(cfgOut, 44, 42) @[PE.scala 121:32]
    Muxn.io.config <= _T_8 @[PE.scala 121:23]
    node _T_9 = bits(cfgOut, 47, 45) @[PE.scala 121:32]
    Muxn_1.io.config <= _T_9 @[PE.scala 121:23]
    
  module ALU_52 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<4>, flip in : UInt<32>[2], out : UInt<32>}
    
    node _T = bits(io.in[0], 31, 0) @[Operations.scala 122:31]
    node _T_1 = bits(io.in[0], 31, 0) @[Operations.scala 124:31]
    node _T_2 = bits(io.in[1], 31, 0) @[Operations.scala 124:49]
    node _T_3 = add(_T_1, _T_2) @[Operations.scala 124:41]
    node _T_4 = tail(_T_3, 1) @[Operations.scala 124:41]
    node _T_5 = bits(io.in[0], 31, 0) @[Operations.scala 126:31]
    node _T_6 = bits(io.in[1], 31, 0) @[Operations.scala 126:49]
    node _T_7 = sub(_T_5, _T_6) @[Operations.scala 126:41]
    node _T_8 = tail(_T_7, 1) @[Operations.scala 126:41]
    node _T_9 = bits(io.in[0], 31, 0) @[Operations.scala 128:31]
    node _T_10 = bits(io.in[1], 31, 0) @[Operations.scala 128:49]
    node _T_11 = mul(_T_9, _T_10) @[Operations.scala 128:41]
    node _T_12 = bits(io.in[0], 31, 0) @[Operations.scala 138:31]
    node _T_13 = bits(io.in[1], 31, 0) @[Operations.scala 138:49]
    node _T_14 = and(_T_12, _T_13) @[Operations.scala 138:41]
    node _T_15 = bits(io.in[0], 31, 0) @[Operations.scala 140:31]
    node _T_16 = bits(io.in[1], 31, 0) @[Operations.scala 140:49]
    node _T_17 = or(_T_15, _T_16) @[Operations.scala 140:41]
    node _T_18 = bits(io.in[0], 31, 0) @[Operations.scala 142:31]
    node _T_19 = bits(io.in[1], 31, 0) @[Operations.scala 142:49]
    node _T_20 = xor(_T_18, _T_19) @[Operations.scala 142:41]
    node _T_21 = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_22 = mux(_T_21, _T, UInt<1>("h00")) @[Mux.scala 80:57]
    node _T_23 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_24 = mux(_T_23, _T_4, _T_22) @[Mux.scala 80:57]
    node _T_25 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_26 = mux(_T_25, _T_8, _T_24) @[Mux.scala 80:57]
    node _T_27 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_28 = mux(_T_27, _T_11, _T_26) @[Mux.scala 80:57]
    node _T_29 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_30 = mux(_T_29, _T_14, _T_28) @[Mux.scala 80:57]
    node _T_31 = eq(UInt<3>("h05"), io.config) @[Mux.scala 80:60]
    node _T_32 = mux(_T_31, _T_17, _T_30) @[Mux.scala 80:57]
    node _T_33 = eq(UInt<3>("h06"), io.config) @[Mux.scala 80:60]
    node _T_34 = mux(_T_33, _T_20, _T_32) @[Mux.scala 80:57]
    io.out <= _T_34 @[ALU.scala 25:10]
    
  module RF_52 : 
    input clock : Clock
    input reset : Reset
    output io : {flip en : UInt<1>, flip config : UInt<0>, flip in : UInt<32>[1], out : UInt<32>[2]}
    
    wire _T : UInt<32>[1] @[RegFile.scala 24:29]
    _T[0] <= UInt<32>("h00") @[RegFile.scala 24:29]
    reg regs : UInt<32>[1], clock with : (reset => (reset, _T)) @[RegFile.scala 24:21]
    when io.en : @[RegFile.scala 34:16]
      regs[0] <= io.in[0] @[RegFile.scala 35:41]
      skip @[RegFile.scala 34:16]
    io.out[0] <= regs[0] @[RegFile.scala 37:42]
    io.out[1] <= regs[0] @[RegFile.scala 37:42]
    
  module DelayPipe_104 : 
    input clock : Clock
    input reset : Reset
    output io : {flip en : UInt<1>, flip config : UInt<3>, flip in : UInt<32>, out : UInt<32>}
    
    wire _T : UInt<32>[5] @[DelayPipe.scala 22:29]
    _T[0] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[1] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[2] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[3] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[4] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    reg regs : UInt<32>[5], clock with : (reset => (reset, _T)) @[DelayPipe.scala 22:21]
    reg wptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 23:21]
    reg rptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 24:21]
    node _T_1 = lt(wptr, UInt<3>("h04")) @[DelayPipe.scala 26:23]
    node _T_2 = and(io.en, _T_1) @[DelayPipe.scala 26:14]
    when _T_2 : @[DelayPipe.scala 26:37]
      node _T_3 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 27:17]
      node _T_4 = tail(_T_3, 1) @[DelayPipe.scala 27:17]
      wptr <= _T_4 @[DelayPipe.scala 27:10]
      skip @[DelayPipe.scala 26:37]
    else : @[DelayPipe.scala 28:14]
      wptr <= UInt<1>("h00") @[DelayPipe.scala 29:10]
      skip @[DelayPipe.scala 28:14]
    node _T_5 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 32:12]
    node _T_6 = tail(_T_5, 1) @[DelayPipe.scala 32:12]
    node _T_7 = geq(_T_6, io.config) @[DelayPipe.scala 32:17]
    when _T_7 : @[DelayPipe.scala 32:30]
      node _T_8 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 33:18]
      node _T_9 = tail(_T_8, 1) @[DelayPipe.scala 33:18]
      node _T_10 = sub(_T_9, io.config) @[DelayPipe.scala 33:24]
      node _T_11 = tail(_T_10, 1) @[DelayPipe.scala 33:24]
      rptr <= _T_11 @[DelayPipe.scala 33:10]
      skip @[DelayPipe.scala 32:30]
    else : @[DelayPipe.scala 34:14]
      node _T_12 = add(UInt<3>("h06"), wptr) @[DelayPipe.scala 35:30]
      node _T_13 = tail(_T_12, 1) @[DelayPipe.scala 35:30]
      node _T_14 = sub(_T_13, io.config) @[DelayPipe.scala 35:37]
      node _T_15 = tail(_T_14, 1) @[DelayPipe.scala 35:37]
      rptr <= _T_15 @[DelayPipe.scala 35:10]
      skip @[DelayPipe.scala 34:14]
    node _T_16 = gt(io.config, UInt<1>("h00")) @[DelayPipe.scala 39:28]
    node _T_17 = and(io.en, _T_16) @[DelayPipe.scala 39:14]
    when _T_17 : @[DelayPipe.scala 39:35]
      regs[wptr] <= io.in @[DelayPipe.scala 40:16]
      skip @[DelayPipe.scala 39:35]
    reg cnt : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 43:20]
    node _T_18 = eq(io.en, UInt<1>("h00")) @[DelayPipe.scala 44:8]
    when _T_18 : @[DelayPipe.scala 44:15]
      cnt <= UInt<1>("h00") @[DelayPipe.scala 45:9]
      skip @[DelayPipe.scala 44:15]
    else : @[DelayPipe.scala 46:30]
      node _T_19 = lt(cnt, io.config) @[DelayPipe.scala 46:18]
      when _T_19 : @[DelayPipe.scala 46:30]
        node _T_20 = add(cnt, UInt<1>("h01")) @[DelayPipe.scala 47:16]
        node _T_21 = tail(_T_20, 1) @[DelayPipe.scala 47:16]
        cnt <= _T_21 @[DelayPipe.scala 47:9]
        skip @[DelayPipe.scala 46:30]
    node _T_22 = eq(UInt<1>("h00"), io.config) @[DelayPipe.scala 50:22]
    node _T_23 = and(io.en, _T_22) @[DelayPipe.scala 50:14]
    when _T_23 : @[DelayPipe.scala 50:37]
      io.out <= io.in @[DelayPipe.scala 51:12]
      skip @[DelayPipe.scala 50:37]
    else : @[DelayPipe.scala 52:43]
      node _T_24 = eq(cnt, io.config) @[DelayPipe.scala 52:28]
      node _T_25 = and(io.en, _T_24) @[DelayPipe.scala 52:20]
      when _T_25 : @[DelayPipe.scala 52:43]
        io.out <= regs[rptr] @[DelayPipe.scala 53:12]
        skip @[DelayPipe.scala 52:43]
      else : @[DelayPipe.scala 54:14]
        io.out <= UInt<1>("h00") @[DelayPipe.scala 55:12]
        skip @[DelayPipe.scala 54:14]
    
  module DelayPipe_105 : 
    input clock : Clock
    input reset : Reset
    output io : {flip en : UInt<1>, flip config : UInt<3>, flip in : UInt<32>, out : UInt<32>}
    
    wire _T : UInt<32>[5] @[DelayPipe.scala 22:29]
    _T[0] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[1] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[2] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[3] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[4] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    reg regs : UInt<32>[5], clock with : (reset => (reset, _T)) @[DelayPipe.scala 22:21]
    reg wptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 23:21]
    reg rptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 24:21]
    node _T_1 = lt(wptr, UInt<3>("h04")) @[DelayPipe.scala 26:23]
    node _T_2 = and(io.en, _T_1) @[DelayPipe.scala 26:14]
    when _T_2 : @[DelayPipe.scala 26:37]
      node _T_3 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 27:17]
      node _T_4 = tail(_T_3, 1) @[DelayPipe.scala 27:17]
      wptr <= _T_4 @[DelayPipe.scala 27:10]
      skip @[DelayPipe.scala 26:37]
    else : @[DelayPipe.scala 28:14]
      wptr <= UInt<1>("h00") @[DelayPipe.scala 29:10]
      skip @[DelayPipe.scala 28:14]
    node _T_5 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 32:12]
    node _T_6 = tail(_T_5, 1) @[DelayPipe.scala 32:12]
    node _T_7 = geq(_T_6, io.config) @[DelayPipe.scala 32:17]
    when _T_7 : @[DelayPipe.scala 32:30]
      node _T_8 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 33:18]
      node _T_9 = tail(_T_8, 1) @[DelayPipe.scala 33:18]
      node _T_10 = sub(_T_9, io.config) @[DelayPipe.scala 33:24]
      node _T_11 = tail(_T_10, 1) @[DelayPipe.scala 33:24]
      rptr <= _T_11 @[DelayPipe.scala 33:10]
      skip @[DelayPipe.scala 32:30]
    else : @[DelayPipe.scala 34:14]
      node _T_12 = add(UInt<3>("h06"), wptr) @[DelayPipe.scala 35:30]
      node _T_13 = tail(_T_12, 1) @[DelayPipe.scala 35:30]
      node _T_14 = sub(_T_13, io.config) @[DelayPipe.scala 35:37]
      node _T_15 = tail(_T_14, 1) @[DelayPipe.scala 35:37]
      rptr <= _T_15 @[DelayPipe.scala 35:10]
      skip @[DelayPipe.scala 34:14]
    node _T_16 = gt(io.config, UInt<1>("h00")) @[DelayPipe.scala 39:28]
    node _T_17 = and(io.en, _T_16) @[DelayPipe.scala 39:14]
    when _T_17 : @[DelayPipe.scala 39:35]
      regs[wptr] <= io.in @[DelayPipe.scala 40:16]
      skip @[DelayPipe.scala 39:35]
    reg cnt : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 43:20]
    node _T_18 = eq(io.en, UInt<1>("h00")) @[DelayPipe.scala 44:8]
    when _T_18 : @[DelayPipe.scala 44:15]
      cnt <= UInt<1>("h00") @[DelayPipe.scala 45:9]
      skip @[DelayPipe.scala 44:15]
    else : @[DelayPipe.scala 46:30]
      node _T_19 = lt(cnt, io.config) @[DelayPipe.scala 46:18]
      when _T_19 : @[DelayPipe.scala 46:30]
        node _T_20 = add(cnt, UInt<1>("h01")) @[DelayPipe.scala 47:16]
        node _T_21 = tail(_T_20, 1) @[DelayPipe.scala 47:16]
        cnt <= _T_21 @[DelayPipe.scala 47:9]
        skip @[DelayPipe.scala 46:30]
    node _T_22 = eq(UInt<1>("h00"), io.config) @[DelayPipe.scala 50:22]
    node _T_23 = and(io.en, _T_22) @[DelayPipe.scala 50:14]
    when _T_23 : @[DelayPipe.scala 50:37]
      io.out <= io.in @[DelayPipe.scala 51:12]
      skip @[DelayPipe.scala 50:37]
    else : @[DelayPipe.scala 52:43]
      node _T_24 = eq(cnt, io.config) @[DelayPipe.scala 52:28]
      node _T_25 = and(io.en, _T_24) @[DelayPipe.scala 52:20]
      when _T_25 : @[DelayPipe.scala 52:43]
        io.out <= regs[rptr] @[DelayPipe.scala 53:12]
        skip @[DelayPipe.scala 52:43]
      else : @[DelayPipe.scala 54:14]
        io.out <= UInt<1>("h00") @[DelayPipe.scala 55:12]
        skip @[DelayPipe.scala 54:14]
    
  module Muxn_120 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[6], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    node _T_10 = eq(UInt<3>("h05"), io.config) @[Mux.scala 80:60]
    node _T_11 = mux(_T_10, io.in[5], _T_9) @[Mux.scala 80:57]
    io.out <= _T_11 @[Multiplexer.scala 20:10]
    
  module Muxn_121 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[6], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    node _T_10 = eq(UInt<3>("h05"), io.config) @[Mux.scala 80:60]
    node _T_11 = mux(_T_10, io.in[5], _T_9) @[Mux.scala 80:57]
    io.out <= _T_11 @[Multiplexer.scala 20:10]
    
  module ConfigMem_68 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<1>, flip cfg_data : UInt<32>, out : UInt<48>[1]}
    
    wire _T : UInt<48>[1] @[ConfigMem.scala 27:29]
    _T[0] <= UInt<48>("h00") @[ConfigMem.scala 27:29]
    reg regs : UInt<48>[1], clock with : (reset => (reset, _T)) @[ConfigMem.scala 27:21]
    node _T_1 = eq(io.cfg_addr, UInt<1>("h00")) @[ConfigMem.scala 39:38]
    node _T_2 = and(io.cfg_en, _T_1) @[ConfigMem.scala 39:22]
    when _T_2 : @[ConfigMem.scala 39:47]
      node _T_3 = bits(regs[0], 47, 32) @[ConfigMem.scala 41:33]
      node _T_4 = cat(_T_3, io.cfg_data) @[Cat.scala 29:58]
      regs[0] <= _T_4 @[ConfigMem.scala 41:19]
      skip @[ConfigMem.scala 39:47]
    node _T_5 = eq(io.cfg_addr, UInt<1>("h01")) @[ConfigMem.scala 39:38]
    node _T_6 = and(io.cfg_en, _T_5) @[ConfigMem.scala 39:22]
    when _T_6 : @[ConfigMem.scala 39:47]
      node _T_7 = bits(regs[0], 31, 0) @[ConfigMem.scala 43:46]
      node _T_8 = cat(io.cfg_data, _T_7) @[Cat.scala 29:58]
      regs[0] <= _T_8 @[ConfigMem.scala 43:19]
      skip @[ConfigMem.scala 39:47]
    io.out[0] <= regs[0] @[ConfigMem.scala 52:45]
    
  module GPE_52 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<12>, flip cfg_data : UInt<32>, flip en : UInt<1>, flip in : UInt<32>[8], out : UInt<32>[1]}
    
    inst alu of ALU_52 @[PE.scala 50:19]
    alu.clock <= clock
    alu.reset <= reset
    inst rf of RF_52 @[PE.scala 51:18]
    rf.clock <= clock
    rf.reset <= reset
    inst DelayPipe of DelayPipe_104 @[PE.scala 52:54]
    DelayPipe.clock <= clock
    DelayPipe.reset <= reset
    inst DelayPipe_1 of DelayPipe_105 @[PE.scala 52:54]
    DelayPipe_1.clock <= clock
    DelayPipe_1.reset <= reset
    wire const : UInt<32> @[PE.scala 54:19]
    inst Muxn of Muxn_120 @[PE.scala 55:49]
    Muxn.clock <= clock
    Muxn.reset <= reset
    inst Muxn_1 of Muxn_121 @[PE.scala 55:49]
    Muxn_1.clock <= clock
    Muxn_1.reset <= reset
    Muxn.io.in[0] <= io.in[0] @[PE.scala 62:12]
    Muxn.io.in[1] <= io.in[1] @[PE.scala 62:12]
    Muxn.io.in[2] <= io.in[2] @[PE.scala 62:12]
    Muxn.io.in[3] <= io.in[3] @[PE.scala 62:12]
    Muxn.io.in[4] <= const @[PE.scala 64:12]
    Muxn.io.in[5] <= rf.io.out[1] @[PE.scala 66:12]
    DelayPipe.io.en <= io.en @[PE.scala 69:23]
    DelayPipe.io.in <= Muxn.io.out @[PE.scala 70:23]
    alu.io.in[0] <= DelayPipe.io.out @[PE.scala 71:18]
    Muxn_1.io.in[0] <= io.in[4] @[PE.scala 62:12]
    Muxn_1.io.in[1] <= io.in[5] @[PE.scala 62:12]
    Muxn_1.io.in[2] <= io.in[6] @[PE.scala 62:12]
    Muxn_1.io.in[3] <= io.in[7] @[PE.scala 62:12]
    Muxn_1.io.in[4] <= const @[PE.scala 64:12]
    Muxn_1.io.in[5] <= rf.io.out[1] @[PE.scala 66:12]
    DelayPipe_1.io.en <= io.en @[PE.scala 69:23]
    DelayPipe_1.io.in <= Muxn_1.io.out @[PE.scala 70:23]
    alu.io.in[1] <= DelayPipe_1.io.out @[PE.scala 71:18]
    rf.io.en <= io.en @[PE.scala 75:12]
    rf.io.in[0] <= alu.io.out @[PE.scala 76:15]
    io.out[0] <= rf.io.out[0] @[PE.scala 77:13]
    inst cfg of ConfigMem_68 @[PE.scala 89:19]
    cfg.clock <= clock
    cfg.reset <= reset
    node _T = bits(io.cfg_addr, 11, 2) @[PE.scala 90:63]
    node _T_1 = eq(UInt<8>("h08c"), _T) @[PE.scala 90:48]
    node _T_2 = and(io.cfg_en, _T_1) @[PE.scala 90:30]
    cfg.io.cfg_en <= _T_2 @[PE.scala 90:17]
    node _T_3 = bits(io.cfg_addr, 1, 0) @[PE.scala 91:33]
    cfg.io.cfg_addr <= _T_3 @[PE.scala 91:19]
    cfg.io.cfg_data <= io.cfg_data @[PE.scala 92:19]
    wire cfgOut : UInt<48> @[PE.scala 96:20]
    cfgOut <= cfg.io.out[0] @[PE.scala 97:10]
    node _T_4 = bits(cfgOut, 31, 0) @[PE.scala 98:18]
    const <= _T_4 @[PE.scala 98:9]
    node _T_5 = bits(cfgOut, 35, 32) @[PE.scala 100:28]
    alu.io.config <= _T_5 @[PE.scala 100:19]
    rf.io.config is invalid @[PE.scala 107:18]
    node _T_6 = bits(cfgOut, 38, 36) @[PE.scala 113:38]
    DelayPipe.io.config <= _T_6 @[PE.scala 113:29]
    node _T_7 = bits(cfgOut, 41, 39) @[PE.scala 113:38]
    DelayPipe_1.io.config <= _T_7 @[PE.scala 113:29]
    node _T_8 = bits(cfgOut, 44, 42) @[PE.scala 121:32]
    Muxn.io.config <= _T_8 @[PE.scala 121:23]
    node _T_9 = bits(cfgOut, 47, 45) @[PE.scala 121:32]
    Muxn_1.io.config <= _T_9 @[PE.scala 121:23]
    
  module ALU_53 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<4>, flip in : UInt<32>[2], out : UInt<32>}
    
    node _T = bits(io.in[0], 31, 0) @[Operations.scala 122:31]
    node _T_1 = bits(io.in[0], 31, 0) @[Operations.scala 124:31]
    node _T_2 = bits(io.in[1], 31, 0) @[Operations.scala 124:49]
    node _T_3 = add(_T_1, _T_2) @[Operations.scala 124:41]
    node _T_4 = tail(_T_3, 1) @[Operations.scala 124:41]
    node _T_5 = bits(io.in[0], 31, 0) @[Operations.scala 126:31]
    node _T_6 = bits(io.in[1], 31, 0) @[Operations.scala 126:49]
    node _T_7 = sub(_T_5, _T_6) @[Operations.scala 126:41]
    node _T_8 = tail(_T_7, 1) @[Operations.scala 126:41]
    node _T_9 = bits(io.in[0], 31, 0) @[Operations.scala 128:31]
    node _T_10 = bits(io.in[1], 31, 0) @[Operations.scala 128:49]
    node _T_11 = mul(_T_9, _T_10) @[Operations.scala 128:41]
    node _T_12 = bits(io.in[0], 31, 0) @[Operations.scala 138:31]
    node _T_13 = bits(io.in[1], 31, 0) @[Operations.scala 138:49]
    node _T_14 = and(_T_12, _T_13) @[Operations.scala 138:41]
    node _T_15 = bits(io.in[0], 31, 0) @[Operations.scala 140:31]
    node _T_16 = bits(io.in[1], 31, 0) @[Operations.scala 140:49]
    node _T_17 = or(_T_15, _T_16) @[Operations.scala 140:41]
    node _T_18 = bits(io.in[0], 31, 0) @[Operations.scala 142:31]
    node _T_19 = bits(io.in[1], 31, 0) @[Operations.scala 142:49]
    node _T_20 = xor(_T_18, _T_19) @[Operations.scala 142:41]
    node _T_21 = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_22 = mux(_T_21, _T, UInt<1>("h00")) @[Mux.scala 80:57]
    node _T_23 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_24 = mux(_T_23, _T_4, _T_22) @[Mux.scala 80:57]
    node _T_25 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_26 = mux(_T_25, _T_8, _T_24) @[Mux.scala 80:57]
    node _T_27 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_28 = mux(_T_27, _T_11, _T_26) @[Mux.scala 80:57]
    node _T_29 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_30 = mux(_T_29, _T_14, _T_28) @[Mux.scala 80:57]
    node _T_31 = eq(UInt<3>("h05"), io.config) @[Mux.scala 80:60]
    node _T_32 = mux(_T_31, _T_17, _T_30) @[Mux.scala 80:57]
    node _T_33 = eq(UInt<3>("h06"), io.config) @[Mux.scala 80:60]
    node _T_34 = mux(_T_33, _T_20, _T_32) @[Mux.scala 80:57]
    io.out <= _T_34 @[ALU.scala 25:10]
    
  module RF_53 : 
    input clock : Clock
    input reset : Reset
    output io : {flip en : UInt<1>, flip config : UInt<0>, flip in : UInt<32>[1], out : UInt<32>[2]}
    
    wire _T : UInt<32>[1] @[RegFile.scala 24:29]
    _T[0] <= UInt<32>("h00") @[RegFile.scala 24:29]
    reg regs : UInt<32>[1], clock with : (reset => (reset, _T)) @[RegFile.scala 24:21]
    when io.en : @[RegFile.scala 34:16]
      regs[0] <= io.in[0] @[RegFile.scala 35:41]
      skip @[RegFile.scala 34:16]
    io.out[0] <= regs[0] @[RegFile.scala 37:42]
    io.out[1] <= regs[0] @[RegFile.scala 37:42]
    
  module DelayPipe_106 : 
    input clock : Clock
    input reset : Reset
    output io : {flip en : UInt<1>, flip config : UInt<3>, flip in : UInt<32>, out : UInt<32>}
    
    wire _T : UInt<32>[5] @[DelayPipe.scala 22:29]
    _T[0] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[1] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[2] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[3] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[4] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    reg regs : UInt<32>[5], clock with : (reset => (reset, _T)) @[DelayPipe.scala 22:21]
    reg wptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 23:21]
    reg rptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 24:21]
    node _T_1 = lt(wptr, UInt<3>("h04")) @[DelayPipe.scala 26:23]
    node _T_2 = and(io.en, _T_1) @[DelayPipe.scala 26:14]
    when _T_2 : @[DelayPipe.scala 26:37]
      node _T_3 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 27:17]
      node _T_4 = tail(_T_3, 1) @[DelayPipe.scala 27:17]
      wptr <= _T_4 @[DelayPipe.scala 27:10]
      skip @[DelayPipe.scala 26:37]
    else : @[DelayPipe.scala 28:14]
      wptr <= UInt<1>("h00") @[DelayPipe.scala 29:10]
      skip @[DelayPipe.scala 28:14]
    node _T_5 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 32:12]
    node _T_6 = tail(_T_5, 1) @[DelayPipe.scala 32:12]
    node _T_7 = geq(_T_6, io.config) @[DelayPipe.scala 32:17]
    when _T_7 : @[DelayPipe.scala 32:30]
      node _T_8 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 33:18]
      node _T_9 = tail(_T_8, 1) @[DelayPipe.scala 33:18]
      node _T_10 = sub(_T_9, io.config) @[DelayPipe.scala 33:24]
      node _T_11 = tail(_T_10, 1) @[DelayPipe.scala 33:24]
      rptr <= _T_11 @[DelayPipe.scala 33:10]
      skip @[DelayPipe.scala 32:30]
    else : @[DelayPipe.scala 34:14]
      node _T_12 = add(UInt<3>("h06"), wptr) @[DelayPipe.scala 35:30]
      node _T_13 = tail(_T_12, 1) @[DelayPipe.scala 35:30]
      node _T_14 = sub(_T_13, io.config) @[DelayPipe.scala 35:37]
      node _T_15 = tail(_T_14, 1) @[DelayPipe.scala 35:37]
      rptr <= _T_15 @[DelayPipe.scala 35:10]
      skip @[DelayPipe.scala 34:14]
    node _T_16 = gt(io.config, UInt<1>("h00")) @[DelayPipe.scala 39:28]
    node _T_17 = and(io.en, _T_16) @[DelayPipe.scala 39:14]
    when _T_17 : @[DelayPipe.scala 39:35]
      regs[wptr] <= io.in @[DelayPipe.scala 40:16]
      skip @[DelayPipe.scala 39:35]
    reg cnt : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 43:20]
    node _T_18 = eq(io.en, UInt<1>("h00")) @[DelayPipe.scala 44:8]
    when _T_18 : @[DelayPipe.scala 44:15]
      cnt <= UInt<1>("h00") @[DelayPipe.scala 45:9]
      skip @[DelayPipe.scala 44:15]
    else : @[DelayPipe.scala 46:30]
      node _T_19 = lt(cnt, io.config) @[DelayPipe.scala 46:18]
      when _T_19 : @[DelayPipe.scala 46:30]
        node _T_20 = add(cnt, UInt<1>("h01")) @[DelayPipe.scala 47:16]
        node _T_21 = tail(_T_20, 1) @[DelayPipe.scala 47:16]
        cnt <= _T_21 @[DelayPipe.scala 47:9]
        skip @[DelayPipe.scala 46:30]
    node _T_22 = eq(UInt<1>("h00"), io.config) @[DelayPipe.scala 50:22]
    node _T_23 = and(io.en, _T_22) @[DelayPipe.scala 50:14]
    when _T_23 : @[DelayPipe.scala 50:37]
      io.out <= io.in @[DelayPipe.scala 51:12]
      skip @[DelayPipe.scala 50:37]
    else : @[DelayPipe.scala 52:43]
      node _T_24 = eq(cnt, io.config) @[DelayPipe.scala 52:28]
      node _T_25 = and(io.en, _T_24) @[DelayPipe.scala 52:20]
      when _T_25 : @[DelayPipe.scala 52:43]
        io.out <= regs[rptr] @[DelayPipe.scala 53:12]
        skip @[DelayPipe.scala 52:43]
      else : @[DelayPipe.scala 54:14]
        io.out <= UInt<1>("h00") @[DelayPipe.scala 55:12]
        skip @[DelayPipe.scala 54:14]
    
  module DelayPipe_107 : 
    input clock : Clock
    input reset : Reset
    output io : {flip en : UInt<1>, flip config : UInt<3>, flip in : UInt<32>, out : UInt<32>}
    
    wire _T : UInt<32>[5] @[DelayPipe.scala 22:29]
    _T[0] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[1] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[2] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[3] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[4] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    reg regs : UInt<32>[5], clock with : (reset => (reset, _T)) @[DelayPipe.scala 22:21]
    reg wptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 23:21]
    reg rptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 24:21]
    node _T_1 = lt(wptr, UInt<3>("h04")) @[DelayPipe.scala 26:23]
    node _T_2 = and(io.en, _T_1) @[DelayPipe.scala 26:14]
    when _T_2 : @[DelayPipe.scala 26:37]
      node _T_3 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 27:17]
      node _T_4 = tail(_T_3, 1) @[DelayPipe.scala 27:17]
      wptr <= _T_4 @[DelayPipe.scala 27:10]
      skip @[DelayPipe.scala 26:37]
    else : @[DelayPipe.scala 28:14]
      wptr <= UInt<1>("h00") @[DelayPipe.scala 29:10]
      skip @[DelayPipe.scala 28:14]
    node _T_5 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 32:12]
    node _T_6 = tail(_T_5, 1) @[DelayPipe.scala 32:12]
    node _T_7 = geq(_T_6, io.config) @[DelayPipe.scala 32:17]
    when _T_7 : @[DelayPipe.scala 32:30]
      node _T_8 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 33:18]
      node _T_9 = tail(_T_8, 1) @[DelayPipe.scala 33:18]
      node _T_10 = sub(_T_9, io.config) @[DelayPipe.scala 33:24]
      node _T_11 = tail(_T_10, 1) @[DelayPipe.scala 33:24]
      rptr <= _T_11 @[DelayPipe.scala 33:10]
      skip @[DelayPipe.scala 32:30]
    else : @[DelayPipe.scala 34:14]
      node _T_12 = add(UInt<3>("h06"), wptr) @[DelayPipe.scala 35:30]
      node _T_13 = tail(_T_12, 1) @[DelayPipe.scala 35:30]
      node _T_14 = sub(_T_13, io.config) @[DelayPipe.scala 35:37]
      node _T_15 = tail(_T_14, 1) @[DelayPipe.scala 35:37]
      rptr <= _T_15 @[DelayPipe.scala 35:10]
      skip @[DelayPipe.scala 34:14]
    node _T_16 = gt(io.config, UInt<1>("h00")) @[DelayPipe.scala 39:28]
    node _T_17 = and(io.en, _T_16) @[DelayPipe.scala 39:14]
    when _T_17 : @[DelayPipe.scala 39:35]
      regs[wptr] <= io.in @[DelayPipe.scala 40:16]
      skip @[DelayPipe.scala 39:35]
    reg cnt : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 43:20]
    node _T_18 = eq(io.en, UInt<1>("h00")) @[DelayPipe.scala 44:8]
    when _T_18 : @[DelayPipe.scala 44:15]
      cnt <= UInt<1>("h00") @[DelayPipe.scala 45:9]
      skip @[DelayPipe.scala 44:15]
    else : @[DelayPipe.scala 46:30]
      node _T_19 = lt(cnt, io.config) @[DelayPipe.scala 46:18]
      when _T_19 : @[DelayPipe.scala 46:30]
        node _T_20 = add(cnt, UInt<1>("h01")) @[DelayPipe.scala 47:16]
        node _T_21 = tail(_T_20, 1) @[DelayPipe.scala 47:16]
        cnt <= _T_21 @[DelayPipe.scala 47:9]
        skip @[DelayPipe.scala 46:30]
    node _T_22 = eq(UInt<1>("h00"), io.config) @[DelayPipe.scala 50:22]
    node _T_23 = and(io.en, _T_22) @[DelayPipe.scala 50:14]
    when _T_23 : @[DelayPipe.scala 50:37]
      io.out <= io.in @[DelayPipe.scala 51:12]
      skip @[DelayPipe.scala 50:37]
    else : @[DelayPipe.scala 52:43]
      node _T_24 = eq(cnt, io.config) @[DelayPipe.scala 52:28]
      node _T_25 = and(io.en, _T_24) @[DelayPipe.scala 52:20]
      when _T_25 : @[DelayPipe.scala 52:43]
        io.out <= regs[rptr] @[DelayPipe.scala 53:12]
        skip @[DelayPipe.scala 52:43]
      else : @[DelayPipe.scala 54:14]
        io.out <= UInt<1>("h00") @[DelayPipe.scala 55:12]
        skip @[DelayPipe.scala 54:14]
    
  module Muxn_122 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[6], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    node _T_10 = eq(UInt<3>("h05"), io.config) @[Mux.scala 80:60]
    node _T_11 = mux(_T_10, io.in[5], _T_9) @[Mux.scala 80:57]
    io.out <= _T_11 @[Multiplexer.scala 20:10]
    
  module Muxn_123 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[6], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    node _T_10 = eq(UInt<3>("h05"), io.config) @[Mux.scala 80:60]
    node _T_11 = mux(_T_10, io.in[5], _T_9) @[Mux.scala 80:57]
    io.out <= _T_11 @[Multiplexer.scala 20:10]
    
  module ConfigMem_69 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<1>, flip cfg_data : UInt<32>, out : UInt<48>[1]}
    
    wire _T : UInt<48>[1] @[ConfigMem.scala 27:29]
    _T[0] <= UInt<48>("h00") @[ConfigMem.scala 27:29]
    reg regs : UInt<48>[1], clock with : (reset => (reset, _T)) @[ConfigMem.scala 27:21]
    node _T_1 = eq(io.cfg_addr, UInt<1>("h00")) @[ConfigMem.scala 39:38]
    node _T_2 = and(io.cfg_en, _T_1) @[ConfigMem.scala 39:22]
    when _T_2 : @[ConfigMem.scala 39:47]
      node _T_3 = bits(regs[0], 47, 32) @[ConfigMem.scala 41:33]
      node _T_4 = cat(_T_3, io.cfg_data) @[Cat.scala 29:58]
      regs[0] <= _T_4 @[ConfigMem.scala 41:19]
      skip @[ConfigMem.scala 39:47]
    node _T_5 = eq(io.cfg_addr, UInt<1>("h01")) @[ConfigMem.scala 39:38]
    node _T_6 = and(io.cfg_en, _T_5) @[ConfigMem.scala 39:22]
    when _T_6 : @[ConfigMem.scala 39:47]
      node _T_7 = bits(regs[0], 31, 0) @[ConfigMem.scala 43:46]
      node _T_8 = cat(io.cfg_data, _T_7) @[Cat.scala 29:58]
      regs[0] <= _T_8 @[ConfigMem.scala 43:19]
      skip @[ConfigMem.scala 39:47]
    io.out[0] <= regs[0] @[ConfigMem.scala 52:45]
    
  module GPE_53 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<12>, flip cfg_data : UInt<32>, flip en : UInt<1>, flip in : UInt<32>[8], out : UInt<32>[1]}
    
    inst alu of ALU_53 @[PE.scala 50:19]
    alu.clock <= clock
    alu.reset <= reset
    inst rf of RF_53 @[PE.scala 51:18]
    rf.clock <= clock
    rf.reset <= reset
    inst DelayPipe of DelayPipe_106 @[PE.scala 52:54]
    DelayPipe.clock <= clock
    DelayPipe.reset <= reset
    inst DelayPipe_1 of DelayPipe_107 @[PE.scala 52:54]
    DelayPipe_1.clock <= clock
    DelayPipe_1.reset <= reset
    wire const : UInt<32> @[PE.scala 54:19]
    inst Muxn of Muxn_122 @[PE.scala 55:49]
    Muxn.clock <= clock
    Muxn.reset <= reset
    inst Muxn_1 of Muxn_123 @[PE.scala 55:49]
    Muxn_1.clock <= clock
    Muxn_1.reset <= reset
    Muxn.io.in[0] <= io.in[0] @[PE.scala 62:12]
    Muxn.io.in[1] <= io.in[1] @[PE.scala 62:12]
    Muxn.io.in[2] <= io.in[2] @[PE.scala 62:12]
    Muxn.io.in[3] <= io.in[3] @[PE.scala 62:12]
    Muxn.io.in[4] <= const @[PE.scala 64:12]
    Muxn.io.in[5] <= rf.io.out[1] @[PE.scala 66:12]
    DelayPipe.io.en <= io.en @[PE.scala 69:23]
    DelayPipe.io.in <= Muxn.io.out @[PE.scala 70:23]
    alu.io.in[0] <= DelayPipe.io.out @[PE.scala 71:18]
    Muxn_1.io.in[0] <= io.in[4] @[PE.scala 62:12]
    Muxn_1.io.in[1] <= io.in[5] @[PE.scala 62:12]
    Muxn_1.io.in[2] <= io.in[6] @[PE.scala 62:12]
    Muxn_1.io.in[3] <= io.in[7] @[PE.scala 62:12]
    Muxn_1.io.in[4] <= const @[PE.scala 64:12]
    Muxn_1.io.in[5] <= rf.io.out[1] @[PE.scala 66:12]
    DelayPipe_1.io.en <= io.en @[PE.scala 69:23]
    DelayPipe_1.io.in <= Muxn_1.io.out @[PE.scala 70:23]
    alu.io.in[1] <= DelayPipe_1.io.out @[PE.scala 71:18]
    rf.io.en <= io.en @[PE.scala 75:12]
    rf.io.in[0] <= alu.io.out @[PE.scala 76:15]
    io.out[0] <= rf.io.out[0] @[PE.scala 77:13]
    inst cfg of ConfigMem_69 @[PE.scala 89:19]
    cfg.clock <= clock
    cfg.reset <= reset
    node _T = bits(io.cfg_addr, 11, 2) @[PE.scala 90:63]
    node _T_1 = eq(UInt<8>("h08d"), _T) @[PE.scala 90:48]
    node _T_2 = and(io.cfg_en, _T_1) @[PE.scala 90:30]
    cfg.io.cfg_en <= _T_2 @[PE.scala 90:17]
    node _T_3 = bits(io.cfg_addr, 1, 0) @[PE.scala 91:33]
    cfg.io.cfg_addr <= _T_3 @[PE.scala 91:19]
    cfg.io.cfg_data <= io.cfg_data @[PE.scala 92:19]
    wire cfgOut : UInt<48> @[PE.scala 96:20]
    cfgOut <= cfg.io.out[0] @[PE.scala 97:10]
    node _T_4 = bits(cfgOut, 31, 0) @[PE.scala 98:18]
    const <= _T_4 @[PE.scala 98:9]
    node _T_5 = bits(cfgOut, 35, 32) @[PE.scala 100:28]
    alu.io.config <= _T_5 @[PE.scala 100:19]
    rf.io.config is invalid @[PE.scala 107:18]
    node _T_6 = bits(cfgOut, 38, 36) @[PE.scala 113:38]
    DelayPipe.io.config <= _T_6 @[PE.scala 113:29]
    node _T_7 = bits(cfgOut, 41, 39) @[PE.scala 113:38]
    DelayPipe_1.io.config <= _T_7 @[PE.scala 113:29]
    node _T_8 = bits(cfgOut, 44, 42) @[PE.scala 121:32]
    Muxn.io.config <= _T_8 @[PE.scala 121:23]
    node _T_9 = bits(cfgOut, 47, 45) @[PE.scala 121:32]
    Muxn_1.io.config <= _T_9 @[PE.scala 121:23]
    
  module ALU_54 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<4>, flip in : UInt<32>[2], out : UInt<32>}
    
    node _T = bits(io.in[0], 31, 0) @[Operations.scala 122:31]
    node _T_1 = bits(io.in[0], 31, 0) @[Operations.scala 124:31]
    node _T_2 = bits(io.in[1], 31, 0) @[Operations.scala 124:49]
    node _T_3 = add(_T_1, _T_2) @[Operations.scala 124:41]
    node _T_4 = tail(_T_3, 1) @[Operations.scala 124:41]
    node _T_5 = bits(io.in[0], 31, 0) @[Operations.scala 126:31]
    node _T_6 = bits(io.in[1], 31, 0) @[Operations.scala 126:49]
    node _T_7 = sub(_T_5, _T_6) @[Operations.scala 126:41]
    node _T_8 = tail(_T_7, 1) @[Operations.scala 126:41]
    node _T_9 = bits(io.in[0], 31, 0) @[Operations.scala 128:31]
    node _T_10 = bits(io.in[1], 31, 0) @[Operations.scala 128:49]
    node _T_11 = mul(_T_9, _T_10) @[Operations.scala 128:41]
    node _T_12 = bits(io.in[0], 31, 0) @[Operations.scala 138:31]
    node _T_13 = bits(io.in[1], 31, 0) @[Operations.scala 138:49]
    node _T_14 = and(_T_12, _T_13) @[Operations.scala 138:41]
    node _T_15 = bits(io.in[0], 31, 0) @[Operations.scala 140:31]
    node _T_16 = bits(io.in[1], 31, 0) @[Operations.scala 140:49]
    node _T_17 = or(_T_15, _T_16) @[Operations.scala 140:41]
    node _T_18 = bits(io.in[0], 31, 0) @[Operations.scala 142:31]
    node _T_19 = bits(io.in[1], 31, 0) @[Operations.scala 142:49]
    node _T_20 = xor(_T_18, _T_19) @[Operations.scala 142:41]
    node _T_21 = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_22 = mux(_T_21, _T, UInt<1>("h00")) @[Mux.scala 80:57]
    node _T_23 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_24 = mux(_T_23, _T_4, _T_22) @[Mux.scala 80:57]
    node _T_25 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_26 = mux(_T_25, _T_8, _T_24) @[Mux.scala 80:57]
    node _T_27 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_28 = mux(_T_27, _T_11, _T_26) @[Mux.scala 80:57]
    node _T_29 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_30 = mux(_T_29, _T_14, _T_28) @[Mux.scala 80:57]
    node _T_31 = eq(UInt<3>("h05"), io.config) @[Mux.scala 80:60]
    node _T_32 = mux(_T_31, _T_17, _T_30) @[Mux.scala 80:57]
    node _T_33 = eq(UInt<3>("h06"), io.config) @[Mux.scala 80:60]
    node _T_34 = mux(_T_33, _T_20, _T_32) @[Mux.scala 80:57]
    io.out <= _T_34 @[ALU.scala 25:10]
    
  module RF_54 : 
    input clock : Clock
    input reset : Reset
    output io : {flip en : UInt<1>, flip config : UInt<0>, flip in : UInt<32>[1], out : UInt<32>[2]}
    
    wire _T : UInt<32>[1] @[RegFile.scala 24:29]
    _T[0] <= UInt<32>("h00") @[RegFile.scala 24:29]
    reg regs : UInt<32>[1], clock with : (reset => (reset, _T)) @[RegFile.scala 24:21]
    when io.en : @[RegFile.scala 34:16]
      regs[0] <= io.in[0] @[RegFile.scala 35:41]
      skip @[RegFile.scala 34:16]
    io.out[0] <= regs[0] @[RegFile.scala 37:42]
    io.out[1] <= regs[0] @[RegFile.scala 37:42]
    
  module DelayPipe_108 : 
    input clock : Clock
    input reset : Reset
    output io : {flip en : UInt<1>, flip config : UInt<3>, flip in : UInt<32>, out : UInt<32>}
    
    wire _T : UInt<32>[5] @[DelayPipe.scala 22:29]
    _T[0] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[1] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[2] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[3] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[4] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    reg regs : UInt<32>[5], clock with : (reset => (reset, _T)) @[DelayPipe.scala 22:21]
    reg wptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 23:21]
    reg rptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 24:21]
    node _T_1 = lt(wptr, UInt<3>("h04")) @[DelayPipe.scala 26:23]
    node _T_2 = and(io.en, _T_1) @[DelayPipe.scala 26:14]
    when _T_2 : @[DelayPipe.scala 26:37]
      node _T_3 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 27:17]
      node _T_4 = tail(_T_3, 1) @[DelayPipe.scala 27:17]
      wptr <= _T_4 @[DelayPipe.scala 27:10]
      skip @[DelayPipe.scala 26:37]
    else : @[DelayPipe.scala 28:14]
      wptr <= UInt<1>("h00") @[DelayPipe.scala 29:10]
      skip @[DelayPipe.scala 28:14]
    node _T_5 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 32:12]
    node _T_6 = tail(_T_5, 1) @[DelayPipe.scala 32:12]
    node _T_7 = geq(_T_6, io.config) @[DelayPipe.scala 32:17]
    when _T_7 : @[DelayPipe.scala 32:30]
      node _T_8 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 33:18]
      node _T_9 = tail(_T_8, 1) @[DelayPipe.scala 33:18]
      node _T_10 = sub(_T_9, io.config) @[DelayPipe.scala 33:24]
      node _T_11 = tail(_T_10, 1) @[DelayPipe.scala 33:24]
      rptr <= _T_11 @[DelayPipe.scala 33:10]
      skip @[DelayPipe.scala 32:30]
    else : @[DelayPipe.scala 34:14]
      node _T_12 = add(UInt<3>("h06"), wptr) @[DelayPipe.scala 35:30]
      node _T_13 = tail(_T_12, 1) @[DelayPipe.scala 35:30]
      node _T_14 = sub(_T_13, io.config) @[DelayPipe.scala 35:37]
      node _T_15 = tail(_T_14, 1) @[DelayPipe.scala 35:37]
      rptr <= _T_15 @[DelayPipe.scala 35:10]
      skip @[DelayPipe.scala 34:14]
    node _T_16 = gt(io.config, UInt<1>("h00")) @[DelayPipe.scala 39:28]
    node _T_17 = and(io.en, _T_16) @[DelayPipe.scala 39:14]
    when _T_17 : @[DelayPipe.scala 39:35]
      regs[wptr] <= io.in @[DelayPipe.scala 40:16]
      skip @[DelayPipe.scala 39:35]
    reg cnt : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 43:20]
    node _T_18 = eq(io.en, UInt<1>("h00")) @[DelayPipe.scala 44:8]
    when _T_18 : @[DelayPipe.scala 44:15]
      cnt <= UInt<1>("h00") @[DelayPipe.scala 45:9]
      skip @[DelayPipe.scala 44:15]
    else : @[DelayPipe.scala 46:30]
      node _T_19 = lt(cnt, io.config) @[DelayPipe.scala 46:18]
      when _T_19 : @[DelayPipe.scala 46:30]
        node _T_20 = add(cnt, UInt<1>("h01")) @[DelayPipe.scala 47:16]
        node _T_21 = tail(_T_20, 1) @[DelayPipe.scala 47:16]
        cnt <= _T_21 @[DelayPipe.scala 47:9]
        skip @[DelayPipe.scala 46:30]
    node _T_22 = eq(UInt<1>("h00"), io.config) @[DelayPipe.scala 50:22]
    node _T_23 = and(io.en, _T_22) @[DelayPipe.scala 50:14]
    when _T_23 : @[DelayPipe.scala 50:37]
      io.out <= io.in @[DelayPipe.scala 51:12]
      skip @[DelayPipe.scala 50:37]
    else : @[DelayPipe.scala 52:43]
      node _T_24 = eq(cnt, io.config) @[DelayPipe.scala 52:28]
      node _T_25 = and(io.en, _T_24) @[DelayPipe.scala 52:20]
      when _T_25 : @[DelayPipe.scala 52:43]
        io.out <= regs[rptr] @[DelayPipe.scala 53:12]
        skip @[DelayPipe.scala 52:43]
      else : @[DelayPipe.scala 54:14]
        io.out <= UInt<1>("h00") @[DelayPipe.scala 55:12]
        skip @[DelayPipe.scala 54:14]
    
  module DelayPipe_109 : 
    input clock : Clock
    input reset : Reset
    output io : {flip en : UInt<1>, flip config : UInt<3>, flip in : UInt<32>, out : UInt<32>}
    
    wire _T : UInt<32>[5] @[DelayPipe.scala 22:29]
    _T[0] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[1] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[2] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[3] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[4] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    reg regs : UInt<32>[5], clock with : (reset => (reset, _T)) @[DelayPipe.scala 22:21]
    reg wptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 23:21]
    reg rptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 24:21]
    node _T_1 = lt(wptr, UInt<3>("h04")) @[DelayPipe.scala 26:23]
    node _T_2 = and(io.en, _T_1) @[DelayPipe.scala 26:14]
    when _T_2 : @[DelayPipe.scala 26:37]
      node _T_3 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 27:17]
      node _T_4 = tail(_T_3, 1) @[DelayPipe.scala 27:17]
      wptr <= _T_4 @[DelayPipe.scala 27:10]
      skip @[DelayPipe.scala 26:37]
    else : @[DelayPipe.scala 28:14]
      wptr <= UInt<1>("h00") @[DelayPipe.scala 29:10]
      skip @[DelayPipe.scala 28:14]
    node _T_5 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 32:12]
    node _T_6 = tail(_T_5, 1) @[DelayPipe.scala 32:12]
    node _T_7 = geq(_T_6, io.config) @[DelayPipe.scala 32:17]
    when _T_7 : @[DelayPipe.scala 32:30]
      node _T_8 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 33:18]
      node _T_9 = tail(_T_8, 1) @[DelayPipe.scala 33:18]
      node _T_10 = sub(_T_9, io.config) @[DelayPipe.scala 33:24]
      node _T_11 = tail(_T_10, 1) @[DelayPipe.scala 33:24]
      rptr <= _T_11 @[DelayPipe.scala 33:10]
      skip @[DelayPipe.scala 32:30]
    else : @[DelayPipe.scala 34:14]
      node _T_12 = add(UInt<3>("h06"), wptr) @[DelayPipe.scala 35:30]
      node _T_13 = tail(_T_12, 1) @[DelayPipe.scala 35:30]
      node _T_14 = sub(_T_13, io.config) @[DelayPipe.scala 35:37]
      node _T_15 = tail(_T_14, 1) @[DelayPipe.scala 35:37]
      rptr <= _T_15 @[DelayPipe.scala 35:10]
      skip @[DelayPipe.scala 34:14]
    node _T_16 = gt(io.config, UInt<1>("h00")) @[DelayPipe.scala 39:28]
    node _T_17 = and(io.en, _T_16) @[DelayPipe.scala 39:14]
    when _T_17 : @[DelayPipe.scala 39:35]
      regs[wptr] <= io.in @[DelayPipe.scala 40:16]
      skip @[DelayPipe.scala 39:35]
    reg cnt : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 43:20]
    node _T_18 = eq(io.en, UInt<1>("h00")) @[DelayPipe.scala 44:8]
    when _T_18 : @[DelayPipe.scala 44:15]
      cnt <= UInt<1>("h00") @[DelayPipe.scala 45:9]
      skip @[DelayPipe.scala 44:15]
    else : @[DelayPipe.scala 46:30]
      node _T_19 = lt(cnt, io.config) @[DelayPipe.scala 46:18]
      when _T_19 : @[DelayPipe.scala 46:30]
        node _T_20 = add(cnt, UInt<1>("h01")) @[DelayPipe.scala 47:16]
        node _T_21 = tail(_T_20, 1) @[DelayPipe.scala 47:16]
        cnt <= _T_21 @[DelayPipe.scala 47:9]
        skip @[DelayPipe.scala 46:30]
    node _T_22 = eq(UInt<1>("h00"), io.config) @[DelayPipe.scala 50:22]
    node _T_23 = and(io.en, _T_22) @[DelayPipe.scala 50:14]
    when _T_23 : @[DelayPipe.scala 50:37]
      io.out <= io.in @[DelayPipe.scala 51:12]
      skip @[DelayPipe.scala 50:37]
    else : @[DelayPipe.scala 52:43]
      node _T_24 = eq(cnt, io.config) @[DelayPipe.scala 52:28]
      node _T_25 = and(io.en, _T_24) @[DelayPipe.scala 52:20]
      when _T_25 : @[DelayPipe.scala 52:43]
        io.out <= regs[rptr] @[DelayPipe.scala 53:12]
        skip @[DelayPipe.scala 52:43]
      else : @[DelayPipe.scala 54:14]
        io.out <= UInt<1>("h00") @[DelayPipe.scala 55:12]
        skip @[DelayPipe.scala 54:14]
    
  module Muxn_124 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[6], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    node _T_10 = eq(UInt<3>("h05"), io.config) @[Mux.scala 80:60]
    node _T_11 = mux(_T_10, io.in[5], _T_9) @[Mux.scala 80:57]
    io.out <= _T_11 @[Multiplexer.scala 20:10]
    
  module Muxn_125 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[6], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    node _T_10 = eq(UInt<3>("h05"), io.config) @[Mux.scala 80:60]
    node _T_11 = mux(_T_10, io.in[5], _T_9) @[Mux.scala 80:57]
    io.out <= _T_11 @[Multiplexer.scala 20:10]
    
  module ConfigMem_70 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<1>, flip cfg_data : UInt<32>, out : UInt<48>[1]}
    
    wire _T : UInt<48>[1] @[ConfigMem.scala 27:29]
    _T[0] <= UInt<48>("h00") @[ConfigMem.scala 27:29]
    reg regs : UInt<48>[1], clock with : (reset => (reset, _T)) @[ConfigMem.scala 27:21]
    node _T_1 = eq(io.cfg_addr, UInt<1>("h00")) @[ConfigMem.scala 39:38]
    node _T_2 = and(io.cfg_en, _T_1) @[ConfigMem.scala 39:22]
    when _T_2 : @[ConfigMem.scala 39:47]
      node _T_3 = bits(regs[0], 47, 32) @[ConfigMem.scala 41:33]
      node _T_4 = cat(_T_3, io.cfg_data) @[Cat.scala 29:58]
      regs[0] <= _T_4 @[ConfigMem.scala 41:19]
      skip @[ConfigMem.scala 39:47]
    node _T_5 = eq(io.cfg_addr, UInt<1>("h01")) @[ConfigMem.scala 39:38]
    node _T_6 = and(io.cfg_en, _T_5) @[ConfigMem.scala 39:22]
    when _T_6 : @[ConfigMem.scala 39:47]
      node _T_7 = bits(regs[0], 31, 0) @[ConfigMem.scala 43:46]
      node _T_8 = cat(io.cfg_data, _T_7) @[Cat.scala 29:58]
      regs[0] <= _T_8 @[ConfigMem.scala 43:19]
      skip @[ConfigMem.scala 39:47]
    io.out[0] <= regs[0] @[ConfigMem.scala 52:45]
    
  module GPE_54 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<12>, flip cfg_data : UInt<32>, flip en : UInt<1>, flip in : UInt<32>[8], out : UInt<32>[1]}
    
    inst alu of ALU_54 @[PE.scala 50:19]
    alu.clock <= clock
    alu.reset <= reset
    inst rf of RF_54 @[PE.scala 51:18]
    rf.clock <= clock
    rf.reset <= reset
    inst DelayPipe of DelayPipe_108 @[PE.scala 52:54]
    DelayPipe.clock <= clock
    DelayPipe.reset <= reset
    inst DelayPipe_1 of DelayPipe_109 @[PE.scala 52:54]
    DelayPipe_1.clock <= clock
    DelayPipe_1.reset <= reset
    wire const : UInt<32> @[PE.scala 54:19]
    inst Muxn of Muxn_124 @[PE.scala 55:49]
    Muxn.clock <= clock
    Muxn.reset <= reset
    inst Muxn_1 of Muxn_125 @[PE.scala 55:49]
    Muxn_1.clock <= clock
    Muxn_1.reset <= reset
    Muxn.io.in[0] <= io.in[0] @[PE.scala 62:12]
    Muxn.io.in[1] <= io.in[1] @[PE.scala 62:12]
    Muxn.io.in[2] <= io.in[2] @[PE.scala 62:12]
    Muxn.io.in[3] <= io.in[3] @[PE.scala 62:12]
    Muxn.io.in[4] <= const @[PE.scala 64:12]
    Muxn.io.in[5] <= rf.io.out[1] @[PE.scala 66:12]
    DelayPipe.io.en <= io.en @[PE.scala 69:23]
    DelayPipe.io.in <= Muxn.io.out @[PE.scala 70:23]
    alu.io.in[0] <= DelayPipe.io.out @[PE.scala 71:18]
    Muxn_1.io.in[0] <= io.in[4] @[PE.scala 62:12]
    Muxn_1.io.in[1] <= io.in[5] @[PE.scala 62:12]
    Muxn_1.io.in[2] <= io.in[6] @[PE.scala 62:12]
    Muxn_1.io.in[3] <= io.in[7] @[PE.scala 62:12]
    Muxn_1.io.in[4] <= const @[PE.scala 64:12]
    Muxn_1.io.in[5] <= rf.io.out[1] @[PE.scala 66:12]
    DelayPipe_1.io.en <= io.en @[PE.scala 69:23]
    DelayPipe_1.io.in <= Muxn_1.io.out @[PE.scala 70:23]
    alu.io.in[1] <= DelayPipe_1.io.out @[PE.scala 71:18]
    rf.io.en <= io.en @[PE.scala 75:12]
    rf.io.in[0] <= alu.io.out @[PE.scala 76:15]
    io.out[0] <= rf.io.out[0] @[PE.scala 77:13]
    inst cfg of ConfigMem_70 @[PE.scala 89:19]
    cfg.clock <= clock
    cfg.reset <= reset
    node _T = bits(io.cfg_addr, 11, 2) @[PE.scala 90:63]
    node _T_1 = eq(UInt<8>("h08e"), _T) @[PE.scala 90:48]
    node _T_2 = and(io.cfg_en, _T_1) @[PE.scala 90:30]
    cfg.io.cfg_en <= _T_2 @[PE.scala 90:17]
    node _T_3 = bits(io.cfg_addr, 1, 0) @[PE.scala 91:33]
    cfg.io.cfg_addr <= _T_3 @[PE.scala 91:19]
    cfg.io.cfg_data <= io.cfg_data @[PE.scala 92:19]
    wire cfgOut : UInt<48> @[PE.scala 96:20]
    cfgOut <= cfg.io.out[0] @[PE.scala 97:10]
    node _T_4 = bits(cfgOut, 31, 0) @[PE.scala 98:18]
    const <= _T_4 @[PE.scala 98:9]
    node _T_5 = bits(cfgOut, 35, 32) @[PE.scala 100:28]
    alu.io.config <= _T_5 @[PE.scala 100:19]
    rf.io.config is invalid @[PE.scala 107:18]
    node _T_6 = bits(cfgOut, 38, 36) @[PE.scala 113:38]
    DelayPipe.io.config <= _T_6 @[PE.scala 113:29]
    node _T_7 = bits(cfgOut, 41, 39) @[PE.scala 113:38]
    DelayPipe_1.io.config <= _T_7 @[PE.scala 113:29]
    node _T_8 = bits(cfgOut, 44, 42) @[PE.scala 121:32]
    Muxn.io.config <= _T_8 @[PE.scala 121:23]
    node _T_9 = bits(cfgOut, 47, 45) @[PE.scala 121:32]
    Muxn_1.io.config <= _T_9 @[PE.scala 121:23]
    
  module ALU_55 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<4>, flip in : UInt<32>[2], out : UInt<32>}
    
    node _T = bits(io.in[0], 31, 0) @[Operations.scala 122:31]
    node _T_1 = bits(io.in[0], 31, 0) @[Operations.scala 124:31]
    node _T_2 = bits(io.in[1], 31, 0) @[Operations.scala 124:49]
    node _T_3 = add(_T_1, _T_2) @[Operations.scala 124:41]
    node _T_4 = tail(_T_3, 1) @[Operations.scala 124:41]
    node _T_5 = bits(io.in[0], 31, 0) @[Operations.scala 126:31]
    node _T_6 = bits(io.in[1], 31, 0) @[Operations.scala 126:49]
    node _T_7 = sub(_T_5, _T_6) @[Operations.scala 126:41]
    node _T_8 = tail(_T_7, 1) @[Operations.scala 126:41]
    node _T_9 = bits(io.in[0], 31, 0) @[Operations.scala 128:31]
    node _T_10 = bits(io.in[1], 31, 0) @[Operations.scala 128:49]
    node _T_11 = mul(_T_9, _T_10) @[Operations.scala 128:41]
    node _T_12 = bits(io.in[0], 31, 0) @[Operations.scala 138:31]
    node _T_13 = bits(io.in[1], 31, 0) @[Operations.scala 138:49]
    node _T_14 = and(_T_12, _T_13) @[Operations.scala 138:41]
    node _T_15 = bits(io.in[0], 31, 0) @[Operations.scala 140:31]
    node _T_16 = bits(io.in[1], 31, 0) @[Operations.scala 140:49]
    node _T_17 = or(_T_15, _T_16) @[Operations.scala 140:41]
    node _T_18 = bits(io.in[0], 31, 0) @[Operations.scala 142:31]
    node _T_19 = bits(io.in[1], 31, 0) @[Operations.scala 142:49]
    node _T_20 = xor(_T_18, _T_19) @[Operations.scala 142:41]
    node _T_21 = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_22 = mux(_T_21, _T, UInt<1>("h00")) @[Mux.scala 80:57]
    node _T_23 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_24 = mux(_T_23, _T_4, _T_22) @[Mux.scala 80:57]
    node _T_25 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_26 = mux(_T_25, _T_8, _T_24) @[Mux.scala 80:57]
    node _T_27 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_28 = mux(_T_27, _T_11, _T_26) @[Mux.scala 80:57]
    node _T_29 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_30 = mux(_T_29, _T_14, _T_28) @[Mux.scala 80:57]
    node _T_31 = eq(UInt<3>("h05"), io.config) @[Mux.scala 80:60]
    node _T_32 = mux(_T_31, _T_17, _T_30) @[Mux.scala 80:57]
    node _T_33 = eq(UInt<3>("h06"), io.config) @[Mux.scala 80:60]
    node _T_34 = mux(_T_33, _T_20, _T_32) @[Mux.scala 80:57]
    io.out <= _T_34 @[ALU.scala 25:10]
    
  module RF_55 : 
    input clock : Clock
    input reset : Reset
    output io : {flip en : UInt<1>, flip config : UInt<0>, flip in : UInt<32>[1], out : UInt<32>[2]}
    
    wire _T : UInt<32>[1] @[RegFile.scala 24:29]
    _T[0] <= UInt<32>("h00") @[RegFile.scala 24:29]
    reg regs : UInt<32>[1], clock with : (reset => (reset, _T)) @[RegFile.scala 24:21]
    when io.en : @[RegFile.scala 34:16]
      regs[0] <= io.in[0] @[RegFile.scala 35:41]
      skip @[RegFile.scala 34:16]
    io.out[0] <= regs[0] @[RegFile.scala 37:42]
    io.out[1] <= regs[0] @[RegFile.scala 37:42]
    
  module DelayPipe_110 : 
    input clock : Clock
    input reset : Reset
    output io : {flip en : UInt<1>, flip config : UInt<3>, flip in : UInt<32>, out : UInt<32>}
    
    wire _T : UInt<32>[5] @[DelayPipe.scala 22:29]
    _T[0] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[1] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[2] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[3] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[4] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    reg regs : UInt<32>[5], clock with : (reset => (reset, _T)) @[DelayPipe.scala 22:21]
    reg wptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 23:21]
    reg rptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 24:21]
    node _T_1 = lt(wptr, UInt<3>("h04")) @[DelayPipe.scala 26:23]
    node _T_2 = and(io.en, _T_1) @[DelayPipe.scala 26:14]
    when _T_2 : @[DelayPipe.scala 26:37]
      node _T_3 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 27:17]
      node _T_4 = tail(_T_3, 1) @[DelayPipe.scala 27:17]
      wptr <= _T_4 @[DelayPipe.scala 27:10]
      skip @[DelayPipe.scala 26:37]
    else : @[DelayPipe.scala 28:14]
      wptr <= UInt<1>("h00") @[DelayPipe.scala 29:10]
      skip @[DelayPipe.scala 28:14]
    node _T_5 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 32:12]
    node _T_6 = tail(_T_5, 1) @[DelayPipe.scala 32:12]
    node _T_7 = geq(_T_6, io.config) @[DelayPipe.scala 32:17]
    when _T_7 : @[DelayPipe.scala 32:30]
      node _T_8 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 33:18]
      node _T_9 = tail(_T_8, 1) @[DelayPipe.scala 33:18]
      node _T_10 = sub(_T_9, io.config) @[DelayPipe.scala 33:24]
      node _T_11 = tail(_T_10, 1) @[DelayPipe.scala 33:24]
      rptr <= _T_11 @[DelayPipe.scala 33:10]
      skip @[DelayPipe.scala 32:30]
    else : @[DelayPipe.scala 34:14]
      node _T_12 = add(UInt<3>("h06"), wptr) @[DelayPipe.scala 35:30]
      node _T_13 = tail(_T_12, 1) @[DelayPipe.scala 35:30]
      node _T_14 = sub(_T_13, io.config) @[DelayPipe.scala 35:37]
      node _T_15 = tail(_T_14, 1) @[DelayPipe.scala 35:37]
      rptr <= _T_15 @[DelayPipe.scala 35:10]
      skip @[DelayPipe.scala 34:14]
    node _T_16 = gt(io.config, UInt<1>("h00")) @[DelayPipe.scala 39:28]
    node _T_17 = and(io.en, _T_16) @[DelayPipe.scala 39:14]
    when _T_17 : @[DelayPipe.scala 39:35]
      regs[wptr] <= io.in @[DelayPipe.scala 40:16]
      skip @[DelayPipe.scala 39:35]
    reg cnt : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 43:20]
    node _T_18 = eq(io.en, UInt<1>("h00")) @[DelayPipe.scala 44:8]
    when _T_18 : @[DelayPipe.scala 44:15]
      cnt <= UInt<1>("h00") @[DelayPipe.scala 45:9]
      skip @[DelayPipe.scala 44:15]
    else : @[DelayPipe.scala 46:30]
      node _T_19 = lt(cnt, io.config) @[DelayPipe.scala 46:18]
      when _T_19 : @[DelayPipe.scala 46:30]
        node _T_20 = add(cnt, UInt<1>("h01")) @[DelayPipe.scala 47:16]
        node _T_21 = tail(_T_20, 1) @[DelayPipe.scala 47:16]
        cnt <= _T_21 @[DelayPipe.scala 47:9]
        skip @[DelayPipe.scala 46:30]
    node _T_22 = eq(UInt<1>("h00"), io.config) @[DelayPipe.scala 50:22]
    node _T_23 = and(io.en, _T_22) @[DelayPipe.scala 50:14]
    when _T_23 : @[DelayPipe.scala 50:37]
      io.out <= io.in @[DelayPipe.scala 51:12]
      skip @[DelayPipe.scala 50:37]
    else : @[DelayPipe.scala 52:43]
      node _T_24 = eq(cnt, io.config) @[DelayPipe.scala 52:28]
      node _T_25 = and(io.en, _T_24) @[DelayPipe.scala 52:20]
      when _T_25 : @[DelayPipe.scala 52:43]
        io.out <= regs[rptr] @[DelayPipe.scala 53:12]
        skip @[DelayPipe.scala 52:43]
      else : @[DelayPipe.scala 54:14]
        io.out <= UInt<1>("h00") @[DelayPipe.scala 55:12]
        skip @[DelayPipe.scala 54:14]
    
  module DelayPipe_111 : 
    input clock : Clock
    input reset : Reset
    output io : {flip en : UInt<1>, flip config : UInt<3>, flip in : UInt<32>, out : UInt<32>}
    
    wire _T : UInt<32>[5] @[DelayPipe.scala 22:29]
    _T[0] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[1] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[2] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[3] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[4] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    reg regs : UInt<32>[5], clock with : (reset => (reset, _T)) @[DelayPipe.scala 22:21]
    reg wptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 23:21]
    reg rptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 24:21]
    node _T_1 = lt(wptr, UInt<3>("h04")) @[DelayPipe.scala 26:23]
    node _T_2 = and(io.en, _T_1) @[DelayPipe.scala 26:14]
    when _T_2 : @[DelayPipe.scala 26:37]
      node _T_3 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 27:17]
      node _T_4 = tail(_T_3, 1) @[DelayPipe.scala 27:17]
      wptr <= _T_4 @[DelayPipe.scala 27:10]
      skip @[DelayPipe.scala 26:37]
    else : @[DelayPipe.scala 28:14]
      wptr <= UInt<1>("h00") @[DelayPipe.scala 29:10]
      skip @[DelayPipe.scala 28:14]
    node _T_5 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 32:12]
    node _T_6 = tail(_T_5, 1) @[DelayPipe.scala 32:12]
    node _T_7 = geq(_T_6, io.config) @[DelayPipe.scala 32:17]
    when _T_7 : @[DelayPipe.scala 32:30]
      node _T_8 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 33:18]
      node _T_9 = tail(_T_8, 1) @[DelayPipe.scala 33:18]
      node _T_10 = sub(_T_9, io.config) @[DelayPipe.scala 33:24]
      node _T_11 = tail(_T_10, 1) @[DelayPipe.scala 33:24]
      rptr <= _T_11 @[DelayPipe.scala 33:10]
      skip @[DelayPipe.scala 32:30]
    else : @[DelayPipe.scala 34:14]
      node _T_12 = add(UInt<3>("h06"), wptr) @[DelayPipe.scala 35:30]
      node _T_13 = tail(_T_12, 1) @[DelayPipe.scala 35:30]
      node _T_14 = sub(_T_13, io.config) @[DelayPipe.scala 35:37]
      node _T_15 = tail(_T_14, 1) @[DelayPipe.scala 35:37]
      rptr <= _T_15 @[DelayPipe.scala 35:10]
      skip @[DelayPipe.scala 34:14]
    node _T_16 = gt(io.config, UInt<1>("h00")) @[DelayPipe.scala 39:28]
    node _T_17 = and(io.en, _T_16) @[DelayPipe.scala 39:14]
    when _T_17 : @[DelayPipe.scala 39:35]
      regs[wptr] <= io.in @[DelayPipe.scala 40:16]
      skip @[DelayPipe.scala 39:35]
    reg cnt : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 43:20]
    node _T_18 = eq(io.en, UInt<1>("h00")) @[DelayPipe.scala 44:8]
    when _T_18 : @[DelayPipe.scala 44:15]
      cnt <= UInt<1>("h00") @[DelayPipe.scala 45:9]
      skip @[DelayPipe.scala 44:15]
    else : @[DelayPipe.scala 46:30]
      node _T_19 = lt(cnt, io.config) @[DelayPipe.scala 46:18]
      when _T_19 : @[DelayPipe.scala 46:30]
        node _T_20 = add(cnt, UInt<1>("h01")) @[DelayPipe.scala 47:16]
        node _T_21 = tail(_T_20, 1) @[DelayPipe.scala 47:16]
        cnt <= _T_21 @[DelayPipe.scala 47:9]
        skip @[DelayPipe.scala 46:30]
    node _T_22 = eq(UInt<1>("h00"), io.config) @[DelayPipe.scala 50:22]
    node _T_23 = and(io.en, _T_22) @[DelayPipe.scala 50:14]
    when _T_23 : @[DelayPipe.scala 50:37]
      io.out <= io.in @[DelayPipe.scala 51:12]
      skip @[DelayPipe.scala 50:37]
    else : @[DelayPipe.scala 52:43]
      node _T_24 = eq(cnt, io.config) @[DelayPipe.scala 52:28]
      node _T_25 = and(io.en, _T_24) @[DelayPipe.scala 52:20]
      when _T_25 : @[DelayPipe.scala 52:43]
        io.out <= regs[rptr] @[DelayPipe.scala 53:12]
        skip @[DelayPipe.scala 52:43]
      else : @[DelayPipe.scala 54:14]
        io.out <= UInt<1>("h00") @[DelayPipe.scala 55:12]
        skip @[DelayPipe.scala 54:14]
    
  module Muxn_126 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[6], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    node _T_10 = eq(UInt<3>("h05"), io.config) @[Mux.scala 80:60]
    node _T_11 = mux(_T_10, io.in[5], _T_9) @[Mux.scala 80:57]
    io.out <= _T_11 @[Multiplexer.scala 20:10]
    
  module Muxn_127 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[6], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    node _T_10 = eq(UInt<3>("h05"), io.config) @[Mux.scala 80:60]
    node _T_11 = mux(_T_10, io.in[5], _T_9) @[Mux.scala 80:57]
    io.out <= _T_11 @[Multiplexer.scala 20:10]
    
  module ConfigMem_71 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<1>, flip cfg_data : UInt<32>, out : UInt<48>[1]}
    
    wire _T : UInt<48>[1] @[ConfigMem.scala 27:29]
    _T[0] <= UInt<48>("h00") @[ConfigMem.scala 27:29]
    reg regs : UInt<48>[1], clock with : (reset => (reset, _T)) @[ConfigMem.scala 27:21]
    node _T_1 = eq(io.cfg_addr, UInt<1>("h00")) @[ConfigMem.scala 39:38]
    node _T_2 = and(io.cfg_en, _T_1) @[ConfigMem.scala 39:22]
    when _T_2 : @[ConfigMem.scala 39:47]
      node _T_3 = bits(regs[0], 47, 32) @[ConfigMem.scala 41:33]
      node _T_4 = cat(_T_3, io.cfg_data) @[Cat.scala 29:58]
      regs[0] <= _T_4 @[ConfigMem.scala 41:19]
      skip @[ConfigMem.scala 39:47]
    node _T_5 = eq(io.cfg_addr, UInt<1>("h01")) @[ConfigMem.scala 39:38]
    node _T_6 = and(io.cfg_en, _T_5) @[ConfigMem.scala 39:22]
    when _T_6 : @[ConfigMem.scala 39:47]
      node _T_7 = bits(regs[0], 31, 0) @[ConfigMem.scala 43:46]
      node _T_8 = cat(io.cfg_data, _T_7) @[Cat.scala 29:58]
      regs[0] <= _T_8 @[ConfigMem.scala 43:19]
      skip @[ConfigMem.scala 39:47]
    io.out[0] <= regs[0] @[ConfigMem.scala 52:45]
    
  module GPE_55 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<12>, flip cfg_data : UInt<32>, flip en : UInt<1>, flip in : UInt<32>[8], out : UInt<32>[1]}
    
    inst alu of ALU_55 @[PE.scala 50:19]
    alu.clock <= clock
    alu.reset <= reset
    inst rf of RF_55 @[PE.scala 51:18]
    rf.clock <= clock
    rf.reset <= reset
    inst DelayPipe of DelayPipe_110 @[PE.scala 52:54]
    DelayPipe.clock <= clock
    DelayPipe.reset <= reset
    inst DelayPipe_1 of DelayPipe_111 @[PE.scala 52:54]
    DelayPipe_1.clock <= clock
    DelayPipe_1.reset <= reset
    wire const : UInt<32> @[PE.scala 54:19]
    inst Muxn of Muxn_126 @[PE.scala 55:49]
    Muxn.clock <= clock
    Muxn.reset <= reset
    inst Muxn_1 of Muxn_127 @[PE.scala 55:49]
    Muxn_1.clock <= clock
    Muxn_1.reset <= reset
    Muxn.io.in[0] <= io.in[0] @[PE.scala 62:12]
    Muxn.io.in[1] <= io.in[1] @[PE.scala 62:12]
    Muxn.io.in[2] <= io.in[2] @[PE.scala 62:12]
    Muxn.io.in[3] <= io.in[3] @[PE.scala 62:12]
    Muxn.io.in[4] <= const @[PE.scala 64:12]
    Muxn.io.in[5] <= rf.io.out[1] @[PE.scala 66:12]
    DelayPipe.io.en <= io.en @[PE.scala 69:23]
    DelayPipe.io.in <= Muxn.io.out @[PE.scala 70:23]
    alu.io.in[0] <= DelayPipe.io.out @[PE.scala 71:18]
    Muxn_1.io.in[0] <= io.in[4] @[PE.scala 62:12]
    Muxn_1.io.in[1] <= io.in[5] @[PE.scala 62:12]
    Muxn_1.io.in[2] <= io.in[6] @[PE.scala 62:12]
    Muxn_1.io.in[3] <= io.in[7] @[PE.scala 62:12]
    Muxn_1.io.in[4] <= const @[PE.scala 64:12]
    Muxn_1.io.in[5] <= rf.io.out[1] @[PE.scala 66:12]
    DelayPipe_1.io.en <= io.en @[PE.scala 69:23]
    DelayPipe_1.io.in <= Muxn_1.io.out @[PE.scala 70:23]
    alu.io.in[1] <= DelayPipe_1.io.out @[PE.scala 71:18]
    rf.io.en <= io.en @[PE.scala 75:12]
    rf.io.in[0] <= alu.io.out @[PE.scala 76:15]
    io.out[0] <= rf.io.out[0] @[PE.scala 77:13]
    inst cfg of ConfigMem_71 @[PE.scala 89:19]
    cfg.clock <= clock
    cfg.reset <= reset
    node _T = bits(io.cfg_addr, 11, 2) @[PE.scala 90:63]
    node _T_1 = eq(UInt<8>("h08f"), _T) @[PE.scala 90:48]
    node _T_2 = and(io.cfg_en, _T_1) @[PE.scala 90:30]
    cfg.io.cfg_en <= _T_2 @[PE.scala 90:17]
    node _T_3 = bits(io.cfg_addr, 1, 0) @[PE.scala 91:33]
    cfg.io.cfg_addr <= _T_3 @[PE.scala 91:19]
    cfg.io.cfg_data <= io.cfg_data @[PE.scala 92:19]
    wire cfgOut : UInt<48> @[PE.scala 96:20]
    cfgOut <= cfg.io.out[0] @[PE.scala 97:10]
    node _T_4 = bits(cfgOut, 31, 0) @[PE.scala 98:18]
    const <= _T_4 @[PE.scala 98:9]
    node _T_5 = bits(cfgOut, 35, 32) @[PE.scala 100:28]
    alu.io.config <= _T_5 @[PE.scala 100:19]
    rf.io.config is invalid @[PE.scala 107:18]
    node _T_6 = bits(cfgOut, 38, 36) @[PE.scala 113:38]
    DelayPipe.io.config <= _T_6 @[PE.scala 113:29]
    node _T_7 = bits(cfgOut, 41, 39) @[PE.scala 113:38]
    DelayPipe_1.io.config <= _T_7 @[PE.scala 113:29]
    node _T_8 = bits(cfgOut, 44, 42) @[PE.scala 121:32]
    Muxn.io.config <= _T_8 @[PE.scala 121:23]
    node _T_9 = bits(cfgOut, 47, 45) @[PE.scala 121:32]
    Muxn_1.io.config <= _T_9 @[PE.scala 121:23]
    
  module ALU_56 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<4>, flip in : UInt<32>[2], out : UInt<32>}
    
    node _T = bits(io.in[0], 31, 0) @[Operations.scala 122:31]
    node _T_1 = bits(io.in[0], 31, 0) @[Operations.scala 124:31]
    node _T_2 = bits(io.in[1], 31, 0) @[Operations.scala 124:49]
    node _T_3 = add(_T_1, _T_2) @[Operations.scala 124:41]
    node _T_4 = tail(_T_3, 1) @[Operations.scala 124:41]
    node _T_5 = bits(io.in[0], 31, 0) @[Operations.scala 126:31]
    node _T_6 = bits(io.in[1], 31, 0) @[Operations.scala 126:49]
    node _T_7 = sub(_T_5, _T_6) @[Operations.scala 126:41]
    node _T_8 = tail(_T_7, 1) @[Operations.scala 126:41]
    node _T_9 = bits(io.in[0], 31, 0) @[Operations.scala 128:31]
    node _T_10 = bits(io.in[1], 31, 0) @[Operations.scala 128:49]
    node _T_11 = mul(_T_9, _T_10) @[Operations.scala 128:41]
    node _T_12 = bits(io.in[0], 31, 0) @[Operations.scala 138:31]
    node _T_13 = bits(io.in[1], 31, 0) @[Operations.scala 138:49]
    node _T_14 = and(_T_12, _T_13) @[Operations.scala 138:41]
    node _T_15 = bits(io.in[0], 31, 0) @[Operations.scala 140:31]
    node _T_16 = bits(io.in[1], 31, 0) @[Operations.scala 140:49]
    node _T_17 = or(_T_15, _T_16) @[Operations.scala 140:41]
    node _T_18 = bits(io.in[0], 31, 0) @[Operations.scala 142:31]
    node _T_19 = bits(io.in[1], 31, 0) @[Operations.scala 142:49]
    node _T_20 = xor(_T_18, _T_19) @[Operations.scala 142:41]
    node _T_21 = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_22 = mux(_T_21, _T, UInt<1>("h00")) @[Mux.scala 80:57]
    node _T_23 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_24 = mux(_T_23, _T_4, _T_22) @[Mux.scala 80:57]
    node _T_25 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_26 = mux(_T_25, _T_8, _T_24) @[Mux.scala 80:57]
    node _T_27 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_28 = mux(_T_27, _T_11, _T_26) @[Mux.scala 80:57]
    node _T_29 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_30 = mux(_T_29, _T_14, _T_28) @[Mux.scala 80:57]
    node _T_31 = eq(UInt<3>("h05"), io.config) @[Mux.scala 80:60]
    node _T_32 = mux(_T_31, _T_17, _T_30) @[Mux.scala 80:57]
    node _T_33 = eq(UInt<3>("h06"), io.config) @[Mux.scala 80:60]
    node _T_34 = mux(_T_33, _T_20, _T_32) @[Mux.scala 80:57]
    io.out <= _T_34 @[ALU.scala 25:10]
    
  module RF_56 : 
    input clock : Clock
    input reset : Reset
    output io : {flip en : UInt<1>, flip config : UInt<0>, flip in : UInt<32>[1], out : UInt<32>[2]}
    
    wire _T : UInt<32>[1] @[RegFile.scala 24:29]
    _T[0] <= UInt<32>("h00") @[RegFile.scala 24:29]
    reg regs : UInt<32>[1], clock with : (reset => (reset, _T)) @[RegFile.scala 24:21]
    when io.en : @[RegFile.scala 34:16]
      regs[0] <= io.in[0] @[RegFile.scala 35:41]
      skip @[RegFile.scala 34:16]
    io.out[0] <= regs[0] @[RegFile.scala 37:42]
    io.out[1] <= regs[0] @[RegFile.scala 37:42]
    
  module DelayPipe_112 : 
    input clock : Clock
    input reset : Reset
    output io : {flip en : UInt<1>, flip config : UInt<3>, flip in : UInt<32>, out : UInt<32>}
    
    wire _T : UInt<32>[5] @[DelayPipe.scala 22:29]
    _T[0] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[1] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[2] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[3] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[4] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    reg regs : UInt<32>[5], clock with : (reset => (reset, _T)) @[DelayPipe.scala 22:21]
    reg wptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 23:21]
    reg rptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 24:21]
    node _T_1 = lt(wptr, UInt<3>("h04")) @[DelayPipe.scala 26:23]
    node _T_2 = and(io.en, _T_1) @[DelayPipe.scala 26:14]
    when _T_2 : @[DelayPipe.scala 26:37]
      node _T_3 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 27:17]
      node _T_4 = tail(_T_3, 1) @[DelayPipe.scala 27:17]
      wptr <= _T_4 @[DelayPipe.scala 27:10]
      skip @[DelayPipe.scala 26:37]
    else : @[DelayPipe.scala 28:14]
      wptr <= UInt<1>("h00") @[DelayPipe.scala 29:10]
      skip @[DelayPipe.scala 28:14]
    node _T_5 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 32:12]
    node _T_6 = tail(_T_5, 1) @[DelayPipe.scala 32:12]
    node _T_7 = geq(_T_6, io.config) @[DelayPipe.scala 32:17]
    when _T_7 : @[DelayPipe.scala 32:30]
      node _T_8 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 33:18]
      node _T_9 = tail(_T_8, 1) @[DelayPipe.scala 33:18]
      node _T_10 = sub(_T_9, io.config) @[DelayPipe.scala 33:24]
      node _T_11 = tail(_T_10, 1) @[DelayPipe.scala 33:24]
      rptr <= _T_11 @[DelayPipe.scala 33:10]
      skip @[DelayPipe.scala 32:30]
    else : @[DelayPipe.scala 34:14]
      node _T_12 = add(UInt<3>("h06"), wptr) @[DelayPipe.scala 35:30]
      node _T_13 = tail(_T_12, 1) @[DelayPipe.scala 35:30]
      node _T_14 = sub(_T_13, io.config) @[DelayPipe.scala 35:37]
      node _T_15 = tail(_T_14, 1) @[DelayPipe.scala 35:37]
      rptr <= _T_15 @[DelayPipe.scala 35:10]
      skip @[DelayPipe.scala 34:14]
    node _T_16 = gt(io.config, UInt<1>("h00")) @[DelayPipe.scala 39:28]
    node _T_17 = and(io.en, _T_16) @[DelayPipe.scala 39:14]
    when _T_17 : @[DelayPipe.scala 39:35]
      regs[wptr] <= io.in @[DelayPipe.scala 40:16]
      skip @[DelayPipe.scala 39:35]
    reg cnt : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 43:20]
    node _T_18 = eq(io.en, UInt<1>("h00")) @[DelayPipe.scala 44:8]
    when _T_18 : @[DelayPipe.scala 44:15]
      cnt <= UInt<1>("h00") @[DelayPipe.scala 45:9]
      skip @[DelayPipe.scala 44:15]
    else : @[DelayPipe.scala 46:30]
      node _T_19 = lt(cnt, io.config) @[DelayPipe.scala 46:18]
      when _T_19 : @[DelayPipe.scala 46:30]
        node _T_20 = add(cnt, UInt<1>("h01")) @[DelayPipe.scala 47:16]
        node _T_21 = tail(_T_20, 1) @[DelayPipe.scala 47:16]
        cnt <= _T_21 @[DelayPipe.scala 47:9]
        skip @[DelayPipe.scala 46:30]
    node _T_22 = eq(UInt<1>("h00"), io.config) @[DelayPipe.scala 50:22]
    node _T_23 = and(io.en, _T_22) @[DelayPipe.scala 50:14]
    when _T_23 : @[DelayPipe.scala 50:37]
      io.out <= io.in @[DelayPipe.scala 51:12]
      skip @[DelayPipe.scala 50:37]
    else : @[DelayPipe.scala 52:43]
      node _T_24 = eq(cnt, io.config) @[DelayPipe.scala 52:28]
      node _T_25 = and(io.en, _T_24) @[DelayPipe.scala 52:20]
      when _T_25 : @[DelayPipe.scala 52:43]
        io.out <= regs[rptr] @[DelayPipe.scala 53:12]
        skip @[DelayPipe.scala 52:43]
      else : @[DelayPipe.scala 54:14]
        io.out <= UInt<1>("h00") @[DelayPipe.scala 55:12]
        skip @[DelayPipe.scala 54:14]
    
  module DelayPipe_113 : 
    input clock : Clock
    input reset : Reset
    output io : {flip en : UInt<1>, flip config : UInt<3>, flip in : UInt<32>, out : UInt<32>}
    
    wire _T : UInt<32>[5] @[DelayPipe.scala 22:29]
    _T[0] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[1] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[2] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[3] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[4] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    reg regs : UInt<32>[5], clock with : (reset => (reset, _T)) @[DelayPipe.scala 22:21]
    reg wptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 23:21]
    reg rptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 24:21]
    node _T_1 = lt(wptr, UInt<3>("h04")) @[DelayPipe.scala 26:23]
    node _T_2 = and(io.en, _T_1) @[DelayPipe.scala 26:14]
    when _T_2 : @[DelayPipe.scala 26:37]
      node _T_3 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 27:17]
      node _T_4 = tail(_T_3, 1) @[DelayPipe.scala 27:17]
      wptr <= _T_4 @[DelayPipe.scala 27:10]
      skip @[DelayPipe.scala 26:37]
    else : @[DelayPipe.scala 28:14]
      wptr <= UInt<1>("h00") @[DelayPipe.scala 29:10]
      skip @[DelayPipe.scala 28:14]
    node _T_5 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 32:12]
    node _T_6 = tail(_T_5, 1) @[DelayPipe.scala 32:12]
    node _T_7 = geq(_T_6, io.config) @[DelayPipe.scala 32:17]
    when _T_7 : @[DelayPipe.scala 32:30]
      node _T_8 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 33:18]
      node _T_9 = tail(_T_8, 1) @[DelayPipe.scala 33:18]
      node _T_10 = sub(_T_9, io.config) @[DelayPipe.scala 33:24]
      node _T_11 = tail(_T_10, 1) @[DelayPipe.scala 33:24]
      rptr <= _T_11 @[DelayPipe.scala 33:10]
      skip @[DelayPipe.scala 32:30]
    else : @[DelayPipe.scala 34:14]
      node _T_12 = add(UInt<3>("h06"), wptr) @[DelayPipe.scala 35:30]
      node _T_13 = tail(_T_12, 1) @[DelayPipe.scala 35:30]
      node _T_14 = sub(_T_13, io.config) @[DelayPipe.scala 35:37]
      node _T_15 = tail(_T_14, 1) @[DelayPipe.scala 35:37]
      rptr <= _T_15 @[DelayPipe.scala 35:10]
      skip @[DelayPipe.scala 34:14]
    node _T_16 = gt(io.config, UInt<1>("h00")) @[DelayPipe.scala 39:28]
    node _T_17 = and(io.en, _T_16) @[DelayPipe.scala 39:14]
    when _T_17 : @[DelayPipe.scala 39:35]
      regs[wptr] <= io.in @[DelayPipe.scala 40:16]
      skip @[DelayPipe.scala 39:35]
    reg cnt : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 43:20]
    node _T_18 = eq(io.en, UInt<1>("h00")) @[DelayPipe.scala 44:8]
    when _T_18 : @[DelayPipe.scala 44:15]
      cnt <= UInt<1>("h00") @[DelayPipe.scala 45:9]
      skip @[DelayPipe.scala 44:15]
    else : @[DelayPipe.scala 46:30]
      node _T_19 = lt(cnt, io.config) @[DelayPipe.scala 46:18]
      when _T_19 : @[DelayPipe.scala 46:30]
        node _T_20 = add(cnt, UInt<1>("h01")) @[DelayPipe.scala 47:16]
        node _T_21 = tail(_T_20, 1) @[DelayPipe.scala 47:16]
        cnt <= _T_21 @[DelayPipe.scala 47:9]
        skip @[DelayPipe.scala 46:30]
    node _T_22 = eq(UInt<1>("h00"), io.config) @[DelayPipe.scala 50:22]
    node _T_23 = and(io.en, _T_22) @[DelayPipe.scala 50:14]
    when _T_23 : @[DelayPipe.scala 50:37]
      io.out <= io.in @[DelayPipe.scala 51:12]
      skip @[DelayPipe.scala 50:37]
    else : @[DelayPipe.scala 52:43]
      node _T_24 = eq(cnt, io.config) @[DelayPipe.scala 52:28]
      node _T_25 = and(io.en, _T_24) @[DelayPipe.scala 52:20]
      when _T_25 : @[DelayPipe.scala 52:43]
        io.out <= regs[rptr] @[DelayPipe.scala 53:12]
        skip @[DelayPipe.scala 52:43]
      else : @[DelayPipe.scala 54:14]
        io.out <= UInt<1>("h00") @[DelayPipe.scala 55:12]
        skip @[DelayPipe.scala 54:14]
    
  module Muxn_128 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[6], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    node _T_10 = eq(UInt<3>("h05"), io.config) @[Mux.scala 80:60]
    node _T_11 = mux(_T_10, io.in[5], _T_9) @[Mux.scala 80:57]
    io.out <= _T_11 @[Multiplexer.scala 20:10]
    
  module Muxn_129 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[6], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    node _T_10 = eq(UInt<3>("h05"), io.config) @[Mux.scala 80:60]
    node _T_11 = mux(_T_10, io.in[5], _T_9) @[Mux.scala 80:57]
    io.out <= _T_11 @[Multiplexer.scala 20:10]
    
  module ConfigMem_72 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<1>, flip cfg_data : UInt<32>, out : UInt<48>[1]}
    
    wire _T : UInt<48>[1] @[ConfigMem.scala 27:29]
    _T[0] <= UInt<48>("h00") @[ConfigMem.scala 27:29]
    reg regs : UInt<48>[1], clock with : (reset => (reset, _T)) @[ConfigMem.scala 27:21]
    node _T_1 = eq(io.cfg_addr, UInt<1>("h00")) @[ConfigMem.scala 39:38]
    node _T_2 = and(io.cfg_en, _T_1) @[ConfigMem.scala 39:22]
    when _T_2 : @[ConfigMem.scala 39:47]
      node _T_3 = bits(regs[0], 47, 32) @[ConfigMem.scala 41:33]
      node _T_4 = cat(_T_3, io.cfg_data) @[Cat.scala 29:58]
      regs[0] <= _T_4 @[ConfigMem.scala 41:19]
      skip @[ConfigMem.scala 39:47]
    node _T_5 = eq(io.cfg_addr, UInt<1>("h01")) @[ConfigMem.scala 39:38]
    node _T_6 = and(io.cfg_en, _T_5) @[ConfigMem.scala 39:22]
    when _T_6 : @[ConfigMem.scala 39:47]
      node _T_7 = bits(regs[0], 31, 0) @[ConfigMem.scala 43:46]
      node _T_8 = cat(io.cfg_data, _T_7) @[Cat.scala 29:58]
      regs[0] <= _T_8 @[ConfigMem.scala 43:19]
      skip @[ConfigMem.scala 39:47]
    io.out[0] <= regs[0] @[ConfigMem.scala 52:45]
    
  module GPE_56 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<12>, flip cfg_data : UInt<32>, flip en : UInt<1>, flip in : UInt<32>[8], out : UInt<32>[1]}
    
    inst alu of ALU_56 @[PE.scala 50:19]
    alu.clock <= clock
    alu.reset <= reset
    inst rf of RF_56 @[PE.scala 51:18]
    rf.clock <= clock
    rf.reset <= reset
    inst DelayPipe of DelayPipe_112 @[PE.scala 52:54]
    DelayPipe.clock <= clock
    DelayPipe.reset <= reset
    inst DelayPipe_1 of DelayPipe_113 @[PE.scala 52:54]
    DelayPipe_1.clock <= clock
    DelayPipe_1.reset <= reset
    wire const : UInt<32> @[PE.scala 54:19]
    inst Muxn of Muxn_128 @[PE.scala 55:49]
    Muxn.clock <= clock
    Muxn.reset <= reset
    inst Muxn_1 of Muxn_129 @[PE.scala 55:49]
    Muxn_1.clock <= clock
    Muxn_1.reset <= reset
    Muxn.io.in[0] <= io.in[0] @[PE.scala 62:12]
    Muxn.io.in[1] <= io.in[1] @[PE.scala 62:12]
    Muxn.io.in[2] <= io.in[2] @[PE.scala 62:12]
    Muxn.io.in[3] <= io.in[3] @[PE.scala 62:12]
    Muxn.io.in[4] <= const @[PE.scala 64:12]
    Muxn.io.in[5] <= rf.io.out[1] @[PE.scala 66:12]
    DelayPipe.io.en <= io.en @[PE.scala 69:23]
    DelayPipe.io.in <= Muxn.io.out @[PE.scala 70:23]
    alu.io.in[0] <= DelayPipe.io.out @[PE.scala 71:18]
    Muxn_1.io.in[0] <= io.in[4] @[PE.scala 62:12]
    Muxn_1.io.in[1] <= io.in[5] @[PE.scala 62:12]
    Muxn_1.io.in[2] <= io.in[6] @[PE.scala 62:12]
    Muxn_1.io.in[3] <= io.in[7] @[PE.scala 62:12]
    Muxn_1.io.in[4] <= const @[PE.scala 64:12]
    Muxn_1.io.in[5] <= rf.io.out[1] @[PE.scala 66:12]
    DelayPipe_1.io.en <= io.en @[PE.scala 69:23]
    DelayPipe_1.io.in <= Muxn_1.io.out @[PE.scala 70:23]
    alu.io.in[1] <= DelayPipe_1.io.out @[PE.scala 71:18]
    rf.io.en <= io.en @[PE.scala 75:12]
    rf.io.in[0] <= alu.io.out @[PE.scala 76:15]
    io.out[0] <= rf.io.out[0] @[PE.scala 77:13]
    inst cfg of ConfigMem_72 @[PE.scala 89:19]
    cfg.clock <= clock
    cfg.reset <= reset
    node _T = bits(io.cfg_addr, 11, 2) @[PE.scala 90:63]
    node _T_1 = eq(UInt<8>("h09a"), _T) @[PE.scala 90:48]
    node _T_2 = and(io.cfg_en, _T_1) @[PE.scala 90:30]
    cfg.io.cfg_en <= _T_2 @[PE.scala 90:17]
    node _T_3 = bits(io.cfg_addr, 1, 0) @[PE.scala 91:33]
    cfg.io.cfg_addr <= _T_3 @[PE.scala 91:19]
    cfg.io.cfg_data <= io.cfg_data @[PE.scala 92:19]
    wire cfgOut : UInt<48> @[PE.scala 96:20]
    cfgOut <= cfg.io.out[0] @[PE.scala 97:10]
    node _T_4 = bits(cfgOut, 31, 0) @[PE.scala 98:18]
    const <= _T_4 @[PE.scala 98:9]
    node _T_5 = bits(cfgOut, 35, 32) @[PE.scala 100:28]
    alu.io.config <= _T_5 @[PE.scala 100:19]
    rf.io.config is invalid @[PE.scala 107:18]
    node _T_6 = bits(cfgOut, 38, 36) @[PE.scala 113:38]
    DelayPipe.io.config <= _T_6 @[PE.scala 113:29]
    node _T_7 = bits(cfgOut, 41, 39) @[PE.scala 113:38]
    DelayPipe_1.io.config <= _T_7 @[PE.scala 113:29]
    node _T_8 = bits(cfgOut, 44, 42) @[PE.scala 121:32]
    Muxn.io.config <= _T_8 @[PE.scala 121:23]
    node _T_9 = bits(cfgOut, 47, 45) @[PE.scala 121:32]
    Muxn_1.io.config <= _T_9 @[PE.scala 121:23]
    
  module ALU_57 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<4>, flip in : UInt<32>[2], out : UInt<32>}
    
    node _T = bits(io.in[0], 31, 0) @[Operations.scala 122:31]
    node _T_1 = bits(io.in[0], 31, 0) @[Operations.scala 124:31]
    node _T_2 = bits(io.in[1], 31, 0) @[Operations.scala 124:49]
    node _T_3 = add(_T_1, _T_2) @[Operations.scala 124:41]
    node _T_4 = tail(_T_3, 1) @[Operations.scala 124:41]
    node _T_5 = bits(io.in[0], 31, 0) @[Operations.scala 126:31]
    node _T_6 = bits(io.in[1], 31, 0) @[Operations.scala 126:49]
    node _T_7 = sub(_T_5, _T_6) @[Operations.scala 126:41]
    node _T_8 = tail(_T_7, 1) @[Operations.scala 126:41]
    node _T_9 = bits(io.in[0], 31, 0) @[Operations.scala 128:31]
    node _T_10 = bits(io.in[1], 31, 0) @[Operations.scala 128:49]
    node _T_11 = mul(_T_9, _T_10) @[Operations.scala 128:41]
    node _T_12 = bits(io.in[0], 31, 0) @[Operations.scala 138:31]
    node _T_13 = bits(io.in[1], 31, 0) @[Operations.scala 138:49]
    node _T_14 = and(_T_12, _T_13) @[Operations.scala 138:41]
    node _T_15 = bits(io.in[0], 31, 0) @[Operations.scala 140:31]
    node _T_16 = bits(io.in[1], 31, 0) @[Operations.scala 140:49]
    node _T_17 = or(_T_15, _T_16) @[Operations.scala 140:41]
    node _T_18 = bits(io.in[0], 31, 0) @[Operations.scala 142:31]
    node _T_19 = bits(io.in[1], 31, 0) @[Operations.scala 142:49]
    node _T_20 = xor(_T_18, _T_19) @[Operations.scala 142:41]
    node _T_21 = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_22 = mux(_T_21, _T, UInt<1>("h00")) @[Mux.scala 80:57]
    node _T_23 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_24 = mux(_T_23, _T_4, _T_22) @[Mux.scala 80:57]
    node _T_25 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_26 = mux(_T_25, _T_8, _T_24) @[Mux.scala 80:57]
    node _T_27 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_28 = mux(_T_27, _T_11, _T_26) @[Mux.scala 80:57]
    node _T_29 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_30 = mux(_T_29, _T_14, _T_28) @[Mux.scala 80:57]
    node _T_31 = eq(UInt<3>("h05"), io.config) @[Mux.scala 80:60]
    node _T_32 = mux(_T_31, _T_17, _T_30) @[Mux.scala 80:57]
    node _T_33 = eq(UInt<3>("h06"), io.config) @[Mux.scala 80:60]
    node _T_34 = mux(_T_33, _T_20, _T_32) @[Mux.scala 80:57]
    io.out <= _T_34 @[ALU.scala 25:10]
    
  module RF_57 : 
    input clock : Clock
    input reset : Reset
    output io : {flip en : UInt<1>, flip config : UInt<0>, flip in : UInt<32>[1], out : UInt<32>[2]}
    
    wire _T : UInt<32>[1] @[RegFile.scala 24:29]
    _T[0] <= UInt<32>("h00") @[RegFile.scala 24:29]
    reg regs : UInt<32>[1], clock with : (reset => (reset, _T)) @[RegFile.scala 24:21]
    when io.en : @[RegFile.scala 34:16]
      regs[0] <= io.in[0] @[RegFile.scala 35:41]
      skip @[RegFile.scala 34:16]
    io.out[0] <= regs[0] @[RegFile.scala 37:42]
    io.out[1] <= regs[0] @[RegFile.scala 37:42]
    
  module DelayPipe_114 : 
    input clock : Clock
    input reset : Reset
    output io : {flip en : UInt<1>, flip config : UInt<3>, flip in : UInt<32>, out : UInt<32>}
    
    wire _T : UInt<32>[5] @[DelayPipe.scala 22:29]
    _T[0] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[1] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[2] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[3] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[4] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    reg regs : UInt<32>[5], clock with : (reset => (reset, _T)) @[DelayPipe.scala 22:21]
    reg wptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 23:21]
    reg rptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 24:21]
    node _T_1 = lt(wptr, UInt<3>("h04")) @[DelayPipe.scala 26:23]
    node _T_2 = and(io.en, _T_1) @[DelayPipe.scala 26:14]
    when _T_2 : @[DelayPipe.scala 26:37]
      node _T_3 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 27:17]
      node _T_4 = tail(_T_3, 1) @[DelayPipe.scala 27:17]
      wptr <= _T_4 @[DelayPipe.scala 27:10]
      skip @[DelayPipe.scala 26:37]
    else : @[DelayPipe.scala 28:14]
      wptr <= UInt<1>("h00") @[DelayPipe.scala 29:10]
      skip @[DelayPipe.scala 28:14]
    node _T_5 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 32:12]
    node _T_6 = tail(_T_5, 1) @[DelayPipe.scala 32:12]
    node _T_7 = geq(_T_6, io.config) @[DelayPipe.scala 32:17]
    when _T_7 : @[DelayPipe.scala 32:30]
      node _T_8 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 33:18]
      node _T_9 = tail(_T_8, 1) @[DelayPipe.scala 33:18]
      node _T_10 = sub(_T_9, io.config) @[DelayPipe.scala 33:24]
      node _T_11 = tail(_T_10, 1) @[DelayPipe.scala 33:24]
      rptr <= _T_11 @[DelayPipe.scala 33:10]
      skip @[DelayPipe.scala 32:30]
    else : @[DelayPipe.scala 34:14]
      node _T_12 = add(UInt<3>("h06"), wptr) @[DelayPipe.scala 35:30]
      node _T_13 = tail(_T_12, 1) @[DelayPipe.scala 35:30]
      node _T_14 = sub(_T_13, io.config) @[DelayPipe.scala 35:37]
      node _T_15 = tail(_T_14, 1) @[DelayPipe.scala 35:37]
      rptr <= _T_15 @[DelayPipe.scala 35:10]
      skip @[DelayPipe.scala 34:14]
    node _T_16 = gt(io.config, UInt<1>("h00")) @[DelayPipe.scala 39:28]
    node _T_17 = and(io.en, _T_16) @[DelayPipe.scala 39:14]
    when _T_17 : @[DelayPipe.scala 39:35]
      regs[wptr] <= io.in @[DelayPipe.scala 40:16]
      skip @[DelayPipe.scala 39:35]
    reg cnt : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 43:20]
    node _T_18 = eq(io.en, UInt<1>("h00")) @[DelayPipe.scala 44:8]
    when _T_18 : @[DelayPipe.scala 44:15]
      cnt <= UInt<1>("h00") @[DelayPipe.scala 45:9]
      skip @[DelayPipe.scala 44:15]
    else : @[DelayPipe.scala 46:30]
      node _T_19 = lt(cnt, io.config) @[DelayPipe.scala 46:18]
      when _T_19 : @[DelayPipe.scala 46:30]
        node _T_20 = add(cnt, UInt<1>("h01")) @[DelayPipe.scala 47:16]
        node _T_21 = tail(_T_20, 1) @[DelayPipe.scala 47:16]
        cnt <= _T_21 @[DelayPipe.scala 47:9]
        skip @[DelayPipe.scala 46:30]
    node _T_22 = eq(UInt<1>("h00"), io.config) @[DelayPipe.scala 50:22]
    node _T_23 = and(io.en, _T_22) @[DelayPipe.scala 50:14]
    when _T_23 : @[DelayPipe.scala 50:37]
      io.out <= io.in @[DelayPipe.scala 51:12]
      skip @[DelayPipe.scala 50:37]
    else : @[DelayPipe.scala 52:43]
      node _T_24 = eq(cnt, io.config) @[DelayPipe.scala 52:28]
      node _T_25 = and(io.en, _T_24) @[DelayPipe.scala 52:20]
      when _T_25 : @[DelayPipe.scala 52:43]
        io.out <= regs[rptr] @[DelayPipe.scala 53:12]
        skip @[DelayPipe.scala 52:43]
      else : @[DelayPipe.scala 54:14]
        io.out <= UInt<1>("h00") @[DelayPipe.scala 55:12]
        skip @[DelayPipe.scala 54:14]
    
  module DelayPipe_115 : 
    input clock : Clock
    input reset : Reset
    output io : {flip en : UInt<1>, flip config : UInt<3>, flip in : UInt<32>, out : UInt<32>}
    
    wire _T : UInt<32>[5] @[DelayPipe.scala 22:29]
    _T[0] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[1] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[2] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[3] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[4] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    reg regs : UInt<32>[5], clock with : (reset => (reset, _T)) @[DelayPipe.scala 22:21]
    reg wptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 23:21]
    reg rptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 24:21]
    node _T_1 = lt(wptr, UInt<3>("h04")) @[DelayPipe.scala 26:23]
    node _T_2 = and(io.en, _T_1) @[DelayPipe.scala 26:14]
    when _T_2 : @[DelayPipe.scala 26:37]
      node _T_3 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 27:17]
      node _T_4 = tail(_T_3, 1) @[DelayPipe.scala 27:17]
      wptr <= _T_4 @[DelayPipe.scala 27:10]
      skip @[DelayPipe.scala 26:37]
    else : @[DelayPipe.scala 28:14]
      wptr <= UInt<1>("h00") @[DelayPipe.scala 29:10]
      skip @[DelayPipe.scala 28:14]
    node _T_5 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 32:12]
    node _T_6 = tail(_T_5, 1) @[DelayPipe.scala 32:12]
    node _T_7 = geq(_T_6, io.config) @[DelayPipe.scala 32:17]
    when _T_7 : @[DelayPipe.scala 32:30]
      node _T_8 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 33:18]
      node _T_9 = tail(_T_8, 1) @[DelayPipe.scala 33:18]
      node _T_10 = sub(_T_9, io.config) @[DelayPipe.scala 33:24]
      node _T_11 = tail(_T_10, 1) @[DelayPipe.scala 33:24]
      rptr <= _T_11 @[DelayPipe.scala 33:10]
      skip @[DelayPipe.scala 32:30]
    else : @[DelayPipe.scala 34:14]
      node _T_12 = add(UInt<3>("h06"), wptr) @[DelayPipe.scala 35:30]
      node _T_13 = tail(_T_12, 1) @[DelayPipe.scala 35:30]
      node _T_14 = sub(_T_13, io.config) @[DelayPipe.scala 35:37]
      node _T_15 = tail(_T_14, 1) @[DelayPipe.scala 35:37]
      rptr <= _T_15 @[DelayPipe.scala 35:10]
      skip @[DelayPipe.scala 34:14]
    node _T_16 = gt(io.config, UInt<1>("h00")) @[DelayPipe.scala 39:28]
    node _T_17 = and(io.en, _T_16) @[DelayPipe.scala 39:14]
    when _T_17 : @[DelayPipe.scala 39:35]
      regs[wptr] <= io.in @[DelayPipe.scala 40:16]
      skip @[DelayPipe.scala 39:35]
    reg cnt : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 43:20]
    node _T_18 = eq(io.en, UInt<1>("h00")) @[DelayPipe.scala 44:8]
    when _T_18 : @[DelayPipe.scala 44:15]
      cnt <= UInt<1>("h00") @[DelayPipe.scala 45:9]
      skip @[DelayPipe.scala 44:15]
    else : @[DelayPipe.scala 46:30]
      node _T_19 = lt(cnt, io.config) @[DelayPipe.scala 46:18]
      when _T_19 : @[DelayPipe.scala 46:30]
        node _T_20 = add(cnt, UInt<1>("h01")) @[DelayPipe.scala 47:16]
        node _T_21 = tail(_T_20, 1) @[DelayPipe.scala 47:16]
        cnt <= _T_21 @[DelayPipe.scala 47:9]
        skip @[DelayPipe.scala 46:30]
    node _T_22 = eq(UInt<1>("h00"), io.config) @[DelayPipe.scala 50:22]
    node _T_23 = and(io.en, _T_22) @[DelayPipe.scala 50:14]
    when _T_23 : @[DelayPipe.scala 50:37]
      io.out <= io.in @[DelayPipe.scala 51:12]
      skip @[DelayPipe.scala 50:37]
    else : @[DelayPipe.scala 52:43]
      node _T_24 = eq(cnt, io.config) @[DelayPipe.scala 52:28]
      node _T_25 = and(io.en, _T_24) @[DelayPipe.scala 52:20]
      when _T_25 : @[DelayPipe.scala 52:43]
        io.out <= regs[rptr] @[DelayPipe.scala 53:12]
        skip @[DelayPipe.scala 52:43]
      else : @[DelayPipe.scala 54:14]
        io.out <= UInt<1>("h00") @[DelayPipe.scala 55:12]
        skip @[DelayPipe.scala 54:14]
    
  module Muxn_130 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[6], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    node _T_10 = eq(UInt<3>("h05"), io.config) @[Mux.scala 80:60]
    node _T_11 = mux(_T_10, io.in[5], _T_9) @[Mux.scala 80:57]
    io.out <= _T_11 @[Multiplexer.scala 20:10]
    
  module Muxn_131 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[6], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    node _T_10 = eq(UInt<3>("h05"), io.config) @[Mux.scala 80:60]
    node _T_11 = mux(_T_10, io.in[5], _T_9) @[Mux.scala 80:57]
    io.out <= _T_11 @[Multiplexer.scala 20:10]
    
  module ConfigMem_73 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<1>, flip cfg_data : UInt<32>, out : UInt<48>[1]}
    
    wire _T : UInt<48>[1] @[ConfigMem.scala 27:29]
    _T[0] <= UInt<48>("h00") @[ConfigMem.scala 27:29]
    reg regs : UInt<48>[1], clock with : (reset => (reset, _T)) @[ConfigMem.scala 27:21]
    node _T_1 = eq(io.cfg_addr, UInt<1>("h00")) @[ConfigMem.scala 39:38]
    node _T_2 = and(io.cfg_en, _T_1) @[ConfigMem.scala 39:22]
    when _T_2 : @[ConfigMem.scala 39:47]
      node _T_3 = bits(regs[0], 47, 32) @[ConfigMem.scala 41:33]
      node _T_4 = cat(_T_3, io.cfg_data) @[Cat.scala 29:58]
      regs[0] <= _T_4 @[ConfigMem.scala 41:19]
      skip @[ConfigMem.scala 39:47]
    node _T_5 = eq(io.cfg_addr, UInt<1>("h01")) @[ConfigMem.scala 39:38]
    node _T_6 = and(io.cfg_en, _T_5) @[ConfigMem.scala 39:22]
    when _T_6 : @[ConfigMem.scala 39:47]
      node _T_7 = bits(regs[0], 31, 0) @[ConfigMem.scala 43:46]
      node _T_8 = cat(io.cfg_data, _T_7) @[Cat.scala 29:58]
      regs[0] <= _T_8 @[ConfigMem.scala 43:19]
      skip @[ConfigMem.scala 39:47]
    io.out[0] <= regs[0] @[ConfigMem.scala 52:45]
    
  module GPE_57 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<12>, flip cfg_data : UInt<32>, flip en : UInt<1>, flip in : UInt<32>[8], out : UInt<32>[1]}
    
    inst alu of ALU_57 @[PE.scala 50:19]
    alu.clock <= clock
    alu.reset <= reset
    inst rf of RF_57 @[PE.scala 51:18]
    rf.clock <= clock
    rf.reset <= reset
    inst DelayPipe of DelayPipe_114 @[PE.scala 52:54]
    DelayPipe.clock <= clock
    DelayPipe.reset <= reset
    inst DelayPipe_1 of DelayPipe_115 @[PE.scala 52:54]
    DelayPipe_1.clock <= clock
    DelayPipe_1.reset <= reset
    wire const : UInt<32> @[PE.scala 54:19]
    inst Muxn of Muxn_130 @[PE.scala 55:49]
    Muxn.clock <= clock
    Muxn.reset <= reset
    inst Muxn_1 of Muxn_131 @[PE.scala 55:49]
    Muxn_1.clock <= clock
    Muxn_1.reset <= reset
    Muxn.io.in[0] <= io.in[0] @[PE.scala 62:12]
    Muxn.io.in[1] <= io.in[1] @[PE.scala 62:12]
    Muxn.io.in[2] <= io.in[2] @[PE.scala 62:12]
    Muxn.io.in[3] <= io.in[3] @[PE.scala 62:12]
    Muxn.io.in[4] <= const @[PE.scala 64:12]
    Muxn.io.in[5] <= rf.io.out[1] @[PE.scala 66:12]
    DelayPipe.io.en <= io.en @[PE.scala 69:23]
    DelayPipe.io.in <= Muxn.io.out @[PE.scala 70:23]
    alu.io.in[0] <= DelayPipe.io.out @[PE.scala 71:18]
    Muxn_1.io.in[0] <= io.in[4] @[PE.scala 62:12]
    Muxn_1.io.in[1] <= io.in[5] @[PE.scala 62:12]
    Muxn_1.io.in[2] <= io.in[6] @[PE.scala 62:12]
    Muxn_1.io.in[3] <= io.in[7] @[PE.scala 62:12]
    Muxn_1.io.in[4] <= const @[PE.scala 64:12]
    Muxn_1.io.in[5] <= rf.io.out[1] @[PE.scala 66:12]
    DelayPipe_1.io.en <= io.en @[PE.scala 69:23]
    DelayPipe_1.io.in <= Muxn_1.io.out @[PE.scala 70:23]
    alu.io.in[1] <= DelayPipe_1.io.out @[PE.scala 71:18]
    rf.io.en <= io.en @[PE.scala 75:12]
    rf.io.in[0] <= alu.io.out @[PE.scala 76:15]
    io.out[0] <= rf.io.out[0] @[PE.scala 77:13]
    inst cfg of ConfigMem_73 @[PE.scala 89:19]
    cfg.clock <= clock
    cfg.reset <= reset
    node _T = bits(io.cfg_addr, 11, 2) @[PE.scala 90:63]
    node _T_1 = eq(UInt<8>("h09b"), _T) @[PE.scala 90:48]
    node _T_2 = and(io.cfg_en, _T_1) @[PE.scala 90:30]
    cfg.io.cfg_en <= _T_2 @[PE.scala 90:17]
    node _T_3 = bits(io.cfg_addr, 1, 0) @[PE.scala 91:33]
    cfg.io.cfg_addr <= _T_3 @[PE.scala 91:19]
    cfg.io.cfg_data <= io.cfg_data @[PE.scala 92:19]
    wire cfgOut : UInt<48> @[PE.scala 96:20]
    cfgOut <= cfg.io.out[0] @[PE.scala 97:10]
    node _T_4 = bits(cfgOut, 31, 0) @[PE.scala 98:18]
    const <= _T_4 @[PE.scala 98:9]
    node _T_5 = bits(cfgOut, 35, 32) @[PE.scala 100:28]
    alu.io.config <= _T_5 @[PE.scala 100:19]
    rf.io.config is invalid @[PE.scala 107:18]
    node _T_6 = bits(cfgOut, 38, 36) @[PE.scala 113:38]
    DelayPipe.io.config <= _T_6 @[PE.scala 113:29]
    node _T_7 = bits(cfgOut, 41, 39) @[PE.scala 113:38]
    DelayPipe_1.io.config <= _T_7 @[PE.scala 113:29]
    node _T_8 = bits(cfgOut, 44, 42) @[PE.scala 121:32]
    Muxn.io.config <= _T_8 @[PE.scala 121:23]
    node _T_9 = bits(cfgOut, 47, 45) @[PE.scala 121:32]
    Muxn_1.io.config <= _T_9 @[PE.scala 121:23]
    
  module ALU_58 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<4>, flip in : UInt<32>[2], out : UInt<32>}
    
    node _T = bits(io.in[0], 31, 0) @[Operations.scala 122:31]
    node _T_1 = bits(io.in[0], 31, 0) @[Operations.scala 124:31]
    node _T_2 = bits(io.in[1], 31, 0) @[Operations.scala 124:49]
    node _T_3 = add(_T_1, _T_2) @[Operations.scala 124:41]
    node _T_4 = tail(_T_3, 1) @[Operations.scala 124:41]
    node _T_5 = bits(io.in[0], 31, 0) @[Operations.scala 126:31]
    node _T_6 = bits(io.in[1], 31, 0) @[Operations.scala 126:49]
    node _T_7 = sub(_T_5, _T_6) @[Operations.scala 126:41]
    node _T_8 = tail(_T_7, 1) @[Operations.scala 126:41]
    node _T_9 = bits(io.in[0], 31, 0) @[Operations.scala 128:31]
    node _T_10 = bits(io.in[1], 31, 0) @[Operations.scala 128:49]
    node _T_11 = mul(_T_9, _T_10) @[Operations.scala 128:41]
    node _T_12 = bits(io.in[0], 31, 0) @[Operations.scala 138:31]
    node _T_13 = bits(io.in[1], 31, 0) @[Operations.scala 138:49]
    node _T_14 = and(_T_12, _T_13) @[Operations.scala 138:41]
    node _T_15 = bits(io.in[0], 31, 0) @[Operations.scala 140:31]
    node _T_16 = bits(io.in[1], 31, 0) @[Operations.scala 140:49]
    node _T_17 = or(_T_15, _T_16) @[Operations.scala 140:41]
    node _T_18 = bits(io.in[0], 31, 0) @[Operations.scala 142:31]
    node _T_19 = bits(io.in[1], 31, 0) @[Operations.scala 142:49]
    node _T_20 = xor(_T_18, _T_19) @[Operations.scala 142:41]
    node _T_21 = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_22 = mux(_T_21, _T, UInt<1>("h00")) @[Mux.scala 80:57]
    node _T_23 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_24 = mux(_T_23, _T_4, _T_22) @[Mux.scala 80:57]
    node _T_25 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_26 = mux(_T_25, _T_8, _T_24) @[Mux.scala 80:57]
    node _T_27 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_28 = mux(_T_27, _T_11, _T_26) @[Mux.scala 80:57]
    node _T_29 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_30 = mux(_T_29, _T_14, _T_28) @[Mux.scala 80:57]
    node _T_31 = eq(UInt<3>("h05"), io.config) @[Mux.scala 80:60]
    node _T_32 = mux(_T_31, _T_17, _T_30) @[Mux.scala 80:57]
    node _T_33 = eq(UInt<3>("h06"), io.config) @[Mux.scala 80:60]
    node _T_34 = mux(_T_33, _T_20, _T_32) @[Mux.scala 80:57]
    io.out <= _T_34 @[ALU.scala 25:10]
    
  module RF_58 : 
    input clock : Clock
    input reset : Reset
    output io : {flip en : UInt<1>, flip config : UInt<0>, flip in : UInt<32>[1], out : UInt<32>[2]}
    
    wire _T : UInt<32>[1] @[RegFile.scala 24:29]
    _T[0] <= UInt<32>("h00") @[RegFile.scala 24:29]
    reg regs : UInt<32>[1], clock with : (reset => (reset, _T)) @[RegFile.scala 24:21]
    when io.en : @[RegFile.scala 34:16]
      regs[0] <= io.in[0] @[RegFile.scala 35:41]
      skip @[RegFile.scala 34:16]
    io.out[0] <= regs[0] @[RegFile.scala 37:42]
    io.out[1] <= regs[0] @[RegFile.scala 37:42]
    
  module DelayPipe_116 : 
    input clock : Clock
    input reset : Reset
    output io : {flip en : UInt<1>, flip config : UInt<3>, flip in : UInt<32>, out : UInt<32>}
    
    wire _T : UInt<32>[5] @[DelayPipe.scala 22:29]
    _T[0] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[1] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[2] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[3] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[4] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    reg regs : UInt<32>[5], clock with : (reset => (reset, _T)) @[DelayPipe.scala 22:21]
    reg wptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 23:21]
    reg rptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 24:21]
    node _T_1 = lt(wptr, UInt<3>("h04")) @[DelayPipe.scala 26:23]
    node _T_2 = and(io.en, _T_1) @[DelayPipe.scala 26:14]
    when _T_2 : @[DelayPipe.scala 26:37]
      node _T_3 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 27:17]
      node _T_4 = tail(_T_3, 1) @[DelayPipe.scala 27:17]
      wptr <= _T_4 @[DelayPipe.scala 27:10]
      skip @[DelayPipe.scala 26:37]
    else : @[DelayPipe.scala 28:14]
      wptr <= UInt<1>("h00") @[DelayPipe.scala 29:10]
      skip @[DelayPipe.scala 28:14]
    node _T_5 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 32:12]
    node _T_6 = tail(_T_5, 1) @[DelayPipe.scala 32:12]
    node _T_7 = geq(_T_6, io.config) @[DelayPipe.scala 32:17]
    when _T_7 : @[DelayPipe.scala 32:30]
      node _T_8 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 33:18]
      node _T_9 = tail(_T_8, 1) @[DelayPipe.scala 33:18]
      node _T_10 = sub(_T_9, io.config) @[DelayPipe.scala 33:24]
      node _T_11 = tail(_T_10, 1) @[DelayPipe.scala 33:24]
      rptr <= _T_11 @[DelayPipe.scala 33:10]
      skip @[DelayPipe.scala 32:30]
    else : @[DelayPipe.scala 34:14]
      node _T_12 = add(UInt<3>("h06"), wptr) @[DelayPipe.scala 35:30]
      node _T_13 = tail(_T_12, 1) @[DelayPipe.scala 35:30]
      node _T_14 = sub(_T_13, io.config) @[DelayPipe.scala 35:37]
      node _T_15 = tail(_T_14, 1) @[DelayPipe.scala 35:37]
      rptr <= _T_15 @[DelayPipe.scala 35:10]
      skip @[DelayPipe.scala 34:14]
    node _T_16 = gt(io.config, UInt<1>("h00")) @[DelayPipe.scala 39:28]
    node _T_17 = and(io.en, _T_16) @[DelayPipe.scala 39:14]
    when _T_17 : @[DelayPipe.scala 39:35]
      regs[wptr] <= io.in @[DelayPipe.scala 40:16]
      skip @[DelayPipe.scala 39:35]
    reg cnt : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 43:20]
    node _T_18 = eq(io.en, UInt<1>("h00")) @[DelayPipe.scala 44:8]
    when _T_18 : @[DelayPipe.scala 44:15]
      cnt <= UInt<1>("h00") @[DelayPipe.scala 45:9]
      skip @[DelayPipe.scala 44:15]
    else : @[DelayPipe.scala 46:30]
      node _T_19 = lt(cnt, io.config) @[DelayPipe.scala 46:18]
      when _T_19 : @[DelayPipe.scala 46:30]
        node _T_20 = add(cnt, UInt<1>("h01")) @[DelayPipe.scala 47:16]
        node _T_21 = tail(_T_20, 1) @[DelayPipe.scala 47:16]
        cnt <= _T_21 @[DelayPipe.scala 47:9]
        skip @[DelayPipe.scala 46:30]
    node _T_22 = eq(UInt<1>("h00"), io.config) @[DelayPipe.scala 50:22]
    node _T_23 = and(io.en, _T_22) @[DelayPipe.scala 50:14]
    when _T_23 : @[DelayPipe.scala 50:37]
      io.out <= io.in @[DelayPipe.scala 51:12]
      skip @[DelayPipe.scala 50:37]
    else : @[DelayPipe.scala 52:43]
      node _T_24 = eq(cnt, io.config) @[DelayPipe.scala 52:28]
      node _T_25 = and(io.en, _T_24) @[DelayPipe.scala 52:20]
      when _T_25 : @[DelayPipe.scala 52:43]
        io.out <= regs[rptr] @[DelayPipe.scala 53:12]
        skip @[DelayPipe.scala 52:43]
      else : @[DelayPipe.scala 54:14]
        io.out <= UInt<1>("h00") @[DelayPipe.scala 55:12]
        skip @[DelayPipe.scala 54:14]
    
  module DelayPipe_117 : 
    input clock : Clock
    input reset : Reset
    output io : {flip en : UInt<1>, flip config : UInt<3>, flip in : UInt<32>, out : UInt<32>}
    
    wire _T : UInt<32>[5] @[DelayPipe.scala 22:29]
    _T[0] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[1] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[2] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[3] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[4] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    reg regs : UInt<32>[5], clock with : (reset => (reset, _T)) @[DelayPipe.scala 22:21]
    reg wptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 23:21]
    reg rptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 24:21]
    node _T_1 = lt(wptr, UInt<3>("h04")) @[DelayPipe.scala 26:23]
    node _T_2 = and(io.en, _T_1) @[DelayPipe.scala 26:14]
    when _T_2 : @[DelayPipe.scala 26:37]
      node _T_3 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 27:17]
      node _T_4 = tail(_T_3, 1) @[DelayPipe.scala 27:17]
      wptr <= _T_4 @[DelayPipe.scala 27:10]
      skip @[DelayPipe.scala 26:37]
    else : @[DelayPipe.scala 28:14]
      wptr <= UInt<1>("h00") @[DelayPipe.scala 29:10]
      skip @[DelayPipe.scala 28:14]
    node _T_5 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 32:12]
    node _T_6 = tail(_T_5, 1) @[DelayPipe.scala 32:12]
    node _T_7 = geq(_T_6, io.config) @[DelayPipe.scala 32:17]
    when _T_7 : @[DelayPipe.scala 32:30]
      node _T_8 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 33:18]
      node _T_9 = tail(_T_8, 1) @[DelayPipe.scala 33:18]
      node _T_10 = sub(_T_9, io.config) @[DelayPipe.scala 33:24]
      node _T_11 = tail(_T_10, 1) @[DelayPipe.scala 33:24]
      rptr <= _T_11 @[DelayPipe.scala 33:10]
      skip @[DelayPipe.scala 32:30]
    else : @[DelayPipe.scala 34:14]
      node _T_12 = add(UInt<3>("h06"), wptr) @[DelayPipe.scala 35:30]
      node _T_13 = tail(_T_12, 1) @[DelayPipe.scala 35:30]
      node _T_14 = sub(_T_13, io.config) @[DelayPipe.scala 35:37]
      node _T_15 = tail(_T_14, 1) @[DelayPipe.scala 35:37]
      rptr <= _T_15 @[DelayPipe.scala 35:10]
      skip @[DelayPipe.scala 34:14]
    node _T_16 = gt(io.config, UInt<1>("h00")) @[DelayPipe.scala 39:28]
    node _T_17 = and(io.en, _T_16) @[DelayPipe.scala 39:14]
    when _T_17 : @[DelayPipe.scala 39:35]
      regs[wptr] <= io.in @[DelayPipe.scala 40:16]
      skip @[DelayPipe.scala 39:35]
    reg cnt : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 43:20]
    node _T_18 = eq(io.en, UInt<1>("h00")) @[DelayPipe.scala 44:8]
    when _T_18 : @[DelayPipe.scala 44:15]
      cnt <= UInt<1>("h00") @[DelayPipe.scala 45:9]
      skip @[DelayPipe.scala 44:15]
    else : @[DelayPipe.scala 46:30]
      node _T_19 = lt(cnt, io.config) @[DelayPipe.scala 46:18]
      when _T_19 : @[DelayPipe.scala 46:30]
        node _T_20 = add(cnt, UInt<1>("h01")) @[DelayPipe.scala 47:16]
        node _T_21 = tail(_T_20, 1) @[DelayPipe.scala 47:16]
        cnt <= _T_21 @[DelayPipe.scala 47:9]
        skip @[DelayPipe.scala 46:30]
    node _T_22 = eq(UInt<1>("h00"), io.config) @[DelayPipe.scala 50:22]
    node _T_23 = and(io.en, _T_22) @[DelayPipe.scala 50:14]
    when _T_23 : @[DelayPipe.scala 50:37]
      io.out <= io.in @[DelayPipe.scala 51:12]
      skip @[DelayPipe.scala 50:37]
    else : @[DelayPipe.scala 52:43]
      node _T_24 = eq(cnt, io.config) @[DelayPipe.scala 52:28]
      node _T_25 = and(io.en, _T_24) @[DelayPipe.scala 52:20]
      when _T_25 : @[DelayPipe.scala 52:43]
        io.out <= regs[rptr] @[DelayPipe.scala 53:12]
        skip @[DelayPipe.scala 52:43]
      else : @[DelayPipe.scala 54:14]
        io.out <= UInt<1>("h00") @[DelayPipe.scala 55:12]
        skip @[DelayPipe.scala 54:14]
    
  module Muxn_132 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[6], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    node _T_10 = eq(UInt<3>("h05"), io.config) @[Mux.scala 80:60]
    node _T_11 = mux(_T_10, io.in[5], _T_9) @[Mux.scala 80:57]
    io.out <= _T_11 @[Multiplexer.scala 20:10]
    
  module Muxn_133 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[6], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    node _T_10 = eq(UInt<3>("h05"), io.config) @[Mux.scala 80:60]
    node _T_11 = mux(_T_10, io.in[5], _T_9) @[Mux.scala 80:57]
    io.out <= _T_11 @[Multiplexer.scala 20:10]
    
  module ConfigMem_74 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<1>, flip cfg_data : UInt<32>, out : UInt<48>[1]}
    
    wire _T : UInt<48>[1] @[ConfigMem.scala 27:29]
    _T[0] <= UInt<48>("h00") @[ConfigMem.scala 27:29]
    reg regs : UInt<48>[1], clock with : (reset => (reset, _T)) @[ConfigMem.scala 27:21]
    node _T_1 = eq(io.cfg_addr, UInt<1>("h00")) @[ConfigMem.scala 39:38]
    node _T_2 = and(io.cfg_en, _T_1) @[ConfigMem.scala 39:22]
    when _T_2 : @[ConfigMem.scala 39:47]
      node _T_3 = bits(regs[0], 47, 32) @[ConfigMem.scala 41:33]
      node _T_4 = cat(_T_3, io.cfg_data) @[Cat.scala 29:58]
      regs[0] <= _T_4 @[ConfigMem.scala 41:19]
      skip @[ConfigMem.scala 39:47]
    node _T_5 = eq(io.cfg_addr, UInt<1>("h01")) @[ConfigMem.scala 39:38]
    node _T_6 = and(io.cfg_en, _T_5) @[ConfigMem.scala 39:22]
    when _T_6 : @[ConfigMem.scala 39:47]
      node _T_7 = bits(regs[0], 31, 0) @[ConfigMem.scala 43:46]
      node _T_8 = cat(io.cfg_data, _T_7) @[Cat.scala 29:58]
      regs[0] <= _T_8 @[ConfigMem.scala 43:19]
      skip @[ConfigMem.scala 39:47]
    io.out[0] <= regs[0] @[ConfigMem.scala 52:45]
    
  module GPE_58 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<12>, flip cfg_data : UInt<32>, flip en : UInt<1>, flip in : UInt<32>[8], out : UInt<32>[1]}
    
    inst alu of ALU_58 @[PE.scala 50:19]
    alu.clock <= clock
    alu.reset <= reset
    inst rf of RF_58 @[PE.scala 51:18]
    rf.clock <= clock
    rf.reset <= reset
    inst DelayPipe of DelayPipe_116 @[PE.scala 52:54]
    DelayPipe.clock <= clock
    DelayPipe.reset <= reset
    inst DelayPipe_1 of DelayPipe_117 @[PE.scala 52:54]
    DelayPipe_1.clock <= clock
    DelayPipe_1.reset <= reset
    wire const : UInt<32> @[PE.scala 54:19]
    inst Muxn of Muxn_132 @[PE.scala 55:49]
    Muxn.clock <= clock
    Muxn.reset <= reset
    inst Muxn_1 of Muxn_133 @[PE.scala 55:49]
    Muxn_1.clock <= clock
    Muxn_1.reset <= reset
    Muxn.io.in[0] <= io.in[0] @[PE.scala 62:12]
    Muxn.io.in[1] <= io.in[1] @[PE.scala 62:12]
    Muxn.io.in[2] <= io.in[2] @[PE.scala 62:12]
    Muxn.io.in[3] <= io.in[3] @[PE.scala 62:12]
    Muxn.io.in[4] <= const @[PE.scala 64:12]
    Muxn.io.in[5] <= rf.io.out[1] @[PE.scala 66:12]
    DelayPipe.io.en <= io.en @[PE.scala 69:23]
    DelayPipe.io.in <= Muxn.io.out @[PE.scala 70:23]
    alu.io.in[0] <= DelayPipe.io.out @[PE.scala 71:18]
    Muxn_1.io.in[0] <= io.in[4] @[PE.scala 62:12]
    Muxn_1.io.in[1] <= io.in[5] @[PE.scala 62:12]
    Muxn_1.io.in[2] <= io.in[6] @[PE.scala 62:12]
    Muxn_1.io.in[3] <= io.in[7] @[PE.scala 62:12]
    Muxn_1.io.in[4] <= const @[PE.scala 64:12]
    Muxn_1.io.in[5] <= rf.io.out[1] @[PE.scala 66:12]
    DelayPipe_1.io.en <= io.en @[PE.scala 69:23]
    DelayPipe_1.io.in <= Muxn_1.io.out @[PE.scala 70:23]
    alu.io.in[1] <= DelayPipe_1.io.out @[PE.scala 71:18]
    rf.io.en <= io.en @[PE.scala 75:12]
    rf.io.in[0] <= alu.io.out @[PE.scala 76:15]
    io.out[0] <= rf.io.out[0] @[PE.scala 77:13]
    inst cfg of ConfigMem_74 @[PE.scala 89:19]
    cfg.clock <= clock
    cfg.reset <= reset
    node _T = bits(io.cfg_addr, 11, 2) @[PE.scala 90:63]
    node _T_1 = eq(UInt<8>("h09c"), _T) @[PE.scala 90:48]
    node _T_2 = and(io.cfg_en, _T_1) @[PE.scala 90:30]
    cfg.io.cfg_en <= _T_2 @[PE.scala 90:17]
    node _T_3 = bits(io.cfg_addr, 1, 0) @[PE.scala 91:33]
    cfg.io.cfg_addr <= _T_3 @[PE.scala 91:19]
    cfg.io.cfg_data <= io.cfg_data @[PE.scala 92:19]
    wire cfgOut : UInt<48> @[PE.scala 96:20]
    cfgOut <= cfg.io.out[0] @[PE.scala 97:10]
    node _T_4 = bits(cfgOut, 31, 0) @[PE.scala 98:18]
    const <= _T_4 @[PE.scala 98:9]
    node _T_5 = bits(cfgOut, 35, 32) @[PE.scala 100:28]
    alu.io.config <= _T_5 @[PE.scala 100:19]
    rf.io.config is invalid @[PE.scala 107:18]
    node _T_6 = bits(cfgOut, 38, 36) @[PE.scala 113:38]
    DelayPipe.io.config <= _T_6 @[PE.scala 113:29]
    node _T_7 = bits(cfgOut, 41, 39) @[PE.scala 113:38]
    DelayPipe_1.io.config <= _T_7 @[PE.scala 113:29]
    node _T_8 = bits(cfgOut, 44, 42) @[PE.scala 121:32]
    Muxn.io.config <= _T_8 @[PE.scala 121:23]
    node _T_9 = bits(cfgOut, 47, 45) @[PE.scala 121:32]
    Muxn_1.io.config <= _T_9 @[PE.scala 121:23]
    
  module ALU_59 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<4>, flip in : UInt<32>[2], out : UInt<32>}
    
    node _T = bits(io.in[0], 31, 0) @[Operations.scala 122:31]
    node _T_1 = bits(io.in[0], 31, 0) @[Operations.scala 124:31]
    node _T_2 = bits(io.in[1], 31, 0) @[Operations.scala 124:49]
    node _T_3 = add(_T_1, _T_2) @[Operations.scala 124:41]
    node _T_4 = tail(_T_3, 1) @[Operations.scala 124:41]
    node _T_5 = bits(io.in[0], 31, 0) @[Operations.scala 126:31]
    node _T_6 = bits(io.in[1], 31, 0) @[Operations.scala 126:49]
    node _T_7 = sub(_T_5, _T_6) @[Operations.scala 126:41]
    node _T_8 = tail(_T_7, 1) @[Operations.scala 126:41]
    node _T_9 = bits(io.in[0], 31, 0) @[Operations.scala 128:31]
    node _T_10 = bits(io.in[1], 31, 0) @[Operations.scala 128:49]
    node _T_11 = mul(_T_9, _T_10) @[Operations.scala 128:41]
    node _T_12 = bits(io.in[0], 31, 0) @[Operations.scala 138:31]
    node _T_13 = bits(io.in[1], 31, 0) @[Operations.scala 138:49]
    node _T_14 = and(_T_12, _T_13) @[Operations.scala 138:41]
    node _T_15 = bits(io.in[0], 31, 0) @[Operations.scala 140:31]
    node _T_16 = bits(io.in[1], 31, 0) @[Operations.scala 140:49]
    node _T_17 = or(_T_15, _T_16) @[Operations.scala 140:41]
    node _T_18 = bits(io.in[0], 31, 0) @[Operations.scala 142:31]
    node _T_19 = bits(io.in[1], 31, 0) @[Operations.scala 142:49]
    node _T_20 = xor(_T_18, _T_19) @[Operations.scala 142:41]
    node _T_21 = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_22 = mux(_T_21, _T, UInt<1>("h00")) @[Mux.scala 80:57]
    node _T_23 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_24 = mux(_T_23, _T_4, _T_22) @[Mux.scala 80:57]
    node _T_25 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_26 = mux(_T_25, _T_8, _T_24) @[Mux.scala 80:57]
    node _T_27 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_28 = mux(_T_27, _T_11, _T_26) @[Mux.scala 80:57]
    node _T_29 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_30 = mux(_T_29, _T_14, _T_28) @[Mux.scala 80:57]
    node _T_31 = eq(UInt<3>("h05"), io.config) @[Mux.scala 80:60]
    node _T_32 = mux(_T_31, _T_17, _T_30) @[Mux.scala 80:57]
    node _T_33 = eq(UInt<3>("h06"), io.config) @[Mux.scala 80:60]
    node _T_34 = mux(_T_33, _T_20, _T_32) @[Mux.scala 80:57]
    io.out <= _T_34 @[ALU.scala 25:10]
    
  module RF_59 : 
    input clock : Clock
    input reset : Reset
    output io : {flip en : UInt<1>, flip config : UInt<0>, flip in : UInt<32>[1], out : UInt<32>[2]}
    
    wire _T : UInt<32>[1] @[RegFile.scala 24:29]
    _T[0] <= UInt<32>("h00") @[RegFile.scala 24:29]
    reg regs : UInt<32>[1], clock with : (reset => (reset, _T)) @[RegFile.scala 24:21]
    when io.en : @[RegFile.scala 34:16]
      regs[0] <= io.in[0] @[RegFile.scala 35:41]
      skip @[RegFile.scala 34:16]
    io.out[0] <= regs[0] @[RegFile.scala 37:42]
    io.out[1] <= regs[0] @[RegFile.scala 37:42]
    
  module DelayPipe_118 : 
    input clock : Clock
    input reset : Reset
    output io : {flip en : UInt<1>, flip config : UInt<3>, flip in : UInt<32>, out : UInt<32>}
    
    wire _T : UInt<32>[5] @[DelayPipe.scala 22:29]
    _T[0] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[1] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[2] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[3] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[4] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    reg regs : UInt<32>[5], clock with : (reset => (reset, _T)) @[DelayPipe.scala 22:21]
    reg wptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 23:21]
    reg rptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 24:21]
    node _T_1 = lt(wptr, UInt<3>("h04")) @[DelayPipe.scala 26:23]
    node _T_2 = and(io.en, _T_1) @[DelayPipe.scala 26:14]
    when _T_2 : @[DelayPipe.scala 26:37]
      node _T_3 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 27:17]
      node _T_4 = tail(_T_3, 1) @[DelayPipe.scala 27:17]
      wptr <= _T_4 @[DelayPipe.scala 27:10]
      skip @[DelayPipe.scala 26:37]
    else : @[DelayPipe.scala 28:14]
      wptr <= UInt<1>("h00") @[DelayPipe.scala 29:10]
      skip @[DelayPipe.scala 28:14]
    node _T_5 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 32:12]
    node _T_6 = tail(_T_5, 1) @[DelayPipe.scala 32:12]
    node _T_7 = geq(_T_6, io.config) @[DelayPipe.scala 32:17]
    when _T_7 : @[DelayPipe.scala 32:30]
      node _T_8 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 33:18]
      node _T_9 = tail(_T_8, 1) @[DelayPipe.scala 33:18]
      node _T_10 = sub(_T_9, io.config) @[DelayPipe.scala 33:24]
      node _T_11 = tail(_T_10, 1) @[DelayPipe.scala 33:24]
      rptr <= _T_11 @[DelayPipe.scala 33:10]
      skip @[DelayPipe.scala 32:30]
    else : @[DelayPipe.scala 34:14]
      node _T_12 = add(UInt<3>("h06"), wptr) @[DelayPipe.scala 35:30]
      node _T_13 = tail(_T_12, 1) @[DelayPipe.scala 35:30]
      node _T_14 = sub(_T_13, io.config) @[DelayPipe.scala 35:37]
      node _T_15 = tail(_T_14, 1) @[DelayPipe.scala 35:37]
      rptr <= _T_15 @[DelayPipe.scala 35:10]
      skip @[DelayPipe.scala 34:14]
    node _T_16 = gt(io.config, UInt<1>("h00")) @[DelayPipe.scala 39:28]
    node _T_17 = and(io.en, _T_16) @[DelayPipe.scala 39:14]
    when _T_17 : @[DelayPipe.scala 39:35]
      regs[wptr] <= io.in @[DelayPipe.scala 40:16]
      skip @[DelayPipe.scala 39:35]
    reg cnt : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 43:20]
    node _T_18 = eq(io.en, UInt<1>("h00")) @[DelayPipe.scala 44:8]
    when _T_18 : @[DelayPipe.scala 44:15]
      cnt <= UInt<1>("h00") @[DelayPipe.scala 45:9]
      skip @[DelayPipe.scala 44:15]
    else : @[DelayPipe.scala 46:30]
      node _T_19 = lt(cnt, io.config) @[DelayPipe.scala 46:18]
      when _T_19 : @[DelayPipe.scala 46:30]
        node _T_20 = add(cnt, UInt<1>("h01")) @[DelayPipe.scala 47:16]
        node _T_21 = tail(_T_20, 1) @[DelayPipe.scala 47:16]
        cnt <= _T_21 @[DelayPipe.scala 47:9]
        skip @[DelayPipe.scala 46:30]
    node _T_22 = eq(UInt<1>("h00"), io.config) @[DelayPipe.scala 50:22]
    node _T_23 = and(io.en, _T_22) @[DelayPipe.scala 50:14]
    when _T_23 : @[DelayPipe.scala 50:37]
      io.out <= io.in @[DelayPipe.scala 51:12]
      skip @[DelayPipe.scala 50:37]
    else : @[DelayPipe.scala 52:43]
      node _T_24 = eq(cnt, io.config) @[DelayPipe.scala 52:28]
      node _T_25 = and(io.en, _T_24) @[DelayPipe.scala 52:20]
      when _T_25 : @[DelayPipe.scala 52:43]
        io.out <= regs[rptr] @[DelayPipe.scala 53:12]
        skip @[DelayPipe.scala 52:43]
      else : @[DelayPipe.scala 54:14]
        io.out <= UInt<1>("h00") @[DelayPipe.scala 55:12]
        skip @[DelayPipe.scala 54:14]
    
  module DelayPipe_119 : 
    input clock : Clock
    input reset : Reset
    output io : {flip en : UInt<1>, flip config : UInt<3>, flip in : UInt<32>, out : UInt<32>}
    
    wire _T : UInt<32>[5] @[DelayPipe.scala 22:29]
    _T[0] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[1] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[2] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[3] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[4] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    reg regs : UInt<32>[5], clock with : (reset => (reset, _T)) @[DelayPipe.scala 22:21]
    reg wptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 23:21]
    reg rptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 24:21]
    node _T_1 = lt(wptr, UInt<3>("h04")) @[DelayPipe.scala 26:23]
    node _T_2 = and(io.en, _T_1) @[DelayPipe.scala 26:14]
    when _T_2 : @[DelayPipe.scala 26:37]
      node _T_3 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 27:17]
      node _T_4 = tail(_T_3, 1) @[DelayPipe.scala 27:17]
      wptr <= _T_4 @[DelayPipe.scala 27:10]
      skip @[DelayPipe.scala 26:37]
    else : @[DelayPipe.scala 28:14]
      wptr <= UInt<1>("h00") @[DelayPipe.scala 29:10]
      skip @[DelayPipe.scala 28:14]
    node _T_5 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 32:12]
    node _T_6 = tail(_T_5, 1) @[DelayPipe.scala 32:12]
    node _T_7 = geq(_T_6, io.config) @[DelayPipe.scala 32:17]
    when _T_7 : @[DelayPipe.scala 32:30]
      node _T_8 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 33:18]
      node _T_9 = tail(_T_8, 1) @[DelayPipe.scala 33:18]
      node _T_10 = sub(_T_9, io.config) @[DelayPipe.scala 33:24]
      node _T_11 = tail(_T_10, 1) @[DelayPipe.scala 33:24]
      rptr <= _T_11 @[DelayPipe.scala 33:10]
      skip @[DelayPipe.scala 32:30]
    else : @[DelayPipe.scala 34:14]
      node _T_12 = add(UInt<3>("h06"), wptr) @[DelayPipe.scala 35:30]
      node _T_13 = tail(_T_12, 1) @[DelayPipe.scala 35:30]
      node _T_14 = sub(_T_13, io.config) @[DelayPipe.scala 35:37]
      node _T_15 = tail(_T_14, 1) @[DelayPipe.scala 35:37]
      rptr <= _T_15 @[DelayPipe.scala 35:10]
      skip @[DelayPipe.scala 34:14]
    node _T_16 = gt(io.config, UInt<1>("h00")) @[DelayPipe.scala 39:28]
    node _T_17 = and(io.en, _T_16) @[DelayPipe.scala 39:14]
    when _T_17 : @[DelayPipe.scala 39:35]
      regs[wptr] <= io.in @[DelayPipe.scala 40:16]
      skip @[DelayPipe.scala 39:35]
    reg cnt : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 43:20]
    node _T_18 = eq(io.en, UInt<1>("h00")) @[DelayPipe.scala 44:8]
    when _T_18 : @[DelayPipe.scala 44:15]
      cnt <= UInt<1>("h00") @[DelayPipe.scala 45:9]
      skip @[DelayPipe.scala 44:15]
    else : @[DelayPipe.scala 46:30]
      node _T_19 = lt(cnt, io.config) @[DelayPipe.scala 46:18]
      when _T_19 : @[DelayPipe.scala 46:30]
        node _T_20 = add(cnt, UInt<1>("h01")) @[DelayPipe.scala 47:16]
        node _T_21 = tail(_T_20, 1) @[DelayPipe.scala 47:16]
        cnt <= _T_21 @[DelayPipe.scala 47:9]
        skip @[DelayPipe.scala 46:30]
    node _T_22 = eq(UInt<1>("h00"), io.config) @[DelayPipe.scala 50:22]
    node _T_23 = and(io.en, _T_22) @[DelayPipe.scala 50:14]
    when _T_23 : @[DelayPipe.scala 50:37]
      io.out <= io.in @[DelayPipe.scala 51:12]
      skip @[DelayPipe.scala 50:37]
    else : @[DelayPipe.scala 52:43]
      node _T_24 = eq(cnt, io.config) @[DelayPipe.scala 52:28]
      node _T_25 = and(io.en, _T_24) @[DelayPipe.scala 52:20]
      when _T_25 : @[DelayPipe.scala 52:43]
        io.out <= regs[rptr] @[DelayPipe.scala 53:12]
        skip @[DelayPipe.scala 52:43]
      else : @[DelayPipe.scala 54:14]
        io.out <= UInt<1>("h00") @[DelayPipe.scala 55:12]
        skip @[DelayPipe.scala 54:14]
    
  module Muxn_134 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[6], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    node _T_10 = eq(UInt<3>("h05"), io.config) @[Mux.scala 80:60]
    node _T_11 = mux(_T_10, io.in[5], _T_9) @[Mux.scala 80:57]
    io.out <= _T_11 @[Multiplexer.scala 20:10]
    
  module Muxn_135 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[6], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    node _T_10 = eq(UInt<3>("h05"), io.config) @[Mux.scala 80:60]
    node _T_11 = mux(_T_10, io.in[5], _T_9) @[Mux.scala 80:57]
    io.out <= _T_11 @[Multiplexer.scala 20:10]
    
  module ConfigMem_75 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<1>, flip cfg_data : UInt<32>, out : UInt<48>[1]}
    
    wire _T : UInt<48>[1] @[ConfigMem.scala 27:29]
    _T[0] <= UInt<48>("h00") @[ConfigMem.scala 27:29]
    reg regs : UInt<48>[1], clock with : (reset => (reset, _T)) @[ConfigMem.scala 27:21]
    node _T_1 = eq(io.cfg_addr, UInt<1>("h00")) @[ConfigMem.scala 39:38]
    node _T_2 = and(io.cfg_en, _T_1) @[ConfigMem.scala 39:22]
    when _T_2 : @[ConfigMem.scala 39:47]
      node _T_3 = bits(regs[0], 47, 32) @[ConfigMem.scala 41:33]
      node _T_4 = cat(_T_3, io.cfg_data) @[Cat.scala 29:58]
      regs[0] <= _T_4 @[ConfigMem.scala 41:19]
      skip @[ConfigMem.scala 39:47]
    node _T_5 = eq(io.cfg_addr, UInt<1>("h01")) @[ConfigMem.scala 39:38]
    node _T_6 = and(io.cfg_en, _T_5) @[ConfigMem.scala 39:22]
    when _T_6 : @[ConfigMem.scala 39:47]
      node _T_7 = bits(regs[0], 31, 0) @[ConfigMem.scala 43:46]
      node _T_8 = cat(io.cfg_data, _T_7) @[Cat.scala 29:58]
      regs[0] <= _T_8 @[ConfigMem.scala 43:19]
      skip @[ConfigMem.scala 39:47]
    io.out[0] <= regs[0] @[ConfigMem.scala 52:45]
    
  module GPE_59 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<12>, flip cfg_data : UInt<32>, flip en : UInt<1>, flip in : UInt<32>[8], out : UInt<32>[1]}
    
    inst alu of ALU_59 @[PE.scala 50:19]
    alu.clock <= clock
    alu.reset <= reset
    inst rf of RF_59 @[PE.scala 51:18]
    rf.clock <= clock
    rf.reset <= reset
    inst DelayPipe of DelayPipe_118 @[PE.scala 52:54]
    DelayPipe.clock <= clock
    DelayPipe.reset <= reset
    inst DelayPipe_1 of DelayPipe_119 @[PE.scala 52:54]
    DelayPipe_1.clock <= clock
    DelayPipe_1.reset <= reset
    wire const : UInt<32> @[PE.scala 54:19]
    inst Muxn of Muxn_134 @[PE.scala 55:49]
    Muxn.clock <= clock
    Muxn.reset <= reset
    inst Muxn_1 of Muxn_135 @[PE.scala 55:49]
    Muxn_1.clock <= clock
    Muxn_1.reset <= reset
    Muxn.io.in[0] <= io.in[0] @[PE.scala 62:12]
    Muxn.io.in[1] <= io.in[1] @[PE.scala 62:12]
    Muxn.io.in[2] <= io.in[2] @[PE.scala 62:12]
    Muxn.io.in[3] <= io.in[3] @[PE.scala 62:12]
    Muxn.io.in[4] <= const @[PE.scala 64:12]
    Muxn.io.in[5] <= rf.io.out[1] @[PE.scala 66:12]
    DelayPipe.io.en <= io.en @[PE.scala 69:23]
    DelayPipe.io.in <= Muxn.io.out @[PE.scala 70:23]
    alu.io.in[0] <= DelayPipe.io.out @[PE.scala 71:18]
    Muxn_1.io.in[0] <= io.in[4] @[PE.scala 62:12]
    Muxn_1.io.in[1] <= io.in[5] @[PE.scala 62:12]
    Muxn_1.io.in[2] <= io.in[6] @[PE.scala 62:12]
    Muxn_1.io.in[3] <= io.in[7] @[PE.scala 62:12]
    Muxn_1.io.in[4] <= const @[PE.scala 64:12]
    Muxn_1.io.in[5] <= rf.io.out[1] @[PE.scala 66:12]
    DelayPipe_1.io.en <= io.en @[PE.scala 69:23]
    DelayPipe_1.io.in <= Muxn_1.io.out @[PE.scala 70:23]
    alu.io.in[1] <= DelayPipe_1.io.out @[PE.scala 71:18]
    rf.io.en <= io.en @[PE.scala 75:12]
    rf.io.in[0] <= alu.io.out @[PE.scala 76:15]
    io.out[0] <= rf.io.out[0] @[PE.scala 77:13]
    inst cfg of ConfigMem_75 @[PE.scala 89:19]
    cfg.clock <= clock
    cfg.reset <= reset
    node _T = bits(io.cfg_addr, 11, 2) @[PE.scala 90:63]
    node _T_1 = eq(UInt<8>("h09d"), _T) @[PE.scala 90:48]
    node _T_2 = and(io.cfg_en, _T_1) @[PE.scala 90:30]
    cfg.io.cfg_en <= _T_2 @[PE.scala 90:17]
    node _T_3 = bits(io.cfg_addr, 1, 0) @[PE.scala 91:33]
    cfg.io.cfg_addr <= _T_3 @[PE.scala 91:19]
    cfg.io.cfg_data <= io.cfg_data @[PE.scala 92:19]
    wire cfgOut : UInt<48> @[PE.scala 96:20]
    cfgOut <= cfg.io.out[0] @[PE.scala 97:10]
    node _T_4 = bits(cfgOut, 31, 0) @[PE.scala 98:18]
    const <= _T_4 @[PE.scala 98:9]
    node _T_5 = bits(cfgOut, 35, 32) @[PE.scala 100:28]
    alu.io.config <= _T_5 @[PE.scala 100:19]
    rf.io.config is invalid @[PE.scala 107:18]
    node _T_6 = bits(cfgOut, 38, 36) @[PE.scala 113:38]
    DelayPipe.io.config <= _T_6 @[PE.scala 113:29]
    node _T_7 = bits(cfgOut, 41, 39) @[PE.scala 113:38]
    DelayPipe_1.io.config <= _T_7 @[PE.scala 113:29]
    node _T_8 = bits(cfgOut, 44, 42) @[PE.scala 121:32]
    Muxn.io.config <= _T_8 @[PE.scala 121:23]
    node _T_9 = bits(cfgOut, 47, 45) @[PE.scala 121:32]
    Muxn_1.io.config <= _T_9 @[PE.scala 121:23]
    
  module ALU_60 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<4>, flip in : UInt<32>[2], out : UInt<32>}
    
    node _T = bits(io.in[0], 31, 0) @[Operations.scala 122:31]
    node _T_1 = bits(io.in[0], 31, 0) @[Operations.scala 124:31]
    node _T_2 = bits(io.in[1], 31, 0) @[Operations.scala 124:49]
    node _T_3 = add(_T_1, _T_2) @[Operations.scala 124:41]
    node _T_4 = tail(_T_3, 1) @[Operations.scala 124:41]
    node _T_5 = bits(io.in[0], 31, 0) @[Operations.scala 126:31]
    node _T_6 = bits(io.in[1], 31, 0) @[Operations.scala 126:49]
    node _T_7 = sub(_T_5, _T_6) @[Operations.scala 126:41]
    node _T_8 = tail(_T_7, 1) @[Operations.scala 126:41]
    node _T_9 = bits(io.in[0], 31, 0) @[Operations.scala 128:31]
    node _T_10 = bits(io.in[1], 31, 0) @[Operations.scala 128:49]
    node _T_11 = mul(_T_9, _T_10) @[Operations.scala 128:41]
    node _T_12 = bits(io.in[0], 31, 0) @[Operations.scala 138:31]
    node _T_13 = bits(io.in[1], 31, 0) @[Operations.scala 138:49]
    node _T_14 = and(_T_12, _T_13) @[Operations.scala 138:41]
    node _T_15 = bits(io.in[0], 31, 0) @[Operations.scala 140:31]
    node _T_16 = bits(io.in[1], 31, 0) @[Operations.scala 140:49]
    node _T_17 = or(_T_15, _T_16) @[Operations.scala 140:41]
    node _T_18 = bits(io.in[0], 31, 0) @[Operations.scala 142:31]
    node _T_19 = bits(io.in[1], 31, 0) @[Operations.scala 142:49]
    node _T_20 = xor(_T_18, _T_19) @[Operations.scala 142:41]
    node _T_21 = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_22 = mux(_T_21, _T, UInt<1>("h00")) @[Mux.scala 80:57]
    node _T_23 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_24 = mux(_T_23, _T_4, _T_22) @[Mux.scala 80:57]
    node _T_25 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_26 = mux(_T_25, _T_8, _T_24) @[Mux.scala 80:57]
    node _T_27 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_28 = mux(_T_27, _T_11, _T_26) @[Mux.scala 80:57]
    node _T_29 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_30 = mux(_T_29, _T_14, _T_28) @[Mux.scala 80:57]
    node _T_31 = eq(UInt<3>("h05"), io.config) @[Mux.scala 80:60]
    node _T_32 = mux(_T_31, _T_17, _T_30) @[Mux.scala 80:57]
    node _T_33 = eq(UInt<3>("h06"), io.config) @[Mux.scala 80:60]
    node _T_34 = mux(_T_33, _T_20, _T_32) @[Mux.scala 80:57]
    io.out <= _T_34 @[ALU.scala 25:10]
    
  module RF_60 : 
    input clock : Clock
    input reset : Reset
    output io : {flip en : UInt<1>, flip config : UInt<0>, flip in : UInt<32>[1], out : UInt<32>[2]}
    
    wire _T : UInt<32>[1] @[RegFile.scala 24:29]
    _T[0] <= UInt<32>("h00") @[RegFile.scala 24:29]
    reg regs : UInt<32>[1], clock with : (reset => (reset, _T)) @[RegFile.scala 24:21]
    when io.en : @[RegFile.scala 34:16]
      regs[0] <= io.in[0] @[RegFile.scala 35:41]
      skip @[RegFile.scala 34:16]
    io.out[0] <= regs[0] @[RegFile.scala 37:42]
    io.out[1] <= regs[0] @[RegFile.scala 37:42]
    
  module DelayPipe_120 : 
    input clock : Clock
    input reset : Reset
    output io : {flip en : UInt<1>, flip config : UInt<3>, flip in : UInt<32>, out : UInt<32>}
    
    wire _T : UInt<32>[5] @[DelayPipe.scala 22:29]
    _T[0] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[1] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[2] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[3] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[4] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    reg regs : UInt<32>[5], clock with : (reset => (reset, _T)) @[DelayPipe.scala 22:21]
    reg wptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 23:21]
    reg rptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 24:21]
    node _T_1 = lt(wptr, UInt<3>("h04")) @[DelayPipe.scala 26:23]
    node _T_2 = and(io.en, _T_1) @[DelayPipe.scala 26:14]
    when _T_2 : @[DelayPipe.scala 26:37]
      node _T_3 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 27:17]
      node _T_4 = tail(_T_3, 1) @[DelayPipe.scala 27:17]
      wptr <= _T_4 @[DelayPipe.scala 27:10]
      skip @[DelayPipe.scala 26:37]
    else : @[DelayPipe.scala 28:14]
      wptr <= UInt<1>("h00") @[DelayPipe.scala 29:10]
      skip @[DelayPipe.scala 28:14]
    node _T_5 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 32:12]
    node _T_6 = tail(_T_5, 1) @[DelayPipe.scala 32:12]
    node _T_7 = geq(_T_6, io.config) @[DelayPipe.scala 32:17]
    when _T_7 : @[DelayPipe.scala 32:30]
      node _T_8 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 33:18]
      node _T_9 = tail(_T_8, 1) @[DelayPipe.scala 33:18]
      node _T_10 = sub(_T_9, io.config) @[DelayPipe.scala 33:24]
      node _T_11 = tail(_T_10, 1) @[DelayPipe.scala 33:24]
      rptr <= _T_11 @[DelayPipe.scala 33:10]
      skip @[DelayPipe.scala 32:30]
    else : @[DelayPipe.scala 34:14]
      node _T_12 = add(UInt<3>("h06"), wptr) @[DelayPipe.scala 35:30]
      node _T_13 = tail(_T_12, 1) @[DelayPipe.scala 35:30]
      node _T_14 = sub(_T_13, io.config) @[DelayPipe.scala 35:37]
      node _T_15 = tail(_T_14, 1) @[DelayPipe.scala 35:37]
      rptr <= _T_15 @[DelayPipe.scala 35:10]
      skip @[DelayPipe.scala 34:14]
    node _T_16 = gt(io.config, UInt<1>("h00")) @[DelayPipe.scala 39:28]
    node _T_17 = and(io.en, _T_16) @[DelayPipe.scala 39:14]
    when _T_17 : @[DelayPipe.scala 39:35]
      regs[wptr] <= io.in @[DelayPipe.scala 40:16]
      skip @[DelayPipe.scala 39:35]
    reg cnt : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 43:20]
    node _T_18 = eq(io.en, UInt<1>("h00")) @[DelayPipe.scala 44:8]
    when _T_18 : @[DelayPipe.scala 44:15]
      cnt <= UInt<1>("h00") @[DelayPipe.scala 45:9]
      skip @[DelayPipe.scala 44:15]
    else : @[DelayPipe.scala 46:30]
      node _T_19 = lt(cnt, io.config) @[DelayPipe.scala 46:18]
      when _T_19 : @[DelayPipe.scala 46:30]
        node _T_20 = add(cnt, UInt<1>("h01")) @[DelayPipe.scala 47:16]
        node _T_21 = tail(_T_20, 1) @[DelayPipe.scala 47:16]
        cnt <= _T_21 @[DelayPipe.scala 47:9]
        skip @[DelayPipe.scala 46:30]
    node _T_22 = eq(UInt<1>("h00"), io.config) @[DelayPipe.scala 50:22]
    node _T_23 = and(io.en, _T_22) @[DelayPipe.scala 50:14]
    when _T_23 : @[DelayPipe.scala 50:37]
      io.out <= io.in @[DelayPipe.scala 51:12]
      skip @[DelayPipe.scala 50:37]
    else : @[DelayPipe.scala 52:43]
      node _T_24 = eq(cnt, io.config) @[DelayPipe.scala 52:28]
      node _T_25 = and(io.en, _T_24) @[DelayPipe.scala 52:20]
      when _T_25 : @[DelayPipe.scala 52:43]
        io.out <= regs[rptr] @[DelayPipe.scala 53:12]
        skip @[DelayPipe.scala 52:43]
      else : @[DelayPipe.scala 54:14]
        io.out <= UInt<1>("h00") @[DelayPipe.scala 55:12]
        skip @[DelayPipe.scala 54:14]
    
  module DelayPipe_121 : 
    input clock : Clock
    input reset : Reset
    output io : {flip en : UInt<1>, flip config : UInt<3>, flip in : UInt<32>, out : UInt<32>}
    
    wire _T : UInt<32>[5] @[DelayPipe.scala 22:29]
    _T[0] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[1] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[2] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[3] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[4] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    reg regs : UInt<32>[5], clock with : (reset => (reset, _T)) @[DelayPipe.scala 22:21]
    reg wptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 23:21]
    reg rptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 24:21]
    node _T_1 = lt(wptr, UInt<3>("h04")) @[DelayPipe.scala 26:23]
    node _T_2 = and(io.en, _T_1) @[DelayPipe.scala 26:14]
    when _T_2 : @[DelayPipe.scala 26:37]
      node _T_3 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 27:17]
      node _T_4 = tail(_T_3, 1) @[DelayPipe.scala 27:17]
      wptr <= _T_4 @[DelayPipe.scala 27:10]
      skip @[DelayPipe.scala 26:37]
    else : @[DelayPipe.scala 28:14]
      wptr <= UInt<1>("h00") @[DelayPipe.scala 29:10]
      skip @[DelayPipe.scala 28:14]
    node _T_5 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 32:12]
    node _T_6 = tail(_T_5, 1) @[DelayPipe.scala 32:12]
    node _T_7 = geq(_T_6, io.config) @[DelayPipe.scala 32:17]
    when _T_7 : @[DelayPipe.scala 32:30]
      node _T_8 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 33:18]
      node _T_9 = tail(_T_8, 1) @[DelayPipe.scala 33:18]
      node _T_10 = sub(_T_9, io.config) @[DelayPipe.scala 33:24]
      node _T_11 = tail(_T_10, 1) @[DelayPipe.scala 33:24]
      rptr <= _T_11 @[DelayPipe.scala 33:10]
      skip @[DelayPipe.scala 32:30]
    else : @[DelayPipe.scala 34:14]
      node _T_12 = add(UInt<3>("h06"), wptr) @[DelayPipe.scala 35:30]
      node _T_13 = tail(_T_12, 1) @[DelayPipe.scala 35:30]
      node _T_14 = sub(_T_13, io.config) @[DelayPipe.scala 35:37]
      node _T_15 = tail(_T_14, 1) @[DelayPipe.scala 35:37]
      rptr <= _T_15 @[DelayPipe.scala 35:10]
      skip @[DelayPipe.scala 34:14]
    node _T_16 = gt(io.config, UInt<1>("h00")) @[DelayPipe.scala 39:28]
    node _T_17 = and(io.en, _T_16) @[DelayPipe.scala 39:14]
    when _T_17 : @[DelayPipe.scala 39:35]
      regs[wptr] <= io.in @[DelayPipe.scala 40:16]
      skip @[DelayPipe.scala 39:35]
    reg cnt : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 43:20]
    node _T_18 = eq(io.en, UInt<1>("h00")) @[DelayPipe.scala 44:8]
    when _T_18 : @[DelayPipe.scala 44:15]
      cnt <= UInt<1>("h00") @[DelayPipe.scala 45:9]
      skip @[DelayPipe.scala 44:15]
    else : @[DelayPipe.scala 46:30]
      node _T_19 = lt(cnt, io.config) @[DelayPipe.scala 46:18]
      when _T_19 : @[DelayPipe.scala 46:30]
        node _T_20 = add(cnt, UInt<1>("h01")) @[DelayPipe.scala 47:16]
        node _T_21 = tail(_T_20, 1) @[DelayPipe.scala 47:16]
        cnt <= _T_21 @[DelayPipe.scala 47:9]
        skip @[DelayPipe.scala 46:30]
    node _T_22 = eq(UInt<1>("h00"), io.config) @[DelayPipe.scala 50:22]
    node _T_23 = and(io.en, _T_22) @[DelayPipe.scala 50:14]
    when _T_23 : @[DelayPipe.scala 50:37]
      io.out <= io.in @[DelayPipe.scala 51:12]
      skip @[DelayPipe.scala 50:37]
    else : @[DelayPipe.scala 52:43]
      node _T_24 = eq(cnt, io.config) @[DelayPipe.scala 52:28]
      node _T_25 = and(io.en, _T_24) @[DelayPipe.scala 52:20]
      when _T_25 : @[DelayPipe.scala 52:43]
        io.out <= regs[rptr] @[DelayPipe.scala 53:12]
        skip @[DelayPipe.scala 52:43]
      else : @[DelayPipe.scala 54:14]
        io.out <= UInt<1>("h00") @[DelayPipe.scala 55:12]
        skip @[DelayPipe.scala 54:14]
    
  module Muxn_136 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[6], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    node _T_10 = eq(UInt<3>("h05"), io.config) @[Mux.scala 80:60]
    node _T_11 = mux(_T_10, io.in[5], _T_9) @[Mux.scala 80:57]
    io.out <= _T_11 @[Multiplexer.scala 20:10]
    
  module Muxn_137 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[6], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    node _T_10 = eq(UInt<3>("h05"), io.config) @[Mux.scala 80:60]
    node _T_11 = mux(_T_10, io.in[5], _T_9) @[Mux.scala 80:57]
    io.out <= _T_11 @[Multiplexer.scala 20:10]
    
  module ConfigMem_76 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<1>, flip cfg_data : UInt<32>, out : UInt<48>[1]}
    
    wire _T : UInt<48>[1] @[ConfigMem.scala 27:29]
    _T[0] <= UInt<48>("h00") @[ConfigMem.scala 27:29]
    reg regs : UInt<48>[1], clock with : (reset => (reset, _T)) @[ConfigMem.scala 27:21]
    node _T_1 = eq(io.cfg_addr, UInt<1>("h00")) @[ConfigMem.scala 39:38]
    node _T_2 = and(io.cfg_en, _T_1) @[ConfigMem.scala 39:22]
    when _T_2 : @[ConfigMem.scala 39:47]
      node _T_3 = bits(regs[0], 47, 32) @[ConfigMem.scala 41:33]
      node _T_4 = cat(_T_3, io.cfg_data) @[Cat.scala 29:58]
      regs[0] <= _T_4 @[ConfigMem.scala 41:19]
      skip @[ConfigMem.scala 39:47]
    node _T_5 = eq(io.cfg_addr, UInt<1>("h01")) @[ConfigMem.scala 39:38]
    node _T_6 = and(io.cfg_en, _T_5) @[ConfigMem.scala 39:22]
    when _T_6 : @[ConfigMem.scala 39:47]
      node _T_7 = bits(regs[0], 31, 0) @[ConfigMem.scala 43:46]
      node _T_8 = cat(io.cfg_data, _T_7) @[Cat.scala 29:58]
      regs[0] <= _T_8 @[ConfigMem.scala 43:19]
      skip @[ConfigMem.scala 39:47]
    io.out[0] <= regs[0] @[ConfigMem.scala 52:45]
    
  module GPE_60 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<12>, flip cfg_data : UInt<32>, flip en : UInt<1>, flip in : UInt<32>[8], out : UInt<32>[1]}
    
    inst alu of ALU_60 @[PE.scala 50:19]
    alu.clock <= clock
    alu.reset <= reset
    inst rf of RF_60 @[PE.scala 51:18]
    rf.clock <= clock
    rf.reset <= reset
    inst DelayPipe of DelayPipe_120 @[PE.scala 52:54]
    DelayPipe.clock <= clock
    DelayPipe.reset <= reset
    inst DelayPipe_1 of DelayPipe_121 @[PE.scala 52:54]
    DelayPipe_1.clock <= clock
    DelayPipe_1.reset <= reset
    wire const : UInt<32> @[PE.scala 54:19]
    inst Muxn of Muxn_136 @[PE.scala 55:49]
    Muxn.clock <= clock
    Muxn.reset <= reset
    inst Muxn_1 of Muxn_137 @[PE.scala 55:49]
    Muxn_1.clock <= clock
    Muxn_1.reset <= reset
    Muxn.io.in[0] <= io.in[0] @[PE.scala 62:12]
    Muxn.io.in[1] <= io.in[1] @[PE.scala 62:12]
    Muxn.io.in[2] <= io.in[2] @[PE.scala 62:12]
    Muxn.io.in[3] <= io.in[3] @[PE.scala 62:12]
    Muxn.io.in[4] <= const @[PE.scala 64:12]
    Muxn.io.in[5] <= rf.io.out[1] @[PE.scala 66:12]
    DelayPipe.io.en <= io.en @[PE.scala 69:23]
    DelayPipe.io.in <= Muxn.io.out @[PE.scala 70:23]
    alu.io.in[0] <= DelayPipe.io.out @[PE.scala 71:18]
    Muxn_1.io.in[0] <= io.in[4] @[PE.scala 62:12]
    Muxn_1.io.in[1] <= io.in[5] @[PE.scala 62:12]
    Muxn_1.io.in[2] <= io.in[6] @[PE.scala 62:12]
    Muxn_1.io.in[3] <= io.in[7] @[PE.scala 62:12]
    Muxn_1.io.in[4] <= const @[PE.scala 64:12]
    Muxn_1.io.in[5] <= rf.io.out[1] @[PE.scala 66:12]
    DelayPipe_1.io.en <= io.en @[PE.scala 69:23]
    DelayPipe_1.io.in <= Muxn_1.io.out @[PE.scala 70:23]
    alu.io.in[1] <= DelayPipe_1.io.out @[PE.scala 71:18]
    rf.io.en <= io.en @[PE.scala 75:12]
    rf.io.in[0] <= alu.io.out @[PE.scala 76:15]
    io.out[0] <= rf.io.out[0] @[PE.scala 77:13]
    inst cfg of ConfigMem_76 @[PE.scala 89:19]
    cfg.clock <= clock
    cfg.reset <= reset
    node _T = bits(io.cfg_addr, 11, 2) @[PE.scala 90:63]
    node _T_1 = eq(UInt<8>("h09e"), _T) @[PE.scala 90:48]
    node _T_2 = and(io.cfg_en, _T_1) @[PE.scala 90:30]
    cfg.io.cfg_en <= _T_2 @[PE.scala 90:17]
    node _T_3 = bits(io.cfg_addr, 1, 0) @[PE.scala 91:33]
    cfg.io.cfg_addr <= _T_3 @[PE.scala 91:19]
    cfg.io.cfg_data <= io.cfg_data @[PE.scala 92:19]
    wire cfgOut : UInt<48> @[PE.scala 96:20]
    cfgOut <= cfg.io.out[0] @[PE.scala 97:10]
    node _T_4 = bits(cfgOut, 31, 0) @[PE.scala 98:18]
    const <= _T_4 @[PE.scala 98:9]
    node _T_5 = bits(cfgOut, 35, 32) @[PE.scala 100:28]
    alu.io.config <= _T_5 @[PE.scala 100:19]
    rf.io.config is invalid @[PE.scala 107:18]
    node _T_6 = bits(cfgOut, 38, 36) @[PE.scala 113:38]
    DelayPipe.io.config <= _T_6 @[PE.scala 113:29]
    node _T_7 = bits(cfgOut, 41, 39) @[PE.scala 113:38]
    DelayPipe_1.io.config <= _T_7 @[PE.scala 113:29]
    node _T_8 = bits(cfgOut, 44, 42) @[PE.scala 121:32]
    Muxn.io.config <= _T_8 @[PE.scala 121:23]
    node _T_9 = bits(cfgOut, 47, 45) @[PE.scala 121:32]
    Muxn_1.io.config <= _T_9 @[PE.scala 121:23]
    
  module ALU_61 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<4>, flip in : UInt<32>[2], out : UInt<32>}
    
    node _T = bits(io.in[0], 31, 0) @[Operations.scala 122:31]
    node _T_1 = bits(io.in[0], 31, 0) @[Operations.scala 124:31]
    node _T_2 = bits(io.in[1], 31, 0) @[Operations.scala 124:49]
    node _T_3 = add(_T_1, _T_2) @[Operations.scala 124:41]
    node _T_4 = tail(_T_3, 1) @[Operations.scala 124:41]
    node _T_5 = bits(io.in[0], 31, 0) @[Operations.scala 126:31]
    node _T_6 = bits(io.in[1], 31, 0) @[Operations.scala 126:49]
    node _T_7 = sub(_T_5, _T_6) @[Operations.scala 126:41]
    node _T_8 = tail(_T_7, 1) @[Operations.scala 126:41]
    node _T_9 = bits(io.in[0], 31, 0) @[Operations.scala 128:31]
    node _T_10 = bits(io.in[1], 31, 0) @[Operations.scala 128:49]
    node _T_11 = mul(_T_9, _T_10) @[Operations.scala 128:41]
    node _T_12 = bits(io.in[0], 31, 0) @[Operations.scala 138:31]
    node _T_13 = bits(io.in[1], 31, 0) @[Operations.scala 138:49]
    node _T_14 = and(_T_12, _T_13) @[Operations.scala 138:41]
    node _T_15 = bits(io.in[0], 31, 0) @[Operations.scala 140:31]
    node _T_16 = bits(io.in[1], 31, 0) @[Operations.scala 140:49]
    node _T_17 = or(_T_15, _T_16) @[Operations.scala 140:41]
    node _T_18 = bits(io.in[0], 31, 0) @[Operations.scala 142:31]
    node _T_19 = bits(io.in[1], 31, 0) @[Operations.scala 142:49]
    node _T_20 = xor(_T_18, _T_19) @[Operations.scala 142:41]
    node _T_21 = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_22 = mux(_T_21, _T, UInt<1>("h00")) @[Mux.scala 80:57]
    node _T_23 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_24 = mux(_T_23, _T_4, _T_22) @[Mux.scala 80:57]
    node _T_25 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_26 = mux(_T_25, _T_8, _T_24) @[Mux.scala 80:57]
    node _T_27 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_28 = mux(_T_27, _T_11, _T_26) @[Mux.scala 80:57]
    node _T_29 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_30 = mux(_T_29, _T_14, _T_28) @[Mux.scala 80:57]
    node _T_31 = eq(UInt<3>("h05"), io.config) @[Mux.scala 80:60]
    node _T_32 = mux(_T_31, _T_17, _T_30) @[Mux.scala 80:57]
    node _T_33 = eq(UInt<3>("h06"), io.config) @[Mux.scala 80:60]
    node _T_34 = mux(_T_33, _T_20, _T_32) @[Mux.scala 80:57]
    io.out <= _T_34 @[ALU.scala 25:10]
    
  module RF_61 : 
    input clock : Clock
    input reset : Reset
    output io : {flip en : UInt<1>, flip config : UInt<0>, flip in : UInt<32>[1], out : UInt<32>[2]}
    
    wire _T : UInt<32>[1] @[RegFile.scala 24:29]
    _T[0] <= UInt<32>("h00") @[RegFile.scala 24:29]
    reg regs : UInt<32>[1], clock with : (reset => (reset, _T)) @[RegFile.scala 24:21]
    when io.en : @[RegFile.scala 34:16]
      regs[0] <= io.in[0] @[RegFile.scala 35:41]
      skip @[RegFile.scala 34:16]
    io.out[0] <= regs[0] @[RegFile.scala 37:42]
    io.out[1] <= regs[0] @[RegFile.scala 37:42]
    
  module DelayPipe_122 : 
    input clock : Clock
    input reset : Reset
    output io : {flip en : UInt<1>, flip config : UInt<3>, flip in : UInt<32>, out : UInt<32>}
    
    wire _T : UInt<32>[5] @[DelayPipe.scala 22:29]
    _T[0] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[1] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[2] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[3] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[4] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    reg regs : UInt<32>[5], clock with : (reset => (reset, _T)) @[DelayPipe.scala 22:21]
    reg wptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 23:21]
    reg rptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 24:21]
    node _T_1 = lt(wptr, UInt<3>("h04")) @[DelayPipe.scala 26:23]
    node _T_2 = and(io.en, _T_1) @[DelayPipe.scala 26:14]
    when _T_2 : @[DelayPipe.scala 26:37]
      node _T_3 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 27:17]
      node _T_4 = tail(_T_3, 1) @[DelayPipe.scala 27:17]
      wptr <= _T_4 @[DelayPipe.scala 27:10]
      skip @[DelayPipe.scala 26:37]
    else : @[DelayPipe.scala 28:14]
      wptr <= UInt<1>("h00") @[DelayPipe.scala 29:10]
      skip @[DelayPipe.scala 28:14]
    node _T_5 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 32:12]
    node _T_6 = tail(_T_5, 1) @[DelayPipe.scala 32:12]
    node _T_7 = geq(_T_6, io.config) @[DelayPipe.scala 32:17]
    when _T_7 : @[DelayPipe.scala 32:30]
      node _T_8 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 33:18]
      node _T_9 = tail(_T_8, 1) @[DelayPipe.scala 33:18]
      node _T_10 = sub(_T_9, io.config) @[DelayPipe.scala 33:24]
      node _T_11 = tail(_T_10, 1) @[DelayPipe.scala 33:24]
      rptr <= _T_11 @[DelayPipe.scala 33:10]
      skip @[DelayPipe.scala 32:30]
    else : @[DelayPipe.scala 34:14]
      node _T_12 = add(UInt<3>("h06"), wptr) @[DelayPipe.scala 35:30]
      node _T_13 = tail(_T_12, 1) @[DelayPipe.scala 35:30]
      node _T_14 = sub(_T_13, io.config) @[DelayPipe.scala 35:37]
      node _T_15 = tail(_T_14, 1) @[DelayPipe.scala 35:37]
      rptr <= _T_15 @[DelayPipe.scala 35:10]
      skip @[DelayPipe.scala 34:14]
    node _T_16 = gt(io.config, UInt<1>("h00")) @[DelayPipe.scala 39:28]
    node _T_17 = and(io.en, _T_16) @[DelayPipe.scala 39:14]
    when _T_17 : @[DelayPipe.scala 39:35]
      regs[wptr] <= io.in @[DelayPipe.scala 40:16]
      skip @[DelayPipe.scala 39:35]
    reg cnt : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 43:20]
    node _T_18 = eq(io.en, UInt<1>("h00")) @[DelayPipe.scala 44:8]
    when _T_18 : @[DelayPipe.scala 44:15]
      cnt <= UInt<1>("h00") @[DelayPipe.scala 45:9]
      skip @[DelayPipe.scala 44:15]
    else : @[DelayPipe.scala 46:30]
      node _T_19 = lt(cnt, io.config) @[DelayPipe.scala 46:18]
      when _T_19 : @[DelayPipe.scala 46:30]
        node _T_20 = add(cnt, UInt<1>("h01")) @[DelayPipe.scala 47:16]
        node _T_21 = tail(_T_20, 1) @[DelayPipe.scala 47:16]
        cnt <= _T_21 @[DelayPipe.scala 47:9]
        skip @[DelayPipe.scala 46:30]
    node _T_22 = eq(UInt<1>("h00"), io.config) @[DelayPipe.scala 50:22]
    node _T_23 = and(io.en, _T_22) @[DelayPipe.scala 50:14]
    when _T_23 : @[DelayPipe.scala 50:37]
      io.out <= io.in @[DelayPipe.scala 51:12]
      skip @[DelayPipe.scala 50:37]
    else : @[DelayPipe.scala 52:43]
      node _T_24 = eq(cnt, io.config) @[DelayPipe.scala 52:28]
      node _T_25 = and(io.en, _T_24) @[DelayPipe.scala 52:20]
      when _T_25 : @[DelayPipe.scala 52:43]
        io.out <= regs[rptr] @[DelayPipe.scala 53:12]
        skip @[DelayPipe.scala 52:43]
      else : @[DelayPipe.scala 54:14]
        io.out <= UInt<1>("h00") @[DelayPipe.scala 55:12]
        skip @[DelayPipe.scala 54:14]
    
  module DelayPipe_123 : 
    input clock : Clock
    input reset : Reset
    output io : {flip en : UInt<1>, flip config : UInt<3>, flip in : UInt<32>, out : UInt<32>}
    
    wire _T : UInt<32>[5] @[DelayPipe.scala 22:29]
    _T[0] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[1] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[2] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[3] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[4] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    reg regs : UInt<32>[5], clock with : (reset => (reset, _T)) @[DelayPipe.scala 22:21]
    reg wptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 23:21]
    reg rptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 24:21]
    node _T_1 = lt(wptr, UInt<3>("h04")) @[DelayPipe.scala 26:23]
    node _T_2 = and(io.en, _T_1) @[DelayPipe.scala 26:14]
    when _T_2 : @[DelayPipe.scala 26:37]
      node _T_3 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 27:17]
      node _T_4 = tail(_T_3, 1) @[DelayPipe.scala 27:17]
      wptr <= _T_4 @[DelayPipe.scala 27:10]
      skip @[DelayPipe.scala 26:37]
    else : @[DelayPipe.scala 28:14]
      wptr <= UInt<1>("h00") @[DelayPipe.scala 29:10]
      skip @[DelayPipe.scala 28:14]
    node _T_5 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 32:12]
    node _T_6 = tail(_T_5, 1) @[DelayPipe.scala 32:12]
    node _T_7 = geq(_T_6, io.config) @[DelayPipe.scala 32:17]
    when _T_7 : @[DelayPipe.scala 32:30]
      node _T_8 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 33:18]
      node _T_9 = tail(_T_8, 1) @[DelayPipe.scala 33:18]
      node _T_10 = sub(_T_9, io.config) @[DelayPipe.scala 33:24]
      node _T_11 = tail(_T_10, 1) @[DelayPipe.scala 33:24]
      rptr <= _T_11 @[DelayPipe.scala 33:10]
      skip @[DelayPipe.scala 32:30]
    else : @[DelayPipe.scala 34:14]
      node _T_12 = add(UInt<3>("h06"), wptr) @[DelayPipe.scala 35:30]
      node _T_13 = tail(_T_12, 1) @[DelayPipe.scala 35:30]
      node _T_14 = sub(_T_13, io.config) @[DelayPipe.scala 35:37]
      node _T_15 = tail(_T_14, 1) @[DelayPipe.scala 35:37]
      rptr <= _T_15 @[DelayPipe.scala 35:10]
      skip @[DelayPipe.scala 34:14]
    node _T_16 = gt(io.config, UInt<1>("h00")) @[DelayPipe.scala 39:28]
    node _T_17 = and(io.en, _T_16) @[DelayPipe.scala 39:14]
    when _T_17 : @[DelayPipe.scala 39:35]
      regs[wptr] <= io.in @[DelayPipe.scala 40:16]
      skip @[DelayPipe.scala 39:35]
    reg cnt : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 43:20]
    node _T_18 = eq(io.en, UInt<1>("h00")) @[DelayPipe.scala 44:8]
    when _T_18 : @[DelayPipe.scala 44:15]
      cnt <= UInt<1>("h00") @[DelayPipe.scala 45:9]
      skip @[DelayPipe.scala 44:15]
    else : @[DelayPipe.scala 46:30]
      node _T_19 = lt(cnt, io.config) @[DelayPipe.scala 46:18]
      when _T_19 : @[DelayPipe.scala 46:30]
        node _T_20 = add(cnt, UInt<1>("h01")) @[DelayPipe.scala 47:16]
        node _T_21 = tail(_T_20, 1) @[DelayPipe.scala 47:16]
        cnt <= _T_21 @[DelayPipe.scala 47:9]
        skip @[DelayPipe.scala 46:30]
    node _T_22 = eq(UInt<1>("h00"), io.config) @[DelayPipe.scala 50:22]
    node _T_23 = and(io.en, _T_22) @[DelayPipe.scala 50:14]
    when _T_23 : @[DelayPipe.scala 50:37]
      io.out <= io.in @[DelayPipe.scala 51:12]
      skip @[DelayPipe.scala 50:37]
    else : @[DelayPipe.scala 52:43]
      node _T_24 = eq(cnt, io.config) @[DelayPipe.scala 52:28]
      node _T_25 = and(io.en, _T_24) @[DelayPipe.scala 52:20]
      when _T_25 : @[DelayPipe.scala 52:43]
        io.out <= regs[rptr] @[DelayPipe.scala 53:12]
        skip @[DelayPipe.scala 52:43]
      else : @[DelayPipe.scala 54:14]
        io.out <= UInt<1>("h00") @[DelayPipe.scala 55:12]
        skip @[DelayPipe.scala 54:14]
    
  module Muxn_138 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[6], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    node _T_10 = eq(UInt<3>("h05"), io.config) @[Mux.scala 80:60]
    node _T_11 = mux(_T_10, io.in[5], _T_9) @[Mux.scala 80:57]
    io.out <= _T_11 @[Multiplexer.scala 20:10]
    
  module Muxn_139 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[6], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    node _T_10 = eq(UInt<3>("h05"), io.config) @[Mux.scala 80:60]
    node _T_11 = mux(_T_10, io.in[5], _T_9) @[Mux.scala 80:57]
    io.out <= _T_11 @[Multiplexer.scala 20:10]
    
  module ConfigMem_77 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<1>, flip cfg_data : UInt<32>, out : UInt<48>[1]}
    
    wire _T : UInt<48>[1] @[ConfigMem.scala 27:29]
    _T[0] <= UInt<48>("h00") @[ConfigMem.scala 27:29]
    reg regs : UInt<48>[1], clock with : (reset => (reset, _T)) @[ConfigMem.scala 27:21]
    node _T_1 = eq(io.cfg_addr, UInt<1>("h00")) @[ConfigMem.scala 39:38]
    node _T_2 = and(io.cfg_en, _T_1) @[ConfigMem.scala 39:22]
    when _T_2 : @[ConfigMem.scala 39:47]
      node _T_3 = bits(regs[0], 47, 32) @[ConfigMem.scala 41:33]
      node _T_4 = cat(_T_3, io.cfg_data) @[Cat.scala 29:58]
      regs[0] <= _T_4 @[ConfigMem.scala 41:19]
      skip @[ConfigMem.scala 39:47]
    node _T_5 = eq(io.cfg_addr, UInt<1>("h01")) @[ConfigMem.scala 39:38]
    node _T_6 = and(io.cfg_en, _T_5) @[ConfigMem.scala 39:22]
    when _T_6 : @[ConfigMem.scala 39:47]
      node _T_7 = bits(regs[0], 31, 0) @[ConfigMem.scala 43:46]
      node _T_8 = cat(io.cfg_data, _T_7) @[Cat.scala 29:58]
      regs[0] <= _T_8 @[ConfigMem.scala 43:19]
      skip @[ConfigMem.scala 39:47]
    io.out[0] <= regs[0] @[ConfigMem.scala 52:45]
    
  module GPE_61 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<12>, flip cfg_data : UInt<32>, flip en : UInt<1>, flip in : UInt<32>[8], out : UInt<32>[1]}
    
    inst alu of ALU_61 @[PE.scala 50:19]
    alu.clock <= clock
    alu.reset <= reset
    inst rf of RF_61 @[PE.scala 51:18]
    rf.clock <= clock
    rf.reset <= reset
    inst DelayPipe of DelayPipe_122 @[PE.scala 52:54]
    DelayPipe.clock <= clock
    DelayPipe.reset <= reset
    inst DelayPipe_1 of DelayPipe_123 @[PE.scala 52:54]
    DelayPipe_1.clock <= clock
    DelayPipe_1.reset <= reset
    wire const : UInt<32> @[PE.scala 54:19]
    inst Muxn of Muxn_138 @[PE.scala 55:49]
    Muxn.clock <= clock
    Muxn.reset <= reset
    inst Muxn_1 of Muxn_139 @[PE.scala 55:49]
    Muxn_1.clock <= clock
    Muxn_1.reset <= reset
    Muxn.io.in[0] <= io.in[0] @[PE.scala 62:12]
    Muxn.io.in[1] <= io.in[1] @[PE.scala 62:12]
    Muxn.io.in[2] <= io.in[2] @[PE.scala 62:12]
    Muxn.io.in[3] <= io.in[3] @[PE.scala 62:12]
    Muxn.io.in[4] <= const @[PE.scala 64:12]
    Muxn.io.in[5] <= rf.io.out[1] @[PE.scala 66:12]
    DelayPipe.io.en <= io.en @[PE.scala 69:23]
    DelayPipe.io.in <= Muxn.io.out @[PE.scala 70:23]
    alu.io.in[0] <= DelayPipe.io.out @[PE.scala 71:18]
    Muxn_1.io.in[0] <= io.in[4] @[PE.scala 62:12]
    Muxn_1.io.in[1] <= io.in[5] @[PE.scala 62:12]
    Muxn_1.io.in[2] <= io.in[6] @[PE.scala 62:12]
    Muxn_1.io.in[3] <= io.in[7] @[PE.scala 62:12]
    Muxn_1.io.in[4] <= const @[PE.scala 64:12]
    Muxn_1.io.in[5] <= rf.io.out[1] @[PE.scala 66:12]
    DelayPipe_1.io.en <= io.en @[PE.scala 69:23]
    DelayPipe_1.io.in <= Muxn_1.io.out @[PE.scala 70:23]
    alu.io.in[1] <= DelayPipe_1.io.out @[PE.scala 71:18]
    rf.io.en <= io.en @[PE.scala 75:12]
    rf.io.in[0] <= alu.io.out @[PE.scala 76:15]
    io.out[0] <= rf.io.out[0] @[PE.scala 77:13]
    inst cfg of ConfigMem_77 @[PE.scala 89:19]
    cfg.clock <= clock
    cfg.reset <= reset
    node _T = bits(io.cfg_addr, 11, 2) @[PE.scala 90:63]
    node _T_1 = eq(UInt<8>("h09f"), _T) @[PE.scala 90:48]
    node _T_2 = and(io.cfg_en, _T_1) @[PE.scala 90:30]
    cfg.io.cfg_en <= _T_2 @[PE.scala 90:17]
    node _T_3 = bits(io.cfg_addr, 1, 0) @[PE.scala 91:33]
    cfg.io.cfg_addr <= _T_3 @[PE.scala 91:19]
    cfg.io.cfg_data <= io.cfg_data @[PE.scala 92:19]
    wire cfgOut : UInt<48> @[PE.scala 96:20]
    cfgOut <= cfg.io.out[0] @[PE.scala 97:10]
    node _T_4 = bits(cfgOut, 31, 0) @[PE.scala 98:18]
    const <= _T_4 @[PE.scala 98:9]
    node _T_5 = bits(cfgOut, 35, 32) @[PE.scala 100:28]
    alu.io.config <= _T_5 @[PE.scala 100:19]
    rf.io.config is invalid @[PE.scala 107:18]
    node _T_6 = bits(cfgOut, 38, 36) @[PE.scala 113:38]
    DelayPipe.io.config <= _T_6 @[PE.scala 113:29]
    node _T_7 = bits(cfgOut, 41, 39) @[PE.scala 113:38]
    DelayPipe_1.io.config <= _T_7 @[PE.scala 113:29]
    node _T_8 = bits(cfgOut, 44, 42) @[PE.scala 121:32]
    Muxn.io.config <= _T_8 @[PE.scala 121:23]
    node _T_9 = bits(cfgOut, 47, 45) @[PE.scala 121:32]
    Muxn_1.io.config <= _T_9 @[PE.scala 121:23]
    
  module ALU_62 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<4>, flip in : UInt<32>[2], out : UInt<32>}
    
    node _T = bits(io.in[0], 31, 0) @[Operations.scala 122:31]
    node _T_1 = bits(io.in[0], 31, 0) @[Operations.scala 124:31]
    node _T_2 = bits(io.in[1], 31, 0) @[Operations.scala 124:49]
    node _T_3 = add(_T_1, _T_2) @[Operations.scala 124:41]
    node _T_4 = tail(_T_3, 1) @[Operations.scala 124:41]
    node _T_5 = bits(io.in[0], 31, 0) @[Operations.scala 126:31]
    node _T_6 = bits(io.in[1], 31, 0) @[Operations.scala 126:49]
    node _T_7 = sub(_T_5, _T_6) @[Operations.scala 126:41]
    node _T_8 = tail(_T_7, 1) @[Operations.scala 126:41]
    node _T_9 = bits(io.in[0], 31, 0) @[Operations.scala 128:31]
    node _T_10 = bits(io.in[1], 31, 0) @[Operations.scala 128:49]
    node _T_11 = mul(_T_9, _T_10) @[Operations.scala 128:41]
    node _T_12 = bits(io.in[0], 31, 0) @[Operations.scala 138:31]
    node _T_13 = bits(io.in[1], 31, 0) @[Operations.scala 138:49]
    node _T_14 = and(_T_12, _T_13) @[Operations.scala 138:41]
    node _T_15 = bits(io.in[0], 31, 0) @[Operations.scala 140:31]
    node _T_16 = bits(io.in[1], 31, 0) @[Operations.scala 140:49]
    node _T_17 = or(_T_15, _T_16) @[Operations.scala 140:41]
    node _T_18 = bits(io.in[0], 31, 0) @[Operations.scala 142:31]
    node _T_19 = bits(io.in[1], 31, 0) @[Operations.scala 142:49]
    node _T_20 = xor(_T_18, _T_19) @[Operations.scala 142:41]
    node _T_21 = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_22 = mux(_T_21, _T, UInt<1>("h00")) @[Mux.scala 80:57]
    node _T_23 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_24 = mux(_T_23, _T_4, _T_22) @[Mux.scala 80:57]
    node _T_25 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_26 = mux(_T_25, _T_8, _T_24) @[Mux.scala 80:57]
    node _T_27 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_28 = mux(_T_27, _T_11, _T_26) @[Mux.scala 80:57]
    node _T_29 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_30 = mux(_T_29, _T_14, _T_28) @[Mux.scala 80:57]
    node _T_31 = eq(UInt<3>("h05"), io.config) @[Mux.scala 80:60]
    node _T_32 = mux(_T_31, _T_17, _T_30) @[Mux.scala 80:57]
    node _T_33 = eq(UInt<3>("h06"), io.config) @[Mux.scala 80:60]
    node _T_34 = mux(_T_33, _T_20, _T_32) @[Mux.scala 80:57]
    io.out <= _T_34 @[ALU.scala 25:10]
    
  module RF_62 : 
    input clock : Clock
    input reset : Reset
    output io : {flip en : UInt<1>, flip config : UInt<0>, flip in : UInt<32>[1], out : UInt<32>[2]}
    
    wire _T : UInt<32>[1] @[RegFile.scala 24:29]
    _T[0] <= UInt<32>("h00") @[RegFile.scala 24:29]
    reg regs : UInt<32>[1], clock with : (reset => (reset, _T)) @[RegFile.scala 24:21]
    when io.en : @[RegFile.scala 34:16]
      regs[0] <= io.in[0] @[RegFile.scala 35:41]
      skip @[RegFile.scala 34:16]
    io.out[0] <= regs[0] @[RegFile.scala 37:42]
    io.out[1] <= regs[0] @[RegFile.scala 37:42]
    
  module DelayPipe_124 : 
    input clock : Clock
    input reset : Reset
    output io : {flip en : UInt<1>, flip config : UInt<3>, flip in : UInt<32>, out : UInt<32>}
    
    wire _T : UInt<32>[5] @[DelayPipe.scala 22:29]
    _T[0] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[1] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[2] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[3] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[4] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    reg regs : UInt<32>[5], clock with : (reset => (reset, _T)) @[DelayPipe.scala 22:21]
    reg wptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 23:21]
    reg rptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 24:21]
    node _T_1 = lt(wptr, UInt<3>("h04")) @[DelayPipe.scala 26:23]
    node _T_2 = and(io.en, _T_1) @[DelayPipe.scala 26:14]
    when _T_2 : @[DelayPipe.scala 26:37]
      node _T_3 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 27:17]
      node _T_4 = tail(_T_3, 1) @[DelayPipe.scala 27:17]
      wptr <= _T_4 @[DelayPipe.scala 27:10]
      skip @[DelayPipe.scala 26:37]
    else : @[DelayPipe.scala 28:14]
      wptr <= UInt<1>("h00") @[DelayPipe.scala 29:10]
      skip @[DelayPipe.scala 28:14]
    node _T_5 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 32:12]
    node _T_6 = tail(_T_5, 1) @[DelayPipe.scala 32:12]
    node _T_7 = geq(_T_6, io.config) @[DelayPipe.scala 32:17]
    when _T_7 : @[DelayPipe.scala 32:30]
      node _T_8 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 33:18]
      node _T_9 = tail(_T_8, 1) @[DelayPipe.scala 33:18]
      node _T_10 = sub(_T_9, io.config) @[DelayPipe.scala 33:24]
      node _T_11 = tail(_T_10, 1) @[DelayPipe.scala 33:24]
      rptr <= _T_11 @[DelayPipe.scala 33:10]
      skip @[DelayPipe.scala 32:30]
    else : @[DelayPipe.scala 34:14]
      node _T_12 = add(UInt<3>("h06"), wptr) @[DelayPipe.scala 35:30]
      node _T_13 = tail(_T_12, 1) @[DelayPipe.scala 35:30]
      node _T_14 = sub(_T_13, io.config) @[DelayPipe.scala 35:37]
      node _T_15 = tail(_T_14, 1) @[DelayPipe.scala 35:37]
      rptr <= _T_15 @[DelayPipe.scala 35:10]
      skip @[DelayPipe.scala 34:14]
    node _T_16 = gt(io.config, UInt<1>("h00")) @[DelayPipe.scala 39:28]
    node _T_17 = and(io.en, _T_16) @[DelayPipe.scala 39:14]
    when _T_17 : @[DelayPipe.scala 39:35]
      regs[wptr] <= io.in @[DelayPipe.scala 40:16]
      skip @[DelayPipe.scala 39:35]
    reg cnt : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 43:20]
    node _T_18 = eq(io.en, UInt<1>("h00")) @[DelayPipe.scala 44:8]
    when _T_18 : @[DelayPipe.scala 44:15]
      cnt <= UInt<1>("h00") @[DelayPipe.scala 45:9]
      skip @[DelayPipe.scala 44:15]
    else : @[DelayPipe.scala 46:30]
      node _T_19 = lt(cnt, io.config) @[DelayPipe.scala 46:18]
      when _T_19 : @[DelayPipe.scala 46:30]
        node _T_20 = add(cnt, UInt<1>("h01")) @[DelayPipe.scala 47:16]
        node _T_21 = tail(_T_20, 1) @[DelayPipe.scala 47:16]
        cnt <= _T_21 @[DelayPipe.scala 47:9]
        skip @[DelayPipe.scala 46:30]
    node _T_22 = eq(UInt<1>("h00"), io.config) @[DelayPipe.scala 50:22]
    node _T_23 = and(io.en, _T_22) @[DelayPipe.scala 50:14]
    when _T_23 : @[DelayPipe.scala 50:37]
      io.out <= io.in @[DelayPipe.scala 51:12]
      skip @[DelayPipe.scala 50:37]
    else : @[DelayPipe.scala 52:43]
      node _T_24 = eq(cnt, io.config) @[DelayPipe.scala 52:28]
      node _T_25 = and(io.en, _T_24) @[DelayPipe.scala 52:20]
      when _T_25 : @[DelayPipe.scala 52:43]
        io.out <= regs[rptr] @[DelayPipe.scala 53:12]
        skip @[DelayPipe.scala 52:43]
      else : @[DelayPipe.scala 54:14]
        io.out <= UInt<1>("h00") @[DelayPipe.scala 55:12]
        skip @[DelayPipe.scala 54:14]
    
  module DelayPipe_125 : 
    input clock : Clock
    input reset : Reset
    output io : {flip en : UInt<1>, flip config : UInt<3>, flip in : UInt<32>, out : UInt<32>}
    
    wire _T : UInt<32>[5] @[DelayPipe.scala 22:29]
    _T[0] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[1] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[2] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[3] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[4] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    reg regs : UInt<32>[5], clock with : (reset => (reset, _T)) @[DelayPipe.scala 22:21]
    reg wptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 23:21]
    reg rptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 24:21]
    node _T_1 = lt(wptr, UInt<3>("h04")) @[DelayPipe.scala 26:23]
    node _T_2 = and(io.en, _T_1) @[DelayPipe.scala 26:14]
    when _T_2 : @[DelayPipe.scala 26:37]
      node _T_3 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 27:17]
      node _T_4 = tail(_T_3, 1) @[DelayPipe.scala 27:17]
      wptr <= _T_4 @[DelayPipe.scala 27:10]
      skip @[DelayPipe.scala 26:37]
    else : @[DelayPipe.scala 28:14]
      wptr <= UInt<1>("h00") @[DelayPipe.scala 29:10]
      skip @[DelayPipe.scala 28:14]
    node _T_5 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 32:12]
    node _T_6 = tail(_T_5, 1) @[DelayPipe.scala 32:12]
    node _T_7 = geq(_T_6, io.config) @[DelayPipe.scala 32:17]
    when _T_7 : @[DelayPipe.scala 32:30]
      node _T_8 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 33:18]
      node _T_9 = tail(_T_8, 1) @[DelayPipe.scala 33:18]
      node _T_10 = sub(_T_9, io.config) @[DelayPipe.scala 33:24]
      node _T_11 = tail(_T_10, 1) @[DelayPipe.scala 33:24]
      rptr <= _T_11 @[DelayPipe.scala 33:10]
      skip @[DelayPipe.scala 32:30]
    else : @[DelayPipe.scala 34:14]
      node _T_12 = add(UInt<3>("h06"), wptr) @[DelayPipe.scala 35:30]
      node _T_13 = tail(_T_12, 1) @[DelayPipe.scala 35:30]
      node _T_14 = sub(_T_13, io.config) @[DelayPipe.scala 35:37]
      node _T_15 = tail(_T_14, 1) @[DelayPipe.scala 35:37]
      rptr <= _T_15 @[DelayPipe.scala 35:10]
      skip @[DelayPipe.scala 34:14]
    node _T_16 = gt(io.config, UInt<1>("h00")) @[DelayPipe.scala 39:28]
    node _T_17 = and(io.en, _T_16) @[DelayPipe.scala 39:14]
    when _T_17 : @[DelayPipe.scala 39:35]
      regs[wptr] <= io.in @[DelayPipe.scala 40:16]
      skip @[DelayPipe.scala 39:35]
    reg cnt : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 43:20]
    node _T_18 = eq(io.en, UInt<1>("h00")) @[DelayPipe.scala 44:8]
    when _T_18 : @[DelayPipe.scala 44:15]
      cnt <= UInt<1>("h00") @[DelayPipe.scala 45:9]
      skip @[DelayPipe.scala 44:15]
    else : @[DelayPipe.scala 46:30]
      node _T_19 = lt(cnt, io.config) @[DelayPipe.scala 46:18]
      when _T_19 : @[DelayPipe.scala 46:30]
        node _T_20 = add(cnt, UInt<1>("h01")) @[DelayPipe.scala 47:16]
        node _T_21 = tail(_T_20, 1) @[DelayPipe.scala 47:16]
        cnt <= _T_21 @[DelayPipe.scala 47:9]
        skip @[DelayPipe.scala 46:30]
    node _T_22 = eq(UInt<1>("h00"), io.config) @[DelayPipe.scala 50:22]
    node _T_23 = and(io.en, _T_22) @[DelayPipe.scala 50:14]
    when _T_23 : @[DelayPipe.scala 50:37]
      io.out <= io.in @[DelayPipe.scala 51:12]
      skip @[DelayPipe.scala 50:37]
    else : @[DelayPipe.scala 52:43]
      node _T_24 = eq(cnt, io.config) @[DelayPipe.scala 52:28]
      node _T_25 = and(io.en, _T_24) @[DelayPipe.scala 52:20]
      when _T_25 : @[DelayPipe.scala 52:43]
        io.out <= regs[rptr] @[DelayPipe.scala 53:12]
        skip @[DelayPipe.scala 52:43]
      else : @[DelayPipe.scala 54:14]
        io.out <= UInt<1>("h00") @[DelayPipe.scala 55:12]
        skip @[DelayPipe.scala 54:14]
    
  module Muxn_140 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[6], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    node _T_10 = eq(UInt<3>("h05"), io.config) @[Mux.scala 80:60]
    node _T_11 = mux(_T_10, io.in[5], _T_9) @[Mux.scala 80:57]
    io.out <= _T_11 @[Multiplexer.scala 20:10]
    
  module Muxn_141 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[6], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    node _T_10 = eq(UInt<3>("h05"), io.config) @[Mux.scala 80:60]
    node _T_11 = mux(_T_10, io.in[5], _T_9) @[Mux.scala 80:57]
    io.out <= _T_11 @[Multiplexer.scala 20:10]
    
  module ConfigMem_78 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<1>, flip cfg_data : UInt<32>, out : UInt<48>[1]}
    
    wire _T : UInt<48>[1] @[ConfigMem.scala 27:29]
    _T[0] <= UInt<48>("h00") @[ConfigMem.scala 27:29]
    reg regs : UInt<48>[1], clock with : (reset => (reset, _T)) @[ConfigMem.scala 27:21]
    node _T_1 = eq(io.cfg_addr, UInt<1>("h00")) @[ConfigMem.scala 39:38]
    node _T_2 = and(io.cfg_en, _T_1) @[ConfigMem.scala 39:22]
    when _T_2 : @[ConfigMem.scala 39:47]
      node _T_3 = bits(regs[0], 47, 32) @[ConfigMem.scala 41:33]
      node _T_4 = cat(_T_3, io.cfg_data) @[Cat.scala 29:58]
      regs[0] <= _T_4 @[ConfigMem.scala 41:19]
      skip @[ConfigMem.scala 39:47]
    node _T_5 = eq(io.cfg_addr, UInt<1>("h01")) @[ConfigMem.scala 39:38]
    node _T_6 = and(io.cfg_en, _T_5) @[ConfigMem.scala 39:22]
    when _T_6 : @[ConfigMem.scala 39:47]
      node _T_7 = bits(regs[0], 31, 0) @[ConfigMem.scala 43:46]
      node _T_8 = cat(io.cfg_data, _T_7) @[Cat.scala 29:58]
      regs[0] <= _T_8 @[ConfigMem.scala 43:19]
      skip @[ConfigMem.scala 39:47]
    io.out[0] <= regs[0] @[ConfigMem.scala 52:45]
    
  module GPE_62 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<12>, flip cfg_data : UInt<32>, flip en : UInt<1>, flip in : UInt<32>[8], out : UInt<32>[1]}
    
    inst alu of ALU_62 @[PE.scala 50:19]
    alu.clock <= clock
    alu.reset <= reset
    inst rf of RF_62 @[PE.scala 51:18]
    rf.clock <= clock
    rf.reset <= reset
    inst DelayPipe of DelayPipe_124 @[PE.scala 52:54]
    DelayPipe.clock <= clock
    DelayPipe.reset <= reset
    inst DelayPipe_1 of DelayPipe_125 @[PE.scala 52:54]
    DelayPipe_1.clock <= clock
    DelayPipe_1.reset <= reset
    wire const : UInt<32> @[PE.scala 54:19]
    inst Muxn of Muxn_140 @[PE.scala 55:49]
    Muxn.clock <= clock
    Muxn.reset <= reset
    inst Muxn_1 of Muxn_141 @[PE.scala 55:49]
    Muxn_1.clock <= clock
    Muxn_1.reset <= reset
    Muxn.io.in[0] <= io.in[0] @[PE.scala 62:12]
    Muxn.io.in[1] <= io.in[1] @[PE.scala 62:12]
    Muxn.io.in[2] <= io.in[2] @[PE.scala 62:12]
    Muxn.io.in[3] <= io.in[3] @[PE.scala 62:12]
    Muxn.io.in[4] <= const @[PE.scala 64:12]
    Muxn.io.in[5] <= rf.io.out[1] @[PE.scala 66:12]
    DelayPipe.io.en <= io.en @[PE.scala 69:23]
    DelayPipe.io.in <= Muxn.io.out @[PE.scala 70:23]
    alu.io.in[0] <= DelayPipe.io.out @[PE.scala 71:18]
    Muxn_1.io.in[0] <= io.in[4] @[PE.scala 62:12]
    Muxn_1.io.in[1] <= io.in[5] @[PE.scala 62:12]
    Muxn_1.io.in[2] <= io.in[6] @[PE.scala 62:12]
    Muxn_1.io.in[3] <= io.in[7] @[PE.scala 62:12]
    Muxn_1.io.in[4] <= const @[PE.scala 64:12]
    Muxn_1.io.in[5] <= rf.io.out[1] @[PE.scala 66:12]
    DelayPipe_1.io.en <= io.en @[PE.scala 69:23]
    DelayPipe_1.io.in <= Muxn_1.io.out @[PE.scala 70:23]
    alu.io.in[1] <= DelayPipe_1.io.out @[PE.scala 71:18]
    rf.io.en <= io.en @[PE.scala 75:12]
    rf.io.in[0] <= alu.io.out @[PE.scala 76:15]
    io.out[0] <= rf.io.out[0] @[PE.scala 77:13]
    inst cfg of ConfigMem_78 @[PE.scala 89:19]
    cfg.clock <= clock
    cfg.reset <= reset
    node _T = bits(io.cfg_addr, 11, 2) @[PE.scala 90:63]
    node _T_1 = eq(UInt<8>("h0a0"), _T) @[PE.scala 90:48]
    node _T_2 = and(io.cfg_en, _T_1) @[PE.scala 90:30]
    cfg.io.cfg_en <= _T_2 @[PE.scala 90:17]
    node _T_3 = bits(io.cfg_addr, 1, 0) @[PE.scala 91:33]
    cfg.io.cfg_addr <= _T_3 @[PE.scala 91:19]
    cfg.io.cfg_data <= io.cfg_data @[PE.scala 92:19]
    wire cfgOut : UInt<48> @[PE.scala 96:20]
    cfgOut <= cfg.io.out[0] @[PE.scala 97:10]
    node _T_4 = bits(cfgOut, 31, 0) @[PE.scala 98:18]
    const <= _T_4 @[PE.scala 98:9]
    node _T_5 = bits(cfgOut, 35, 32) @[PE.scala 100:28]
    alu.io.config <= _T_5 @[PE.scala 100:19]
    rf.io.config is invalid @[PE.scala 107:18]
    node _T_6 = bits(cfgOut, 38, 36) @[PE.scala 113:38]
    DelayPipe.io.config <= _T_6 @[PE.scala 113:29]
    node _T_7 = bits(cfgOut, 41, 39) @[PE.scala 113:38]
    DelayPipe_1.io.config <= _T_7 @[PE.scala 113:29]
    node _T_8 = bits(cfgOut, 44, 42) @[PE.scala 121:32]
    Muxn.io.config <= _T_8 @[PE.scala 121:23]
    node _T_9 = bits(cfgOut, 47, 45) @[PE.scala 121:32]
    Muxn_1.io.config <= _T_9 @[PE.scala 121:23]
    
  module ALU_63 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<4>, flip in : UInt<32>[2], out : UInt<32>}
    
    node _T = bits(io.in[0], 31, 0) @[Operations.scala 122:31]
    node _T_1 = bits(io.in[0], 31, 0) @[Operations.scala 124:31]
    node _T_2 = bits(io.in[1], 31, 0) @[Operations.scala 124:49]
    node _T_3 = add(_T_1, _T_2) @[Operations.scala 124:41]
    node _T_4 = tail(_T_3, 1) @[Operations.scala 124:41]
    node _T_5 = bits(io.in[0], 31, 0) @[Operations.scala 126:31]
    node _T_6 = bits(io.in[1], 31, 0) @[Operations.scala 126:49]
    node _T_7 = sub(_T_5, _T_6) @[Operations.scala 126:41]
    node _T_8 = tail(_T_7, 1) @[Operations.scala 126:41]
    node _T_9 = bits(io.in[0], 31, 0) @[Operations.scala 128:31]
    node _T_10 = bits(io.in[1], 31, 0) @[Operations.scala 128:49]
    node _T_11 = mul(_T_9, _T_10) @[Operations.scala 128:41]
    node _T_12 = bits(io.in[0], 31, 0) @[Operations.scala 138:31]
    node _T_13 = bits(io.in[1], 31, 0) @[Operations.scala 138:49]
    node _T_14 = and(_T_12, _T_13) @[Operations.scala 138:41]
    node _T_15 = bits(io.in[0], 31, 0) @[Operations.scala 140:31]
    node _T_16 = bits(io.in[1], 31, 0) @[Operations.scala 140:49]
    node _T_17 = or(_T_15, _T_16) @[Operations.scala 140:41]
    node _T_18 = bits(io.in[0], 31, 0) @[Operations.scala 142:31]
    node _T_19 = bits(io.in[1], 31, 0) @[Operations.scala 142:49]
    node _T_20 = xor(_T_18, _T_19) @[Operations.scala 142:41]
    node _T_21 = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_22 = mux(_T_21, _T, UInt<1>("h00")) @[Mux.scala 80:57]
    node _T_23 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_24 = mux(_T_23, _T_4, _T_22) @[Mux.scala 80:57]
    node _T_25 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_26 = mux(_T_25, _T_8, _T_24) @[Mux.scala 80:57]
    node _T_27 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_28 = mux(_T_27, _T_11, _T_26) @[Mux.scala 80:57]
    node _T_29 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_30 = mux(_T_29, _T_14, _T_28) @[Mux.scala 80:57]
    node _T_31 = eq(UInt<3>("h05"), io.config) @[Mux.scala 80:60]
    node _T_32 = mux(_T_31, _T_17, _T_30) @[Mux.scala 80:57]
    node _T_33 = eq(UInt<3>("h06"), io.config) @[Mux.scala 80:60]
    node _T_34 = mux(_T_33, _T_20, _T_32) @[Mux.scala 80:57]
    io.out <= _T_34 @[ALU.scala 25:10]
    
  module RF_63 : 
    input clock : Clock
    input reset : Reset
    output io : {flip en : UInt<1>, flip config : UInt<0>, flip in : UInt<32>[1], out : UInt<32>[2]}
    
    wire _T : UInt<32>[1] @[RegFile.scala 24:29]
    _T[0] <= UInt<32>("h00") @[RegFile.scala 24:29]
    reg regs : UInt<32>[1], clock with : (reset => (reset, _T)) @[RegFile.scala 24:21]
    when io.en : @[RegFile.scala 34:16]
      regs[0] <= io.in[0] @[RegFile.scala 35:41]
      skip @[RegFile.scala 34:16]
    io.out[0] <= regs[0] @[RegFile.scala 37:42]
    io.out[1] <= regs[0] @[RegFile.scala 37:42]
    
  module DelayPipe_126 : 
    input clock : Clock
    input reset : Reset
    output io : {flip en : UInt<1>, flip config : UInt<3>, flip in : UInt<32>, out : UInt<32>}
    
    wire _T : UInt<32>[5] @[DelayPipe.scala 22:29]
    _T[0] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[1] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[2] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[3] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[4] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    reg regs : UInt<32>[5], clock with : (reset => (reset, _T)) @[DelayPipe.scala 22:21]
    reg wptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 23:21]
    reg rptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 24:21]
    node _T_1 = lt(wptr, UInt<3>("h04")) @[DelayPipe.scala 26:23]
    node _T_2 = and(io.en, _T_1) @[DelayPipe.scala 26:14]
    when _T_2 : @[DelayPipe.scala 26:37]
      node _T_3 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 27:17]
      node _T_4 = tail(_T_3, 1) @[DelayPipe.scala 27:17]
      wptr <= _T_4 @[DelayPipe.scala 27:10]
      skip @[DelayPipe.scala 26:37]
    else : @[DelayPipe.scala 28:14]
      wptr <= UInt<1>("h00") @[DelayPipe.scala 29:10]
      skip @[DelayPipe.scala 28:14]
    node _T_5 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 32:12]
    node _T_6 = tail(_T_5, 1) @[DelayPipe.scala 32:12]
    node _T_7 = geq(_T_6, io.config) @[DelayPipe.scala 32:17]
    when _T_7 : @[DelayPipe.scala 32:30]
      node _T_8 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 33:18]
      node _T_9 = tail(_T_8, 1) @[DelayPipe.scala 33:18]
      node _T_10 = sub(_T_9, io.config) @[DelayPipe.scala 33:24]
      node _T_11 = tail(_T_10, 1) @[DelayPipe.scala 33:24]
      rptr <= _T_11 @[DelayPipe.scala 33:10]
      skip @[DelayPipe.scala 32:30]
    else : @[DelayPipe.scala 34:14]
      node _T_12 = add(UInt<3>("h06"), wptr) @[DelayPipe.scala 35:30]
      node _T_13 = tail(_T_12, 1) @[DelayPipe.scala 35:30]
      node _T_14 = sub(_T_13, io.config) @[DelayPipe.scala 35:37]
      node _T_15 = tail(_T_14, 1) @[DelayPipe.scala 35:37]
      rptr <= _T_15 @[DelayPipe.scala 35:10]
      skip @[DelayPipe.scala 34:14]
    node _T_16 = gt(io.config, UInt<1>("h00")) @[DelayPipe.scala 39:28]
    node _T_17 = and(io.en, _T_16) @[DelayPipe.scala 39:14]
    when _T_17 : @[DelayPipe.scala 39:35]
      regs[wptr] <= io.in @[DelayPipe.scala 40:16]
      skip @[DelayPipe.scala 39:35]
    reg cnt : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 43:20]
    node _T_18 = eq(io.en, UInt<1>("h00")) @[DelayPipe.scala 44:8]
    when _T_18 : @[DelayPipe.scala 44:15]
      cnt <= UInt<1>("h00") @[DelayPipe.scala 45:9]
      skip @[DelayPipe.scala 44:15]
    else : @[DelayPipe.scala 46:30]
      node _T_19 = lt(cnt, io.config) @[DelayPipe.scala 46:18]
      when _T_19 : @[DelayPipe.scala 46:30]
        node _T_20 = add(cnt, UInt<1>("h01")) @[DelayPipe.scala 47:16]
        node _T_21 = tail(_T_20, 1) @[DelayPipe.scala 47:16]
        cnt <= _T_21 @[DelayPipe.scala 47:9]
        skip @[DelayPipe.scala 46:30]
    node _T_22 = eq(UInt<1>("h00"), io.config) @[DelayPipe.scala 50:22]
    node _T_23 = and(io.en, _T_22) @[DelayPipe.scala 50:14]
    when _T_23 : @[DelayPipe.scala 50:37]
      io.out <= io.in @[DelayPipe.scala 51:12]
      skip @[DelayPipe.scala 50:37]
    else : @[DelayPipe.scala 52:43]
      node _T_24 = eq(cnt, io.config) @[DelayPipe.scala 52:28]
      node _T_25 = and(io.en, _T_24) @[DelayPipe.scala 52:20]
      when _T_25 : @[DelayPipe.scala 52:43]
        io.out <= regs[rptr] @[DelayPipe.scala 53:12]
        skip @[DelayPipe.scala 52:43]
      else : @[DelayPipe.scala 54:14]
        io.out <= UInt<1>("h00") @[DelayPipe.scala 55:12]
        skip @[DelayPipe.scala 54:14]
    
  module DelayPipe_127 : 
    input clock : Clock
    input reset : Reset
    output io : {flip en : UInt<1>, flip config : UInt<3>, flip in : UInt<32>, out : UInt<32>}
    
    wire _T : UInt<32>[5] @[DelayPipe.scala 22:29]
    _T[0] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[1] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[2] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[3] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    _T[4] <= UInt<32>("h00") @[DelayPipe.scala 22:29]
    reg regs : UInt<32>[5], clock with : (reset => (reset, _T)) @[DelayPipe.scala 22:21]
    reg wptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 23:21]
    reg rptr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 24:21]
    node _T_1 = lt(wptr, UInt<3>("h04")) @[DelayPipe.scala 26:23]
    node _T_2 = and(io.en, _T_1) @[DelayPipe.scala 26:14]
    when _T_2 : @[DelayPipe.scala 26:37]
      node _T_3 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 27:17]
      node _T_4 = tail(_T_3, 1) @[DelayPipe.scala 27:17]
      wptr <= _T_4 @[DelayPipe.scala 27:10]
      skip @[DelayPipe.scala 26:37]
    else : @[DelayPipe.scala 28:14]
      wptr <= UInt<1>("h00") @[DelayPipe.scala 29:10]
      skip @[DelayPipe.scala 28:14]
    node _T_5 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 32:12]
    node _T_6 = tail(_T_5, 1) @[DelayPipe.scala 32:12]
    node _T_7 = geq(_T_6, io.config) @[DelayPipe.scala 32:17]
    when _T_7 : @[DelayPipe.scala 32:30]
      node _T_8 = add(wptr, UInt<1>("h01")) @[DelayPipe.scala 33:18]
      node _T_9 = tail(_T_8, 1) @[DelayPipe.scala 33:18]
      node _T_10 = sub(_T_9, io.config) @[DelayPipe.scala 33:24]
      node _T_11 = tail(_T_10, 1) @[DelayPipe.scala 33:24]
      rptr <= _T_11 @[DelayPipe.scala 33:10]
      skip @[DelayPipe.scala 32:30]
    else : @[DelayPipe.scala 34:14]
      node _T_12 = add(UInt<3>("h06"), wptr) @[DelayPipe.scala 35:30]
      node _T_13 = tail(_T_12, 1) @[DelayPipe.scala 35:30]
      node _T_14 = sub(_T_13, io.config) @[DelayPipe.scala 35:37]
      node _T_15 = tail(_T_14, 1) @[DelayPipe.scala 35:37]
      rptr <= _T_15 @[DelayPipe.scala 35:10]
      skip @[DelayPipe.scala 34:14]
    node _T_16 = gt(io.config, UInt<1>("h00")) @[DelayPipe.scala 39:28]
    node _T_17 = and(io.en, _T_16) @[DelayPipe.scala 39:14]
    when _T_17 : @[DelayPipe.scala 39:35]
      regs[wptr] <= io.in @[DelayPipe.scala 40:16]
      skip @[DelayPipe.scala 39:35]
    reg cnt : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DelayPipe.scala 43:20]
    node _T_18 = eq(io.en, UInt<1>("h00")) @[DelayPipe.scala 44:8]
    when _T_18 : @[DelayPipe.scala 44:15]
      cnt <= UInt<1>("h00") @[DelayPipe.scala 45:9]
      skip @[DelayPipe.scala 44:15]
    else : @[DelayPipe.scala 46:30]
      node _T_19 = lt(cnt, io.config) @[DelayPipe.scala 46:18]
      when _T_19 : @[DelayPipe.scala 46:30]
        node _T_20 = add(cnt, UInt<1>("h01")) @[DelayPipe.scala 47:16]
        node _T_21 = tail(_T_20, 1) @[DelayPipe.scala 47:16]
        cnt <= _T_21 @[DelayPipe.scala 47:9]
        skip @[DelayPipe.scala 46:30]
    node _T_22 = eq(UInt<1>("h00"), io.config) @[DelayPipe.scala 50:22]
    node _T_23 = and(io.en, _T_22) @[DelayPipe.scala 50:14]
    when _T_23 : @[DelayPipe.scala 50:37]
      io.out <= io.in @[DelayPipe.scala 51:12]
      skip @[DelayPipe.scala 50:37]
    else : @[DelayPipe.scala 52:43]
      node _T_24 = eq(cnt, io.config) @[DelayPipe.scala 52:28]
      node _T_25 = and(io.en, _T_24) @[DelayPipe.scala 52:20]
      when _T_25 : @[DelayPipe.scala 52:43]
        io.out <= regs[rptr] @[DelayPipe.scala 53:12]
        skip @[DelayPipe.scala 52:43]
      else : @[DelayPipe.scala 54:14]
        io.out <= UInt<1>("h00") @[DelayPipe.scala 55:12]
        skip @[DelayPipe.scala 54:14]
    
  module Muxn_142 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[6], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    node _T_10 = eq(UInt<3>("h05"), io.config) @[Mux.scala 80:60]
    node _T_11 = mux(_T_10, io.in[5], _T_9) @[Mux.scala 80:57]
    io.out <= _T_11 @[Multiplexer.scala 20:10]
    
  module Muxn_143 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[6], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    node _T_10 = eq(UInt<3>("h05"), io.config) @[Mux.scala 80:60]
    node _T_11 = mux(_T_10, io.in[5], _T_9) @[Mux.scala 80:57]
    io.out <= _T_11 @[Multiplexer.scala 20:10]
    
  module ConfigMem_79 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<1>, flip cfg_data : UInt<32>, out : UInt<48>[1]}
    
    wire _T : UInt<48>[1] @[ConfigMem.scala 27:29]
    _T[0] <= UInt<48>("h00") @[ConfigMem.scala 27:29]
    reg regs : UInt<48>[1], clock with : (reset => (reset, _T)) @[ConfigMem.scala 27:21]
    node _T_1 = eq(io.cfg_addr, UInt<1>("h00")) @[ConfigMem.scala 39:38]
    node _T_2 = and(io.cfg_en, _T_1) @[ConfigMem.scala 39:22]
    when _T_2 : @[ConfigMem.scala 39:47]
      node _T_3 = bits(regs[0], 47, 32) @[ConfigMem.scala 41:33]
      node _T_4 = cat(_T_3, io.cfg_data) @[Cat.scala 29:58]
      regs[0] <= _T_4 @[ConfigMem.scala 41:19]
      skip @[ConfigMem.scala 39:47]
    node _T_5 = eq(io.cfg_addr, UInt<1>("h01")) @[ConfigMem.scala 39:38]
    node _T_6 = and(io.cfg_en, _T_5) @[ConfigMem.scala 39:22]
    when _T_6 : @[ConfigMem.scala 39:47]
      node _T_7 = bits(regs[0], 31, 0) @[ConfigMem.scala 43:46]
      node _T_8 = cat(io.cfg_data, _T_7) @[Cat.scala 29:58]
      regs[0] <= _T_8 @[ConfigMem.scala 43:19]
      skip @[ConfigMem.scala 39:47]
    io.out[0] <= regs[0] @[ConfigMem.scala 52:45]
    
  module GPE_63 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<12>, flip cfg_data : UInt<32>, flip en : UInt<1>, flip in : UInt<32>[8], out : UInt<32>[1]}
    
    inst alu of ALU_63 @[PE.scala 50:19]
    alu.clock <= clock
    alu.reset <= reset
    inst rf of RF_63 @[PE.scala 51:18]
    rf.clock <= clock
    rf.reset <= reset
    inst DelayPipe of DelayPipe_126 @[PE.scala 52:54]
    DelayPipe.clock <= clock
    DelayPipe.reset <= reset
    inst DelayPipe_1 of DelayPipe_127 @[PE.scala 52:54]
    DelayPipe_1.clock <= clock
    DelayPipe_1.reset <= reset
    wire const : UInt<32> @[PE.scala 54:19]
    inst Muxn of Muxn_142 @[PE.scala 55:49]
    Muxn.clock <= clock
    Muxn.reset <= reset
    inst Muxn_1 of Muxn_143 @[PE.scala 55:49]
    Muxn_1.clock <= clock
    Muxn_1.reset <= reset
    Muxn.io.in[0] <= io.in[0] @[PE.scala 62:12]
    Muxn.io.in[1] <= io.in[1] @[PE.scala 62:12]
    Muxn.io.in[2] <= io.in[2] @[PE.scala 62:12]
    Muxn.io.in[3] <= io.in[3] @[PE.scala 62:12]
    Muxn.io.in[4] <= const @[PE.scala 64:12]
    Muxn.io.in[5] <= rf.io.out[1] @[PE.scala 66:12]
    DelayPipe.io.en <= io.en @[PE.scala 69:23]
    DelayPipe.io.in <= Muxn.io.out @[PE.scala 70:23]
    alu.io.in[0] <= DelayPipe.io.out @[PE.scala 71:18]
    Muxn_1.io.in[0] <= io.in[4] @[PE.scala 62:12]
    Muxn_1.io.in[1] <= io.in[5] @[PE.scala 62:12]
    Muxn_1.io.in[2] <= io.in[6] @[PE.scala 62:12]
    Muxn_1.io.in[3] <= io.in[7] @[PE.scala 62:12]
    Muxn_1.io.in[4] <= const @[PE.scala 64:12]
    Muxn_1.io.in[5] <= rf.io.out[1] @[PE.scala 66:12]
    DelayPipe_1.io.en <= io.en @[PE.scala 69:23]
    DelayPipe_1.io.in <= Muxn_1.io.out @[PE.scala 70:23]
    alu.io.in[1] <= DelayPipe_1.io.out @[PE.scala 71:18]
    rf.io.en <= io.en @[PE.scala 75:12]
    rf.io.in[0] <= alu.io.out @[PE.scala 76:15]
    io.out[0] <= rf.io.out[0] @[PE.scala 77:13]
    inst cfg of ConfigMem_79 @[PE.scala 89:19]
    cfg.clock <= clock
    cfg.reset <= reset
    node _T = bits(io.cfg_addr, 11, 2) @[PE.scala 90:63]
    node _T_1 = eq(UInt<8>("h0a1"), _T) @[PE.scala 90:48]
    node _T_2 = and(io.cfg_en, _T_1) @[PE.scala 90:30]
    cfg.io.cfg_en <= _T_2 @[PE.scala 90:17]
    node _T_3 = bits(io.cfg_addr, 1, 0) @[PE.scala 91:33]
    cfg.io.cfg_addr <= _T_3 @[PE.scala 91:19]
    cfg.io.cfg_data <= io.cfg_data @[PE.scala 92:19]
    wire cfgOut : UInt<48> @[PE.scala 96:20]
    cfgOut <= cfg.io.out[0] @[PE.scala 97:10]
    node _T_4 = bits(cfgOut, 31, 0) @[PE.scala 98:18]
    const <= _T_4 @[PE.scala 98:9]
    node _T_5 = bits(cfgOut, 35, 32) @[PE.scala 100:28]
    alu.io.config <= _T_5 @[PE.scala 100:19]
    rf.io.config is invalid @[PE.scala 107:18]
    node _T_6 = bits(cfgOut, 38, 36) @[PE.scala 113:38]
    DelayPipe.io.config <= _T_6 @[PE.scala 113:29]
    node _T_7 = bits(cfgOut, 41, 39) @[PE.scala 113:38]
    DelayPipe_1.io.config <= _T_7 @[PE.scala 113:29]
    node _T_8 = bits(cfgOut, 44, 42) @[PE.scala 121:32]
    Muxn.io.config <= _T_8 @[PE.scala 121:23]
    node _T_9 = bits(cfgOut, 47, 45) @[PE.scala 121:32]
    Muxn_1.io.config <= _T_9 @[PE.scala 121:23]
    
  module ConfigMem_80 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<0>, flip cfg_data : UInt<32>, out : UInt<14>[1]}
    
    wire _T : UInt<14>[1] @[ConfigMem.scala 27:29]
    _T[0] <= UInt<14>("h00") @[ConfigMem.scala 27:29]
    reg regs : UInt<14>[1], clock with : (reset => (reset, _T)) @[ConfigMem.scala 27:21]
    node _T_1 = eq(io.cfg_addr, UInt<1>("h00")) @[ConfigMem.scala 32:38]
    node _T_2 = and(io.cfg_en, _T_1) @[ConfigMem.scala 32:22]
    when _T_2 : @[ConfigMem.scala 32:54]
      node _T_3 = bits(io.cfg_data, 13, 0) @[ConfigMem.scala 33:31]
      regs[0] <= _T_3 @[ConfigMem.scala 33:17]
      skip @[ConfigMem.scala 32:54]
    io.out[0] <= regs[0] @[ConfigMem.scala 52:45]
    
  module Muxn_144 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<1>, flip in : UInt<32>[2], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    io.out <= _T_1 @[Multiplexer.scala 20:10]
    
  module Muxn_145 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[3], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_146 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[3], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_147 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_148 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_149 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[3], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_150 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module GIB : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<12>, flip cfg_data : UInt<32>, ipinNW : UInt<32>[0], flip opinNW : UInt<32>[0], ipinNE : UInt<32>[1], flip opinNE : UInt<32>[1], ipinSE : UInt<32>[2], flip opinSE : UInt<32>[1], ipinSW : UInt<32>[0], flip opinSW : UInt<32>[0], flip itrackW : UInt<32>[1], otrackW : UInt<32>[1], flip itrackN : UInt<32>[1], otrackN : UInt<32>[1], flip itrackE : UInt<32>[1], otrackE : UInt<32>[1], flip itrackS : UInt<32>[1], otrackS : UInt<32>[1]}
    
    io.ipinNE[0] <= UInt<1>("h00") @[Interconnect.scala 427:20]
    io.ipinSE[0] <= UInt<1>("h00") @[Interconnect.scala 429:20]
    io.ipinSE[1] <= UInt<1>("h00") @[Interconnect.scala 429:20]
    io.otrackW[0] <= UInt<1>("h00") @[Interconnect.scala 430:21]
    io.otrackN[0] <= UInt<1>("h00") @[Interconnect.scala 431:21]
    io.otrackE[0] <= UInt<1>("h00") @[Interconnect.scala 432:21]
    io.otrackS[0] <= UInt<1>("h00") @[Interconnect.scala 433:21]
    inst ConfigMem of ConfigMem_80 @[Interconnect.scala 463:21]
    ConfigMem.clock <= clock
    ConfigMem.reset <= reset
    node _T = bits(io.cfg_addr, 11, 2) @[Interconnect.scala 464:65]
    node _T_1 = eq(UInt<5>("h013"), _T) @[Interconnect.scala 464:50]
    node _T_2 = and(io.cfg_en, _T_1) @[Interconnect.scala 464:32]
    ConfigMem.io.cfg_en <= _T_2 @[Interconnect.scala 464:19]
    node _T_3 = bits(io.cfg_addr, 1, 0) @[Interconnect.scala 465:35]
    ConfigMem.io.cfg_addr <= _T_3 @[Interconnect.scala 465:21]
    ConfigMem.io.cfg_data <= io.cfg_data @[Interconnect.scala 466:21]
    inst Muxn of Muxn_144 @[Interconnect.scala 473:25]
    Muxn.clock <= clock
    Muxn.reset <= reset
    Muxn.io.in[0] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn.io.in[1] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNE[0] <= Muxn.io.out @[Interconnect.scala 479:45]
    node _T_4 = bits(ConfigMem.io.out[0], 0, 0) @[Interconnect.scala 483:39]
    Muxn.io.config <= _T_4 @[Interconnect.scala 483:23]
    inst Muxn_1 of Muxn_145 @[Interconnect.scala 473:25]
    Muxn_1.clock <= clock
    Muxn_1.reset <= reset
    Muxn_1.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[1] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    io.ipinSE[0] <= Muxn_1.io.out @[Interconnect.scala 479:45]
    node _T_5 = bits(ConfigMem.io.out[0], 2, 1) @[Interconnect.scala 483:39]
    Muxn_1.io.config <= _T_5 @[Interconnect.scala 483:23]
    inst Muxn_2 of Muxn_146 @[Interconnect.scala 473:25]
    Muxn_2.clock <= clock
    Muxn_2.reset <= reset
    Muxn_2.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[1] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    io.ipinSE[1] <= Muxn_2.io.out @[Interconnect.scala 479:45]
    node _T_6 = bits(ConfigMem.io.out[0], 4, 3) @[Interconnect.scala 483:39]
    Muxn_2.io.config <= _T_6 @[Interconnect.scala 483:23]
    inst Muxn_3 of Muxn_147 @[Interconnect.scala 473:25]
    Muxn_3.clock <= clock
    Muxn_3.reset <= reset
    Muxn_3.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[1] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.otrackW[0] <= Muxn_3.io.out @[Interconnect.scala 479:45]
    node _T_7 = bits(ConfigMem.io.out[0], 7, 5) @[Interconnect.scala 483:39]
    Muxn_3.io.config <= _T_7 @[Interconnect.scala 483:23]
    inst Muxn_4 of Muxn_148 @[Interconnect.scala 473:25]
    Muxn_4.clock <= clock
    Muxn_4.reset <= reset
    Muxn_4.io.in[0] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[1] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[2] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.otrackN[0] <= Muxn_4.io.out @[Interconnect.scala 479:45]
    node _T_8 = bits(ConfigMem.io.out[0], 9, 8) @[Interconnect.scala 483:39]
    Muxn_4.io.config <= _T_8 @[Interconnect.scala 483:23]
    inst Muxn_5 of Muxn_149 @[Interconnect.scala 473:25]
    Muxn_5.clock <= clock
    Muxn_5.reset <= reset
    Muxn_5.io.in[0] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[1] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[2] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.otrackE[0] <= Muxn_5.io.out @[Interconnect.scala 479:45]
    node _T_9 = bits(ConfigMem.io.out[0], 11, 10) @[Interconnect.scala 483:39]
    Muxn_5.io.config <= _T_9 @[Interconnect.scala 483:23]
    inst Muxn_6 of Muxn_150 @[Interconnect.scala 473:25]
    Muxn_6.clock <= clock
    Muxn_6.reset <= reset
    Muxn_6.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[1] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    io.otrackS[0] <= Muxn_6.io.out @[Interconnect.scala 479:45]
    node _T_10 = bits(ConfigMem.io.out[0], 13, 12) @[Interconnect.scala 483:39]
    Muxn_6.io.config <= _T_10 @[Interconnect.scala 483:23]
    
  module ConfigMem_81 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<0>, flip cfg_data : UInt<32>, out : UInt<24>[1]}
    
    wire _T : UInt<24>[1] @[ConfigMem.scala 27:29]
    _T[0] <= UInt<24>("h00") @[ConfigMem.scala 27:29]
    reg regs : UInt<24>[1], clock with : (reset => (reset, _T)) @[ConfigMem.scala 27:21]
    node _T_1 = eq(io.cfg_addr, UInt<1>("h00")) @[ConfigMem.scala 32:38]
    node _T_2 = and(io.cfg_en, _T_1) @[ConfigMem.scala 32:22]
    when _T_2 : @[ConfigMem.scala 32:54]
      node _T_3 = bits(io.cfg_data, 23, 0) @[ConfigMem.scala 33:31]
      regs[0] <= _T_3 @[ConfigMem.scala 33:17]
      skip @[ConfigMem.scala 32:54]
    io.out[0] <= regs[0] @[ConfigMem.scala 52:45]
    
  module Muxn_151 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_152 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_153 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_154 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_155 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_156 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_157 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_158 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_159 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_160 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module GIB_1 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<12>, flip cfg_data : UInt<32>, ipinNW : UInt<32>[1], flip opinNW : UInt<32>[1], ipinNE : UInt<32>[1], flip opinNE : UInt<32>[1], ipinSE : UInt<32>[2], flip opinSE : UInt<32>[1], ipinSW : UInt<32>[2], flip opinSW : UInt<32>[1], flip itrackW : UInt<32>[1], otrackW : UInt<32>[1], flip itrackN : UInt<32>[1], otrackN : UInt<32>[1], flip itrackE : UInt<32>[1], otrackE : UInt<32>[1], flip itrackS : UInt<32>[1], otrackS : UInt<32>[1]}
    
    io.ipinNW[0] <= UInt<1>("h00") @[Interconnect.scala 426:20]
    io.ipinNE[0] <= UInt<1>("h00") @[Interconnect.scala 427:20]
    io.ipinSW[0] <= UInt<1>("h00") @[Interconnect.scala 428:20]
    io.ipinSW[1] <= UInt<1>("h00") @[Interconnect.scala 428:20]
    io.ipinSE[0] <= UInt<1>("h00") @[Interconnect.scala 429:20]
    io.ipinSE[1] <= UInt<1>("h00") @[Interconnect.scala 429:20]
    io.otrackW[0] <= UInt<1>("h00") @[Interconnect.scala 430:21]
    io.otrackN[0] <= UInt<1>("h00") @[Interconnect.scala 431:21]
    io.otrackE[0] <= UInt<1>("h00") @[Interconnect.scala 432:21]
    io.otrackS[0] <= UInt<1>("h00") @[Interconnect.scala 433:21]
    inst ConfigMem of ConfigMem_81 @[Interconnect.scala 463:21]
    ConfigMem.clock <= clock
    ConfigMem.reset <= reset
    node _T = bits(io.cfg_addr, 11, 2) @[Interconnect.scala 464:65]
    node _T_1 = eq(UInt<5>("h014"), _T) @[Interconnect.scala 464:50]
    node _T_2 = and(io.cfg_en, _T_1) @[Interconnect.scala 464:32]
    ConfigMem.io.cfg_en <= _T_2 @[Interconnect.scala 464:19]
    node _T_3 = bits(io.cfg_addr, 1, 0) @[Interconnect.scala 465:35]
    ConfigMem.io.cfg_addr <= _T_3 @[Interconnect.scala 465:21]
    ConfigMem.io.cfg_data <= io.cfg_data @[Interconnect.scala 466:21]
    inst Muxn of Muxn_151 @[Interconnect.scala 473:25]
    Muxn.clock <= clock
    Muxn.reset <= reset
    Muxn.io.in[0] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn.io.in[2] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNW[0] <= Muxn.io.out @[Interconnect.scala 479:45]
    node _T_4 = bits(ConfigMem.io.out[0], 1, 0) @[Interconnect.scala 483:39]
    Muxn.io.config <= _T_4 @[Interconnect.scala 483:23]
    inst Muxn_1 of Muxn_152 @[Interconnect.scala 473:25]
    Muxn_1.clock <= clock
    Muxn_1.reset <= reset
    Muxn_1.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNE[0] <= Muxn_1.io.out @[Interconnect.scala 479:45]
    node _T_5 = bits(ConfigMem.io.out[0], 3, 2) @[Interconnect.scala 483:39]
    Muxn_1.io.config <= _T_5 @[Interconnect.scala 483:23]
    inst Muxn_2 of Muxn_153 @[Interconnect.scala 473:25]
    Muxn_2.clock <= clock
    Muxn_2.reset <= reset
    Muxn_2.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[1] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    io.ipinSE[0] <= Muxn_2.io.out @[Interconnect.scala 479:45]
    node _T_6 = bits(ConfigMem.io.out[0], 5, 4) @[Interconnect.scala 483:39]
    Muxn_2.io.config <= _T_6 @[Interconnect.scala 483:23]
    inst Muxn_3 of Muxn_154 @[Interconnect.scala 473:25]
    Muxn_3.clock <= clock
    Muxn_3.reset <= reset
    Muxn_3.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[1] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    io.ipinSE[1] <= Muxn_3.io.out @[Interconnect.scala 479:45]
    node _T_7 = bits(ConfigMem.io.out[0], 7, 6) @[Interconnect.scala 483:39]
    Muxn_3.io.config <= _T_7 @[Interconnect.scala 483:23]
    inst Muxn_4 of Muxn_155 @[Interconnect.scala 473:25]
    Muxn_4.clock <= clock
    Muxn_4.reset <= reset
    Muxn_4.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[1] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    io.ipinSW[0] <= Muxn_4.io.out @[Interconnect.scala 479:45]
    node _T_8 = bits(ConfigMem.io.out[0], 9, 8) @[Interconnect.scala 483:39]
    Muxn_4.io.config <= _T_8 @[Interconnect.scala 483:23]
    inst Muxn_5 of Muxn_156 @[Interconnect.scala 473:25]
    Muxn_5.clock <= clock
    Muxn_5.reset <= reset
    Muxn_5.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[1] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    io.ipinSW[1] <= Muxn_5.io.out @[Interconnect.scala 479:45]
    node _T_9 = bits(ConfigMem.io.out[0], 11, 10) @[Interconnect.scala 483:39]
    Muxn_5.io.config <= _T_9 @[Interconnect.scala 483:23]
    inst Muxn_6 of Muxn_157 @[Interconnect.scala 473:25]
    Muxn_6.clock <= clock
    Muxn_6.reset <= reset
    Muxn_6.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[1] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    reg _T_10 : UInt, clock @[Interconnect.scala 477:55]
    _T_10 <= Muxn_6.io.out @[Interconnect.scala 477:55]
    io.otrackW[0] <= _T_10 @[Interconnect.scala 477:45]
    node _T_11 = bits(ConfigMem.io.out[0], 14, 12) @[Interconnect.scala 483:39]
    Muxn_6.io.config <= _T_11 @[Interconnect.scala 483:23]
    inst Muxn_7 of Muxn_158 @[Interconnect.scala 473:25]
    Muxn_7.clock <= clock
    Muxn_7.reset <= reset
    Muxn_7.io.in[0] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    reg _T_12 : UInt, clock @[Interconnect.scala 477:55]
    _T_12 <= Muxn_7.io.out @[Interconnect.scala 477:55]
    io.otrackN[0] <= _T_12 @[Interconnect.scala 477:45]
    node _T_13 = bits(ConfigMem.io.out[0], 17, 15) @[Interconnect.scala 483:39]
    Muxn_7.io.config <= _T_13 @[Interconnect.scala 483:23]
    inst Muxn_8 of Muxn_159 @[Interconnect.scala 473:25]
    Muxn_8.clock <= clock
    Muxn_8.reset <= reset
    Muxn_8.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    reg _T_14 : UInt, clock @[Interconnect.scala 477:55]
    _T_14 <= Muxn_8.io.out @[Interconnect.scala 477:55]
    io.otrackE[0] <= _T_14 @[Interconnect.scala 477:45]
    node _T_15 = bits(ConfigMem.io.out[0], 20, 18) @[Interconnect.scala 483:39]
    Muxn_8.io.config <= _T_15 @[Interconnect.scala 483:23]
    inst Muxn_9 of Muxn_160 @[Interconnect.scala 473:25]
    Muxn_9.clock <= clock
    Muxn_9.reset <= reset
    Muxn_9.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[1] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[4] <= io.itrackE[0] @[Interconnect.scala 475:63]
    reg _T_16 : UInt, clock @[Interconnect.scala 477:55]
    _T_16 <= Muxn_9.io.out @[Interconnect.scala 477:55]
    io.otrackS[0] <= _T_16 @[Interconnect.scala 477:45]
    node _T_17 = bits(ConfigMem.io.out[0], 23, 21) @[Interconnect.scala 483:39]
    Muxn_9.io.config <= _T_17 @[Interconnect.scala 483:23]
    
  module ConfigMem_82 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<0>, flip cfg_data : UInt<32>, out : UInt<24>[1]}
    
    wire _T : UInt<24>[1] @[ConfigMem.scala 27:29]
    _T[0] <= UInt<24>("h00") @[ConfigMem.scala 27:29]
    reg regs : UInt<24>[1], clock with : (reset => (reset, _T)) @[ConfigMem.scala 27:21]
    node _T_1 = eq(io.cfg_addr, UInt<1>("h00")) @[ConfigMem.scala 32:38]
    node _T_2 = and(io.cfg_en, _T_1) @[ConfigMem.scala 32:22]
    when _T_2 : @[ConfigMem.scala 32:54]
      node _T_3 = bits(io.cfg_data, 23, 0) @[ConfigMem.scala 33:31]
      regs[0] <= _T_3 @[ConfigMem.scala 33:17]
      skip @[ConfigMem.scala 32:54]
    io.out[0] <= regs[0] @[ConfigMem.scala 52:45]
    
  module Muxn_161 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_162 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_163 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_164 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_165 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_166 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_167 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_168 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_169 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_170 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module GIB_2 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<12>, flip cfg_data : UInt<32>, ipinNW : UInt<32>[1], flip opinNW : UInt<32>[1], ipinNE : UInt<32>[1], flip opinNE : UInt<32>[1], ipinSE : UInt<32>[2], flip opinSE : UInt<32>[1], ipinSW : UInt<32>[2], flip opinSW : UInt<32>[1], flip itrackW : UInt<32>[1], otrackW : UInt<32>[1], flip itrackN : UInt<32>[1], otrackN : UInt<32>[1], flip itrackE : UInt<32>[1], otrackE : UInt<32>[1], flip itrackS : UInt<32>[1], otrackS : UInt<32>[1]}
    
    io.ipinNW[0] <= UInt<1>("h00") @[Interconnect.scala 426:20]
    io.ipinNE[0] <= UInt<1>("h00") @[Interconnect.scala 427:20]
    io.ipinSW[0] <= UInt<1>("h00") @[Interconnect.scala 428:20]
    io.ipinSW[1] <= UInt<1>("h00") @[Interconnect.scala 428:20]
    io.ipinSE[0] <= UInt<1>("h00") @[Interconnect.scala 429:20]
    io.ipinSE[1] <= UInt<1>("h00") @[Interconnect.scala 429:20]
    io.otrackW[0] <= UInt<1>("h00") @[Interconnect.scala 430:21]
    io.otrackN[0] <= UInt<1>("h00") @[Interconnect.scala 431:21]
    io.otrackE[0] <= UInt<1>("h00") @[Interconnect.scala 432:21]
    io.otrackS[0] <= UInt<1>("h00") @[Interconnect.scala 433:21]
    inst ConfigMem of ConfigMem_82 @[Interconnect.scala 463:21]
    ConfigMem.clock <= clock
    ConfigMem.reset <= reset
    node _T = bits(io.cfg_addr, 11, 2) @[Interconnect.scala 464:65]
    node _T_1 = eq(UInt<5>("h015"), _T) @[Interconnect.scala 464:50]
    node _T_2 = and(io.cfg_en, _T_1) @[Interconnect.scala 464:32]
    ConfigMem.io.cfg_en <= _T_2 @[Interconnect.scala 464:19]
    node _T_3 = bits(io.cfg_addr, 1, 0) @[Interconnect.scala 465:35]
    ConfigMem.io.cfg_addr <= _T_3 @[Interconnect.scala 465:21]
    ConfigMem.io.cfg_data <= io.cfg_data @[Interconnect.scala 466:21]
    inst Muxn of Muxn_161 @[Interconnect.scala 473:25]
    Muxn.clock <= clock
    Muxn.reset <= reset
    Muxn.io.in[0] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn.io.in[2] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNW[0] <= Muxn.io.out @[Interconnect.scala 479:45]
    node _T_4 = bits(ConfigMem.io.out[0], 1, 0) @[Interconnect.scala 483:39]
    Muxn.io.config <= _T_4 @[Interconnect.scala 483:23]
    inst Muxn_1 of Muxn_162 @[Interconnect.scala 473:25]
    Muxn_1.clock <= clock
    Muxn_1.reset <= reset
    Muxn_1.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNE[0] <= Muxn_1.io.out @[Interconnect.scala 479:45]
    node _T_5 = bits(ConfigMem.io.out[0], 3, 2) @[Interconnect.scala 483:39]
    Muxn_1.io.config <= _T_5 @[Interconnect.scala 483:23]
    inst Muxn_2 of Muxn_163 @[Interconnect.scala 473:25]
    Muxn_2.clock <= clock
    Muxn_2.reset <= reset
    Muxn_2.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[1] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    io.ipinSE[0] <= Muxn_2.io.out @[Interconnect.scala 479:45]
    node _T_6 = bits(ConfigMem.io.out[0], 5, 4) @[Interconnect.scala 483:39]
    Muxn_2.io.config <= _T_6 @[Interconnect.scala 483:23]
    inst Muxn_3 of Muxn_164 @[Interconnect.scala 473:25]
    Muxn_3.clock <= clock
    Muxn_3.reset <= reset
    Muxn_3.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[1] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    io.ipinSE[1] <= Muxn_3.io.out @[Interconnect.scala 479:45]
    node _T_7 = bits(ConfigMem.io.out[0], 7, 6) @[Interconnect.scala 483:39]
    Muxn_3.io.config <= _T_7 @[Interconnect.scala 483:23]
    inst Muxn_4 of Muxn_165 @[Interconnect.scala 473:25]
    Muxn_4.clock <= clock
    Muxn_4.reset <= reset
    Muxn_4.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[1] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    io.ipinSW[0] <= Muxn_4.io.out @[Interconnect.scala 479:45]
    node _T_8 = bits(ConfigMem.io.out[0], 9, 8) @[Interconnect.scala 483:39]
    Muxn_4.io.config <= _T_8 @[Interconnect.scala 483:23]
    inst Muxn_5 of Muxn_166 @[Interconnect.scala 473:25]
    Muxn_5.clock <= clock
    Muxn_5.reset <= reset
    Muxn_5.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[1] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    io.ipinSW[1] <= Muxn_5.io.out @[Interconnect.scala 479:45]
    node _T_9 = bits(ConfigMem.io.out[0], 11, 10) @[Interconnect.scala 483:39]
    Muxn_5.io.config <= _T_9 @[Interconnect.scala 483:23]
    inst Muxn_6 of Muxn_167 @[Interconnect.scala 473:25]
    Muxn_6.clock <= clock
    Muxn_6.reset <= reset
    Muxn_6.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[1] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.otrackW[0] <= Muxn_6.io.out @[Interconnect.scala 479:45]
    node _T_10 = bits(ConfigMem.io.out[0], 14, 12) @[Interconnect.scala 483:39]
    Muxn_6.io.config <= _T_10 @[Interconnect.scala 483:23]
    inst Muxn_7 of Muxn_168 @[Interconnect.scala 473:25]
    Muxn_7.clock <= clock
    Muxn_7.reset <= reset
    Muxn_7.io.in[0] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.otrackN[0] <= Muxn_7.io.out @[Interconnect.scala 479:45]
    node _T_11 = bits(ConfigMem.io.out[0], 17, 15) @[Interconnect.scala 483:39]
    Muxn_7.io.config <= _T_11 @[Interconnect.scala 483:23]
    inst Muxn_8 of Muxn_169 @[Interconnect.scala 473:25]
    Muxn_8.clock <= clock
    Muxn_8.reset <= reset
    Muxn_8.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.otrackE[0] <= Muxn_8.io.out @[Interconnect.scala 479:45]
    node _T_12 = bits(ConfigMem.io.out[0], 20, 18) @[Interconnect.scala 483:39]
    Muxn_8.io.config <= _T_12 @[Interconnect.scala 483:23]
    inst Muxn_9 of Muxn_170 @[Interconnect.scala 473:25]
    Muxn_9.clock <= clock
    Muxn_9.reset <= reset
    Muxn_9.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[1] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[4] <= io.itrackE[0] @[Interconnect.scala 475:63]
    io.otrackS[0] <= Muxn_9.io.out @[Interconnect.scala 479:45]
    node _T_13 = bits(ConfigMem.io.out[0], 23, 21) @[Interconnect.scala 483:39]
    Muxn_9.io.config <= _T_13 @[Interconnect.scala 483:23]
    
  module ConfigMem_83 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<0>, flip cfg_data : UInt<32>, out : UInt<24>[1]}
    
    wire _T : UInt<24>[1] @[ConfigMem.scala 27:29]
    _T[0] <= UInt<24>("h00") @[ConfigMem.scala 27:29]
    reg regs : UInt<24>[1], clock with : (reset => (reset, _T)) @[ConfigMem.scala 27:21]
    node _T_1 = eq(io.cfg_addr, UInt<1>("h00")) @[ConfigMem.scala 32:38]
    node _T_2 = and(io.cfg_en, _T_1) @[ConfigMem.scala 32:22]
    when _T_2 : @[ConfigMem.scala 32:54]
      node _T_3 = bits(io.cfg_data, 23, 0) @[ConfigMem.scala 33:31]
      regs[0] <= _T_3 @[ConfigMem.scala 33:17]
      skip @[ConfigMem.scala 32:54]
    io.out[0] <= regs[0] @[ConfigMem.scala 52:45]
    
  module Muxn_171 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_172 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_173 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_174 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_175 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_176 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_177 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_178 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_179 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_180 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module GIB_3 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<12>, flip cfg_data : UInt<32>, ipinNW : UInt<32>[1], flip opinNW : UInt<32>[1], ipinNE : UInt<32>[1], flip opinNE : UInt<32>[1], ipinSE : UInt<32>[2], flip opinSE : UInt<32>[1], ipinSW : UInt<32>[2], flip opinSW : UInt<32>[1], flip itrackW : UInt<32>[1], otrackW : UInt<32>[1], flip itrackN : UInt<32>[1], otrackN : UInt<32>[1], flip itrackE : UInt<32>[1], otrackE : UInt<32>[1], flip itrackS : UInt<32>[1], otrackS : UInt<32>[1]}
    
    io.ipinNW[0] <= UInt<1>("h00") @[Interconnect.scala 426:20]
    io.ipinNE[0] <= UInt<1>("h00") @[Interconnect.scala 427:20]
    io.ipinSW[0] <= UInt<1>("h00") @[Interconnect.scala 428:20]
    io.ipinSW[1] <= UInt<1>("h00") @[Interconnect.scala 428:20]
    io.ipinSE[0] <= UInt<1>("h00") @[Interconnect.scala 429:20]
    io.ipinSE[1] <= UInt<1>("h00") @[Interconnect.scala 429:20]
    io.otrackW[0] <= UInt<1>("h00") @[Interconnect.scala 430:21]
    io.otrackN[0] <= UInt<1>("h00") @[Interconnect.scala 431:21]
    io.otrackE[0] <= UInt<1>("h00") @[Interconnect.scala 432:21]
    io.otrackS[0] <= UInt<1>("h00") @[Interconnect.scala 433:21]
    inst ConfigMem of ConfigMem_83 @[Interconnect.scala 463:21]
    ConfigMem.clock <= clock
    ConfigMem.reset <= reset
    node _T = bits(io.cfg_addr, 11, 2) @[Interconnect.scala 464:65]
    node _T_1 = eq(UInt<5>("h016"), _T) @[Interconnect.scala 464:50]
    node _T_2 = and(io.cfg_en, _T_1) @[Interconnect.scala 464:32]
    ConfigMem.io.cfg_en <= _T_2 @[Interconnect.scala 464:19]
    node _T_3 = bits(io.cfg_addr, 1, 0) @[Interconnect.scala 465:35]
    ConfigMem.io.cfg_addr <= _T_3 @[Interconnect.scala 465:21]
    ConfigMem.io.cfg_data <= io.cfg_data @[Interconnect.scala 466:21]
    inst Muxn of Muxn_171 @[Interconnect.scala 473:25]
    Muxn.clock <= clock
    Muxn.reset <= reset
    Muxn.io.in[0] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn.io.in[2] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNW[0] <= Muxn.io.out @[Interconnect.scala 479:45]
    node _T_4 = bits(ConfigMem.io.out[0], 1, 0) @[Interconnect.scala 483:39]
    Muxn.io.config <= _T_4 @[Interconnect.scala 483:23]
    inst Muxn_1 of Muxn_172 @[Interconnect.scala 473:25]
    Muxn_1.clock <= clock
    Muxn_1.reset <= reset
    Muxn_1.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNE[0] <= Muxn_1.io.out @[Interconnect.scala 479:45]
    node _T_5 = bits(ConfigMem.io.out[0], 3, 2) @[Interconnect.scala 483:39]
    Muxn_1.io.config <= _T_5 @[Interconnect.scala 483:23]
    inst Muxn_2 of Muxn_173 @[Interconnect.scala 473:25]
    Muxn_2.clock <= clock
    Muxn_2.reset <= reset
    Muxn_2.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[1] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    io.ipinSE[0] <= Muxn_2.io.out @[Interconnect.scala 479:45]
    node _T_6 = bits(ConfigMem.io.out[0], 5, 4) @[Interconnect.scala 483:39]
    Muxn_2.io.config <= _T_6 @[Interconnect.scala 483:23]
    inst Muxn_3 of Muxn_174 @[Interconnect.scala 473:25]
    Muxn_3.clock <= clock
    Muxn_3.reset <= reset
    Muxn_3.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[1] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    io.ipinSE[1] <= Muxn_3.io.out @[Interconnect.scala 479:45]
    node _T_7 = bits(ConfigMem.io.out[0], 7, 6) @[Interconnect.scala 483:39]
    Muxn_3.io.config <= _T_7 @[Interconnect.scala 483:23]
    inst Muxn_4 of Muxn_175 @[Interconnect.scala 473:25]
    Muxn_4.clock <= clock
    Muxn_4.reset <= reset
    Muxn_4.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[1] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    io.ipinSW[0] <= Muxn_4.io.out @[Interconnect.scala 479:45]
    node _T_8 = bits(ConfigMem.io.out[0], 9, 8) @[Interconnect.scala 483:39]
    Muxn_4.io.config <= _T_8 @[Interconnect.scala 483:23]
    inst Muxn_5 of Muxn_176 @[Interconnect.scala 473:25]
    Muxn_5.clock <= clock
    Muxn_5.reset <= reset
    Muxn_5.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[1] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    io.ipinSW[1] <= Muxn_5.io.out @[Interconnect.scala 479:45]
    node _T_9 = bits(ConfigMem.io.out[0], 11, 10) @[Interconnect.scala 483:39]
    Muxn_5.io.config <= _T_9 @[Interconnect.scala 483:23]
    inst Muxn_6 of Muxn_177 @[Interconnect.scala 473:25]
    Muxn_6.clock <= clock
    Muxn_6.reset <= reset
    Muxn_6.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[1] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    reg _T_10 : UInt, clock @[Interconnect.scala 477:55]
    _T_10 <= Muxn_6.io.out @[Interconnect.scala 477:55]
    io.otrackW[0] <= _T_10 @[Interconnect.scala 477:45]
    node _T_11 = bits(ConfigMem.io.out[0], 14, 12) @[Interconnect.scala 483:39]
    Muxn_6.io.config <= _T_11 @[Interconnect.scala 483:23]
    inst Muxn_7 of Muxn_178 @[Interconnect.scala 473:25]
    Muxn_7.clock <= clock
    Muxn_7.reset <= reset
    Muxn_7.io.in[0] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    reg _T_12 : UInt, clock @[Interconnect.scala 477:55]
    _T_12 <= Muxn_7.io.out @[Interconnect.scala 477:55]
    io.otrackN[0] <= _T_12 @[Interconnect.scala 477:45]
    node _T_13 = bits(ConfigMem.io.out[0], 17, 15) @[Interconnect.scala 483:39]
    Muxn_7.io.config <= _T_13 @[Interconnect.scala 483:23]
    inst Muxn_8 of Muxn_179 @[Interconnect.scala 473:25]
    Muxn_8.clock <= clock
    Muxn_8.reset <= reset
    Muxn_8.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    reg _T_14 : UInt, clock @[Interconnect.scala 477:55]
    _T_14 <= Muxn_8.io.out @[Interconnect.scala 477:55]
    io.otrackE[0] <= _T_14 @[Interconnect.scala 477:45]
    node _T_15 = bits(ConfigMem.io.out[0], 20, 18) @[Interconnect.scala 483:39]
    Muxn_8.io.config <= _T_15 @[Interconnect.scala 483:23]
    inst Muxn_9 of Muxn_180 @[Interconnect.scala 473:25]
    Muxn_9.clock <= clock
    Muxn_9.reset <= reset
    Muxn_9.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[1] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[4] <= io.itrackE[0] @[Interconnect.scala 475:63]
    reg _T_16 : UInt, clock @[Interconnect.scala 477:55]
    _T_16 <= Muxn_9.io.out @[Interconnect.scala 477:55]
    io.otrackS[0] <= _T_16 @[Interconnect.scala 477:45]
    node _T_17 = bits(ConfigMem.io.out[0], 23, 21) @[Interconnect.scala 483:39]
    Muxn_9.io.config <= _T_17 @[Interconnect.scala 483:23]
    
  module ConfigMem_84 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<0>, flip cfg_data : UInt<32>, out : UInt<24>[1]}
    
    wire _T : UInt<24>[1] @[ConfigMem.scala 27:29]
    _T[0] <= UInt<24>("h00") @[ConfigMem.scala 27:29]
    reg regs : UInt<24>[1], clock with : (reset => (reset, _T)) @[ConfigMem.scala 27:21]
    node _T_1 = eq(io.cfg_addr, UInt<1>("h00")) @[ConfigMem.scala 32:38]
    node _T_2 = and(io.cfg_en, _T_1) @[ConfigMem.scala 32:22]
    when _T_2 : @[ConfigMem.scala 32:54]
      node _T_3 = bits(io.cfg_data, 23, 0) @[ConfigMem.scala 33:31]
      regs[0] <= _T_3 @[ConfigMem.scala 33:17]
      skip @[ConfigMem.scala 32:54]
    io.out[0] <= regs[0] @[ConfigMem.scala 52:45]
    
  module Muxn_181 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_182 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_183 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_184 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_185 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_186 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_187 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_188 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_189 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_190 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module GIB_4 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<12>, flip cfg_data : UInt<32>, ipinNW : UInt<32>[1], flip opinNW : UInt<32>[1], ipinNE : UInt<32>[1], flip opinNE : UInt<32>[1], ipinSE : UInt<32>[2], flip opinSE : UInt<32>[1], ipinSW : UInt<32>[2], flip opinSW : UInt<32>[1], flip itrackW : UInt<32>[1], otrackW : UInt<32>[1], flip itrackN : UInt<32>[1], otrackN : UInt<32>[1], flip itrackE : UInt<32>[1], otrackE : UInt<32>[1], flip itrackS : UInt<32>[1], otrackS : UInt<32>[1]}
    
    io.ipinNW[0] <= UInt<1>("h00") @[Interconnect.scala 426:20]
    io.ipinNE[0] <= UInt<1>("h00") @[Interconnect.scala 427:20]
    io.ipinSW[0] <= UInt<1>("h00") @[Interconnect.scala 428:20]
    io.ipinSW[1] <= UInt<1>("h00") @[Interconnect.scala 428:20]
    io.ipinSE[0] <= UInt<1>("h00") @[Interconnect.scala 429:20]
    io.ipinSE[1] <= UInt<1>("h00") @[Interconnect.scala 429:20]
    io.otrackW[0] <= UInt<1>("h00") @[Interconnect.scala 430:21]
    io.otrackN[0] <= UInt<1>("h00") @[Interconnect.scala 431:21]
    io.otrackE[0] <= UInt<1>("h00") @[Interconnect.scala 432:21]
    io.otrackS[0] <= UInt<1>("h00") @[Interconnect.scala 433:21]
    inst ConfigMem of ConfigMem_84 @[Interconnect.scala 463:21]
    ConfigMem.clock <= clock
    ConfigMem.reset <= reset
    node _T = bits(io.cfg_addr, 11, 2) @[Interconnect.scala 464:65]
    node _T_1 = eq(UInt<5>("h017"), _T) @[Interconnect.scala 464:50]
    node _T_2 = and(io.cfg_en, _T_1) @[Interconnect.scala 464:32]
    ConfigMem.io.cfg_en <= _T_2 @[Interconnect.scala 464:19]
    node _T_3 = bits(io.cfg_addr, 1, 0) @[Interconnect.scala 465:35]
    ConfigMem.io.cfg_addr <= _T_3 @[Interconnect.scala 465:21]
    ConfigMem.io.cfg_data <= io.cfg_data @[Interconnect.scala 466:21]
    inst Muxn of Muxn_181 @[Interconnect.scala 473:25]
    Muxn.clock <= clock
    Muxn.reset <= reset
    Muxn.io.in[0] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn.io.in[2] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNW[0] <= Muxn.io.out @[Interconnect.scala 479:45]
    node _T_4 = bits(ConfigMem.io.out[0], 1, 0) @[Interconnect.scala 483:39]
    Muxn.io.config <= _T_4 @[Interconnect.scala 483:23]
    inst Muxn_1 of Muxn_182 @[Interconnect.scala 473:25]
    Muxn_1.clock <= clock
    Muxn_1.reset <= reset
    Muxn_1.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNE[0] <= Muxn_1.io.out @[Interconnect.scala 479:45]
    node _T_5 = bits(ConfigMem.io.out[0], 3, 2) @[Interconnect.scala 483:39]
    Muxn_1.io.config <= _T_5 @[Interconnect.scala 483:23]
    inst Muxn_2 of Muxn_183 @[Interconnect.scala 473:25]
    Muxn_2.clock <= clock
    Muxn_2.reset <= reset
    Muxn_2.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[1] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    io.ipinSE[0] <= Muxn_2.io.out @[Interconnect.scala 479:45]
    node _T_6 = bits(ConfigMem.io.out[0], 5, 4) @[Interconnect.scala 483:39]
    Muxn_2.io.config <= _T_6 @[Interconnect.scala 483:23]
    inst Muxn_3 of Muxn_184 @[Interconnect.scala 473:25]
    Muxn_3.clock <= clock
    Muxn_3.reset <= reset
    Muxn_3.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[1] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    io.ipinSE[1] <= Muxn_3.io.out @[Interconnect.scala 479:45]
    node _T_7 = bits(ConfigMem.io.out[0], 7, 6) @[Interconnect.scala 483:39]
    Muxn_3.io.config <= _T_7 @[Interconnect.scala 483:23]
    inst Muxn_4 of Muxn_185 @[Interconnect.scala 473:25]
    Muxn_4.clock <= clock
    Muxn_4.reset <= reset
    Muxn_4.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[1] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    io.ipinSW[0] <= Muxn_4.io.out @[Interconnect.scala 479:45]
    node _T_8 = bits(ConfigMem.io.out[0], 9, 8) @[Interconnect.scala 483:39]
    Muxn_4.io.config <= _T_8 @[Interconnect.scala 483:23]
    inst Muxn_5 of Muxn_186 @[Interconnect.scala 473:25]
    Muxn_5.clock <= clock
    Muxn_5.reset <= reset
    Muxn_5.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[1] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    io.ipinSW[1] <= Muxn_5.io.out @[Interconnect.scala 479:45]
    node _T_9 = bits(ConfigMem.io.out[0], 11, 10) @[Interconnect.scala 483:39]
    Muxn_5.io.config <= _T_9 @[Interconnect.scala 483:23]
    inst Muxn_6 of Muxn_187 @[Interconnect.scala 473:25]
    Muxn_6.clock <= clock
    Muxn_6.reset <= reset
    Muxn_6.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[1] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.otrackW[0] <= Muxn_6.io.out @[Interconnect.scala 479:45]
    node _T_10 = bits(ConfigMem.io.out[0], 14, 12) @[Interconnect.scala 483:39]
    Muxn_6.io.config <= _T_10 @[Interconnect.scala 483:23]
    inst Muxn_7 of Muxn_188 @[Interconnect.scala 473:25]
    Muxn_7.clock <= clock
    Muxn_7.reset <= reset
    Muxn_7.io.in[0] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.otrackN[0] <= Muxn_7.io.out @[Interconnect.scala 479:45]
    node _T_11 = bits(ConfigMem.io.out[0], 17, 15) @[Interconnect.scala 483:39]
    Muxn_7.io.config <= _T_11 @[Interconnect.scala 483:23]
    inst Muxn_8 of Muxn_189 @[Interconnect.scala 473:25]
    Muxn_8.clock <= clock
    Muxn_8.reset <= reset
    Muxn_8.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.otrackE[0] <= Muxn_8.io.out @[Interconnect.scala 479:45]
    node _T_12 = bits(ConfigMem.io.out[0], 20, 18) @[Interconnect.scala 483:39]
    Muxn_8.io.config <= _T_12 @[Interconnect.scala 483:23]
    inst Muxn_9 of Muxn_190 @[Interconnect.scala 473:25]
    Muxn_9.clock <= clock
    Muxn_9.reset <= reset
    Muxn_9.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[1] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[4] <= io.itrackE[0] @[Interconnect.scala 475:63]
    io.otrackS[0] <= Muxn_9.io.out @[Interconnect.scala 479:45]
    node _T_13 = bits(ConfigMem.io.out[0], 23, 21) @[Interconnect.scala 483:39]
    Muxn_9.io.config <= _T_13 @[Interconnect.scala 483:23]
    
  module ConfigMem_85 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<0>, flip cfg_data : UInt<32>, out : UInt<24>[1]}
    
    wire _T : UInt<24>[1] @[ConfigMem.scala 27:29]
    _T[0] <= UInt<24>("h00") @[ConfigMem.scala 27:29]
    reg regs : UInt<24>[1], clock with : (reset => (reset, _T)) @[ConfigMem.scala 27:21]
    node _T_1 = eq(io.cfg_addr, UInt<1>("h00")) @[ConfigMem.scala 32:38]
    node _T_2 = and(io.cfg_en, _T_1) @[ConfigMem.scala 32:22]
    when _T_2 : @[ConfigMem.scala 32:54]
      node _T_3 = bits(io.cfg_data, 23, 0) @[ConfigMem.scala 33:31]
      regs[0] <= _T_3 @[ConfigMem.scala 33:17]
      skip @[ConfigMem.scala 32:54]
    io.out[0] <= regs[0] @[ConfigMem.scala 52:45]
    
  module Muxn_191 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_192 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_193 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_194 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_195 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_196 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_197 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_198 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_199 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_200 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module GIB_5 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<12>, flip cfg_data : UInt<32>, ipinNW : UInt<32>[1], flip opinNW : UInt<32>[1], ipinNE : UInt<32>[1], flip opinNE : UInt<32>[1], ipinSE : UInt<32>[2], flip opinSE : UInt<32>[1], ipinSW : UInt<32>[2], flip opinSW : UInt<32>[1], flip itrackW : UInt<32>[1], otrackW : UInt<32>[1], flip itrackN : UInt<32>[1], otrackN : UInt<32>[1], flip itrackE : UInt<32>[1], otrackE : UInt<32>[1], flip itrackS : UInt<32>[1], otrackS : UInt<32>[1]}
    
    io.ipinNW[0] <= UInt<1>("h00") @[Interconnect.scala 426:20]
    io.ipinNE[0] <= UInt<1>("h00") @[Interconnect.scala 427:20]
    io.ipinSW[0] <= UInt<1>("h00") @[Interconnect.scala 428:20]
    io.ipinSW[1] <= UInt<1>("h00") @[Interconnect.scala 428:20]
    io.ipinSE[0] <= UInt<1>("h00") @[Interconnect.scala 429:20]
    io.ipinSE[1] <= UInt<1>("h00") @[Interconnect.scala 429:20]
    io.otrackW[0] <= UInt<1>("h00") @[Interconnect.scala 430:21]
    io.otrackN[0] <= UInt<1>("h00") @[Interconnect.scala 431:21]
    io.otrackE[0] <= UInt<1>("h00") @[Interconnect.scala 432:21]
    io.otrackS[0] <= UInt<1>("h00") @[Interconnect.scala 433:21]
    inst ConfigMem of ConfigMem_85 @[Interconnect.scala 463:21]
    ConfigMem.clock <= clock
    ConfigMem.reset <= reset
    node _T = bits(io.cfg_addr, 11, 2) @[Interconnect.scala 464:65]
    node _T_1 = eq(UInt<5>("h018"), _T) @[Interconnect.scala 464:50]
    node _T_2 = and(io.cfg_en, _T_1) @[Interconnect.scala 464:32]
    ConfigMem.io.cfg_en <= _T_2 @[Interconnect.scala 464:19]
    node _T_3 = bits(io.cfg_addr, 1, 0) @[Interconnect.scala 465:35]
    ConfigMem.io.cfg_addr <= _T_3 @[Interconnect.scala 465:21]
    ConfigMem.io.cfg_data <= io.cfg_data @[Interconnect.scala 466:21]
    inst Muxn of Muxn_191 @[Interconnect.scala 473:25]
    Muxn.clock <= clock
    Muxn.reset <= reset
    Muxn.io.in[0] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn.io.in[2] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNW[0] <= Muxn.io.out @[Interconnect.scala 479:45]
    node _T_4 = bits(ConfigMem.io.out[0], 1, 0) @[Interconnect.scala 483:39]
    Muxn.io.config <= _T_4 @[Interconnect.scala 483:23]
    inst Muxn_1 of Muxn_192 @[Interconnect.scala 473:25]
    Muxn_1.clock <= clock
    Muxn_1.reset <= reset
    Muxn_1.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNE[0] <= Muxn_1.io.out @[Interconnect.scala 479:45]
    node _T_5 = bits(ConfigMem.io.out[0], 3, 2) @[Interconnect.scala 483:39]
    Muxn_1.io.config <= _T_5 @[Interconnect.scala 483:23]
    inst Muxn_2 of Muxn_193 @[Interconnect.scala 473:25]
    Muxn_2.clock <= clock
    Muxn_2.reset <= reset
    Muxn_2.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[1] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    io.ipinSE[0] <= Muxn_2.io.out @[Interconnect.scala 479:45]
    node _T_6 = bits(ConfigMem.io.out[0], 5, 4) @[Interconnect.scala 483:39]
    Muxn_2.io.config <= _T_6 @[Interconnect.scala 483:23]
    inst Muxn_3 of Muxn_194 @[Interconnect.scala 473:25]
    Muxn_3.clock <= clock
    Muxn_3.reset <= reset
    Muxn_3.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[1] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    io.ipinSE[1] <= Muxn_3.io.out @[Interconnect.scala 479:45]
    node _T_7 = bits(ConfigMem.io.out[0], 7, 6) @[Interconnect.scala 483:39]
    Muxn_3.io.config <= _T_7 @[Interconnect.scala 483:23]
    inst Muxn_4 of Muxn_195 @[Interconnect.scala 473:25]
    Muxn_4.clock <= clock
    Muxn_4.reset <= reset
    Muxn_4.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[1] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    io.ipinSW[0] <= Muxn_4.io.out @[Interconnect.scala 479:45]
    node _T_8 = bits(ConfigMem.io.out[0], 9, 8) @[Interconnect.scala 483:39]
    Muxn_4.io.config <= _T_8 @[Interconnect.scala 483:23]
    inst Muxn_5 of Muxn_196 @[Interconnect.scala 473:25]
    Muxn_5.clock <= clock
    Muxn_5.reset <= reset
    Muxn_5.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[1] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    io.ipinSW[1] <= Muxn_5.io.out @[Interconnect.scala 479:45]
    node _T_9 = bits(ConfigMem.io.out[0], 11, 10) @[Interconnect.scala 483:39]
    Muxn_5.io.config <= _T_9 @[Interconnect.scala 483:23]
    inst Muxn_6 of Muxn_197 @[Interconnect.scala 473:25]
    Muxn_6.clock <= clock
    Muxn_6.reset <= reset
    Muxn_6.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[1] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    reg _T_10 : UInt, clock @[Interconnect.scala 477:55]
    _T_10 <= Muxn_6.io.out @[Interconnect.scala 477:55]
    io.otrackW[0] <= _T_10 @[Interconnect.scala 477:45]
    node _T_11 = bits(ConfigMem.io.out[0], 14, 12) @[Interconnect.scala 483:39]
    Muxn_6.io.config <= _T_11 @[Interconnect.scala 483:23]
    inst Muxn_7 of Muxn_198 @[Interconnect.scala 473:25]
    Muxn_7.clock <= clock
    Muxn_7.reset <= reset
    Muxn_7.io.in[0] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    reg _T_12 : UInt, clock @[Interconnect.scala 477:55]
    _T_12 <= Muxn_7.io.out @[Interconnect.scala 477:55]
    io.otrackN[0] <= _T_12 @[Interconnect.scala 477:45]
    node _T_13 = bits(ConfigMem.io.out[0], 17, 15) @[Interconnect.scala 483:39]
    Muxn_7.io.config <= _T_13 @[Interconnect.scala 483:23]
    inst Muxn_8 of Muxn_199 @[Interconnect.scala 473:25]
    Muxn_8.clock <= clock
    Muxn_8.reset <= reset
    Muxn_8.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    reg _T_14 : UInt, clock @[Interconnect.scala 477:55]
    _T_14 <= Muxn_8.io.out @[Interconnect.scala 477:55]
    io.otrackE[0] <= _T_14 @[Interconnect.scala 477:45]
    node _T_15 = bits(ConfigMem.io.out[0], 20, 18) @[Interconnect.scala 483:39]
    Muxn_8.io.config <= _T_15 @[Interconnect.scala 483:23]
    inst Muxn_9 of Muxn_200 @[Interconnect.scala 473:25]
    Muxn_9.clock <= clock
    Muxn_9.reset <= reset
    Muxn_9.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[1] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[4] <= io.itrackE[0] @[Interconnect.scala 475:63]
    reg _T_16 : UInt, clock @[Interconnect.scala 477:55]
    _T_16 <= Muxn_9.io.out @[Interconnect.scala 477:55]
    io.otrackS[0] <= _T_16 @[Interconnect.scala 477:45]
    node _T_17 = bits(ConfigMem.io.out[0], 23, 21) @[Interconnect.scala 483:39]
    Muxn_9.io.config <= _T_17 @[Interconnect.scala 483:23]
    
  module ConfigMem_86 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<0>, flip cfg_data : UInt<32>, out : UInt<24>[1]}
    
    wire _T : UInt<24>[1] @[ConfigMem.scala 27:29]
    _T[0] <= UInt<24>("h00") @[ConfigMem.scala 27:29]
    reg regs : UInt<24>[1], clock with : (reset => (reset, _T)) @[ConfigMem.scala 27:21]
    node _T_1 = eq(io.cfg_addr, UInt<1>("h00")) @[ConfigMem.scala 32:38]
    node _T_2 = and(io.cfg_en, _T_1) @[ConfigMem.scala 32:22]
    when _T_2 : @[ConfigMem.scala 32:54]
      node _T_3 = bits(io.cfg_data, 23, 0) @[ConfigMem.scala 33:31]
      regs[0] <= _T_3 @[ConfigMem.scala 33:17]
      skip @[ConfigMem.scala 32:54]
    io.out[0] <= regs[0] @[ConfigMem.scala 52:45]
    
  module Muxn_201 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_202 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_203 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_204 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_205 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_206 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_207 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_208 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_209 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_210 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module GIB_6 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<12>, flip cfg_data : UInt<32>, ipinNW : UInt<32>[1], flip opinNW : UInt<32>[1], ipinNE : UInt<32>[1], flip opinNE : UInt<32>[1], ipinSE : UInt<32>[2], flip opinSE : UInt<32>[1], ipinSW : UInt<32>[2], flip opinSW : UInt<32>[1], flip itrackW : UInt<32>[1], otrackW : UInt<32>[1], flip itrackN : UInt<32>[1], otrackN : UInt<32>[1], flip itrackE : UInt<32>[1], otrackE : UInt<32>[1], flip itrackS : UInt<32>[1], otrackS : UInt<32>[1]}
    
    io.ipinNW[0] <= UInt<1>("h00") @[Interconnect.scala 426:20]
    io.ipinNE[0] <= UInt<1>("h00") @[Interconnect.scala 427:20]
    io.ipinSW[0] <= UInt<1>("h00") @[Interconnect.scala 428:20]
    io.ipinSW[1] <= UInt<1>("h00") @[Interconnect.scala 428:20]
    io.ipinSE[0] <= UInt<1>("h00") @[Interconnect.scala 429:20]
    io.ipinSE[1] <= UInt<1>("h00") @[Interconnect.scala 429:20]
    io.otrackW[0] <= UInt<1>("h00") @[Interconnect.scala 430:21]
    io.otrackN[0] <= UInt<1>("h00") @[Interconnect.scala 431:21]
    io.otrackE[0] <= UInt<1>("h00") @[Interconnect.scala 432:21]
    io.otrackS[0] <= UInt<1>("h00") @[Interconnect.scala 433:21]
    inst ConfigMem of ConfigMem_86 @[Interconnect.scala 463:21]
    ConfigMem.clock <= clock
    ConfigMem.reset <= reset
    node _T = bits(io.cfg_addr, 11, 2) @[Interconnect.scala 464:65]
    node _T_1 = eq(UInt<5>("h019"), _T) @[Interconnect.scala 464:50]
    node _T_2 = and(io.cfg_en, _T_1) @[Interconnect.scala 464:32]
    ConfigMem.io.cfg_en <= _T_2 @[Interconnect.scala 464:19]
    node _T_3 = bits(io.cfg_addr, 1, 0) @[Interconnect.scala 465:35]
    ConfigMem.io.cfg_addr <= _T_3 @[Interconnect.scala 465:21]
    ConfigMem.io.cfg_data <= io.cfg_data @[Interconnect.scala 466:21]
    inst Muxn of Muxn_201 @[Interconnect.scala 473:25]
    Muxn.clock <= clock
    Muxn.reset <= reset
    Muxn.io.in[0] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn.io.in[2] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNW[0] <= Muxn.io.out @[Interconnect.scala 479:45]
    node _T_4 = bits(ConfigMem.io.out[0], 1, 0) @[Interconnect.scala 483:39]
    Muxn.io.config <= _T_4 @[Interconnect.scala 483:23]
    inst Muxn_1 of Muxn_202 @[Interconnect.scala 473:25]
    Muxn_1.clock <= clock
    Muxn_1.reset <= reset
    Muxn_1.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNE[0] <= Muxn_1.io.out @[Interconnect.scala 479:45]
    node _T_5 = bits(ConfigMem.io.out[0], 3, 2) @[Interconnect.scala 483:39]
    Muxn_1.io.config <= _T_5 @[Interconnect.scala 483:23]
    inst Muxn_2 of Muxn_203 @[Interconnect.scala 473:25]
    Muxn_2.clock <= clock
    Muxn_2.reset <= reset
    Muxn_2.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[1] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    io.ipinSE[0] <= Muxn_2.io.out @[Interconnect.scala 479:45]
    node _T_6 = bits(ConfigMem.io.out[0], 5, 4) @[Interconnect.scala 483:39]
    Muxn_2.io.config <= _T_6 @[Interconnect.scala 483:23]
    inst Muxn_3 of Muxn_204 @[Interconnect.scala 473:25]
    Muxn_3.clock <= clock
    Muxn_3.reset <= reset
    Muxn_3.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[1] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    io.ipinSE[1] <= Muxn_3.io.out @[Interconnect.scala 479:45]
    node _T_7 = bits(ConfigMem.io.out[0], 7, 6) @[Interconnect.scala 483:39]
    Muxn_3.io.config <= _T_7 @[Interconnect.scala 483:23]
    inst Muxn_4 of Muxn_205 @[Interconnect.scala 473:25]
    Muxn_4.clock <= clock
    Muxn_4.reset <= reset
    Muxn_4.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[1] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    io.ipinSW[0] <= Muxn_4.io.out @[Interconnect.scala 479:45]
    node _T_8 = bits(ConfigMem.io.out[0], 9, 8) @[Interconnect.scala 483:39]
    Muxn_4.io.config <= _T_8 @[Interconnect.scala 483:23]
    inst Muxn_5 of Muxn_206 @[Interconnect.scala 473:25]
    Muxn_5.clock <= clock
    Muxn_5.reset <= reset
    Muxn_5.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[1] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    io.ipinSW[1] <= Muxn_5.io.out @[Interconnect.scala 479:45]
    node _T_9 = bits(ConfigMem.io.out[0], 11, 10) @[Interconnect.scala 483:39]
    Muxn_5.io.config <= _T_9 @[Interconnect.scala 483:23]
    inst Muxn_6 of Muxn_207 @[Interconnect.scala 473:25]
    Muxn_6.clock <= clock
    Muxn_6.reset <= reset
    Muxn_6.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[1] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.otrackW[0] <= Muxn_6.io.out @[Interconnect.scala 479:45]
    node _T_10 = bits(ConfigMem.io.out[0], 14, 12) @[Interconnect.scala 483:39]
    Muxn_6.io.config <= _T_10 @[Interconnect.scala 483:23]
    inst Muxn_7 of Muxn_208 @[Interconnect.scala 473:25]
    Muxn_7.clock <= clock
    Muxn_7.reset <= reset
    Muxn_7.io.in[0] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.otrackN[0] <= Muxn_7.io.out @[Interconnect.scala 479:45]
    node _T_11 = bits(ConfigMem.io.out[0], 17, 15) @[Interconnect.scala 483:39]
    Muxn_7.io.config <= _T_11 @[Interconnect.scala 483:23]
    inst Muxn_8 of Muxn_209 @[Interconnect.scala 473:25]
    Muxn_8.clock <= clock
    Muxn_8.reset <= reset
    Muxn_8.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.otrackE[0] <= Muxn_8.io.out @[Interconnect.scala 479:45]
    node _T_12 = bits(ConfigMem.io.out[0], 20, 18) @[Interconnect.scala 483:39]
    Muxn_8.io.config <= _T_12 @[Interconnect.scala 483:23]
    inst Muxn_9 of Muxn_210 @[Interconnect.scala 473:25]
    Muxn_9.clock <= clock
    Muxn_9.reset <= reset
    Muxn_9.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[1] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[4] <= io.itrackE[0] @[Interconnect.scala 475:63]
    io.otrackS[0] <= Muxn_9.io.out @[Interconnect.scala 479:45]
    node _T_13 = bits(ConfigMem.io.out[0], 23, 21) @[Interconnect.scala 483:39]
    Muxn_9.io.config <= _T_13 @[Interconnect.scala 483:23]
    
  module ConfigMem_87 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<0>, flip cfg_data : UInt<32>, out : UInt<24>[1]}
    
    wire _T : UInt<24>[1] @[ConfigMem.scala 27:29]
    _T[0] <= UInt<24>("h00") @[ConfigMem.scala 27:29]
    reg regs : UInt<24>[1], clock with : (reset => (reset, _T)) @[ConfigMem.scala 27:21]
    node _T_1 = eq(io.cfg_addr, UInt<1>("h00")) @[ConfigMem.scala 32:38]
    node _T_2 = and(io.cfg_en, _T_1) @[ConfigMem.scala 32:22]
    when _T_2 : @[ConfigMem.scala 32:54]
      node _T_3 = bits(io.cfg_data, 23, 0) @[ConfigMem.scala 33:31]
      regs[0] <= _T_3 @[ConfigMem.scala 33:17]
      skip @[ConfigMem.scala 32:54]
    io.out[0] <= regs[0] @[ConfigMem.scala 52:45]
    
  module Muxn_211 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_212 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_213 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_214 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_215 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_216 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_217 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_218 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_219 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_220 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module GIB_7 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<12>, flip cfg_data : UInt<32>, ipinNW : UInt<32>[1], flip opinNW : UInt<32>[1], ipinNE : UInt<32>[1], flip opinNE : UInt<32>[1], ipinSE : UInt<32>[2], flip opinSE : UInt<32>[1], ipinSW : UInt<32>[2], flip opinSW : UInt<32>[1], flip itrackW : UInt<32>[1], otrackW : UInt<32>[1], flip itrackN : UInt<32>[1], otrackN : UInt<32>[1], flip itrackE : UInt<32>[1], otrackE : UInt<32>[1], flip itrackS : UInt<32>[1], otrackS : UInt<32>[1]}
    
    io.ipinNW[0] <= UInt<1>("h00") @[Interconnect.scala 426:20]
    io.ipinNE[0] <= UInt<1>("h00") @[Interconnect.scala 427:20]
    io.ipinSW[0] <= UInt<1>("h00") @[Interconnect.scala 428:20]
    io.ipinSW[1] <= UInt<1>("h00") @[Interconnect.scala 428:20]
    io.ipinSE[0] <= UInt<1>("h00") @[Interconnect.scala 429:20]
    io.ipinSE[1] <= UInt<1>("h00") @[Interconnect.scala 429:20]
    io.otrackW[0] <= UInt<1>("h00") @[Interconnect.scala 430:21]
    io.otrackN[0] <= UInt<1>("h00") @[Interconnect.scala 431:21]
    io.otrackE[0] <= UInt<1>("h00") @[Interconnect.scala 432:21]
    io.otrackS[0] <= UInt<1>("h00") @[Interconnect.scala 433:21]
    inst ConfigMem of ConfigMem_87 @[Interconnect.scala 463:21]
    ConfigMem.clock <= clock
    ConfigMem.reset <= reset
    node _T = bits(io.cfg_addr, 11, 2) @[Interconnect.scala 464:65]
    node _T_1 = eq(UInt<5>("h01a"), _T) @[Interconnect.scala 464:50]
    node _T_2 = and(io.cfg_en, _T_1) @[Interconnect.scala 464:32]
    ConfigMem.io.cfg_en <= _T_2 @[Interconnect.scala 464:19]
    node _T_3 = bits(io.cfg_addr, 1, 0) @[Interconnect.scala 465:35]
    ConfigMem.io.cfg_addr <= _T_3 @[Interconnect.scala 465:21]
    ConfigMem.io.cfg_data <= io.cfg_data @[Interconnect.scala 466:21]
    inst Muxn of Muxn_211 @[Interconnect.scala 473:25]
    Muxn.clock <= clock
    Muxn.reset <= reset
    Muxn.io.in[0] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn.io.in[2] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNW[0] <= Muxn.io.out @[Interconnect.scala 479:45]
    node _T_4 = bits(ConfigMem.io.out[0], 1, 0) @[Interconnect.scala 483:39]
    Muxn.io.config <= _T_4 @[Interconnect.scala 483:23]
    inst Muxn_1 of Muxn_212 @[Interconnect.scala 473:25]
    Muxn_1.clock <= clock
    Muxn_1.reset <= reset
    Muxn_1.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNE[0] <= Muxn_1.io.out @[Interconnect.scala 479:45]
    node _T_5 = bits(ConfigMem.io.out[0], 3, 2) @[Interconnect.scala 483:39]
    Muxn_1.io.config <= _T_5 @[Interconnect.scala 483:23]
    inst Muxn_2 of Muxn_213 @[Interconnect.scala 473:25]
    Muxn_2.clock <= clock
    Muxn_2.reset <= reset
    Muxn_2.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[1] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    io.ipinSE[0] <= Muxn_2.io.out @[Interconnect.scala 479:45]
    node _T_6 = bits(ConfigMem.io.out[0], 5, 4) @[Interconnect.scala 483:39]
    Muxn_2.io.config <= _T_6 @[Interconnect.scala 483:23]
    inst Muxn_3 of Muxn_214 @[Interconnect.scala 473:25]
    Muxn_3.clock <= clock
    Muxn_3.reset <= reset
    Muxn_3.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[1] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    io.ipinSE[1] <= Muxn_3.io.out @[Interconnect.scala 479:45]
    node _T_7 = bits(ConfigMem.io.out[0], 7, 6) @[Interconnect.scala 483:39]
    Muxn_3.io.config <= _T_7 @[Interconnect.scala 483:23]
    inst Muxn_4 of Muxn_215 @[Interconnect.scala 473:25]
    Muxn_4.clock <= clock
    Muxn_4.reset <= reset
    Muxn_4.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[1] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    io.ipinSW[0] <= Muxn_4.io.out @[Interconnect.scala 479:45]
    node _T_8 = bits(ConfigMem.io.out[0], 9, 8) @[Interconnect.scala 483:39]
    Muxn_4.io.config <= _T_8 @[Interconnect.scala 483:23]
    inst Muxn_5 of Muxn_216 @[Interconnect.scala 473:25]
    Muxn_5.clock <= clock
    Muxn_5.reset <= reset
    Muxn_5.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[1] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    io.ipinSW[1] <= Muxn_5.io.out @[Interconnect.scala 479:45]
    node _T_9 = bits(ConfigMem.io.out[0], 11, 10) @[Interconnect.scala 483:39]
    Muxn_5.io.config <= _T_9 @[Interconnect.scala 483:23]
    inst Muxn_6 of Muxn_217 @[Interconnect.scala 473:25]
    Muxn_6.clock <= clock
    Muxn_6.reset <= reset
    Muxn_6.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[1] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    reg _T_10 : UInt, clock @[Interconnect.scala 477:55]
    _T_10 <= Muxn_6.io.out @[Interconnect.scala 477:55]
    io.otrackW[0] <= _T_10 @[Interconnect.scala 477:45]
    node _T_11 = bits(ConfigMem.io.out[0], 14, 12) @[Interconnect.scala 483:39]
    Muxn_6.io.config <= _T_11 @[Interconnect.scala 483:23]
    inst Muxn_7 of Muxn_218 @[Interconnect.scala 473:25]
    Muxn_7.clock <= clock
    Muxn_7.reset <= reset
    Muxn_7.io.in[0] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    reg _T_12 : UInt, clock @[Interconnect.scala 477:55]
    _T_12 <= Muxn_7.io.out @[Interconnect.scala 477:55]
    io.otrackN[0] <= _T_12 @[Interconnect.scala 477:45]
    node _T_13 = bits(ConfigMem.io.out[0], 17, 15) @[Interconnect.scala 483:39]
    Muxn_7.io.config <= _T_13 @[Interconnect.scala 483:23]
    inst Muxn_8 of Muxn_219 @[Interconnect.scala 473:25]
    Muxn_8.clock <= clock
    Muxn_8.reset <= reset
    Muxn_8.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    reg _T_14 : UInt, clock @[Interconnect.scala 477:55]
    _T_14 <= Muxn_8.io.out @[Interconnect.scala 477:55]
    io.otrackE[0] <= _T_14 @[Interconnect.scala 477:45]
    node _T_15 = bits(ConfigMem.io.out[0], 20, 18) @[Interconnect.scala 483:39]
    Muxn_8.io.config <= _T_15 @[Interconnect.scala 483:23]
    inst Muxn_9 of Muxn_220 @[Interconnect.scala 473:25]
    Muxn_9.clock <= clock
    Muxn_9.reset <= reset
    Muxn_9.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[1] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[4] <= io.itrackE[0] @[Interconnect.scala 475:63]
    reg _T_16 : UInt, clock @[Interconnect.scala 477:55]
    _T_16 <= Muxn_9.io.out @[Interconnect.scala 477:55]
    io.otrackS[0] <= _T_16 @[Interconnect.scala 477:45]
    node _T_17 = bits(ConfigMem.io.out[0], 23, 21) @[Interconnect.scala 483:39]
    Muxn_9.io.config <= _T_17 @[Interconnect.scala 483:23]
    
  module ConfigMem_88 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<0>, flip cfg_data : UInt<32>, out : UInt<13>[1]}
    
    wire _T : UInt<13>[1] @[ConfigMem.scala 27:29]
    _T[0] <= UInt<13>("h00") @[ConfigMem.scala 27:29]
    reg regs : UInt<13>[1], clock with : (reset => (reset, _T)) @[ConfigMem.scala 27:21]
    node _T_1 = eq(io.cfg_addr, UInt<1>("h00")) @[ConfigMem.scala 32:38]
    node _T_2 = and(io.cfg_en, _T_1) @[ConfigMem.scala 32:22]
    when _T_2 : @[ConfigMem.scala 32:54]
      node _T_3 = bits(io.cfg_data, 12, 0) @[ConfigMem.scala 33:31]
      regs[0] <= _T_3 @[ConfigMem.scala 33:17]
      skip @[ConfigMem.scala 32:54]
    io.out[0] <= regs[0] @[ConfigMem.scala 52:45]
    
  module Muxn_221 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[3], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_222 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<1>, flip in : UInt<32>[2], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    io.out <= _T_1 @[Multiplexer.scala 20:10]
    
  module Muxn_223 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<1>, flip in : UInt<32>[2], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    io.out <= _T_1 @[Multiplexer.scala 20:10]
    
  module Muxn_224 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[3], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_225 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_226 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_227 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module GIB_8 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<12>, flip cfg_data : UInt<32>, ipinNW : UInt<32>[1], flip opinNW : UInt<32>[1], ipinNE : UInt<32>[0], flip opinNE : UInt<32>[0], ipinSE : UInt<32>[0], flip opinSE : UInt<32>[0], ipinSW : UInt<32>[2], flip opinSW : UInt<32>[1], flip itrackW : UInt<32>[1], otrackW : UInt<32>[1], flip itrackN : UInt<32>[1], otrackN : UInt<32>[1], flip itrackE : UInt<32>[1], otrackE : UInt<32>[1], flip itrackS : UInt<32>[1], otrackS : UInt<32>[1]}
    
    io.ipinNW[0] <= UInt<1>("h00") @[Interconnect.scala 426:20]
    io.ipinSW[0] <= UInt<1>("h00") @[Interconnect.scala 428:20]
    io.ipinSW[1] <= UInt<1>("h00") @[Interconnect.scala 428:20]
    io.otrackW[0] <= UInt<1>("h00") @[Interconnect.scala 430:21]
    io.otrackN[0] <= UInt<1>("h00") @[Interconnect.scala 431:21]
    io.otrackE[0] <= UInt<1>("h00") @[Interconnect.scala 432:21]
    io.otrackS[0] <= UInt<1>("h00") @[Interconnect.scala 433:21]
    inst ConfigMem of ConfigMem_88 @[Interconnect.scala 463:21]
    ConfigMem.clock <= clock
    ConfigMem.reset <= reset
    node _T = bits(io.cfg_addr, 11, 2) @[Interconnect.scala 464:65]
    node _T_1 = eq(UInt<5>("h01b"), _T) @[Interconnect.scala 464:50]
    node _T_2 = and(io.cfg_en, _T_1) @[Interconnect.scala 464:32]
    ConfigMem.io.cfg_en <= _T_2 @[Interconnect.scala 464:19]
    node _T_3 = bits(io.cfg_addr, 1, 0) @[Interconnect.scala 465:35]
    ConfigMem.io.cfg_addr <= _T_3 @[Interconnect.scala 465:21]
    ConfigMem.io.cfg_data <= io.cfg_data @[Interconnect.scala 466:21]
    inst Muxn of Muxn_221 @[Interconnect.scala 473:25]
    Muxn.clock <= clock
    Muxn.reset <= reset
    Muxn.io.in[0] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn.io.in[1] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn.io.in[2] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNW[0] <= Muxn.io.out @[Interconnect.scala 479:45]
    node _T_4 = bits(ConfigMem.io.out[0], 1, 0) @[Interconnect.scala 483:39]
    Muxn.io.config <= _T_4 @[Interconnect.scala 483:23]
    inst Muxn_1 of Muxn_222 @[Interconnect.scala 473:25]
    Muxn_1.clock <= clock
    Muxn_1.reset <= reset
    Muxn_1.io.in[0] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[1] <= io.itrackE[0] @[Interconnect.scala 475:63]
    io.ipinSW[0] <= Muxn_1.io.out @[Interconnect.scala 479:45]
    node _T_5 = bits(ConfigMem.io.out[0], 2, 2) @[Interconnect.scala 483:39]
    Muxn_1.io.config <= _T_5 @[Interconnect.scala 483:23]
    inst Muxn_2 of Muxn_223 @[Interconnect.scala 473:25]
    Muxn_2.clock <= clock
    Muxn_2.reset <= reset
    Muxn_2.io.in[0] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[1] <= io.itrackE[0] @[Interconnect.scala 475:63]
    io.ipinSW[1] <= Muxn_2.io.out @[Interconnect.scala 479:45]
    node _T_6 = bits(ConfigMem.io.out[0], 3, 3) @[Interconnect.scala 483:39]
    Muxn_2.io.config <= _T_6 @[Interconnect.scala 483:23]
    inst Muxn_3 of Muxn_224 @[Interconnect.scala 473:25]
    Muxn_3.clock <= clock
    Muxn_3.reset <= reset
    Muxn_3.io.in[0] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[1] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[2] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.otrackW[0] <= Muxn_3.io.out @[Interconnect.scala 479:45]
    node _T_7 = bits(ConfigMem.io.out[0], 5, 4) @[Interconnect.scala 483:39]
    Muxn_3.io.config <= _T_7 @[Interconnect.scala 483:23]
    inst Muxn_4 of Muxn_225 @[Interconnect.scala 473:25]
    Muxn_4.clock <= clock
    Muxn_4.reset <= reset
    Muxn_4.io.in[0] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[1] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[2] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.otrackN[0] <= Muxn_4.io.out @[Interconnect.scala 479:45]
    node _T_8 = bits(ConfigMem.io.out[0], 7, 6) @[Interconnect.scala 483:39]
    Muxn_4.io.config <= _T_8 @[Interconnect.scala 483:23]
    inst Muxn_5 of Muxn_226 @[Interconnect.scala 473:25]
    Muxn_5.clock <= clock
    Muxn_5.reset <= reset
    Muxn_5.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.otrackE[0] <= Muxn_5.io.out @[Interconnect.scala 479:45]
    node _T_9 = bits(ConfigMem.io.out[0], 10, 8) @[Interconnect.scala 483:39]
    Muxn_5.io.config <= _T_9 @[Interconnect.scala 483:23]
    inst Muxn_6 of Muxn_227 @[Interconnect.scala 473:25]
    Muxn_6.clock <= clock
    Muxn_6.reset <= reset
    Muxn_6.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[1] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    io.otrackS[0] <= Muxn_6.io.out @[Interconnect.scala 479:45]
    node _T_10 = bits(ConfigMem.io.out[0], 12, 11) @[Interconnect.scala 483:39]
    Muxn_6.io.config <= _T_10 @[Interconnect.scala 483:23]
    
  module ConfigMem_89 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<0>, flip cfg_data : UInt<32>, out : UInt<15>[1]}
    
    wire _T : UInt<15>[1] @[ConfigMem.scala 27:29]
    _T[0] <= UInt<15>("h00") @[ConfigMem.scala 27:29]
    reg regs : UInt<15>[1], clock with : (reset => (reset, _T)) @[ConfigMem.scala 27:21]
    node _T_1 = eq(io.cfg_addr, UInt<1>("h00")) @[ConfigMem.scala 32:38]
    node _T_2 = and(io.cfg_en, _T_1) @[ConfigMem.scala 32:22]
    when _T_2 : @[ConfigMem.scala 32:54]
      node _T_3 = bits(io.cfg_data, 14, 0) @[ConfigMem.scala 33:31]
      regs[0] <= _T_3 @[ConfigMem.scala 33:17]
      skip @[ConfigMem.scala 32:54]
    io.out[0] <= regs[0] @[ConfigMem.scala 52:45]
    
  module Muxn_228 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<1>, flip in : UInt<32>[2], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    io.out <= _T_1 @[Multiplexer.scala 20:10]
    
  module Muxn_229 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<1>, flip in : UInt<32>[2], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    io.out <= _T_1 @[Multiplexer.scala 20:10]
    
  module Muxn_230 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[3], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_231 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[3], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_232 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_233 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_234 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[3], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_235 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module GIB_9 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<12>, flip cfg_data : UInt<32>, ipinNW : UInt<32>[0], flip opinNW : UInt<32>[0], ipinNE : UInt<32>[2], flip opinNE : UInt<32>[1], ipinSE : UInt<32>[2], flip opinSE : UInt<32>[1], ipinSW : UInt<32>[0], flip opinSW : UInt<32>[0], flip itrackW : UInt<32>[1], otrackW : UInt<32>[1], flip itrackN : UInt<32>[1], otrackN : UInt<32>[1], flip itrackE : UInt<32>[1], otrackE : UInt<32>[1], flip itrackS : UInt<32>[1], otrackS : UInt<32>[1]}
    
    io.ipinNE[0] <= UInt<1>("h00") @[Interconnect.scala 427:20]
    io.ipinNE[1] <= UInt<1>("h00") @[Interconnect.scala 427:20]
    io.ipinSE[0] <= UInt<1>("h00") @[Interconnect.scala 429:20]
    io.ipinSE[1] <= UInt<1>("h00") @[Interconnect.scala 429:20]
    io.otrackW[0] <= UInt<1>("h00") @[Interconnect.scala 430:21]
    io.otrackN[0] <= UInt<1>("h00") @[Interconnect.scala 431:21]
    io.otrackE[0] <= UInt<1>("h00") @[Interconnect.scala 432:21]
    io.otrackS[0] <= UInt<1>("h00") @[Interconnect.scala 433:21]
    inst ConfigMem of ConfigMem_89 @[Interconnect.scala 463:21]
    ConfigMem.clock <= clock
    ConfigMem.reset <= reset
    node _T = bits(io.cfg_addr, 11, 2) @[Interconnect.scala 464:65]
    node _T_1 = eq(UInt<6>("h025"), _T) @[Interconnect.scala 464:50]
    node _T_2 = and(io.cfg_en, _T_1) @[Interconnect.scala 464:32]
    ConfigMem.io.cfg_en <= _T_2 @[Interconnect.scala 464:19]
    node _T_3 = bits(io.cfg_addr, 1, 0) @[Interconnect.scala 465:35]
    ConfigMem.io.cfg_addr <= _T_3 @[Interconnect.scala 465:21]
    ConfigMem.io.cfg_data <= io.cfg_data @[Interconnect.scala 466:21]
    inst Muxn of Muxn_228 @[Interconnect.scala 473:25]
    Muxn.clock <= clock
    Muxn.reset <= reset
    Muxn.io.in[0] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn.io.in[1] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNE[0] <= Muxn.io.out @[Interconnect.scala 479:45]
    node _T_4 = bits(ConfigMem.io.out[0], 0, 0) @[Interconnect.scala 483:39]
    Muxn.io.config <= _T_4 @[Interconnect.scala 483:23]
    inst Muxn_1 of Muxn_229 @[Interconnect.scala 473:25]
    Muxn_1.clock <= clock
    Muxn_1.reset <= reset
    Muxn_1.io.in[0] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[1] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNE[1] <= Muxn_1.io.out @[Interconnect.scala 479:45]
    node _T_5 = bits(ConfigMem.io.out[0], 1, 1) @[Interconnect.scala 483:39]
    Muxn_1.io.config <= _T_5 @[Interconnect.scala 483:23]
    inst Muxn_2 of Muxn_230 @[Interconnect.scala 473:25]
    Muxn_2.clock <= clock
    Muxn_2.reset <= reset
    Muxn_2.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[1] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    io.ipinSE[0] <= Muxn_2.io.out @[Interconnect.scala 479:45]
    node _T_6 = bits(ConfigMem.io.out[0], 3, 2) @[Interconnect.scala 483:39]
    Muxn_2.io.config <= _T_6 @[Interconnect.scala 483:23]
    inst Muxn_3 of Muxn_231 @[Interconnect.scala 473:25]
    Muxn_3.clock <= clock
    Muxn_3.reset <= reset
    Muxn_3.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[1] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    io.ipinSE[1] <= Muxn_3.io.out @[Interconnect.scala 479:45]
    node _T_7 = bits(ConfigMem.io.out[0], 5, 4) @[Interconnect.scala 483:39]
    Muxn_3.io.config <= _T_7 @[Interconnect.scala 483:23]
    inst Muxn_4 of Muxn_232 @[Interconnect.scala 473:25]
    Muxn_4.clock <= clock
    Muxn_4.reset <= reset
    Muxn_4.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[1] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    reg _T_8 : UInt, clock @[Interconnect.scala 477:55]
    _T_8 <= Muxn_4.io.out @[Interconnect.scala 477:55]
    io.otrackW[0] <= _T_8 @[Interconnect.scala 477:45]
    node _T_9 = bits(ConfigMem.io.out[0], 8, 6) @[Interconnect.scala 483:39]
    Muxn_4.io.config <= _T_9 @[Interconnect.scala 483:23]
    inst Muxn_5 of Muxn_233 @[Interconnect.scala 473:25]
    Muxn_5.clock <= clock
    Muxn_5.reset <= reset
    Muxn_5.io.in[0] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[1] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[2] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    reg _T_10 : UInt, clock @[Interconnect.scala 477:55]
    _T_10 <= Muxn_5.io.out @[Interconnect.scala 477:55]
    io.otrackN[0] <= _T_10 @[Interconnect.scala 477:45]
    node _T_11 = bits(ConfigMem.io.out[0], 10, 9) @[Interconnect.scala 483:39]
    Muxn_5.io.config <= _T_11 @[Interconnect.scala 483:23]
    inst Muxn_6 of Muxn_234 @[Interconnect.scala 473:25]
    Muxn_6.clock <= clock
    Muxn_6.reset <= reset
    Muxn_6.io.in[0] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[1] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[2] <= io.itrackS[0] @[Interconnect.scala 475:63]
    reg _T_12 : UInt, clock @[Interconnect.scala 477:55]
    _T_12 <= Muxn_6.io.out @[Interconnect.scala 477:55]
    io.otrackE[0] <= _T_12 @[Interconnect.scala 477:45]
    node _T_13 = bits(ConfigMem.io.out[0], 12, 11) @[Interconnect.scala 483:39]
    Muxn_6.io.config <= _T_13 @[Interconnect.scala 483:23]
    inst Muxn_7 of Muxn_235 @[Interconnect.scala 473:25]
    Muxn_7.clock <= clock
    Muxn_7.reset <= reset
    Muxn_7.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[1] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    reg _T_14 : UInt, clock @[Interconnect.scala 477:55]
    _T_14 <= Muxn_7.io.out @[Interconnect.scala 477:55]
    io.otrackS[0] <= _T_14 @[Interconnect.scala 477:45]
    node _T_15 = bits(ConfigMem.io.out[0], 14, 13) @[Interconnect.scala 483:39]
    Muxn_7.io.config <= _T_15 @[Interconnect.scala 483:23]
    
  module ConfigMem_90 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<0>, flip cfg_data : UInt<32>, out : UInt<28>[1]}
    
    wire _T : UInt<28>[1] @[ConfigMem.scala 27:29]
    _T[0] <= UInt<28>("h00") @[ConfigMem.scala 27:29]
    reg regs : UInt<28>[1], clock with : (reset => (reset, _T)) @[ConfigMem.scala 27:21]
    node _T_1 = eq(io.cfg_addr, UInt<1>("h00")) @[ConfigMem.scala 32:38]
    node _T_2 = and(io.cfg_en, _T_1) @[ConfigMem.scala 32:22]
    when _T_2 : @[ConfigMem.scala 32:54]
      node _T_3 = bits(io.cfg_data, 27, 0) @[ConfigMem.scala 33:31]
      regs[0] <= _T_3 @[ConfigMem.scala 33:17]
      skip @[ConfigMem.scala 32:54]
    io.out[0] <= regs[0] @[ConfigMem.scala 52:45]
    
  module Muxn_236 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_237 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_238 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_239 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_240 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_241 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_242 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_243 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_244 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_245 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_246 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_247 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module GIB_10 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<12>, flip cfg_data : UInt<32>, ipinNW : UInt<32>[2], flip opinNW : UInt<32>[1], ipinNE : UInt<32>[2], flip opinNE : UInt<32>[1], ipinSE : UInt<32>[2], flip opinSE : UInt<32>[1], ipinSW : UInt<32>[2], flip opinSW : UInt<32>[1], flip itrackW : UInt<32>[1], otrackW : UInt<32>[1], flip itrackN : UInt<32>[1], otrackN : UInt<32>[1], flip itrackE : UInt<32>[1], otrackE : UInt<32>[1], flip itrackS : UInt<32>[1], otrackS : UInt<32>[1]}
    
    io.ipinNW[0] <= UInt<1>("h00") @[Interconnect.scala 426:20]
    io.ipinNW[1] <= UInt<1>("h00") @[Interconnect.scala 426:20]
    io.ipinNE[0] <= UInt<1>("h00") @[Interconnect.scala 427:20]
    io.ipinNE[1] <= UInt<1>("h00") @[Interconnect.scala 427:20]
    io.ipinSW[0] <= UInt<1>("h00") @[Interconnect.scala 428:20]
    io.ipinSW[1] <= UInt<1>("h00") @[Interconnect.scala 428:20]
    io.ipinSE[0] <= UInt<1>("h00") @[Interconnect.scala 429:20]
    io.ipinSE[1] <= UInt<1>("h00") @[Interconnect.scala 429:20]
    io.otrackW[0] <= UInt<1>("h00") @[Interconnect.scala 430:21]
    io.otrackN[0] <= UInt<1>("h00") @[Interconnect.scala 431:21]
    io.otrackE[0] <= UInt<1>("h00") @[Interconnect.scala 432:21]
    io.otrackS[0] <= UInt<1>("h00") @[Interconnect.scala 433:21]
    inst ConfigMem of ConfigMem_90 @[Interconnect.scala 463:21]
    ConfigMem.clock <= clock
    ConfigMem.reset <= reset
    node _T = bits(io.cfg_addr, 11, 2) @[Interconnect.scala 464:65]
    node _T_1 = eq(UInt<6>("h026"), _T) @[Interconnect.scala 464:50]
    node _T_2 = and(io.cfg_en, _T_1) @[Interconnect.scala 464:32]
    ConfigMem.io.cfg_en <= _T_2 @[Interconnect.scala 464:19]
    node _T_3 = bits(io.cfg_addr, 1, 0) @[Interconnect.scala 465:35]
    ConfigMem.io.cfg_addr <= _T_3 @[Interconnect.scala 465:21]
    ConfigMem.io.cfg_data <= io.cfg_data @[Interconnect.scala 466:21]
    inst Muxn of Muxn_236 @[Interconnect.scala 473:25]
    Muxn.clock <= clock
    Muxn.reset <= reset
    Muxn.io.in[0] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn.io.in[2] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNW[0] <= Muxn.io.out @[Interconnect.scala 479:45]
    node _T_4 = bits(ConfigMem.io.out[0], 1, 0) @[Interconnect.scala 483:39]
    Muxn.io.config <= _T_4 @[Interconnect.scala 483:23]
    inst Muxn_1 of Muxn_237 @[Interconnect.scala 473:25]
    Muxn_1.clock <= clock
    Muxn_1.reset <= reset
    Muxn_1.io.in[0] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[2] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNW[1] <= Muxn_1.io.out @[Interconnect.scala 479:45]
    node _T_5 = bits(ConfigMem.io.out[0], 3, 2) @[Interconnect.scala 483:39]
    Muxn_1.io.config <= _T_5 @[Interconnect.scala 483:23]
    inst Muxn_2 of Muxn_238 @[Interconnect.scala 473:25]
    Muxn_2.clock <= clock
    Muxn_2.reset <= reset
    Muxn_2.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNE[0] <= Muxn_2.io.out @[Interconnect.scala 479:45]
    node _T_6 = bits(ConfigMem.io.out[0], 5, 4) @[Interconnect.scala 483:39]
    Muxn_2.io.config <= _T_6 @[Interconnect.scala 483:23]
    inst Muxn_3 of Muxn_239 @[Interconnect.scala 473:25]
    Muxn_3.clock <= clock
    Muxn_3.reset <= reset
    Muxn_3.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNE[1] <= Muxn_3.io.out @[Interconnect.scala 479:45]
    node _T_7 = bits(ConfigMem.io.out[0], 7, 6) @[Interconnect.scala 483:39]
    Muxn_3.io.config <= _T_7 @[Interconnect.scala 483:23]
    inst Muxn_4 of Muxn_240 @[Interconnect.scala 473:25]
    Muxn_4.clock <= clock
    Muxn_4.reset <= reset
    Muxn_4.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[1] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    io.ipinSE[0] <= Muxn_4.io.out @[Interconnect.scala 479:45]
    node _T_8 = bits(ConfigMem.io.out[0], 9, 8) @[Interconnect.scala 483:39]
    Muxn_4.io.config <= _T_8 @[Interconnect.scala 483:23]
    inst Muxn_5 of Muxn_241 @[Interconnect.scala 473:25]
    Muxn_5.clock <= clock
    Muxn_5.reset <= reset
    Muxn_5.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[1] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    io.ipinSE[1] <= Muxn_5.io.out @[Interconnect.scala 479:45]
    node _T_9 = bits(ConfigMem.io.out[0], 11, 10) @[Interconnect.scala 483:39]
    Muxn_5.io.config <= _T_9 @[Interconnect.scala 483:23]
    inst Muxn_6 of Muxn_242 @[Interconnect.scala 473:25]
    Muxn_6.clock <= clock
    Muxn_6.reset <= reset
    Muxn_6.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[1] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    io.ipinSW[0] <= Muxn_6.io.out @[Interconnect.scala 479:45]
    node _T_10 = bits(ConfigMem.io.out[0], 13, 12) @[Interconnect.scala 483:39]
    Muxn_6.io.config <= _T_10 @[Interconnect.scala 483:23]
    inst Muxn_7 of Muxn_243 @[Interconnect.scala 473:25]
    Muxn_7.clock <= clock
    Muxn_7.reset <= reset
    Muxn_7.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[1] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    io.ipinSW[1] <= Muxn_7.io.out @[Interconnect.scala 479:45]
    node _T_11 = bits(ConfigMem.io.out[0], 15, 14) @[Interconnect.scala 483:39]
    Muxn_7.io.config <= _T_11 @[Interconnect.scala 483:23]
    inst Muxn_8 of Muxn_244 @[Interconnect.scala 473:25]
    Muxn_8.clock <= clock
    Muxn_8.reset <= reset
    Muxn_8.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[1] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.otrackW[0] <= Muxn_8.io.out @[Interconnect.scala 479:45]
    node _T_12 = bits(ConfigMem.io.out[0], 18, 16) @[Interconnect.scala 483:39]
    Muxn_8.io.config <= _T_12 @[Interconnect.scala 483:23]
    inst Muxn_9 of Muxn_245 @[Interconnect.scala 473:25]
    Muxn_9.clock <= clock
    Muxn_9.reset <= reset
    Muxn_9.io.in[0] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.otrackN[0] <= Muxn_9.io.out @[Interconnect.scala 479:45]
    node _T_13 = bits(ConfigMem.io.out[0], 21, 19) @[Interconnect.scala 483:39]
    Muxn_9.io.config <= _T_13 @[Interconnect.scala 483:23]
    inst Muxn_10 of Muxn_246 @[Interconnect.scala 473:25]
    Muxn_10.clock <= clock
    Muxn_10.reset <= reset
    Muxn_10.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.otrackE[0] <= Muxn_10.io.out @[Interconnect.scala 479:45]
    node _T_14 = bits(ConfigMem.io.out[0], 24, 22) @[Interconnect.scala 483:39]
    Muxn_10.io.config <= _T_14 @[Interconnect.scala 483:23]
    inst Muxn_11 of Muxn_247 @[Interconnect.scala 473:25]
    Muxn_11.clock <= clock
    Muxn_11.reset <= reset
    Muxn_11.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[1] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[4] <= io.itrackE[0] @[Interconnect.scala 475:63]
    io.otrackS[0] <= Muxn_11.io.out @[Interconnect.scala 479:45]
    node _T_15 = bits(ConfigMem.io.out[0], 27, 25) @[Interconnect.scala 483:39]
    Muxn_11.io.config <= _T_15 @[Interconnect.scala 483:23]
    
  module ConfigMem_91 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<0>, flip cfg_data : UInt<32>, out : UInt<28>[1]}
    
    wire _T : UInt<28>[1] @[ConfigMem.scala 27:29]
    _T[0] <= UInt<28>("h00") @[ConfigMem.scala 27:29]
    reg regs : UInt<28>[1], clock with : (reset => (reset, _T)) @[ConfigMem.scala 27:21]
    node _T_1 = eq(io.cfg_addr, UInt<1>("h00")) @[ConfigMem.scala 32:38]
    node _T_2 = and(io.cfg_en, _T_1) @[ConfigMem.scala 32:22]
    when _T_2 : @[ConfigMem.scala 32:54]
      node _T_3 = bits(io.cfg_data, 27, 0) @[ConfigMem.scala 33:31]
      regs[0] <= _T_3 @[ConfigMem.scala 33:17]
      skip @[ConfigMem.scala 32:54]
    io.out[0] <= regs[0] @[ConfigMem.scala 52:45]
    
  module Muxn_248 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_249 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_250 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_251 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_252 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_253 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_254 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_255 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_256 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_257 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_258 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_259 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module GIB_11 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<12>, flip cfg_data : UInt<32>, ipinNW : UInt<32>[2], flip opinNW : UInt<32>[1], ipinNE : UInt<32>[2], flip opinNE : UInt<32>[1], ipinSE : UInt<32>[2], flip opinSE : UInt<32>[1], ipinSW : UInt<32>[2], flip opinSW : UInt<32>[1], flip itrackW : UInt<32>[1], otrackW : UInt<32>[1], flip itrackN : UInt<32>[1], otrackN : UInt<32>[1], flip itrackE : UInt<32>[1], otrackE : UInt<32>[1], flip itrackS : UInt<32>[1], otrackS : UInt<32>[1]}
    
    io.ipinNW[0] <= UInt<1>("h00") @[Interconnect.scala 426:20]
    io.ipinNW[1] <= UInt<1>("h00") @[Interconnect.scala 426:20]
    io.ipinNE[0] <= UInt<1>("h00") @[Interconnect.scala 427:20]
    io.ipinNE[1] <= UInt<1>("h00") @[Interconnect.scala 427:20]
    io.ipinSW[0] <= UInt<1>("h00") @[Interconnect.scala 428:20]
    io.ipinSW[1] <= UInt<1>("h00") @[Interconnect.scala 428:20]
    io.ipinSE[0] <= UInt<1>("h00") @[Interconnect.scala 429:20]
    io.ipinSE[1] <= UInt<1>("h00") @[Interconnect.scala 429:20]
    io.otrackW[0] <= UInt<1>("h00") @[Interconnect.scala 430:21]
    io.otrackN[0] <= UInt<1>("h00") @[Interconnect.scala 431:21]
    io.otrackE[0] <= UInt<1>("h00") @[Interconnect.scala 432:21]
    io.otrackS[0] <= UInt<1>("h00") @[Interconnect.scala 433:21]
    inst ConfigMem of ConfigMem_91 @[Interconnect.scala 463:21]
    ConfigMem.clock <= clock
    ConfigMem.reset <= reset
    node _T = bits(io.cfg_addr, 11, 2) @[Interconnect.scala 464:65]
    node _T_1 = eq(UInt<6>("h027"), _T) @[Interconnect.scala 464:50]
    node _T_2 = and(io.cfg_en, _T_1) @[Interconnect.scala 464:32]
    ConfigMem.io.cfg_en <= _T_2 @[Interconnect.scala 464:19]
    node _T_3 = bits(io.cfg_addr, 1, 0) @[Interconnect.scala 465:35]
    ConfigMem.io.cfg_addr <= _T_3 @[Interconnect.scala 465:21]
    ConfigMem.io.cfg_data <= io.cfg_data @[Interconnect.scala 466:21]
    inst Muxn of Muxn_248 @[Interconnect.scala 473:25]
    Muxn.clock <= clock
    Muxn.reset <= reset
    Muxn.io.in[0] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn.io.in[2] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNW[0] <= Muxn.io.out @[Interconnect.scala 479:45]
    node _T_4 = bits(ConfigMem.io.out[0], 1, 0) @[Interconnect.scala 483:39]
    Muxn.io.config <= _T_4 @[Interconnect.scala 483:23]
    inst Muxn_1 of Muxn_249 @[Interconnect.scala 473:25]
    Muxn_1.clock <= clock
    Muxn_1.reset <= reset
    Muxn_1.io.in[0] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[2] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNW[1] <= Muxn_1.io.out @[Interconnect.scala 479:45]
    node _T_5 = bits(ConfigMem.io.out[0], 3, 2) @[Interconnect.scala 483:39]
    Muxn_1.io.config <= _T_5 @[Interconnect.scala 483:23]
    inst Muxn_2 of Muxn_250 @[Interconnect.scala 473:25]
    Muxn_2.clock <= clock
    Muxn_2.reset <= reset
    Muxn_2.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNE[0] <= Muxn_2.io.out @[Interconnect.scala 479:45]
    node _T_6 = bits(ConfigMem.io.out[0], 5, 4) @[Interconnect.scala 483:39]
    Muxn_2.io.config <= _T_6 @[Interconnect.scala 483:23]
    inst Muxn_3 of Muxn_251 @[Interconnect.scala 473:25]
    Muxn_3.clock <= clock
    Muxn_3.reset <= reset
    Muxn_3.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNE[1] <= Muxn_3.io.out @[Interconnect.scala 479:45]
    node _T_7 = bits(ConfigMem.io.out[0], 7, 6) @[Interconnect.scala 483:39]
    Muxn_3.io.config <= _T_7 @[Interconnect.scala 483:23]
    inst Muxn_4 of Muxn_252 @[Interconnect.scala 473:25]
    Muxn_4.clock <= clock
    Muxn_4.reset <= reset
    Muxn_4.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[1] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    io.ipinSE[0] <= Muxn_4.io.out @[Interconnect.scala 479:45]
    node _T_8 = bits(ConfigMem.io.out[0], 9, 8) @[Interconnect.scala 483:39]
    Muxn_4.io.config <= _T_8 @[Interconnect.scala 483:23]
    inst Muxn_5 of Muxn_253 @[Interconnect.scala 473:25]
    Muxn_5.clock <= clock
    Muxn_5.reset <= reset
    Muxn_5.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[1] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    io.ipinSE[1] <= Muxn_5.io.out @[Interconnect.scala 479:45]
    node _T_9 = bits(ConfigMem.io.out[0], 11, 10) @[Interconnect.scala 483:39]
    Muxn_5.io.config <= _T_9 @[Interconnect.scala 483:23]
    inst Muxn_6 of Muxn_254 @[Interconnect.scala 473:25]
    Muxn_6.clock <= clock
    Muxn_6.reset <= reset
    Muxn_6.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[1] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    io.ipinSW[0] <= Muxn_6.io.out @[Interconnect.scala 479:45]
    node _T_10 = bits(ConfigMem.io.out[0], 13, 12) @[Interconnect.scala 483:39]
    Muxn_6.io.config <= _T_10 @[Interconnect.scala 483:23]
    inst Muxn_7 of Muxn_255 @[Interconnect.scala 473:25]
    Muxn_7.clock <= clock
    Muxn_7.reset <= reset
    Muxn_7.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[1] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    io.ipinSW[1] <= Muxn_7.io.out @[Interconnect.scala 479:45]
    node _T_11 = bits(ConfigMem.io.out[0], 15, 14) @[Interconnect.scala 483:39]
    Muxn_7.io.config <= _T_11 @[Interconnect.scala 483:23]
    inst Muxn_8 of Muxn_256 @[Interconnect.scala 473:25]
    Muxn_8.clock <= clock
    Muxn_8.reset <= reset
    Muxn_8.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[1] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    reg _T_12 : UInt, clock @[Interconnect.scala 477:55]
    _T_12 <= Muxn_8.io.out @[Interconnect.scala 477:55]
    io.otrackW[0] <= _T_12 @[Interconnect.scala 477:45]
    node _T_13 = bits(ConfigMem.io.out[0], 18, 16) @[Interconnect.scala 483:39]
    Muxn_8.io.config <= _T_13 @[Interconnect.scala 483:23]
    inst Muxn_9 of Muxn_257 @[Interconnect.scala 473:25]
    Muxn_9.clock <= clock
    Muxn_9.reset <= reset
    Muxn_9.io.in[0] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    reg _T_14 : UInt, clock @[Interconnect.scala 477:55]
    _T_14 <= Muxn_9.io.out @[Interconnect.scala 477:55]
    io.otrackN[0] <= _T_14 @[Interconnect.scala 477:45]
    node _T_15 = bits(ConfigMem.io.out[0], 21, 19) @[Interconnect.scala 483:39]
    Muxn_9.io.config <= _T_15 @[Interconnect.scala 483:23]
    inst Muxn_10 of Muxn_258 @[Interconnect.scala 473:25]
    Muxn_10.clock <= clock
    Muxn_10.reset <= reset
    Muxn_10.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    reg _T_16 : UInt, clock @[Interconnect.scala 477:55]
    _T_16 <= Muxn_10.io.out @[Interconnect.scala 477:55]
    io.otrackE[0] <= _T_16 @[Interconnect.scala 477:45]
    node _T_17 = bits(ConfigMem.io.out[0], 24, 22) @[Interconnect.scala 483:39]
    Muxn_10.io.config <= _T_17 @[Interconnect.scala 483:23]
    inst Muxn_11 of Muxn_259 @[Interconnect.scala 473:25]
    Muxn_11.clock <= clock
    Muxn_11.reset <= reset
    Muxn_11.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[1] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[4] <= io.itrackE[0] @[Interconnect.scala 475:63]
    reg _T_18 : UInt, clock @[Interconnect.scala 477:55]
    _T_18 <= Muxn_11.io.out @[Interconnect.scala 477:55]
    io.otrackS[0] <= _T_18 @[Interconnect.scala 477:45]
    node _T_19 = bits(ConfigMem.io.out[0], 27, 25) @[Interconnect.scala 483:39]
    Muxn_11.io.config <= _T_19 @[Interconnect.scala 483:23]
    
  module ConfigMem_92 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<0>, flip cfg_data : UInt<32>, out : UInt<28>[1]}
    
    wire _T : UInt<28>[1] @[ConfigMem.scala 27:29]
    _T[0] <= UInt<28>("h00") @[ConfigMem.scala 27:29]
    reg regs : UInt<28>[1], clock with : (reset => (reset, _T)) @[ConfigMem.scala 27:21]
    node _T_1 = eq(io.cfg_addr, UInt<1>("h00")) @[ConfigMem.scala 32:38]
    node _T_2 = and(io.cfg_en, _T_1) @[ConfigMem.scala 32:22]
    when _T_2 : @[ConfigMem.scala 32:54]
      node _T_3 = bits(io.cfg_data, 27, 0) @[ConfigMem.scala 33:31]
      regs[0] <= _T_3 @[ConfigMem.scala 33:17]
      skip @[ConfigMem.scala 32:54]
    io.out[0] <= regs[0] @[ConfigMem.scala 52:45]
    
  module Muxn_260 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_261 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_262 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_263 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_264 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_265 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_266 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_267 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_268 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_269 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_270 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_271 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module GIB_12 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<12>, flip cfg_data : UInt<32>, ipinNW : UInt<32>[2], flip opinNW : UInt<32>[1], ipinNE : UInt<32>[2], flip opinNE : UInt<32>[1], ipinSE : UInt<32>[2], flip opinSE : UInt<32>[1], ipinSW : UInt<32>[2], flip opinSW : UInt<32>[1], flip itrackW : UInt<32>[1], otrackW : UInt<32>[1], flip itrackN : UInt<32>[1], otrackN : UInt<32>[1], flip itrackE : UInt<32>[1], otrackE : UInt<32>[1], flip itrackS : UInt<32>[1], otrackS : UInt<32>[1]}
    
    io.ipinNW[0] <= UInt<1>("h00") @[Interconnect.scala 426:20]
    io.ipinNW[1] <= UInt<1>("h00") @[Interconnect.scala 426:20]
    io.ipinNE[0] <= UInt<1>("h00") @[Interconnect.scala 427:20]
    io.ipinNE[1] <= UInt<1>("h00") @[Interconnect.scala 427:20]
    io.ipinSW[0] <= UInt<1>("h00") @[Interconnect.scala 428:20]
    io.ipinSW[1] <= UInt<1>("h00") @[Interconnect.scala 428:20]
    io.ipinSE[0] <= UInt<1>("h00") @[Interconnect.scala 429:20]
    io.ipinSE[1] <= UInt<1>("h00") @[Interconnect.scala 429:20]
    io.otrackW[0] <= UInt<1>("h00") @[Interconnect.scala 430:21]
    io.otrackN[0] <= UInt<1>("h00") @[Interconnect.scala 431:21]
    io.otrackE[0] <= UInt<1>("h00") @[Interconnect.scala 432:21]
    io.otrackS[0] <= UInt<1>("h00") @[Interconnect.scala 433:21]
    inst ConfigMem of ConfigMem_92 @[Interconnect.scala 463:21]
    ConfigMem.clock <= clock
    ConfigMem.reset <= reset
    node _T = bits(io.cfg_addr, 11, 2) @[Interconnect.scala 464:65]
    node _T_1 = eq(UInt<6>("h028"), _T) @[Interconnect.scala 464:50]
    node _T_2 = and(io.cfg_en, _T_1) @[Interconnect.scala 464:32]
    ConfigMem.io.cfg_en <= _T_2 @[Interconnect.scala 464:19]
    node _T_3 = bits(io.cfg_addr, 1, 0) @[Interconnect.scala 465:35]
    ConfigMem.io.cfg_addr <= _T_3 @[Interconnect.scala 465:21]
    ConfigMem.io.cfg_data <= io.cfg_data @[Interconnect.scala 466:21]
    inst Muxn of Muxn_260 @[Interconnect.scala 473:25]
    Muxn.clock <= clock
    Muxn.reset <= reset
    Muxn.io.in[0] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn.io.in[2] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNW[0] <= Muxn.io.out @[Interconnect.scala 479:45]
    node _T_4 = bits(ConfigMem.io.out[0], 1, 0) @[Interconnect.scala 483:39]
    Muxn.io.config <= _T_4 @[Interconnect.scala 483:23]
    inst Muxn_1 of Muxn_261 @[Interconnect.scala 473:25]
    Muxn_1.clock <= clock
    Muxn_1.reset <= reset
    Muxn_1.io.in[0] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[2] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNW[1] <= Muxn_1.io.out @[Interconnect.scala 479:45]
    node _T_5 = bits(ConfigMem.io.out[0], 3, 2) @[Interconnect.scala 483:39]
    Muxn_1.io.config <= _T_5 @[Interconnect.scala 483:23]
    inst Muxn_2 of Muxn_262 @[Interconnect.scala 473:25]
    Muxn_2.clock <= clock
    Muxn_2.reset <= reset
    Muxn_2.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNE[0] <= Muxn_2.io.out @[Interconnect.scala 479:45]
    node _T_6 = bits(ConfigMem.io.out[0], 5, 4) @[Interconnect.scala 483:39]
    Muxn_2.io.config <= _T_6 @[Interconnect.scala 483:23]
    inst Muxn_3 of Muxn_263 @[Interconnect.scala 473:25]
    Muxn_3.clock <= clock
    Muxn_3.reset <= reset
    Muxn_3.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNE[1] <= Muxn_3.io.out @[Interconnect.scala 479:45]
    node _T_7 = bits(ConfigMem.io.out[0], 7, 6) @[Interconnect.scala 483:39]
    Muxn_3.io.config <= _T_7 @[Interconnect.scala 483:23]
    inst Muxn_4 of Muxn_264 @[Interconnect.scala 473:25]
    Muxn_4.clock <= clock
    Muxn_4.reset <= reset
    Muxn_4.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[1] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    io.ipinSE[0] <= Muxn_4.io.out @[Interconnect.scala 479:45]
    node _T_8 = bits(ConfigMem.io.out[0], 9, 8) @[Interconnect.scala 483:39]
    Muxn_4.io.config <= _T_8 @[Interconnect.scala 483:23]
    inst Muxn_5 of Muxn_265 @[Interconnect.scala 473:25]
    Muxn_5.clock <= clock
    Muxn_5.reset <= reset
    Muxn_5.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[1] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    io.ipinSE[1] <= Muxn_5.io.out @[Interconnect.scala 479:45]
    node _T_9 = bits(ConfigMem.io.out[0], 11, 10) @[Interconnect.scala 483:39]
    Muxn_5.io.config <= _T_9 @[Interconnect.scala 483:23]
    inst Muxn_6 of Muxn_266 @[Interconnect.scala 473:25]
    Muxn_6.clock <= clock
    Muxn_6.reset <= reset
    Muxn_6.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[1] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    io.ipinSW[0] <= Muxn_6.io.out @[Interconnect.scala 479:45]
    node _T_10 = bits(ConfigMem.io.out[0], 13, 12) @[Interconnect.scala 483:39]
    Muxn_6.io.config <= _T_10 @[Interconnect.scala 483:23]
    inst Muxn_7 of Muxn_267 @[Interconnect.scala 473:25]
    Muxn_7.clock <= clock
    Muxn_7.reset <= reset
    Muxn_7.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[1] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    io.ipinSW[1] <= Muxn_7.io.out @[Interconnect.scala 479:45]
    node _T_11 = bits(ConfigMem.io.out[0], 15, 14) @[Interconnect.scala 483:39]
    Muxn_7.io.config <= _T_11 @[Interconnect.scala 483:23]
    inst Muxn_8 of Muxn_268 @[Interconnect.scala 473:25]
    Muxn_8.clock <= clock
    Muxn_8.reset <= reset
    Muxn_8.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[1] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.otrackW[0] <= Muxn_8.io.out @[Interconnect.scala 479:45]
    node _T_12 = bits(ConfigMem.io.out[0], 18, 16) @[Interconnect.scala 483:39]
    Muxn_8.io.config <= _T_12 @[Interconnect.scala 483:23]
    inst Muxn_9 of Muxn_269 @[Interconnect.scala 473:25]
    Muxn_9.clock <= clock
    Muxn_9.reset <= reset
    Muxn_9.io.in[0] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.otrackN[0] <= Muxn_9.io.out @[Interconnect.scala 479:45]
    node _T_13 = bits(ConfigMem.io.out[0], 21, 19) @[Interconnect.scala 483:39]
    Muxn_9.io.config <= _T_13 @[Interconnect.scala 483:23]
    inst Muxn_10 of Muxn_270 @[Interconnect.scala 473:25]
    Muxn_10.clock <= clock
    Muxn_10.reset <= reset
    Muxn_10.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.otrackE[0] <= Muxn_10.io.out @[Interconnect.scala 479:45]
    node _T_14 = bits(ConfigMem.io.out[0], 24, 22) @[Interconnect.scala 483:39]
    Muxn_10.io.config <= _T_14 @[Interconnect.scala 483:23]
    inst Muxn_11 of Muxn_271 @[Interconnect.scala 473:25]
    Muxn_11.clock <= clock
    Muxn_11.reset <= reset
    Muxn_11.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[1] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[4] <= io.itrackE[0] @[Interconnect.scala 475:63]
    io.otrackS[0] <= Muxn_11.io.out @[Interconnect.scala 479:45]
    node _T_15 = bits(ConfigMem.io.out[0], 27, 25) @[Interconnect.scala 483:39]
    Muxn_11.io.config <= _T_15 @[Interconnect.scala 483:23]
    
  module ConfigMem_93 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<0>, flip cfg_data : UInt<32>, out : UInt<28>[1]}
    
    wire _T : UInt<28>[1] @[ConfigMem.scala 27:29]
    _T[0] <= UInt<28>("h00") @[ConfigMem.scala 27:29]
    reg regs : UInt<28>[1], clock with : (reset => (reset, _T)) @[ConfigMem.scala 27:21]
    node _T_1 = eq(io.cfg_addr, UInt<1>("h00")) @[ConfigMem.scala 32:38]
    node _T_2 = and(io.cfg_en, _T_1) @[ConfigMem.scala 32:22]
    when _T_2 : @[ConfigMem.scala 32:54]
      node _T_3 = bits(io.cfg_data, 27, 0) @[ConfigMem.scala 33:31]
      regs[0] <= _T_3 @[ConfigMem.scala 33:17]
      skip @[ConfigMem.scala 32:54]
    io.out[0] <= regs[0] @[ConfigMem.scala 52:45]
    
  module Muxn_272 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_273 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_274 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_275 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_276 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_277 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_278 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_279 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_280 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_281 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_282 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_283 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module GIB_13 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<12>, flip cfg_data : UInt<32>, ipinNW : UInt<32>[2], flip opinNW : UInt<32>[1], ipinNE : UInt<32>[2], flip opinNE : UInt<32>[1], ipinSE : UInt<32>[2], flip opinSE : UInt<32>[1], ipinSW : UInt<32>[2], flip opinSW : UInt<32>[1], flip itrackW : UInt<32>[1], otrackW : UInt<32>[1], flip itrackN : UInt<32>[1], otrackN : UInt<32>[1], flip itrackE : UInt<32>[1], otrackE : UInt<32>[1], flip itrackS : UInt<32>[1], otrackS : UInt<32>[1]}
    
    io.ipinNW[0] <= UInt<1>("h00") @[Interconnect.scala 426:20]
    io.ipinNW[1] <= UInt<1>("h00") @[Interconnect.scala 426:20]
    io.ipinNE[0] <= UInt<1>("h00") @[Interconnect.scala 427:20]
    io.ipinNE[1] <= UInt<1>("h00") @[Interconnect.scala 427:20]
    io.ipinSW[0] <= UInt<1>("h00") @[Interconnect.scala 428:20]
    io.ipinSW[1] <= UInt<1>("h00") @[Interconnect.scala 428:20]
    io.ipinSE[0] <= UInt<1>("h00") @[Interconnect.scala 429:20]
    io.ipinSE[1] <= UInt<1>("h00") @[Interconnect.scala 429:20]
    io.otrackW[0] <= UInt<1>("h00") @[Interconnect.scala 430:21]
    io.otrackN[0] <= UInt<1>("h00") @[Interconnect.scala 431:21]
    io.otrackE[0] <= UInt<1>("h00") @[Interconnect.scala 432:21]
    io.otrackS[0] <= UInt<1>("h00") @[Interconnect.scala 433:21]
    inst ConfigMem of ConfigMem_93 @[Interconnect.scala 463:21]
    ConfigMem.clock <= clock
    ConfigMem.reset <= reset
    node _T = bits(io.cfg_addr, 11, 2) @[Interconnect.scala 464:65]
    node _T_1 = eq(UInt<6>("h029"), _T) @[Interconnect.scala 464:50]
    node _T_2 = and(io.cfg_en, _T_1) @[Interconnect.scala 464:32]
    ConfigMem.io.cfg_en <= _T_2 @[Interconnect.scala 464:19]
    node _T_3 = bits(io.cfg_addr, 1, 0) @[Interconnect.scala 465:35]
    ConfigMem.io.cfg_addr <= _T_3 @[Interconnect.scala 465:21]
    ConfigMem.io.cfg_data <= io.cfg_data @[Interconnect.scala 466:21]
    inst Muxn of Muxn_272 @[Interconnect.scala 473:25]
    Muxn.clock <= clock
    Muxn.reset <= reset
    Muxn.io.in[0] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn.io.in[2] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNW[0] <= Muxn.io.out @[Interconnect.scala 479:45]
    node _T_4 = bits(ConfigMem.io.out[0], 1, 0) @[Interconnect.scala 483:39]
    Muxn.io.config <= _T_4 @[Interconnect.scala 483:23]
    inst Muxn_1 of Muxn_273 @[Interconnect.scala 473:25]
    Muxn_1.clock <= clock
    Muxn_1.reset <= reset
    Muxn_1.io.in[0] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[2] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNW[1] <= Muxn_1.io.out @[Interconnect.scala 479:45]
    node _T_5 = bits(ConfigMem.io.out[0], 3, 2) @[Interconnect.scala 483:39]
    Muxn_1.io.config <= _T_5 @[Interconnect.scala 483:23]
    inst Muxn_2 of Muxn_274 @[Interconnect.scala 473:25]
    Muxn_2.clock <= clock
    Muxn_2.reset <= reset
    Muxn_2.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNE[0] <= Muxn_2.io.out @[Interconnect.scala 479:45]
    node _T_6 = bits(ConfigMem.io.out[0], 5, 4) @[Interconnect.scala 483:39]
    Muxn_2.io.config <= _T_6 @[Interconnect.scala 483:23]
    inst Muxn_3 of Muxn_275 @[Interconnect.scala 473:25]
    Muxn_3.clock <= clock
    Muxn_3.reset <= reset
    Muxn_3.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNE[1] <= Muxn_3.io.out @[Interconnect.scala 479:45]
    node _T_7 = bits(ConfigMem.io.out[0], 7, 6) @[Interconnect.scala 483:39]
    Muxn_3.io.config <= _T_7 @[Interconnect.scala 483:23]
    inst Muxn_4 of Muxn_276 @[Interconnect.scala 473:25]
    Muxn_4.clock <= clock
    Muxn_4.reset <= reset
    Muxn_4.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[1] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    io.ipinSE[0] <= Muxn_4.io.out @[Interconnect.scala 479:45]
    node _T_8 = bits(ConfigMem.io.out[0], 9, 8) @[Interconnect.scala 483:39]
    Muxn_4.io.config <= _T_8 @[Interconnect.scala 483:23]
    inst Muxn_5 of Muxn_277 @[Interconnect.scala 473:25]
    Muxn_5.clock <= clock
    Muxn_5.reset <= reset
    Muxn_5.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[1] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    io.ipinSE[1] <= Muxn_5.io.out @[Interconnect.scala 479:45]
    node _T_9 = bits(ConfigMem.io.out[0], 11, 10) @[Interconnect.scala 483:39]
    Muxn_5.io.config <= _T_9 @[Interconnect.scala 483:23]
    inst Muxn_6 of Muxn_278 @[Interconnect.scala 473:25]
    Muxn_6.clock <= clock
    Muxn_6.reset <= reset
    Muxn_6.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[1] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    io.ipinSW[0] <= Muxn_6.io.out @[Interconnect.scala 479:45]
    node _T_10 = bits(ConfigMem.io.out[0], 13, 12) @[Interconnect.scala 483:39]
    Muxn_6.io.config <= _T_10 @[Interconnect.scala 483:23]
    inst Muxn_7 of Muxn_279 @[Interconnect.scala 473:25]
    Muxn_7.clock <= clock
    Muxn_7.reset <= reset
    Muxn_7.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[1] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    io.ipinSW[1] <= Muxn_7.io.out @[Interconnect.scala 479:45]
    node _T_11 = bits(ConfigMem.io.out[0], 15, 14) @[Interconnect.scala 483:39]
    Muxn_7.io.config <= _T_11 @[Interconnect.scala 483:23]
    inst Muxn_8 of Muxn_280 @[Interconnect.scala 473:25]
    Muxn_8.clock <= clock
    Muxn_8.reset <= reset
    Muxn_8.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[1] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    reg _T_12 : UInt, clock @[Interconnect.scala 477:55]
    _T_12 <= Muxn_8.io.out @[Interconnect.scala 477:55]
    io.otrackW[0] <= _T_12 @[Interconnect.scala 477:45]
    node _T_13 = bits(ConfigMem.io.out[0], 18, 16) @[Interconnect.scala 483:39]
    Muxn_8.io.config <= _T_13 @[Interconnect.scala 483:23]
    inst Muxn_9 of Muxn_281 @[Interconnect.scala 473:25]
    Muxn_9.clock <= clock
    Muxn_9.reset <= reset
    Muxn_9.io.in[0] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    reg _T_14 : UInt, clock @[Interconnect.scala 477:55]
    _T_14 <= Muxn_9.io.out @[Interconnect.scala 477:55]
    io.otrackN[0] <= _T_14 @[Interconnect.scala 477:45]
    node _T_15 = bits(ConfigMem.io.out[0], 21, 19) @[Interconnect.scala 483:39]
    Muxn_9.io.config <= _T_15 @[Interconnect.scala 483:23]
    inst Muxn_10 of Muxn_282 @[Interconnect.scala 473:25]
    Muxn_10.clock <= clock
    Muxn_10.reset <= reset
    Muxn_10.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    reg _T_16 : UInt, clock @[Interconnect.scala 477:55]
    _T_16 <= Muxn_10.io.out @[Interconnect.scala 477:55]
    io.otrackE[0] <= _T_16 @[Interconnect.scala 477:45]
    node _T_17 = bits(ConfigMem.io.out[0], 24, 22) @[Interconnect.scala 483:39]
    Muxn_10.io.config <= _T_17 @[Interconnect.scala 483:23]
    inst Muxn_11 of Muxn_283 @[Interconnect.scala 473:25]
    Muxn_11.clock <= clock
    Muxn_11.reset <= reset
    Muxn_11.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[1] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[4] <= io.itrackE[0] @[Interconnect.scala 475:63]
    reg _T_18 : UInt, clock @[Interconnect.scala 477:55]
    _T_18 <= Muxn_11.io.out @[Interconnect.scala 477:55]
    io.otrackS[0] <= _T_18 @[Interconnect.scala 477:45]
    node _T_19 = bits(ConfigMem.io.out[0], 27, 25) @[Interconnect.scala 483:39]
    Muxn_11.io.config <= _T_19 @[Interconnect.scala 483:23]
    
  module ConfigMem_94 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<0>, flip cfg_data : UInt<32>, out : UInt<28>[1]}
    
    wire _T : UInt<28>[1] @[ConfigMem.scala 27:29]
    _T[0] <= UInt<28>("h00") @[ConfigMem.scala 27:29]
    reg regs : UInt<28>[1], clock with : (reset => (reset, _T)) @[ConfigMem.scala 27:21]
    node _T_1 = eq(io.cfg_addr, UInt<1>("h00")) @[ConfigMem.scala 32:38]
    node _T_2 = and(io.cfg_en, _T_1) @[ConfigMem.scala 32:22]
    when _T_2 : @[ConfigMem.scala 32:54]
      node _T_3 = bits(io.cfg_data, 27, 0) @[ConfigMem.scala 33:31]
      regs[0] <= _T_3 @[ConfigMem.scala 33:17]
      skip @[ConfigMem.scala 32:54]
    io.out[0] <= regs[0] @[ConfigMem.scala 52:45]
    
  module Muxn_284 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_285 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_286 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_287 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_288 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_289 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_290 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_291 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_292 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_293 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_294 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_295 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module GIB_14 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<12>, flip cfg_data : UInt<32>, ipinNW : UInt<32>[2], flip opinNW : UInt<32>[1], ipinNE : UInt<32>[2], flip opinNE : UInt<32>[1], ipinSE : UInt<32>[2], flip opinSE : UInt<32>[1], ipinSW : UInt<32>[2], flip opinSW : UInt<32>[1], flip itrackW : UInt<32>[1], otrackW : UInt<32>[1], flip itrackN : UInt<32>[1], otrackN : UInt<32>[1], flip itrackE : UInt<32>[1], otrackE : UInt<32>[1], flip itrackS : UInt<32>[1], otrackS : UInt<32>[1]}
    
    io.ipinNW[0] <= UInt<1>("h00") @[Interconnect.scala 426:20]
    io.ipinNW[1] <= UInt<1>("h00") @[Interconnect.scala 426:20]
    io.ipinNE[0] <= UInt<1>("h00") @[Interconnect.scala 427:20]
    io.ipinNE[1] <= UInt<1>("h00") @[Interconnect.scala 427:20]
    io.ipinSW[0] <= UInt<1>("h00") @[Interconnect.scala 428:20]
    io.ipinSW[1] <= UInt<1>("h00") @[Interconnect.scala 428:20]
    io.ipinSE[0] <= UInt<1>("h00") @[Interconnect.scala 429:20]
    io.ipinSE[1] <= UInt<1>("h00") @[Interconnect.scala 429:20]
    io.otrackW[0] <= UInt<1>("h00") @[Interconnect.scala 430:21]
    io.otrackN[0] <= UInt<1>("h00") @[Interconnect.scala 431:21]
    io.otrackE[0] <= UInt<1>("h00") @[Interconnect.scala 432:21]
    io.otrackS[0] <= UInt<1>("h00") @[Interconnect.scala 433:21]
    inst ConfigMem of ConfigMem_94 @[Interconnect.scala 463:21]
    ConfigMem.clock <= clock
    ConfigMem.reset <= reset
    node _T = bits(io.cfg_addr, 11, 2) @[Interconnect.scala 464:65]
    node _T_1 = eq(UInt<6>("h02a"), _T) @[Interconnect.scala 464:50]
    node _T_2 = and(io.cfg_en, _T_1) @[Interconnect.scala 464:32]
    ConfigMem.io.cfg_en <= _T_2 @[Interconnect.scala 464:19]
    node _T_3 = bits(io.cfg_addr, 1, 0) @[Interconnect.scala 465:35]
    ConfigMem.io.cfg_addr <= _T_3 @[Interconnect.scala 465:21]
    ConfigMem.io.cfg_data <= io.cfg_data @[Interconnect.scala 466:21]
    inst Muxn of Muxn_284 @[Interconnect.scala 473:25]
    Muxn.clock <= clock
    Muxn.reset <= reset
    Muxn.io.in[0] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn.io.in[2] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNW[0] <= Muxn.io.out @[Interconnect.scala 479:45]
    node _T_4 = bits(ConfigMem.io.out[0], 1, 0) @[Interconnect.scala 483:39]
    Muxn.io.config <= _T_4 @[Interconnect.scala 483:23]
    inst Muxn_1 of Muxn_285 @[Interconnect.scala 473:25]
    Muxn_1.clock <= clock
    Muxn_1.reset <= reset
    Muxn_1.io.in[0] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[2] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNW[1] <= Muxn_1.io.out @[Interconnect.scala 479:45]
    node _T_5 = bits(ConfigMem.io.out[0], 3, 2) @[Interconnect.scala 483:39]
    Muxn_1.io.config <= _T_5 @[Interconnect.scala 483:23]
    inst Muxn_2 of Muxn_286 @[Interconnect.scala 473:25]
    Muxn_2.clock <= clock
    Muxn_2.reset <= reset
    Muxn_2.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNE[0] <= Muxn_2.io.out @[Interconnect.scala 479:45]
    node _T_6 = bits(ConfigMem.io.out[0], 5, 4) @[Interconnect.scala 483:39]
    Muxn_2.io.config <= _T_6 @[Interconnect.scala 483:23]
    inst Muxn_3 of Muxn_287 @[Interconnect.scala 473:25]
    Muxn_3.clock <= clock
    Muxn_3.reset <= reset
    Muxn_3.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNE[1] <= Muxn_3.io.out @[Interconnect.scala 479:45]
    node _T_7 = bits(ConfigMem.io.out[0], 7, 6) @[Interconnect.scala 483:39]
    Muxn_3.io.config <= _T_7 @[Interconnect.scala 483:23]
    inst Muxn_4 of Muxn_288 @[Interconnect.scala 473:25]
    Muxn_4.clock <= clock
    Muxn_4.reset <= reset
    Muxn_4.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[1] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    io.ipinSE[0] <= Muxn_4.io.out @[Interconnect.scala 479:45]
    node _T_8 = bits(ConfigMem.io.out[0], 9, 8) @[Interconnect.scala 483:39]
    Muxn_4.io.config <= _T_8 @[Interconnect.scala 483:23]
    inst Muxn_5 of Muxn_289 @[Interconnect.scala 473:25]
    Muxn_5.clock <= clock
    Muxn_5.reset <= reset
    Muxn_5.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[1] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    io.ipinSE[1] <= Muxn_5.io.out @[Interconnect.scala 479:45]
    node _T_9 = bits(ConfigMem.io.out[0], 11, 10) @[Interconnect.scala 483:39]
    Muxn_5.io.config <= _T_9 @[Interconnect.scala 483:23]
    inst Muxn_6 of Muxn_290 @[Interconnect.scala 473:25]
    Muxn_6.clock <= clock
    Muxn_6.reset <= reset
    Muxn_6.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[1] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    io.ipinSW[0] <= Muxn_6.io.out @[Interconnect.scala 479:45]
    node _T_10 = bits(ConfigMem.io.out[0], 13, 12) @[Interconnect.scala 483:39]
    Muxn_6.io.config <= _T_10 @[Interconnect.scala 483:23]
    inst Muxn_7 of Muxn_291 @[Interconnect.scala 473:25]
    Muxn_7.clock <= clock
    Muxn_7.reset <= reset
    Muxn_7.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[1] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    io.ipinSW[1] <= Muxn_7.io.out @[Interconnect.scala 479:45]
    node _T_11 = bits(ConfigMem.io.out[0], 15, 14) @[Interconnect.scala 483:39]
    Muxn_7.io.config <= _T_11 @[Interconnect.scala 483:23]
    inst Muxn_8 of Muxn_292 @[Interconnect.scala 473:25]
    Muxn_8.clock <= clock
    Muxn_8.reset <= reset
    Muxn_8.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[1] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.otrackW[0] <= Muxn_8.io.out @[Interconnect.scala 479:45]
    node _T_12 = bits(ConfigMem.io.out[0], 18, 16) @[Interconnect.scala 483:39]
    Muxn_8.io.config <= _T_12 @[Interconnect.scala 483:23]
    inst Muxn_9 of Muxn_293 @[Interconnect.scala 473:25]
    Muxn_9.clock <= clock
    Muxn_9.reset <= reset
    Muxn_9.io.in[0] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.otrackN[0] <= Muxn_9.io.out @[Interconnect.scala 479:45]
    node _T_13 = bits(ConfigMem.io.out[0], 21, 19) @[Interconnect.scala 483:39]
    Muxn_9.io.config <= _T_13 @[Interconnect.scala 483:23]
    inst Muxn_10 of Muxn_294 @[Interconnect.scala 473:25]
    Muxn_10.clock <= clock
    Muxn_10.reset <= reset
    Muxn_10.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.otrackE[0] <= Muxn_10.io.out @[Interconnect.scala 479:45]
    node _T_14 = bits(ConfigMem.io.out[0], 24, 22) @[Interconnect.scala 483:39]
    Muxn_10.io.config <= _T_14 @[Interconnect.scala 483:23]
    inst Muxn_11 of Muxn_295 @[Interconnect.scala 473:25]
    Muxn_11.clock <= clock
    Muxn_11.reset <= reset
    Muxn_11.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[1] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[4] <= io.itrackE[0] @[Interconnect.scala 475:63]
    io.otrackS[0] <= Muxn_11.io.out @[Interconnect.scala 479:45]
    node _T_15 = bits(ConfigMem.io.out[0], 27, 25) @[Interconnect.scala 483:39]
    Muxn_11.io.config <= _T_15 @[Interconnect.scala 483:23]
    
  module ConfigMem_95 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<0>, flip cfg_data : UInt<32>, out : UInt<28>[1]}
    
    wire _T : UInt<28>[1] @[ConfigMem.scala 27:29]
    _T[0] <= UInt<28>("h00") @[ConfigMem.scala 27:29]
    reg regs : UInt<28>[1], clock with : (reset => (reset, _T)) @[ConfigMem.scala 27:21]
    node _T_1 = eq(io.cfg_addr, UInt<1>("h00")) @[ConfigMem.scala 32:38]
    node _T_2 = and(io.cfg_en, _T_1) @[ConfigMem.scala 32:22]
    when _T_2 : @[ConfigMem.scala 32:54]
      node _T_3 = bits(io.cfg_data, 27, 0) @[ConfigMem.scala 33:31]
      regs[0] <= _T_3 @[ConfigMem.scala 33:17]
      skip @[ConfigMem.scala 32:54]
    io.out[0] <= regs[0] @[ConfigMem.scala 52:45]
    
  module Muxn_296 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_297 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_298 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_299 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_300 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_301 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_302 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_303 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_304 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_305 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_306 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_307 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module GIB_15 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<12>, flip cfg_data : UInt<32>, ipinNW : UInt<32>[2], flip opinNW : UInt<32>[1], ipinNE : UInt<32>[2], flip opinNE : UInt<32>[1], ipinSE : UInt<32>[2], flip opinSE : UInt<32>[1], ipinSW : UInt<32>[2], flip opinSW : UInt<32>[1], flip itrackW : UInt<32>[1], otrackW : UInt<32>[1], flip itrackN : UInt<32>[1], otrackN : UInt<32>[1], flip itrackE : UInt<32>[1], otrackE : UInt<32>[1], flip itrackS : UInt<32>[1], otrackS : UInt<32>[1]}
    
    io.ipinNW[0] <= UInt<1>("h00") @[Interconnect.scala 426:20]
    io.ipinNW[1] <= UInt<1>("h00") @[Interconnect.scala 426:20]
    io.ipinNE[0] <= UInt<1>("h00") @[Interconnect.scala 427:20]
    io.ipinNE[1] <= UInt<1>("h00") @[Interconnect.scala 427:20]
    io.ipinSW[0] <= UInt<1>("h00") @[Interconnect.scala 428:20]
    io.ipinSW[1] <= UInt<1>("h00") @[Interconnect.scala 428:20]
    io.ipinSE[0] <= UInt<1>("h00") @[Interconnect.scala 429:20]
    io.ipinSE[1] <= UInt<1>("h00") @[Interconnect.scala 429:20]
    io.otrackW[0] <= UInt<1>("h00") @[Interconnect.scala 430:21]
    io.otrackN[0] <= UInt<1>("h00") @[Interconnect.scala 431:21]
    io.otrackE[0] <= UInt<1>("h00") @[Interconnect.scala 432:21]
    io.otrackS[0] <= UInt<1>("h00") @[Interconnect.scala 433:21]
    inst ConfigMem of ConfigMem_95 @[Interconnect.scala 463:21]
    ConfigMem.clock <= clock
    ConfigMem.reset <= reset
    node _T = bits(io.cfg_addr, 11, 2) @[Interconnect.scala 464:65]
    node _T_1 = eq(UInt<6>("h02b"), _T) @[Interconnect.scala 464:50]
    node _T_2 = and(io.cfg_en, _T_1) @[Interconnect.scala 464:32]
    ConfigMem.io.cfg_en <= _T_2 @[Interconnect.scala 464:19]
    node _T_3 = bits(io.cfg_addr, 1, 0) @[Interconnect.scala 465:35]
    ConfigMem.io.cfg_addr <= _T_3 @[Interconnect.scala 465:21]
    ConfigMem.io.cfg_data <= io.cfg_data @[Interconnect.scala 466:21]
    inst Muxn of Muxn_296 @[Interconnect.scala 473:25]
    Muxn.clock <= clock
    Muxn.reset <= reset
    Muxn.io.in[0] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn.io.in[2] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNW[0] <= Muxn.io.out @[Interconnect.scala 479:45]
    node _T_4 = bits(ConfigMem.io.out[0], 1, 0) @[Interconnect.scala 483:39]
    Muxn.io.config <= _T_4 @[Interconnect.scala 483:23]
    inst Muxn_1 of Muxn_297 @[Interconnect.scala 473:25]
    Muxn_1.clock <= clock
    Muxn_1.reset <= reset
    Muxn_1.io.in[0] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[2] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNW[1] <= Muxn_1.io.out @[Interconnect.scala 479:45]
    node _T_5 = bits(ConfigMem.io.out[0], 3, 2) @[Interconnect.scala 483:39]
    Muxn_1.io.config <= _T_5 @[Interconnect.scala 483:23]
    inst Muxn_2 of Muxn_298 @[Interconnect.scala 473:25]
    Muxn_2.clock <= clock
    Muxn_2.reset <= reset
    Muxn_2.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNE[0] <= Muxn_2.io.out @[Interconnect.scala 479:45]
    node _T_6 = bits(ConfigMem.io.out[0], 5, 4) @[Interconnect.scala 483:39]
    Muxn_2.io.config <= _T_6 @[Interconnect.scala 483:23]
    inst Muxn_3 of Muxn_299 @[Interconnect.scala 473:25]
    Muxn_3.clock <= clock
    Muxn_3.reset <= reset
    Muxn_3.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNE[1] <= Muxn_3.io.out @[Interconnect.scala 479:45]
    node _T_7 = bits(ConfigMem.io.out[0], 7, 6) @[Interconnect.scala 483:39]
    Muxn_3.io.config <= _T_7 @[Interconnect.scala 483:23]
    inst Muxn_4 of Muxn_300 @[Interconnect.scala 473:25]
    Muxn_4.clock <= clock
    Muxn_4.reset <= reset
    Muxn_4.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[1] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    io.ipinSE[0] <= Muxn_4.io.out @[Interconnect.scala 479:45]
    node _T_8 = bits(ConfigMem.io.out[0], 9, 8) @[Interconnect.scala 483:39]
    Muxn_4.io.config <= _T_8 @[Interconnect.scala 483:23]
    inst Muxn_5 of Muxn_301 @[Interconnect.scala 473:25]
    Muxn_5.clock <= clock
    Muxn_5.reset <= reset
    Muxn_5.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[1] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    io.ipinSE[1] <= Muxn_5.io.out @[Interconnect.scala 479:45]
    node _T_9 = bits(ConfigMem.io.out[0], 11, 10) @[Interconnect.scala 483:39]
    Muxn_5.io.config <= _T_9 @[Interconnect.scala 483:23]
    inst Muxn_6 of Muxn_302 @[Interconnect.scala 473:25]
    Muxn_6.clock <= clock
    Muxn_6.reset <= reset
    Muxn_6.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[1] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    io.ipinSW[0] <= Muxn_6.io.out @[Interconnect.scala 479:45]
    node _T_10 = bits(ConfigMem.io.out[0], 13, 12) @[Interconnect.scala 483:39]
    Muxn_6.io.config <= _T_10 @[Interconnect.scala 483:23]
    inst Muxn_7 of Muxn_303 @[Interconnect.scala 473:25]
    Muxn_7.clock <= clock
    Muxn_7.reset <= reset
    Muxn_7.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[1] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    io.ipinSW[1] <= Muxn_7.io.out @[Interconnect.scala 479:45]
    node _T_11 = bits(ConfigMem.io.out[0], 15, 14) @[Interconnect.scala 483:39]
    Muxn_7.io.config <= _T_11 @[Interconnect.scala 483:23]
    inst Muxn_8 of Muxn_304 @[Interconnect.scala 473:25]
    Muxn_8.clock <= clock
    Muxn_8.reset <= reset
    Muxn_8.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[1] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    reg _T_12 : UInt, clock @[Interconnect.scala 477:55]
    _T_12 <= Muxn_8.io.out @[Interconnect.scala 477:55]
    io.otrackW[0] <= _T_12 @[Interconnect.scala 477:45]
    node _T_13 = bits(ConfigMem.io.out[0], 18, 16) @[Interconnect.scala 483:39]
    Muxn_8.io.config <= _T_13 @[Interconnect.scala 483:23]
    inst Muxn_9 of Muxn_305 @[Interconnect.scala 473:25]
    Muxn_9.clock <= clock
    Muxn_9.reset <= reset
    Muxn_9.io.in[0] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    reg _T_14 : UInt, clock @[Interconnect.scala 477:55]
    _T_14 <= Muxn_9.io.out @[Interconnect.scala 477:55]
    io.otrackN[0] <= _T_14 @[Interconnect.scala 477:45]
    node _T_15 = bits(ConfigMem.io.out[0], 21, 19) @[Interconnect.scala 483:39]
    Muxn_9.io.config <= _T_15 @[Interconnect.scala 483:23]
    inst Muxn_10 of Muxn_306 @[Interconnect.scala 473:25]
    Muxn_10.clock <= clock
    Muxn_10.reset <= reset
    Muxn_10.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    reg _T_16 : UInt, clock @[Interconnect.scala 477:55]
    _T_16 <= Muxn_10.io.out @[Interconnect.scala 477:55]
    io.otrackE[0] <= _T_16 @[Interconnect.scala 477:45]
    node _T_17 = bits(ConfigMem.io.out[0], 24, 22) @[Interconnect.scala 483:39]
    Muxn_10.io.config <= _T_17 @[Interconnect.scala 483:23]
    inst Muxn_11 of Muxn_307 @[Interconnect.scala 473:25]
    Muxn_11.clock <= clock
    Muxn_11.reset <= reset
    Muxn_11.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[1] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[4] <= io.itrackE[0] @[Interconnect.scala 475:63]
    reg _T_18 : UInt, clock @[Interconnect.scala 477:55]
    _T_18 <= Muxn_11.io.out @[Interconnect.scala 477:55]
    io.otrackS[0] <= _T_18 @[Interconnect.scala 477:45]
    node _T_19 = bits(ConfigMem.io.out[0], 27, 25) @[Interconnect.scala 483:39]
    Muxn_11.io.config <= _T_19 @[Interconnect.scala 483:23]
    
  module ConfigMem_96 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<0>, flip cfg_data : UInt<32>, out : UInt<28>[1]}
    
    wire _T : UInt<28>[1] @[ConfigMem.scala 27:29]
    _T[0] <= UInt<28>("h00") @[ConfigMem.scala 27:29]
    reg regs : UInt<28>[1], clock with : (reset => (reset, _T)) @[ConfigMem.scala 27:21]
    node _T_1 = eq(io.cfg_addr, UInt<1>("h00")) @[ConfigMem.scala 32:38]
    node _T_2 = and(io.cfg_en, _T_1) @[ConfigMem.scala 32:22]
    when _T_2 : @[ConfigMem.scala 32:54]
      node _T_3 = bits(io.cfg_data, 27, 0) @[ConfigMem.scala 33:31]
      regs[0] <= _T_3 @[ConfigMem.scala 33:17]
      skip @[ConfigMem.scala 32:54]
    io.out[0] <= regs[0] @[ConfigMem.scala 52:45]
    
  module Muxn_308 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_309 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_310 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_311 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_312 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_313 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_314 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_315 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_316 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_317 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_318 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_319 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module GIB_16 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<12>, flip cfg_data : UInt<32>, ipinNW : UInt<32>[2], flip opinNW : UInt<32>[1], ipinNE : UInt<32>[2], flip opinNE : UInt<32>[1], ipinSE : UInt<32>[2], flip opinSE : UInt<32>[1], ipinSW : UInt<32>[2], flip opinSW : UInt<32>[1], flip itrackW : UInt<32>[1], otrackW : UInt<32>[1], flip itrackN : UInt<32>[1], otrackN : UInt<32>[1], flip itrackE : UInt<32>[1], otrackE : UInt<32>[1], flip itrackS : UInt<32>[1], otrackS : UInt<32>[1]}
    
    io.ipinNW[0] <= UInt<1>("h00") @[Interconnect.scala 426:20]
    io.ipinNW[1] <= UInt<1>("h00") @[Interconnect.scala 426:20]
    io.ipinNE[0] <= UInt<1>("h00") @[Interconnect.scala 427:20]
    io.ipinNE[1] <= UInt<1>("h00") @[Interconnect.scala 427:20]
    io.ipinSW[0] <= UInt<1>("h00") @[Interconnect.scala 428:20]
    io.ipinSW[1] <= UInt<1>("h00") @[Interconnect.scala 428:20]
    io.ipinSE[0] <= UInt<1>("h00") @[Interconnect.scala 429:20]
    io.ipinSE[1] <= UInt<1>("h00") @[Interconnect.scala 429:20]
    io.otrackW[0] <= UInt<1>("h00") @[Interconnect.scala 430:21]
    io.otrackN[0] <= UInt<1>("h00") @[Interconnect.scala 431:21]
    io.otrackE[0] <= UInt<1>("h00") @[Interconnect.scala 432:21]
    io.otrackS[0] <= UInt<1>("h00") @[Interconnect.scala 433:21]
    inst ConfigMem of ConfigMem_96 @[Interconnect.scala 463:21]
    ConfigMem.clock <= clock
    ConfigMem.reset <= reset
    node _T = bits(io.cfg_addr, 11, 2) @[Interconnect.scala 464:65]
    node _T_1 = eq(UInt<6>("h02c"), _T) @[Interconnect.scala 464:50]
    node _T_2 = and(io.cfg_en, _T_1) @[Interconnect.scala 464:32]
    ConfigMem.io.cfg_en <= _T_2 @[Interconnect.scala 464:19]
    node _T_3 = bits(io.cfg_addr, 1, 0) @[Interconnect.scala 465:35]
    ConfigMem.io.cfg_addr <= _T_3 @[Interconnect.scala 465:21]
    ConfigMem.io.cfg_data <= io.cfg_data @[Interconnect.scala 466:21]
    inst Muxn of Muxn_308 @[Interconnect.scala 473:25]
    Muxn.clock <= clock
    Muxn.reset <= reset
    Muxn.io.in[0] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn.io.in[2] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNW[0] <= Muxn.io.out @[Interconnect.scala 479:45]
    node _T_4 = bits(ConfigMem.io.out[0], 1, 0) @[Interconnect.scala 483:39]
    Muxn.io.config <= _T_4 @[Interconnect.scala 483:23]
    inst Muxn_1 of Muxn_309 @[Interconnect.scala 473:25]
    Muxn_1.clock <= clock
    Muxn_1.reset <= reset
    Muxn_1.io.in[0] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[2] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNW[1] <= Muxn_1.io.out @[Interconnect.scala 479:45]
    node _T_5 = bits(ConfigMem.io.out[0], 3, 2) @[Interconnect.scala 483:39]
    Muxn_1.io.config <= _T_5 @[Interconnect.scala 483:23]
    inst Muxn_2 of Muxn_310 @[Interconnect.scala 473:25]
    Muxn_2.clock <= clock
    Muxn_2.reset <= reset
    Muxn_2.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNE[0] <= Muxn_2.io.out @[Interconnect.scala 479:45]
    node _T_6 = bits(ConfigMem.io.out[0], 5, 4) @[Interconnect.scala 483:39]
    Muxn_2.io.config <= _T_6 @[Interconnect.scala 483:23]
    inst Muxn_3 of Muxn_311 @[Interconnect.scala 473:25]
    Muxn_3.clock <= clock
    Muxn_3.reset <= reset
    Muxn_3.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNE[1] <= Muxn_3.io.out @[Interconnect.scala 479:45]
    node _T_7 = bits(ConfigMem.io.out[0], 7, 6) @[Interconnect.scala 483:39]
    Muxn_3.io.config <= _T_7 @[Interconnect.scala 483:23]
    inst Muxn_4 of Muxn_312 @[Interconnect.scala 473:25]
    Muxn_4.clock <= clock
    Muxn_4.reset <= reset
    Muxn_4.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[1] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    io.ipinSE[0] <= Muxn_4.io.out @[Interconnect.scala 479:45]
    node _T_8 = bits(ConfigMem.io.out[0], 9, 8) @[Interconnect.scala 483:39]
    Muxn_4.io.config <= _T_8 @[Interconnect.scala 483:23]
    inst Muxn_5 of Muxn_313 @[Interconnect.scala 473:25]
    Muxn_5.clock <= clock
    Muxn_5.reset <= reset
    Muxn_5.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[1] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    io.ipinSE[1] <= Muxn_5.io.out @[Interconnect.scala 479:45]
    node _T_9 = bits(ConfigMem.io.out[0], 11, 10) @[Interconnect.scala 483:39]
    Muxn_5.io.config <= _T_9 @[Interconnect.scala 483:23]
    inst Muxn_6 of Muxn_314 @[Interconnect.scala 473:25]
    Muxn_6.clock <= clock
    Muxn_6.reset <= reset
    Muxn_6.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[1] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    io.ipinSW[0] <= Muxn_6.io.out @[Interconnect.scala 479:45]
    node _T_10 = bits(ConfigMem.io.out[0], 13, 12) @[Interconnect.scala 483:39]
    Muxn_6.io.config <= _T_10 @[Interconnect.scala 483:23]
    inst Muxn_7 of Muxn_315 @[Interconnect.scala 473:25]
    Muxn_7.clock <= clock
    Muxn_7.reset <= reset
    Muxn_7.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[1] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    io.ipinSW[1] <= Muxn_7.io.out @[Interconnect.scala 479:45]
    node _T_11 = bits(ConfigMem.io.out[0], 15, 14) @[Interconnect.scala 483:39]
    Muxn_7.io.config <= _T_11 @[Interconnect.scala 483:23]
    inst Muxn_8 of Muxn_316 @[Interconnect.scala 473:25]
    Muxn_8.clock <= clock
    Muxn_8.reset <= reset
    Muxn_8.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[1] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.otrackW[0] <= Muxn_8.io.out @[Interconnect.scala 479:45]
    node _T_12 = bits(ConfigMem.io.out[0], 18, 16) @[Interconnect.scala 483:39]
    Muxn_8.io.config <= _T_12 @[Interconnect.scala 483:23]
    inst Muxn_9 of Muxn_317 @[Interconnect.scala 473:25]
    Muxn_9.clock <= clock
    Muxn_9.reset <= reset
    Muxn_9.io.in[0] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.otrackN[0] <= Muxn_9.io.out @[Interconnect.scala 479:45]
    node _T_13 = bits(ConfigMem.io.out[0], 21, 19) @[Interconnect.scala 483:39]
    Muxn_9.io.config <= _T_13 @[Interconnect.scala 483:23]
    inst Muxn_10 of Muxn_318 @[Interconnect.scala 473:25]
    Muxn_10.clock <= clock
    Muxn_10.reset <= reset
    Muxn_10.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.otrackE[0] <= Muxn_10.io.out @[Interconnect.scala 479:45]
    node _T_14 = bits(ConfigMem.io.out[0], 24, 22) @[Interconnect.scala 483:39]
    Muxn_10.io.config <= _T_14 @[Interconnect.scala 483:23]
    inst Muxn_11 of Muxn_319 @[Interconnect.scala 473:25]
    Muxn_11.clock <= clock
    Muxn_11.reset <= reset
    Muxn_11.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[1] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[4] <= io.itrackE[0] @[Interconnect.scala 475:63]
    io.otrackS[0] <= Muxn_11.io.out @[Interconnect.scala 479:45]
    node _T_15 = bits(ConfigMem.io.out[0], 27, 25) @[Interconnect.scala 483:39]
    Muxn_11.io.config <= _T_15 @[Interconnect.scala 483:23]
    
  module ConfigMem_97 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<0>, flip cfg_data : UInt<32>, out : UInt<15>[1]}
    
    wire _T : UInt<15>[1] @[ConfigMem.scala 27:29]
    _T[0] <= UInt<15>("h00") @[ConfigMem.scala 27:29]
    reg regs : UInt<15>[1], clock with : (reset => (reset, _T)) @[ConfigMem.scala 27:21]
    node _T_1 = eq(io.cfg_addr, UInt<1>("h00")) @[ConfigMem.scala 32:38]
    node _T_2 = and(io.cfg_en, _T_1) @[ConfigMem.scala 32:22]
    when _T_2 : @[ConfigMem.scala 32:54]
      node _T_3 = bits(io.cfg_data, 14, 0) @[ConfigMem.scala 33:31]
      regs[0] <= _T_3 @[ConfigMem.scala 33:17]
      skip @[ConfigMem.scala 32:54]
    io.out[0] <= regs[0] @[ConfigMem.scala 52:45]
    
  module Muxn_320 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[3], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_321 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[3], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_322 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<1>, flip in : UInt<32>[2], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    io.out <= _T_1 @[Multiplexer.scala 20:10]
    
  module Muxn_323 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<1>, flip in : UInt<32>[2], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    io.out <= _T_1 @[Multiplexer.scala 20:10]
    
  module Muxn_324 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[3], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_325 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_326 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_327 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module GIB_17 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<12>, flip cfg_data : UInt<32>, ipinNW : UInt<32>[2], flip opinNW : UInt<32>[1], ipinNE : UInt<32>[0], flip opinNE : UInt<32>[0], ipinSE : UInt<32>[0], flip opinSE : UInt<32>[0], ipinSW : UInt<32>[2], flip opinSW : UInt<32>[1], flip itrackW : UInt<32>[1], otrackW : UInt<32>[1], flip itrackN : UInt<32>[1], otrackN : UInt<32>[1], flip itrackE : UInt<32>[1], otrackE : UInt<32>[1], flip itrackS : UInt<32>[1], otrackS : UInt<32>[1]}
    
    io.ipinNW[0] <= UInt<1>("h00") @[Interconnect.scala 426:20]
    io.ipinNW[1] <= UInt<1>("h00") @[Interconnect.scala 426:20]
    io.ipinSW[0] <= UInt<1>("h00") @[Interconnect.scala 428:20]
    io.ipinSW[1] <= UInt<1>("h00") @[Interconnect.scala 428:20]
    io.otrackW[0] <= UInt<1>("h00") @[Interconnect.scala 430:21]
    io.otrackN[0] <= UInt<1>("h00") @[Interconnect.scala 431:21]
    io.otrackE[0] <= UInt<1>("h00") @[Interconnect.scala 432:21]
    io.otrackS[0] <= UInt<1>("h00") @[Interconnect.scala 433:21]
    inst ConfigMem of ConfigMem_97 @[Interconnect.scala 463:21]
    ConfigMem.clock <= clock
    ConfigMem.reset <= reset
    node _T = bits(io.cfg_addr, 11, 2) @[Interconnect.scala 464:65]
    node _T_1 = eq(UInt<6>("h02d"), _T) @[Interconnect.scala 464:50]
    node _T_2 = and(io.cfg_en, _T_1) @[Interconnect.scala 464:32]
    ConfigMem.io.cfg_en <= _T_2 @[Interconnect.scala 464:19]
    node _T_3 = bits(io.cfg_addr, 1, 0) @[Interconnect.scala 465:35]
    ConfigMem.io.cfg_addr <= _T_3 @[Interconnect.scala 465:21]
    ConfigMem.io.cfg_data <= io.cfg_data @[Interconnect.scala 466:21]
    inst Muxn of Muxn_320 @[Interconnect.scala 473:25]
    Muxn.clock <= clock
    Muxn.reset <= reset
    Muxn.io.in[0] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn.io.in[1] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn.io.in[2] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNW[0] <= Muxn.io.out @[Interconnect.scala 479:45]
    node _T_4 = bits(ConfigMem.io.out[0], 1, 0) @[Interconnect.scala 483:39]
    Muxn.io.config <= _T_4 @[Interconnect.scala 483:23]
    inst Muxn_1 of Muxn_321 @[Interconnect.scala 473:25]
    Muxn_1.clock <= clock
    Muxn_1.reset <= reset
    Muxn_1.io.in[0] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[1] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[2] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNW[1] <= Muxn_1.io.out @[Interconnect.scala 479:45]
    node _T_5 = bits(ConfigMem.io.out[0], 3, 2) @[Interconnect.scala 483:39]
    Muxn_1.io.config <= _T_5 @[Interconnect.scala 483:23]
    inst Muxn_2 of Muxn_322 @[Interconnect.scala 473:25]
    Muxn_2.clock <= clock
    Muxn_2.reset <= reset
    Muxn_2.io.in[0] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[1] <= io.itrackE[0] @[Interconnect.scala 475:63]
    io.ipinSW[0] <= Muxn_2.io.out @[Interconnect.scala 479:45]
    node _T_6 = bits(ConfigMem.io.out[0], 4, 4) @[Interconnect.scala 483:39]
    Muxn_2.io.config <= _T_6 @[Interconnect.scala 483:23]
    inst Muxn_3 of Muxn_323 @[Interconnect.scala 473:25]
    Muxn_3.clock <= clock
    Muxn_3.reset <= reset
    Muxn_3.io.in[0] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[1] <= io.itrackE[0] @[Interconnect.scala 475:63]
    io.ipinSW[1] <= Muxn_3.io.out @[Interconnect.scala 479:45]
    node _T_7 = bits(ConfigMem.io.out[0], 5, 5) @[Interconnect.scala 483:39]
    Muxn_3.io.config <= _T_7 @[Interconnect.scala 483:23]
    inst Muxn_4 of Muxn_324 @[Interconnect.scala 473:25]
    Muxn_4.clock <= clock
    Muxn_4.reset <= reset
    Muxn_4.io.in[0] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[1] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[2] <= io.itrackS[0] @[Interconnect.scala 475:63]
    reg _T_8 : UInt, clock @[Interconnect.scala 477:55]
    _T_8 <= Muxn_4.io.out @[Interconnect.scala 477:55]
    io.otrackW[0] <= _T_8 @[Interconnect.scala 477:45]
    node _T_9 = bits(ConfigMem.io.out[0], 7, 6) @[Interconnect.scala 483:39]
    Muxn_4.io.config <= _T_9 @[Interconnect.scala 483:23]
    inst Muxn_5 of Muxn_325 @[Interconnect.scala 473:25]
    Muxn_5.clock <= clock
    Muxn_5.reset <= reset
    Muxn_5.io.in[0] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[1] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[2] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    reg _T_10 : UInt, clock @[Interconnect.scala 477:55]
    _T_10 <= Muxn_5.io.out @[Interconnect.scala 477:55]
    io.otrackN[0] <= _T_10 @[Interconnect.scala 477:45]
    node _T_11 = bits(ConfigMem.io.out[0], 9, 8) @[Interconnect.scala 483:39]
    Muxn_5.io.config <= _T_11 @[Interconnect.scala 483:23]
    inst Muxn_6 of Muxn_326 @[Interconnect.scala 473:25]
    Muxn_6.clock <= clock
    Muxn_6.reset <= reset
    Muxn_6.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    reg _T_12 : UInt, clock @[Interconnect.scala 477:55]
    _T_12 <= Muxn_6.io.out @[Interconnect.scala 477:55]
    io.otrackE[0] <= _T_12 @[Interconnect.scala 477:45]
    node _T_13 = bits(ConfigMem.io.out[0], 12, 10) @[Interconnect.scala 483:39]
    Muxn_6.io.config <= _T_13 @[Interconnect.scala 483:23]
    inst Muxn_7 of Muxn_327 @[Interconnect.scala 473:25]
    Muxn_7.clock <= clock
    Muxn_7.reset <= reset
    Muxn_7.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[1] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    reg _T_14 : UInt, clock @[Interconnect.scala 477:55]
    _T_14 <= Muxn_7.io.out @[Interconnect.scala 477:55]
    io.otrackS[0] <= _T_14 @[Interconnect.scala 477:45]
    node _T_15 = bits(ConfigMem.io.out[0], 14, 13) @[Interconnect.scala 483:39]
    Muxn_7.io.config <= _T_15 @[Interconnect.scala 483:23]
    
  module ConfigMem_98 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<0>, flip cfg_data : UInt<32>, out : UInt<15>[1]}
    
    wire _T : UInt<15>[1] @[ConfigMem.scala 27:29]
    _T[0] <= UInt<15>("h00") @[ConfigMem.scala 27:29]
    reg regs : UInt<15>[1], clock with : (reset => (reset, _T)) @[ConfigMem.scala 27:21]
    node _T_1 = eq(io.cfg_addr, UInt<1>("h00")) @[ConfigMem.scala 32:38]
    node _T_2 = and(io.cfg_en, _T_1) @[ConfigMem.scala 32:22]
    when _T_2 : @[ConfigMem.scala 32:54]
      node _T_3 = bits(io.cfg_data, 14, 0) @[ConfigMem.scala 33:31]
      regs[0] <= _T_3 @[ConfigMem.scala 33:17]
      skip @[ConfigMem.scala 32:54]
    io.out[0] <= regs[0] @[ConfigMem.scala 52:45]
    
  module Muxn_328 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<1>, flip in : UInt<32>[2], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    io.out <= _T_1 @[Multiplexer.scala 20:10]
    
  module Muxn_329 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<1>, flip in : UInt<32>[2], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    io.out <= _T_1 @[Multiplexer.scala 20:10]
    
  module Muxn_330 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[3], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_331 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[3], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_332 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_333 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_334 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[3], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_335 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module GIB_18 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<12>, flip cfg_data : UInt<32>, ipinNW : UInt<32>[0], flip opinNW : UInt<32>[0], ipinNE : UInt<32>[2], flip opinNE : UInt<32>[1], ipinSE : UInt<32>[2], flip opinSE : UInt<32>[1], ipinSW : UInt<32>[0], flip opinSW : UInt<32>[0], flip itrackW : UInt<32>[1], otrackW : UInt<32>[1], flip itrackN : UInt<32>[1], otrackN : UInt<32>[1], flip itrackE : UInt<32>[1], otrackE : UInt<32>[1], flip itrackS : UInt<32>[1], otrackS : UInt<32>[1]}
    
    io.ipinNE[0] <= UInt<1>("h00") @[Interconnect.scala 427:20]
    io.ipinNE[1] <= UInt<1>("h00") @[Interconnect.scala 427:20]
    io.ipinSE[0] <= UInt<1>("h00") @[Interconnect.scala 429:20]
    io.ipinSE[1] <= UInt<1>("h00") @[Interconnect.scala 429:20]
    io.otrackW[0] <= UInt<1>("h00") @[Interconnect.scala 430:21]
    io.otrackN[0] <= UInt<1>("h00") @[Interconnect.scala 431:21]
    io.otrackE[0] <= UInt<1>("h00") @[Interconnect.scala 432:21]
    io.otrackS[0] <= UInt<1>("h00") @[Interconnect.scala 433:21]
    inst ConfigMem of ConfigMem_98 @[Interconnect.scala 463:21]
    ConfigMem.clock <= clock
    ConfigMem.reset <= reset
    node _T = bits(io.cfg_addr, 11, 2) @[Interconnect.scala 464:65]
    node _T_1 = eq(UInt<6>("h037"), _T) @[Interconnect.scala 464:50]
    node _T_2 = and(io.cfg_en, _T_1) @[Interconnect.scala 464:32]
    ConfigMem.io.cfg_en <= _T_2 @[Interconnect.scala 464:19]
    node _T_3 = bits(io.cfg_addr, 1, 0) @[Interconnect.scala 465:35]
    ConfigMem.io.cfg_addr <= _T_3 @[Interconnect.scala 465:21]
    ConfigMem.io.cfg_data <= io.cfg_data @[Interconnect.scala 466:21]
    inst Muxn of Muxn_328 @[Interconnect.scala 473:25]
    Muxn.clock <= clock
    Muxn.reset <= reset
    Muxn.io.in[0] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn.io.in[1] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNE[0] <= Muxn.io.out @[Interconnect.scala 479:45]
    node _T_4 = bits(ConfigMem.io.out[0], 0, 0) @[Interconnect.scala 483:39]
    Muxn.io.config <= _T_4 @[Interconnect.scala 483:23]
    inst Muxn_1 of Muxn_329 @[Interconnect.scala 473:25]
    Muxn_1.clock <= clock
    Muxn_1.reset <= reset
    Muxn_1.io.in[0] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[1] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNE[1] <= Muxn_1.io.out @[Interconnect.scala 479:45]
    node _T_5 = bits(ConfigMem.io.out[0], 1, 1) @[Interconnect.scala 483:39]
    Muxn_1.io.config <= _T_5 @[Interconnect.scala 483:23]
    inst Muxn_2 of Muxn_330 @[Interconnect.scala 473:25]
    Muxn_2.clock <= clock
    Muxn_2.reset <= reset
    Muxn_2.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[1] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    io.ipinSE[0] <= Muxn_2.io.out @[Interconnect.scala 479:45]
    node _T_6 = bits(ConfigMem.io.out[0], 3, 2) @[Interconnect.scala 483:39]
    Muxn_2.io.config <= _T_6 @[Interconnect.scala 483:23]
    inst Muxn_3 of Muxn_331 @[Interconnect.scala 473:25]
    Muxn_3.clock <= clock
    Muxn_3.reset <= reset
    Muxn_3.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[1] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    io.ipinSE[1] <= Muxn_3.io.out @[Interconnect.scala 479:45]
    node _T_7 = bits(ConfigMem.io.out[0], 5, 4) @[Interconnect.scala 483:39]
    Muxn_3.io.config <= _T_7 @[Interconnect.scala 483:23]
    inst Muxn_4 of Muxn_332 @[Interconnect.scala 473:25]
    Muxn_4.clock <= clock
    Muxn_4.reset <= reset
    Muxn_4.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[1] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.otrackW[0] <= Muxn_4.io.out @[Interconnect.scala 479:45]
    node _T_8 = bits(ConfigMem.io.out[0], 8, 6) @[Interconnect.scala 483:39]
    Muxn_4.io.config <= _T_8 @[Interconnect.scala 483:23]
    inst Muxn_5 of Muxn_333 @[Interconnect.scala 473:25]
    Muxn_5.clock <= clock
    Muxn_5.reset <= reset
    Muxn_5.io.in[0] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[1] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[2] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.otrackN[0] <= Muxn_5.io.out @[Interconnect.scala 479:45]
    node _T_9 = bits(ConfigMem.io.out[0], 10, 9) @[Interconnect.scala 483:39]
    Muxn_5.io.config <= _T_9 @[Interconnect.scala 483:23]
    inst Muxn_6 of Muxn_334 @[Interconnect.scala 473:25]
    Muxn_6.clock <= clock
    Muxn_6.reset <= reset
    Muxn_6.io.in[0] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[1] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[2] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.otrackE[0] <= Muxn_6.io.out @[Interconnect.scala 479:45]
    node _T_10 = bits(ConfigMem.io.out[0], 12, 11) @[Interconnect.scala 483:39]
    Muxn_6.io.config <= _T_10 @[Interconnect.scala 483:23]
    inst Muxn_7 of Muxn_335 @[Interconnect.scala 473:25]
    Muxn_7.clock <= clock
    Muxn_7.reset <= reset
    Muxn_7.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[1] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    io.otrackS[0] <= Muxn_7.io.out @[Interconnect.scala 479:45]
    node _T_11 = bits(ConfigMem.io.out[0], 14, 13) @[Interconnect.scala 483:39]
    Muxn_7.io.config <= _T_11 @[Interconnect.scala 483:23]
    
  module ConfigMem_99 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<0>, flip cfg_data : UInt<32>, out : UInt<28>[1]}
    
    wire _T : UInt<28>[1] @[ConfigMem.scala 27:29]
    _T[0] <= UInt<28>("h00") @[ConfigMem.scala 27:29]
    reg regs : UInt<28>[1], clock with : (reset => (reset, _T)) @[ConfigMem.scala 27:21]
    node _T_1 = eq(io.cfg_addr, UInt<1>("h00")) @[ConfigMem.scala 32:38]
    node _T_2 = and(io.cfg_en, _T_1) @[ConfigMem.scala 32:22]
    when _T_2 : @[ConfigMem.scala 32:54]
      node _T_3 = bits(io.cfg_data, 27, 0) @[ConfigMem.scala 33:31]
      regs[0] <= _T_3 @[ConfigMem.scala 33:17]
      skip @[ConfigMem.scala 32:54]
    io.out[0] <= regs[0] @[ConfigMem.scala 52:45]
    
  module Muxn_336 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_337 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_338 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_339 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_340 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_341 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_342 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_343 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_344 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_345 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_346 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_347 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module GIB_19 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<12>, flip cfg_data : UInt<32>, ipinNW : UInt<32>[2], flip opinNW : UInt<32>[1], ipinNE : UInt<32>[2], flip opinNE : UInt<32>[1], ipinSE : UInt<32>[2], flip opinSE : UInt<32>[1], ipinSW : UInt<32>[2], flip opinSW : UInt<32>[1], flip itrackW : UInt<32>[1], otrackW : UInt<32>[1], flip itrackN : UInt<32>[1], otrackN : UInt<32>[1], flip itrackE : UInt<32>[1], otrackE : UInt<32>[1], flip itrackS : UInt<32>[1], otrackS : UInt<32>[1]}
    
    io.ipinNW[0] <= UInt<1>("h00") @[Interconnect.scala 426:20]
    io.ipinNW[1] <= UInt<1>("h00") @[Interconnect.scala 426:20]
    io.ipinNE[0] <= UInt<1>("h00") @[Interconnect.scala 427:20]
    io.ipinNE[1] <= UInt<1>("h00") @[Interconnect.scala 427:20]
    io.ipinSW[0] <= UInt<1>("h00") @[Interconnect.scala 428:20]
    io.ipinSW[1] <= UInt<1>("h00") @[Interconnect.scala 428:20]
    io.ipinSE[0] <= UInt<1>("h00") @[Interconnect.scala 429:20]
    io.ipinSE[1] <= UInt<1>("h00") @[Interconnect.scala 429:20]
    io.otrackW[0] <= UInt<1>("h00") @[Interconnect.scala 430:21]
    io.otrackN[0] <= UInt<1>("h00") @[Interconnect.scala 431:21]
    io.otrackE[0] <= UInt<1>("h00") @[Interconnect.scala 432:21]
    io.otrackS[0] <= UInt<1>("h00") @[Interconnect.scala 433:21]
    inst ConfigMem of ConfigMem_99 @[Interconnect.scala 463:21]
    ConfigMem.clock <= clock
    ConfigMem.reset <= reset
    node _T = bits(io.cfg_addr, 11, 2) @[Interconnect.scala 464:65]
    node _T_1 = eq(UInt<6>("h038"), _T) @[Interconnect.scala 464:50]
    node _T_2 = and(io.cfg_en, _T_1) @[Interconnect.scala 464:32]
    ConfigMem.io.cfg_en <= _T_2 @[Interconnect.scala 464:19]
    node _T_3 = bits(io.cfg_addr, 1, 0) @[Interconnect.scala 465:35]
    ConfigMem.io.cfg_addr <= _T_3 @[Interconnect.scala 465:21]
    ConfigMem.io.cfg_data <= io.cfg_data @[Interconnect.scala 466:21]
    inst Muxn of Muxn_336 @[Interconnect.scala 473:25]
    Muxn.clock <= clock
    Muxn.reset <= reset
    Muxn.io.in[0] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn.io.in[2] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNW[0] <= Muxn.io.out @[Interconnect.scala 479:45]
    node _T_4 = bits(ConfigMem.io.out[0], 1, 0) @[Interconnect.scala 483:39]
    Muxn.io.config <= _T_4 @[Interconnect.scala 483:23]
    inst Muxn_1 of Muxn_337 @[Interconnect.scala 473:25]
    Muxn_1.clock <= clock
    Muxn_1.reset <= reset
    Muxn_1.io.in[0] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[2] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNW[1] <= Muxn_1.io.out @[Interconnect.scala 479:45]
    node _T_5 = bits(ConfigMem.io.out[0], 3, 2) @[Interconnect.scala 483:39]
    Muxn_1.io.config <= _T_5 @[Interconnect.scala 483:23]
    inst Muxn_2 of Muxn_338 @[Interconnect.scala 473:25]
    Muxn_2.clock <= clock
    Muxn_2.reset <= reset
    Muxn_2.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNE[0] <= Muxn_2.io.out @[Interconnect.scala 479:45]
    node _T_6 = bits(ConfigMem.io.out[0], 5, 4) @[Interconnect.scala 483:39]
    Muxn_2.io.config <= _T_6 @[Interconnect.scala 483:23]
    inst Muxn_3 of Muxn_339 @[Interconnect.scala 473:25]
    Muxn_3.clock <= clock
    Muxn_3.reset <= reset
    Muxn_3.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNE[1] <= Muxn_3.io.out @[Interconnect.scala 479:45]
    node _T_7 = bits(ConfigMem.io.out[0], 7, 6) @[Interconnect.scala 483:39]
    Muxn_3.io.config <= _T_7 @[Interconnect.scala 483:23]
    inst Muxn_4 of Muxn_340 @[Interconnect.scala 473:25]
    Muxn_4.clock <= clock
    Muxn_4.reset <= reset
    Muxn_4.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[1] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    io.ipinSE[0] <= Muxn_4.io.out @[Interconnect.scala 479:45]
    node _T_8 = bits(ConfigMem.io.out[0], 9, 8) @[Interconnect.scala 483:39]
    Muxn_4.io.config <= _T_8 @[Interconnect.scala 483:23]
    inst Muxn_5 of Muxn_341 @[Interconnect.scala 473:25]
    Muxn_5.clock <= clock
    Muxn_5.reset <= reset
    Muxn_5.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[1] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    io.ipinSE[1] <= Muxn_5.io.out @[Interconnect.scala 479:45]
    node _T_9 = bits(ConfigMem.io.out[0], 11, 10) @[Interconnect.scala 483:39]
    Muxn_5.io.config <= _T_9 @[Interconnect.scala 483:23]
    inst Muxn_6 of Muxn_342 @[Interconnect.scala 473:25]
    Muxn_6.clock <= clock
    Muxn_6.reset <= reset
    Muxn_6.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[1] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    io.ipinSW[0] <= Muxn_6.io.out @[Interconnect.scala 479:45]
    node _T_10 = bits(ConfigMem.io.out[0], 13, 12) @[Interconnect.scala 483:39]
    Muxn_6.io.config <= _T_10 @[Interconnect.scala 483:23]
    inst Muxn_7 of Muxn_343 @[Interconnect.scala 473:25]
    Muxn_7.clock <= clock
    Muxn_7.reset <= reset
    Muxn_7.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[1] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    io.ipinSW[1] <= Muxn_7.io.out @[Interconnect.scala 479:45]
    node _T_11 = bits(ConfigMem.io.out[0], 15, 14) @[Interconnect.scala 483:39]
    Muxn_7.io.config <= _T_11 @[Interconnect.scala 483:23]
    inst Muxn_8 of Muxn_344 @[Interconnect.scala 473:25]
    Muxn_8.clock <= clock
    Muxn_8.reset <= reset
    Muxn_8.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[1] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    reg _T_12 : UInt, clock @[Interconnect.scala 477:55]
    _T_12 <= Muxn_8.io.out @[Interconnect.scala 477:55]
    io.otrackW[0] <= _T_12 @[Interconnect.scala 477:45]
    node _T_13 = bits(ConfigMem.io.out[0], 18, 16) @[Interconnect.scala 483:39]
    Muxn_8.io.config <= _T_13 @[Interconnect.scala 483:23]
    inst Muxn_9 of Muxn_345 @[Interconnect.scala 473:25]
    Muxn_9.clock <= clock
    Muxn_9.reset <= reset
    Muxn_9.io.in[0] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    reg _T_14 : UInt, clock @[Interconnect.scala 477:55]
    _T_14 <= Muxn_9.io.out @[Interconnect.scala 477:55]
    io.otrackN[0] <= _T_14 @[Interconnect.scala 477:45]
    node _T_15 = bits(ConfigMem.io.out[0], 21, 19) @[Interconnect.scala 483:39]
    Muxn_9.io.config <= _T_15 @[Interconnect.scala 483:23]
    inst Muxn_10 of Muxn_346 @[Interconnect.scala 473:25]
    Muxn_10.clock <= clock
    Muxn_10.reset <= reset
    Muxn_10.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    reg _T_16 : UInt, clock @[Interconnect.scala 477:55]
    _T_16 <= Muxn_10.io.out @[Interconnect.scala 477:55]
    io.otrackE[0] <= _T_16 @[Interconnect.scala 477:45]
    node _T_17 = bits(ConfigMem.io.out[0], 24, 22) @[Interconnect.scala 483:39]
    Muxn_10.io.config <= _T_17 @[Interconnect.scala 483:23]
    inst Muxn_11 of Muxn_347 @[Interconnect.scala 473:25]
    Muxn_11.clock <= clock
    Muxn_11.reset <= reset
    Muxn_11.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[1] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[4] <= io.itrackE[0] @[Interconnect.scala 475:63]
    reg _T_18 : UInt, clock @[Interconnect.scala 477:55]
    _T_18 <= Muxn_11.io.out @[Interconnect.scala 477:55]
    io.otrackS[0] <= _T_18 @[Interconnect.scala 477:45]
    node _T_19 = bits(ConfigMem.io.out[0], 27, 25) @[Interconnect.scala 483:39]
    Muxn_11.io.config <= _T_19 @[Interconnect.scala 483:23]
    
  module ConfigMem_100 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<0>, flip cfg_data : UInt<32>, out : UInt<28>[1]}
    
    wire _T : UInt<28>[1] @[ConfigMem.scala 27:29]
    _T[0] <= UInt<28>("h00") @[ConfigMem.scala 27:29]
    reg regs : UInt<28>[1], clock with : (reset => (reset, _T)) @[ConfigMem.scala 27:21]
    node _T_1 = eq(io.cfg_addr, UInt<1>("h00")) @[ConfigMem.scala 32:38]
    node _T_2 = and(io.cfg_en, _T_1) @[ConfigMem.scala 32:22]
    when _T_2 : @[ConfigMem.scala 32:54]
      node _T_3 = bits(io.cfg_data, 27, 0) @[ConfigMem.scala 33:31]
      regs[0] <= _T_3 @[ConfigMem.scala 33:17]
      skip @[ConfigMem.scala 32:54]
    io.out[0] <= regs[0] @[ConfigMem.scala 52:45]
    
  module Muxn_348 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_349 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_350 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_351 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_352 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_353 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_354 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_355 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_356 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_357 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_358 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_359 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module GIB_20 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<12>, flip cfg_data : UInt<32>, ipinNW : UInt<32>[2], flip opinNW : UInt<32>[1], ipinNE : UInt<32>[2], flip opinNE : UInt<32>[1], ipinSE : UInt<32>[2], flip opinSE : UInt<32>[1], ipinSW : UInt<32>[2], flip opinSW : UInt<32>[1], flip itrackW : UInt<32>[1], otrackW : UInt<32>[1], flip itrackN : UInt<32>[1], otrackN : UInt<32>[1], flip itrackE : UInt<32>[1], otrackE : UInt<32>[1], flip itrackS : UInt<32>[1], otrackS : UInt<32>[1]}
    
    io.ipinNW[0] <= UInt<1>("h00") @[Interconnect.scala 426:20]
    io.ipinNW[1] <= UInt<1>("h00") @[Interconnect.scala 426:20]
    io.ipinNE[0] <= UInt<1>("h00") @[Interconnect.scala 427:20]
    io.ipinNE[1] <= UInt<1>("h00") @[Interconnect.scala 427:20]
    io.ipinSW[0] <= UInt<1>("h00") @[Interconnect.scala 428:20]
    io.ipinSW[1] <= UInt<1>("h00") @[Interconnect.scala 428:20]
    io.ipinSE[0] <= UInt<1>("h00") @[Interconnect.scala 429:20]
    io.ipinSE[1] <= UInt<1>("h00") @[Interconnect.scala 429:20]
    io.otrackW[0] <= UInt<1>("h00") @[Interconnect.scala 430:21]
    io.otrackN[0] <= UInt<1>("h00") @[Interconnect.scala 431:21]
    io.otrackE[0] <= UInt<1>("h00") @[Interconnect.scala 432:21]
    io.otrackS[0] <= UInt<1>("h00") @[Interconnect.scala 433:21]
    inst ConfigMem of ConfigMem_100 @[Interconnect.scala 463:21]
    ConfigMem.clock <= clock
    ConfigMem.reset <= reset
    node _T = bits(io.cfg_addr, 11, 2) @[Interconnect.scala 464:65]
    node _T_1 = eq(UInt<6>("h039"), _T) @[Interconnect.scala 464:50]
    node _T_2 = and(io.cfg_en, _T_1) @[Interconnect.scala 464:32]
    ConfigMem.io.cfg_en <= _T_2 @[Interconnect.scala 464:19]
    node _T_3 = bits(io.cfg_addr, 1, 0) @[Interconnect.scala 465:35]
    ConfigMem.io.cfg_addr <= _T_3 @[Interconnect.scala 465:21]
    ConfigMem.io.cfg_data <= io.cfg_data @[Interconnect.scala 466:21]
    inst Muxn of Muxn_348 @[Interconnect.scala 473:25]
    Muxn.clock <= clock
    Muxn.reset <= reset
    Muxn.io.in[0] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn.io.in[2] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNW[0] <= Muxn.io.out @[Interconnect.scala 479:45]
    node _T_4 = bits(ConfigMem.io.out[0], 1, 0) @[Interconnect.scala 483:39]
    Muxn.io.config <= _T_4 @[Interconnect.scala 483:23]
    inst Muxn_1 of Muxn_349 @[Interconnect.scala 473:25]
    Muxn_1.clock <= clock
    Muxn_1.reset <= reset
    Muxn_1.io.in[0] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[2] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNW[1] <= Muxn_1.io.out @[Interconnect.scala 479:45]
    node _T_5 = bits(ConfigMem.io.out[0], 3, 2) @[Interconnect.scala 483:39]
    Muxn_1.io.config <= _T_5 @[Interconnect.scala 483:23]
    inst Muxn_2 of Muxn_350 @[Interconnect.scala 473:25]
    Muxn_2.clock <= clock
    Muxn_2.reset <= reset
    Muxn_2.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNE[0] <= Muxn_2.io.out @[Interconnect.scala 479:45]
    node _T_6 = bits(ConfigMem.io.out[0], 5, 4) @[Interconnect.scala 483:39]
    Muxn_2.io.config <= _T_6 @[Interconnect.scala 483:23]
    inst Muxn_3 of Muxn_351 @[Interconnect.scala 473:25]
    Muxn_3.clock <= clock
    Muxn_3.reset <= reset
    Muxn_3.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNE[1] <= Muxn_3.io.out @[Interconnect.scala 479:45]
    node _T_7 = bits(ConfigMem.io.out[0], 7, 6) @[Interconnect.scala 483:39]
    Muxn_3.io.config <= _T_7 @[Interconnect.scala 483:23]
    inst Muxn_4 of Muxn_352 @[Interconnect.scala 473:25]
    Muxn_4.clock <= clock
    Muxn_4.reset <= reset
    Muxn_4.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[1] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    io.ipinSE[0] <= Muxn_4.io.out @[Interconnect.scala 479:45]
    node _T_8 = bits(ConfigMem.io.out[0], 9, 8) @[Interconnect.scala 483:39]
    Muxn_4.io.config <= _T_8 @[Interconnect.scala 483:23]
    inst Muxn_5 of Muxn_353 @[Interconnect.scala 473:25]
    Muxn_5.clock <= clock
    Muxn_5.reset <= reset
    Muxn_5.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[1] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    io.ipinSE[1] <= Muxn_5.io.out @[Interconnect.scala 479:45]
    node _T_9 = bits(ConfigMem.io.out[0], 11, 10) @[Interconnect.scala 483:39]
    Muxn_5.io.config <= _T_9 @[Interconnect.scala 483:23]
    inst Muxn_6 of Muxn_354 @[Interconnect.scala 473:25]
    Muxn_6.clock <= clock
    Muxn_6.reset <= reset
    Muxn_6.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[1] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    io.ipinSW[0] <= Muxn_6.io.out @[Interconnect.scala 479:45]
    node _T_10 = bits(ConfigMem.io.out[0], 13, 12) @[Interconnect.scala 483:39]
    Muxn_6.io.config <= _T_10 @[Interconnect.scala 483:23]
    inst Muxn_7 of Muxn_355 @[Interconnect.scala 473:25]
    Muxn_7.clock <= clock
    Muxn_7.reset <= reset
    Muxn_7.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[1] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    io.ipinSW[1] <= Muxn_7.io.out @[Interconnect.scala 479:45]
    node _T_11 = bits(ConfigMem.io.out[0], 15, 14) @[Interconnect.scala 483:39]
    Muxn_7.io.config <= _T_11 @[Interconnect.scala 483:23]
    inst Muxn_8 of Muxn_356 @[Interconnect.scala 473:25]
    Muxn_8.clock <= clock
    Muxn_8.reset <= reset
    Muxn_8.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[1] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.otrackW[0] <= Muxn_8.io.out @[Interconnect.scala 479:45]
    node _T_12 = bits(ConfigMem.io.out[0], 18, 16) @[Interconnect.scala 483:39]
    Muxn_8.io.config <= _T_12 @[Interconnect.scala 483:23]
    inst Muxn_9 of Muxn_357 @[Interconnect.scala 473:25]
    Muxn_9.clock <= clock
    Muxn_9.reset <= reset
    Muxn_9.io.in[0] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.otrackN[0] <= Muxn_9.io.out @[Interconnect.scala 479:45]
    node _T_13 = bits(ConfigMem.io.out[0], 21, 19) @[Interconnect.scala 483:39]
    Muxn_9.io.config <= _T_13 @[Interconnect.scala 483:23]
    inst Muxn_10 of Muxn_358 @[Interconnect.scala 473:25]
    Muxn_10.clock <= clock
    Muxn_10.reset <= reset
    Muxn_10.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.otrackE[0] <= Muxn_10.io.out @[Interconnect.scala 479:45]
    node _T_14 = bits(ConfigMem.io.out[0], 24, 22) @[Interconnect.scala 483:39]
    Muxn_10.io.config <= _T_14 @[Interconnect.scala 483:23]
    inst Muxn_11 of Muxn_359 @[Interconnect.scala 473:25]
    Muxn_11.clock <= clock
    Muxn_11.reset <= reset
    Muxn_11.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[1] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[4] <= io.itrackE[0] @[Interconnect.scala 475:63]
    io.otrackS[0] <= Muxn_11.io.out @[Interconnect.scala 479:45]
    node _T_15 = bits(ConfigMem.io.out[0], 27, 25) @[Interconnect.scala 483:39]
    Muxn_11.io.config <= _T_15 @[Interconnect.scala 483:23]
    
  module ConfigMem_101 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<0>, flip cfg_data : UInt<32>, out : UInt<28>[1]}
    
    wire _T : UInt<28>[1] @[ConfigMem.scala 27:29]
    _T[0] <= UInt<28>("h00") @[ConfigMem.scala 27:29]
    reg regs : UInt<28>[1], clock with : (reset => (reset, _T)) @[ConfigMem.scala 27:21]
    node _T_1 = eq(io.cfg_addr, UInt<1>("h00")) @[ConfigMem.scala 32:38]
    node _T_2 = and(io.cfg_en, _T_1) @[ConfigMem.scala 32:22]
    when _T_2 : @[ConfigMem.scala 32:54]
      node _T_3 = bits(io.cfg_data, 27, 0) @[ConfigMem.scala 33:31]
      regs[0] <= _T_3 @[ConfigMem.scala 33:17]
      skip @[ConfigMem.scala 32:54]
    io.out[0] <= regs[0] @[ConfigMem.scala 52:45]
    
  module Muxn_360 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_361 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_362 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_363 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_364 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_365 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_366 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_367 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_368 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_369 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_370 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_371 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module GIB_21 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<12>, flip cfg_data : UInt<32>, ipinNW : UInt<32>[2], flip opinNW : UInt<32>[1], ipinNE : UInt<32>[2], flip opinNE : UInt<32>[1], ipinSE : UInt<32>[2], flip opinSE : UInt<32>[1], ipinSW : UInt<32>[2], flip opinSW : UInt<32>[1], flip itrackW : UInt<32>[1], otrackW : UInt<32>[1], flip itrackN : UInt<32>[1], otrackN : UInt<32>[1], flip itrackE : UInt<32>[1], otrackE : UInt<32>[1], flip itrackS : UInt<32>[1], otrackS : UInt<32>[1]}
    
    io.ipinNW[0] <= UInt<1>("h00") @[Interconnect.scala 426:20]
    io.ipinNW[1] <= UInt<1>("h00") @[Interconnect.scala 426:20]
    io.ipinNE[0] <= UInt<1>("h00") @[Interconnect.scala 427:20]
    io.ipinNE[1] <= UInt<1>("h00") @[Interconnect.scala 427:20]
    io.ipinSW[0] <= UInt<1>("h00") @[Interconnect.scala 428:20]
    io.ipinSW[1] <= UInt<1>("h00") @[Interconnect.scala 428:20]
    io.ipinSE[0] <= UInt<1>("h00") @[Interconnect.scala 429:20]
    io.ipinSE[1] <= UInt<1>("h00") @[Interconnect.scala 429:20]
    io.otrackW[0] <= UInt<1>("h00") @[Interconnect.scala 430:21]
    io.otrackN[0] <= UInt<1>("h00") @[Interconnect.scala 431:21]
    io.otrackE[0] <= UInt<1>("h00") @[Interconnect.scala 432:21]
    io.otrackS[0] <= UInt<1>("h00") @[Interconnect.scala 433:21]
    inst ConfigMem of ConfigMem_101 @[Interconnect.scala 463:21]
    ConfigMem.clock <= clock
    ConfigMem.reset <= reset
    node _T = bits(io.cfg_addr, 11, 2) @[Interconnect.scala 464:65]
    node _T_1 = eq(UInt<6>("h03a"), _T) @[Interconnect.scala 464:50]
    node _T_2 = and(io.cfg_en, _T_1) @[Interconnect.scala 464:32]
    ConfigMem.io.cfg_en <= _T_2 @[Interconnect.scala 464:19]
    node _T_3 = bits(io.cfg_addr, 1, 0) @[Interconnect.scala 465:35]
    ConfigMem.io.cfg_addr <= _T_3 @[Interconnect.scala 465:21]
    ConfigMem.io.cfg_data <= io.cfg_data @[Interconnect.scala 466:21]
    inst Muxn of Muxn_360 @[Interconnect.scala 473:25]
    Muxn.clock <= clock
    Muxn.reset <= reset
    Muxn.io.in[0] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn.io.in[2] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNW[0] <= Muxn.io.out @[Interconnect.scala 479:45]
    node _T_4 = bits(ConfigMem.io.out[0], 1, 0) @[Interconnect.scala 483:39]
    Muxn.io.config <= _T_4 @[Interconnect.scala 483:23]
    inst Muxn_1 of Muxn_361 @[Interconnect.scala 473:25]
    Muxn_1.clock <= clock
    Muxn_1.reset <= reset
    Muxn_1.io.in[0] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[2] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNW[1] <= Muxn_1.io.out @[Interconnect.scala 479:45]
    node _T_5 = bits(ConfigMem.io.out[0], 3, 2) @[Interconnect.scala 483:39]
    Muxn_1.io.config <= _T_5 @[Interconnect.scala 483:23]
    inst Muxn_2 of Muxn_362 @[Interconnect.scala 473:25]
    Muxn_2.clock <= clock
    Muxn_2.reset <= reset
    Muxn_2.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNE[0] <= Muxn_2.io.out @[Interconnect.scala 479:45]
    node _T_6 = bits(ConfigMem.io.out[0], 5, 4) @[Interconnect.scala 483:39]
    Muxn_2.io.config <= _T_6 @[Interconnect.scala 483:23]
    inst Muxn_3 of Muxn_363 @[Interconnect.scala 473:25]
    Muxn_3.clock <= clock
    Muxn_3.reset <= reset
    Muxn_3.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNE[1] <= Muxn_3.io.out @[Interconnect.scala 479:45]
    node _T_7 = bits(ConfigMem.io.out[0], 7, 6) @[Interconnect.scala 483:39]
    Muxn_3.io.config <= _T_7 @[Interconnect.scala 483:23]
    inst Muxn_4 of Muxn_364 @[Interconnect.scala 473:25]
    Muxn_4.clock <= clock
    Muxn_4.reset <= reset
    Muxn_4.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[1] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    io.ipinSE[0] <= Muxn_4.io.out @[Interconnect.scala 479:45]
    node _T_8 = bits(ConfigMem.io.out[0], 9, 8) @[Interconnect.scala 483:39]
    Muxn_4.io.config <= _T_8 @[Interconnect.scala 483:23]
    inst Muxn_5 of Muxn_365 @[Interconnect.scala 473:25]
    Muxn_5.clock <= clock
    Muxn_5.reset <= reset
    Muxn_5.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[1] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    io.ipinSE[1] <= Muxn_5.io.out @[Interconnect.scala 479:45]
    node _T_9 = bits(ConfigMem.io.out[0], 11, 10) @[Interconnect.scala 483:39]
    Muxn_5.io.config <= _T_9 @[Interconnect.scala 483:23]
    inst Muxn_6 of Muxn_366 @[Interconnect.scala 473:25]
    Muxn_6.clock <= clock
    Muxn_6.reset <= reset
    Muxn_6.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[1] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    io.ipinSW[0] <= Muxn_6.io.out @[Interconnect.scala 479:45]
    node _T_10 = bits(ConfigMem.io.out[0], 13, 12) @[Interconnect.scala 483:39]
    Muxn_6.io.config <= _T_10 @[Interconnect.scala 483:23]
    inst Muxn_7 of Muxn_367 @[Interconnect.scala 473:25]
    Muxn_7.clock <= clock
    Muxn_7.reset <= reset
    Muxn_7.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[1] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    io.ipinSW[1] <= Muxn_7.io.out @[Interconnect.scala 479:45]
    node _T_11 = bits(ConfigMem.io.out[0], 15, 14) @[Interconnect.scala 483:39]
    Muxn_7.io.config <= _T_11 @[Interconnect.scala 483:23]
    inst Muxn_8 of Muxn_368 @[Interconnect.scala 473:25]
    Muxn_8.clock <= clock
    Muxn_8.reset <= reset
    Muxn_8.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[1] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    reg _T_12 : UInt, clock @[Interconnect.scala 477:55]
    _T_12 <= Muxn_8.io.out @[Interconnect.scala 477:55]
    io.otrackW[0] <= _T_12 @[Interconnect.scala 477:45]
    node _T_13 = bits(ConfigMem.io.out[0], 18, 16) @[Interconnect.scala 483:39]
    Muxn_8.io.config <= _T_13 @[Interconnect.scala 483:23]
    inst Muxn_9 of Muxn_369 @[Interconnect.scala 473:25]
    Muxn_9.clock <= clock
    Muxn_9.reset <= reset
    Muxn_9.io.in[0] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    reg _T_14 : UInt, clock @[Interconnect.scala 477:55]
    _T_14 <= Muxn_9.io.out @[Interconnect.scala 477:55]
    io.otrackN[0] <= _T_14 @[Interconnect.scala 477:45]
    node _T_15 = bits(ConfigMem.io.out[0], 21, 19) @[Interconnect.scala 483:39]
    Muxn_9.io.config <= _T_15 @[Interconnect.scala 483:23]
    inst Muxn_10 of Muxn_370 @[Interconnect.scala 473:25]
    Muxn_10.clock <= clock
    Muxn_10.reset <= reset
    Muxn_10.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    reg _T_16 : UInt, clock @[Interconnect.scala 477:55]
    _T_16 <= Muxn_10.io.out @[Interconnect.scala 477:55]
    io.otrackE[0] <= _T_16 @[Interconnect.scala 477:45]
    node _T_17 = bits(ConfigMem.io.out[0], 24, 22) @[Interconnect.scala 483:39]
    Muxn_10.io.config <= _T_17 @[Interconnect.scala 483:23]
    inst Muxn_11 of Muxn_371 @[Interconnect.scala 473:25]
    Muxn_11.clock <= clock
    Muxn_11.reset <= reset
    Muxn_11.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[1] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[4] <= io.itrackE[0] @[Interconnect.scala 475:63]
    reg _T_18 : UInt, clock @[Interconnect.scala 477:55]
    _T_18 <= Muxn_11.io.out @[Interconnect.scala 477:55]
    io.otrackS[0] <= _T_18 @[Interconnect.scala 477:45]
    node _T_19 = bits(ConfigMem.io.out[0], 27, 25) @[Interconnect.scala 483:39]
    Muxn_11.io.config <= _T_19 @[Interconnect.scala 483:23]
    
  module ConfigMem_102 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<0>, flip cfg_data : UInt<32>, out : UInt<28>[1]}
    
    wire _T : UInt<28>[1] @[ConfigMem.scala 27:29]
    _T[0] <= UInt<28>("h00") @[ConfigMem.scala 27:29]
    reg regs : UInt<28>[1], clock with : (reset => (reset, _T)) @[ConfigMem.scala 27:21]
    node _T_1 = eq(io.cfg_addr, UInt<1>("h00")) @[ConfigMem.scala 32:38]
    node _T_2 = and(io.cfg_en, _T_1) @[ConfigMem.scala 32:22]
    when _T_2 : @[ConfigMem.scala 32:54]
      node _T_3 = bits(io.cfg_data, 27, 0) @[ConfigMem.scala 33:31]
      regs[0] <= _T_3 @[ConfigMem.scala 33:17]
      skip @[ConfigMem.scala 32:54]
    io.out[0] <= regs[0] @[ConfigMem.scala 52:45]
    
  module Muxn_372 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_373 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_374 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_375 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_376 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_377 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_378 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_379 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_380 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_381 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_382 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_383 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module GIB_22 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<12>, flip cfg_data : UInt<32>, ipinNW : UInt<32>[2], flip opinNW : UInt<32>[1], ipinNE : UInt<32>[2], flip opinNE : UInt<32>[1], ipinSE : UInt<32>[2], flip opinSE : UInt<32>[1], ipinSW : UInt<32>[2], flip opinSW : UInt<32>[1], flip itrackW : UInt<32>[1], otrackW : UInt<32>[1], flip itrackN : UInt<32>[1], otrackN : UInt<32>[1], flip itrackE : UInt<32>[1], otrackE : UInt<32>[1], flip itrackS : UInt<32>[1], otrackS : UInt<32>[1]}
    
    io.ipinNW[0] <= UInt<1>("h00") @[Interconnect.scala 426:20]
    io.ipinNW[1] <= UInt<1>("h00") @[Interconnect.scala 426:20]
    io.ipinNE[0] <= UInt<1>("h00") @[Interconnect.scala 427:20]
    io.ipinNE[1] <= UInt<1>("h00") @[Interconnect.scala 427:20]
    io.ipinSW[0] <= UInt<1>("h00") @[Interconnect.scala 428:20]
    io.ipinSW[1] <= UInt<1>("h00") @[Interconnect.scala 428:20]
    io.ipinSE[0] <= UInt<1>("h00") @[Interconnect.scala 429:20]
    io.ipinSE[1] <= UInt<1>("h00") @[Interconnect.scala 429:20]
    io.otrackW[0] <= UInt<1>("h00") @[Interconnect.scala 430:21]
    io.otrackN[0] <= UInt<1>("h00") @[Interconnect.scala 431:21]
    io.otrackE[0] <= UInt<1>("h00") @[Interconnect.scala 432:21]
    io.otrackS[0] <= UInt<1>("h00") @[Interconnect.scala 433:21]
    inst ConfigMem of ConfigMem_102 @[Interconnect.scala 463:21]
    ConfigMem.clock <= clock
    ConfigMem.reset <= reset
    node _T = bits(io.cfg_addr, 11, 2) @[Interconnect.scala 464:65]
    node _T_1 = eq(UInt<6>("h03b"), _T) @[Interconnect.scala 464:50]
    node _T_2 = and(io.cfg_en, _T_1) @[Interconnect.scala 464:32]
    ConfigMem.io.cfg_en <= _T_2 @[Interconnect.scala 464:19]
    node _T_3 = bits(io.cfg_addr, 1, 0) @[Interconnect.scala 465:35]
    ConfigMem.io.cfg_addr <= _T_3 @[Interconnect.scala 465:21]
    ConfigMem.io.cfg_data <= io.cfg_data @[Interconnect.scala 466:21]
    inst Muxn of Muxn_372 @[Interconnect.scala 473:25]
    Muxn.clock <= clock
    Muxn.reset <= reset
    Muxn.io.in[0] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn.io.in[2] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNW[0] <= Muxn.io.out @[Interconnect.scala 479:45]
    node _T_4 = bits(ConfigMem.io.out[0], 1, 0) @[Interconnect.scala 483:39]
    Muxn.io.config <= _T_4 @[Interconnect.scala 483:23]
    inst Muxn_1 of Muxn_373 @[Interconnect.scala 473:25]
    Muxn_1.clock <= clock
    Muxn_1.reset <= reset
    Muxn_1.io.in[0] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[2] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNW[1] <= Muxn_1.io.out @[Interconnect.scala 479:45]
    node _T_5 = bits(ConfigMem.io.out[0], 3, 2) @[Interconnect.scala 483:39]
    Muxn_1.io.config <= _T_5 @[Interconnect.scala 483:23]
    inst Muxn_2 of Muxn_374 @[Interconnect.scala 473:25]
    Muxn_2.clock <= clock
    Muxn_2.reset <= reset
    Muxn_2.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNE[0] <= Muxn_2.io.out @[Interconnect.scala 479:45]
    node _T_6 = bits(ConfigMem.io.out[0], 5, 4) @[Interconnect.scala 483:39]
    Muxn_2.io.config <= _T_6 @[Interconnect.scala 483:23]
    inst Muxn_3 of Muxn_375 @[Interconnect.scala 473:25]
    Muxn_3.clock <= clock
    Muxn_3.reset <= reset
    Muxn_3.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNE[1] <= Muxn_3.io.out @[Interconnect.scala 479:45]
    node _T_7 = bits(ConfigMem.io.out[0], 7, 6) @[Interconnect.scala 483:39]
    Muxn_3.io.config <= _T_7 @[Interconnect.scala 483:23]
    inst Muxn_4 of Muxn_376 @[Interconnect.scala 473:25]
    Muxn_4.clock <= clock
    Muxn_4.reset <= reset
    Muxn_4.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[1] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    io.ipinSE[0] <= Muxn_4.io.out @[Interconnect.scala 479:45]
    node _T_8 = bits(ConfigMem.io.out[0], 9, 8) @[Interconnect.scala 483:39]
    Muxn_4.io.config <= _T_8 @[Interconnect.scala 483:23]
    inst Muxn_5 of Muxn_377 @[Interconnect.scala 473:25]
    Muxn_5.clock <= clock
    Muxn_5.reset <= reset
    Muxn_5.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[1] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    io.ipinSE[1] <= Muxn_5.io.out @[Interconnect.scala 479:45]
    node _T_9 = bits(ConfigMem.io.out[0], 11, 10) @[Interconnect.scala 483:39]
    Muxn_5.io.config <= _T_9 @[Interconnect.scala 483:23]
    inst Muxn_6 of Muxn_378 @[Interconnect.scala 473:25]
    Muxn_6.clock <= clock
    Muxn_6.reset <= reset
    Muxn_6.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[1] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    io.ipinSW[0] <= Muxn_6.io.out @[Interconnect.scala 479:45]
    node _T_10 = bits(ConfigMem.io.out[0], 13, 12) @[Interconnect.scala 483:39]
    Muxn_6.io.config <= _T_10 @[Interconnect.scala 483:23]
    inst Muxn_7 of Muxn_379 @[Interconnect.scala 473:25]
    Muxn_7.clock <= clock
    Muxn_7.reset <= reset
    Muxn_7.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[1] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    io.ipinSW[1] <= Muxn_7.io.out @[Interconnect.scala 479:45]
    node _T_11 = bits(ConfigMem.io.out[0], 15, 14) @[Interconnect.scala 483:39]
    Muxn_7.io.config <= _T_11 @[Interconnect.scala 483:23]
    inst Muxn_8 of Muxn_380 @[Interconnect.scala 473:25]
    Muxn_8.clock <= clock
    Muxn_8.reset <= reset
    Muxn_8.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[1] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.otrackW[0] <= Muxn_8.io.out @[Interconnect.scala 479:45]
    node _T_12 = bits(ConfigMem.io.out[0], 18, 16) @[Interconnect.scala 483:39]
    Muxn_8.io.config <= _T_12 @[Interconnect.scala 483:23]
    inst Muxn_9 of Muxn_381 @[Interconnect.scala 473:25]
    Muxn_9.clock <= clock
    Muxn_9.reset <= reset
    Muxn_9.io.in[0] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.otrackN[0] <= Muxn_9.io.out @[Interconnect.scala 479:45]
    node _T_13 = bits(ConfigMem.io.out[0], 21, 19) @[Interconnect.scala 483:39]
    Muxn_9.io.config <= _T_13 @[Interconnect.scala 483:23]
    inst Muxn_10 of Muxn_382 @[Interconnect.scala 473:25]
    Muxn_10.clock <= clock
    Muxn_10.reset <= reset
    Muxn_10.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.otrackE[0] <= Muxn_10.io.out @[Interconnect.scala 479:45]
    node _T_14 = bits(ConfigMem.io.out[0], 24, 22) @[Interconnect.scala 483:39]
    Muxn_10.io.config <= _T_14 @[Interconnect.scala 483:23]
    inst Muxn_11 of Muxn_383 @[Interconnect.scala 473:25]
    Muxn_11.clock <= clock
    Muxn_11.reset <= reset
    Muxn_11.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[1] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[4] <= io.itrackE[0] @[Interconnect.scala 475:63]
    io.otrackS[0] <= Muxn_11.io.out @[Interconnect.scala 479:45]
    node _T_15 = bits(ConfigMem.io.out[0], 27, 25) @[Interconnect.scala 483:39]
    Muxn_11.io.config <= _T_15 @[Interconnect.scala 483:23]
    
  module ConfigMem_103 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<0>, flip cfg_data : UInt<32>, out : UInt<28>[1]}
    
    wire _T : UInt<28>[1] @[ConfigMem.scala 27:29]
    _T[0] <= UInt<28>("h00") @[ConfigMem.scala 27:29]
    reg regs : UInt<28>[1], clock with : (reset => (reset, _T)) @[ConfigMem.scala 27:21]
    node _T_1 = eq(io.cfg_addr, UInt<1>("h00")) @[ConfigMem.scala 32:38]
    node _T_2 = and(io.cfg_en, _T_1) @[ConfigMem.scala 32:22]
    when _T_2 : @[ConfigMem.scala 32:54]
      node _T_3 = bits(io.cfg_data, 27, 0) @[ConfigMem.scala 33:31]
      regs[0] <= _T_3 @[ConfigMem.scala 33:17]
      skip @[ConfigMem.scala 32:54]
    io.out[0] <= regs[0] @[ConfigMem.scala 52:45]
    
  module Muxn_384 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_385 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_386 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_387 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_388 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_389 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_390 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_391 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_392 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_393 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_394 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_395 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module GIB_23 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<12>, flip cfg_data : UInt<32>, ipinNW : UInt<32>[2], flip opinNW : UInt<32>[1], ipinNE : UInt<32>[2], flip opinNE : UInt<32>[1], ipinSE : UInt<32>[2], flip opinSE : UInt<32>[1], ipinSW : UInt<32>[2], flip opinSW : UInt<32>[1], flip itrackW : UInt<32>[1], otrackW : UInt<32>[1], flip itrackN : UInt<32>[1], otrackN : UInt<32>[1], flip itrackE : UInt<32>[1], otrackE : UInt<32>[1], flip itrackS : UInt<32>[1], otrackS : UInt<32>[1]}
    
    io.ipinNW[0] <= UInt<1>("h00") @[Interconnect.scala 426:20]
    io.ipinNW[1] <= UInt<1>("h00") @[Interconnect.scala 426:20]
    io.ipinNE[0] <= UInt<1>("h00") @[Interconnect.scala 427:20]
    io.ipinNE[1] <= UInt<1>("h00") @[Interconnect.scala 427:20]
    io.ipinSW[0] <= UInt<1>("h00") @[Interconnect.scala 428:20]
    io.ipinSW[1] <= UInt<1>("h00") @[Interconnect.scala 428:20]
    io.ipinSE[0] <= UInt<1>("h00") @[Interconnect.scala 429:20]
    io.ipinSE[1] <= UInt<1>("h00") @[Interconnect.scala 429:20]
    io.otrackW[0] <= UInt<1>("h00") @[Interconnect.scala 430:21]
    io.otrackN[0] <= UInt<1>("h00") @[Interconnect.scala 431:21]
    io.otrackE[0] <= UInt<1>("h00") @[Interconnect.scala 432:21]
    io.otrackS[0] <= UInt<1>("h00") @[Interconnect.scala 433:21]
    inst ConfigMem of ConfigMem_103 @[Interconnect.scala 463:21]
    ConfigMem.clock <= clock
    ConfigMem.reset <= reset
    node _T = bits(io.cfg_addr, 11, 2) @[Interconnect.scala 464:65]
    node _T_1 = eq(UInt<6>("h03c"), _T) @[Interconnect.scala 464:50]
    node _T_2 = and(io.cfg_en, _T_1) @[Interconnect.scala 464:32]
    ConfigMem.io.cfg_en <= _T_2 @[Interconnect.scala 464:19]
    node _T_3 = bits(io.cfg_addr, 1, 0) @[Interconnect.scala 465:35]
    ConfigMem.io.cfg_addr <= _T_3 @[Interconnect.scala 465:21]
    ConfigMem.io.cfg_data <= io.cfg_data @[Interconnect.scala 466:21]
    inst Muxn of Muxn_384 @[Interconnect.scala 473:25]
    Muxn.clock <= clock
    Muxn.reset <= reset
    Muxn.io.in[0] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn.io.in[2] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNW[0] <= Muxn.io.out @[Interconnect.scala 479:45]
    node _T_4 = bits(ConfigMem.io.out[0], 1, 0) @[Interconnect.scala 483:39]
    Muxn.io.config <= _T_4 @[Interconnect.scala 483:23]
    inst Muxn_1 of Muxn_385 @[Interconnect.scala 473:25]
    Muxn_1.clock <= clock
    Muxn_1.reset <= reset
    Muxn_1.io.in[0] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[2] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNW[1] <= Muxn_1.io.out @[Interconnect.scala 479:45]
    node _T_5 = bits(ConfigMem.io.out[0], 3, 2) @[Interconnect.scala 483:39]
    Muxn_1.io.config <= _T_5 @[Interconnect.scala 483:23]
    inst Muxn_2 of Muxn_386 @[Interconnect.scala 473:25]
    Muxn_2.clock <= clock
    Muxn_2.reset <= reset
    Muxn_2.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNE[0] <= Muxn_2.io.out @[Interconnect.scala 479:45]
    node _T_6 = bits(ConfigMem.io.out[0], 5, 4) @[Interconnect.scala 483:39]
    Muxn_2.io.config <= _T_6 @[Interconnect.scala 483:23]
    inst Muxn_3 of Muxn_387 @[Interconnect.scala 473:25]
    Muxn_3.clock <= clock
    Muxn_3.reset <= reset
    Muxn_3.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNE[1] <= Muxn_3.io.out @[Interconnect.scala 479:45]
    node _T_7 = bits(ConfigMem.io.out[0], 7, 6) @[Interconnect.scala 483:39]
    Muxn_3.io.config <= _T_7 @[Interconnect.scala 483:23]
    inst Muxn_4 of Muxn_388 @[Interconnect.scala 473:25]
    Muxn_4.clock <= clock
    Muxn_4.reset <= reset
    Muxn_4.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[1] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    io.ipinSE[0] <= Muxn_4.io.out @[Interconnect.scala 479:45]
    node _T_8 = bits(ConfigMem.io.out[0], 9, 8) @[Interconnect.scala 483:39]
    Muxn_4.io.config <= _T_8 @[Interconnect.scala 483:23]
    inst Muxn_5 of Muxn_389 @[Interconnect.scala 473:25]
    Muxn_5.clock <= clock
    Muxn_5.reset <= reset
    Muxn_5.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[1] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    io.ipinSE[1] <= Muxn_5.io.out @[Interconnect.scala 479:45]
    node _T_9 = bits(ConfigMem.io.out[0], 11, 10) @[Interconnect.scala 483:39]
    Muxn_5.io.config <= _T_9 @[Interconnect.scala 483:23]
    inst Muxn_6 of Muxn_390 @[Interconnect.scala 473:25]
    Muxn_6.clock <= clock
    Muxn_6.reset <= reset
    Muxn_6.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[1] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    io.ipinSW[0] <= Muxn_6.io.out @[Interconnect.scala 479:45]
    node _T_10 = bits(ConfigMem.io.out[0], 13, 12) @[Interconnect.scala 483:39]
    Muxn_6.io.config <= _T_10 @[Interconnect.scala 483:23]
    inst Muxn_7 of Muxn_391 @[Interconnect.scala 473:25]
    Muxn_7.clock <= clock
    Muxn_7.reset <= reset
    Muxn_7.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[1] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    io.ipinSW[1] <= Muxn_7.io.out @[Interconnect.scala 479:45]
    node _T_11 = bits(ConfigMem.io.out[0], 15, 14) @[Interconnect.scala 483:39]
    Muxn_7.io.config <= _T_11 @[Interconnect.scala 483:23]
    inst Muxn_8 of Muxn_392 @[Interconnect.scala 473:25]
    Muxn_8.clock <= clock
    Muxn_8.reset <= reset
    Muxn_8.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[1] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    reg _T_12 : UInt, clock @[Interconnect.scala 477:55]
    _T_12 <= Muxn_8.io.out @[Interconnect.scala 477:55]
    io.otrackW[0] <= _T_12 @[Interconnect.scala 477:45]
    node _T_13 = bits(ConfigMem.io.out[0], 18, 16) @[Interconnect.scala 483:39]
    Muxn_8.io.config <= _T_13 @[Interconnect.scala 483:23]
    inst Muxn_9 of Muxn_393 @[Interconnect.scala 473:25]
    Muxn_9.clock <= clock
    Muxn_9.reset <= reset
    Muxn_9.io.in[0] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    reg _T_14 : UInt, clock @[Interconnect.scala 477:55]
    _T_14 <= Muxn_9.io.out @[Interconnect.scala 477:55]
    io.otrackN[0] <= _T_14 @[Interconnect.scala 477:45]
    node _T_15 = bits(ConfigMem.io.out[0], 21, 19) @[Interconnect.scala 483:39]
    Muxn_9.io.config <= _T_15 @[Interconnect.scala 483:23]
    inst Muxn_10 of Muxn_394 @[Interconnect.scala 473:25]
    Muxn_10.clock <= clock
    Muxn_10.reset <= reset
    Muxn_10.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    reg _T_16 : UInt, clock @[Interconnect.scala 477:55]
    _T_16 <= Muxn_10.io.out @[Interconnect.scala 477:55]
    io.otrackE[0] <= _T_16 @[Interconnect.scala 477:45]
    node _T_17 = bits(ConfigMem.io.out[0], 24, 22) @[Interconnect.scala 483:39]
    Muxn_10.io.config <= _T_17 @[Interconnect.scala 483:23]
    inst Muxn_11 of Muxn_395 @[Interconnect.scala 473:25]
    Muxn_11.clock <= clock
    Muxn_11.reset <= reset
    Muxn_11.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[1] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[4] <= io.itrackE[0] @[Interconnect.scala 475:63]
    reg _T_18 : UInt, clock @[Interconnect.scala 477:55]
    _T_18 <= Muxn_11.io.out @[Interconnect.scala 477:55]
    io.otrackS[0] <= _T_18 @[Interconnect.scala 477:45]
    node _T_19 = bits(ConfigMem.io.out[0], 27, 25) @[Interconnect.scala 483:39]
    Muxn_11.io.config <= _T_19 @[Interconnect.scala 483:23]
    
  module ConfigMem_104 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<0>, flip cfg_data : UInt<32>, out : UInt<28>[1]}
    
    wire _T : UInt<28>[1] @[ConfigMem.scala 27:29]
    _T[0] <= UInt<28>("h00") @[ConfigMem.scala 27:29]
    reg regs : UInt<28>[1], clock with : (reset => (reset, _T)) @[ConfigMem.scala 27:21]
    node _T_1 = eq(io.cfg_addr, UInt<1>("h00")) @[ConfigMem.scala 32:38]
    node _T_2 = and(io.cfg_en, _T_1) @[ConfigMem.scala 32:22]
    when _T_2 : @[ConfigMem.scala 32:54]
      node _T_3 = bits(io.cfg_data, 27, 0) @[ConfigMem.scala 33:31]
      regs[0] <= _T_3 @[ConfigMem.scala 33:17]
      skip @[ConfigMem.scala 32:54]
    io.out[0] <= regs[0] @[ConfigMem.scala 52:45]
    
  module Muxn_396 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_397 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_398 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_399 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_400 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_401 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_402 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_403 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_404 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_405 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_406 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_407 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module GIB_24 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<12>, flip cfg_data : UInt<32>, ipinNW : UInt<32>[2], flip opinNW : UInt<32>[1], ipinNE : UInt<32>[2], flip opinNE : UInt<32>[1], ipinSE : UInt<32>[2], flip opinSE : UInt<32>[1], ipinSW : UInt<32>[2], flip opinSW : UInt<32>[1], flip itrackW : UInt<32>[1], otrackW : UInt<32>[1], flip itrackN : UInt<32>[1], otrackN : UInt<32>[1], flip itrackE : UInt<32>[1], otrackE : UInt<32>[1], flip itrackS : UInt<32>[1], otrackS : UInt<32>[1]}
    
    io.ipinNW[0] <= UInt<1>("h00") @[Interconnect.scala 426:20]
    io.ipinNW[1] <= UInt<1>("h00") @[Interconnect.scala 426:20]
    io.ipinNE[0] <= UInt<1>("h00") @[Interconnect.scala 427:20]
    io.ipinNE[1] <= UInt<1>("h00") @[Interconnect.scala 427:20]
    io.ipinSW[0] <= UInt<1>("h00") @[Interconnect.scala 428:20]
    io.ipinSW[1] <= UInt<1>("h00") @[Interconnect.scala 428:20]
    io.ipinSE[0] <= UInt<1>("h00") @[Interconnect.scala 429:20]
    io.ipinSE[1] <= UInt<1>("h00") @[Interconnect.scala 429:20]
    io.otrackW[0] <= UInt<1>("h00") @[Interconnect.scala 430:21]
    io.otrackN[0] <= UInt<1>("h00") @[Interconnect.scala 431:21]
    io.otrackE[0] <= UInt<1>("h00") @[Interconnect.scala 432:21]
    io.otrackS[0] <= UInt<1>("h00") @[Interconnect.scala 433:21]
    inst ConfigMem of ConfigMem_104 @[Interconnect.scala 463:21]
    ConfigMem.clock <= clock
    ConfigMem.reset <= reset
    node _T = bits(io.cfg_addr, 11, 2) @[Interconnect.scala 464:65]
    node _T_1 = eq(UInt<6>("h03d"), _T) @[Interconnect.scala 464:50]
    node _T_2 = and(io.cfg_en, _T_1) @[Interconnect.scala 464:32]
    ConfigMem.io.cfg_en <= _T_2 @[Interconnect.scala 464:19]
    node _T_3 = bits(io.cfg_addr, 1, 0) @[Interconnect.scala 465:35]
    ConfigMem.io.cfg_addr <= _T_3 @[Interconnect.scala 465:21]
    ConfigMem.io.cfg_data <= io.cfg_data @[Interconnect.scala 466:21]
    inst Muxn of Muxn_396 @[Interconnect.scala 473:25]
    Muxn.clock <= clock
    Muxn.reset <= reset
    Muxn.io.in[0] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn.io.in[2] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNW[0] <= Muxn.io.out @[Interconnect.scala 479:45]
    node _T_4 = bits(ConfigMem.io.out[0], 1, 0) @[Interconnect.scala 483:39]
    Muxn.io.config <= _T_4 @[Interconnect.scala 483:23]
    inst Muxn_1 of Muxn_397 @[Interconnect.scala 473:25]
    Muxn_1.clock <= clock
    Muxn_1.reset <= reset
    Muxn_1.io.in[0] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[2] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNW[1] <= Muxn_1.io.out @[Interconnect.scala 479:45]
    node _T_5 = bits(ConfigMem.io.out[0], 3, 2) @[Interconnect.scala 483:39]
    Muxn_1.io.config <= _T_5 @[Interconnect.scala 483:23]
    inst Muxn_2 of Muxn_398 @[Interconnect.scala 473:25]
    Muxn_2.clock <= clock
    Muxn_2.reset <= reset
    Muxn_2.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNE[0] <= Muxn_2.io.out @[Interconnect.scala 479:45]
    node _T_6 = bits(ConfigMem.io.out[0], 5, 4) @[Interconnect.scala 483:39]
    Muxn_2.io.config <= _T_6 @[Interconnect.scala 483:23]
    inst Muxn_3 of Muxn_399 @[Interconnect.scala 473:25]
    Muxn_3.clock <= clock
    Muxn_3.reset <= reset
    Muxn_3.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNE[1] <= Muxn_3.io.out @[Interconnect.scala 479:45]
    node _T_7 = bits(ConfigMem.io.out[0], 7, 6) @[Interconnect.scala 483:39]
    Muxn_3.io.config <= _T_7 @[Interconnect.scala 483:23]
    inst Muxn_4 of Muxn_400 @[Interconnect.scala 473:25]
    Muxn_4.clock <= clock
    Muxn_4.reset <= reset
    Muxn_4.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[1] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    io.ipinSE[0] <= Muxn_4.io.out @[Interconnect.scala 479:45]
    node _T_8 = bits(ConfigMem.io.out[0], 9, 8) @[Interconnect.scala 483:39]
    Muxn_4.io.config <= _T_8 @[Interconnect.scala 483:23]
    inst Muxn_5 of Muxn_401 @[Interconnect.scala 473:25]
    Muxn_5.clock <= clock
    Muxn_5.reset <= reset
    Muxn_5.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[1] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    io.ipinSE[1] <= Muxn_5.io.out @[Interconnect.scala 479:45]
    node _T_9 = bits(ConfigMem.io.out[0], 11, 10) @[Interconnect.scala 483:39]
    Muxn_5.io.config <= _T_9 @[Interconnect.scala 483:23]
    inst Muxn_6 of Muxn_402 @[Interconnect.scala 473:25]
    Muxn_6.clock <= clock
    Muxn_6.reset <= reset
    Muxn_6.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[1] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    io.ipinSW[0] <= Muxn_6.io.out @[Interconnect.scala 479:45]
    node _T_10 = bits(ConfigMem.io.out[0], 13, 12) @[Interconnect.scala 483:39]
    Muxn_6.io.config <= _T_10 @[Interconnect.scala 483:23]
    inst Muxn_7 of Muxn_403 @[Interconnect.scala 473:25]
    Muxn_7.clock <= clock
    Muxn_7.reset <= reset
    Muxn_7.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[1] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    io.ipinSW[1] <= Muxn_7.io.out @[Interconnect.scala 479:45]
    node _T_11 = bits(ConfigMem.io.out[0], 15, 14) @[Interconnect.scala 483:39]
    Muxn_7.io.config <= _T_11 @[Interconnect.scala 483:23]
    inst Muxn_8 of Muxn_404 @[Interconnect.scala 473:25]
    Muxn_8.clock <= clock
    Muxn_8.reset <= reset
    Muxn_8.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[1] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.otrackW[0] <= Muxn_8.io.out @[Interconnect.scala 479:45]
    node _T_12 = bits(ConfigMem.io.out[0], 18, 16) @[Interconnect.scala 483:39]
    Muxn_8.io.config <= _T_12 @[Interconnect.scala 483:23]
    inst Muxn_9 of Muxn_405 @[Interconnect.scala 473:25]
    Muxn_9.clock <= clock
    Muxn_9.reset <= reset
    Muxn_9.io.in[0] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.otrackN[0] <= Muxn_9.io.out @[Interconnect.scala 479:45]
    node _T_13 = bits(ConfigMem.io.out[0], 21, 19) @[Interconnect.scala 483:39]
    Muxn_9.io.config <= _T_13 @[Interconnect.scala 483:23]
    inst Muxn_10 of Muxn_406 @[Interconnect.scala 473:25]
    Muxn_10.clock <= clock
    Muxn_10.reset <= reset
    Muxn_10.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.otrackE[0] <= Muxn_10.io.out @[Interconnect.scala 479:45]
    node _T_14 = bits(ConfigMem.io.out[0], 24, 22) @[Interconnect.scala 483:39]
    Muxn_10.io.config <= _T_14 @[Interconnect.scala 483:23]
    inst Muxn_11 of Muxn_407 @[Interconnect.scala 473:25]
    Muxn_11.clock <= clock
    Muxn_11.reset <= reset
    Muxn_11.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[1] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[4] <= io.itrackE[0] @[Interconnect.scala 475:63]
    io.otrackS[0] <= Muxn_11.io.out @[Interconnect.scala 479:45]
    node _T_15 = bits(ConfigMem.io.out[0], 27, 25) @[Interconnect.scala 483:39]
    Muxn_11.io.config <= _T_15 @[Interconnect.scala 483:23]
    
  module ConfigMem_105 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<0>, flip cfg_data : UInt<32>, out : UInt<28>[1]}
    
    wire _T : UInt<28>[1] @[ConfigMem.scala 27:29]
    _T[0] <= UInt<28>("h00") @[ConfigMem.scala 27:29]
    reg regs : UInt<28>[1], clock with : (reset => (reset, _T)) @[ConfigMem.scala 27:21]
    node _T_1 = eq(io.cfg_addr, UInt<1>("h00")) @[ConfigMem.scala 32:38]
    node _T_2 = and(io.cfg_en, _T_1) @[ConfigMem.scala 32:22]
    when _T_2 : @[ConfigMem.scala 32:54]
      node _T_3 = bits(io.cfg_data, 27, 0) @[ConfigMem.scala 33:31]
      regs[0] <= _T_3 @[ConfigMem.scala 33:17]
      skip @[ConfigMem.scala 32:54]
    io.out[0] <= regs[0] @[ConfigMem.scala 52:45]
    
  module Muxn_408 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_409 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_410 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_411 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_412 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_413 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_414 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_415 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_416 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_417 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_418 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_419 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module GIB_25 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<12>, flip cfg_data : UInt<32>, ipinNW : UInt<32>[2], flip opinNW : UInt<32>[1], ipinNE : UInt<32>[2], flip opinNE : UInt<32>[1], ipinSE : UInt<32>[2], flip opinSE : UInt<32>[1], ipinSW : UInt<32>[2], flip opinSW : UInt<32>[1], flip itrackW : UInt<32>[1], otrackW : UInt<32>[1], flip itrackN : UInt<32>[1], otrackN : UInt<32>[1], flip itrackE : UInt<32>[1], otrackE : UInt<32>[1], flip itrackS : UInt<32>[1], otrackS : UInt<32>[1]}
    
    io.ipinNW[0] <= UInt<1>("h00") @[Interconnect.scala 426:20]
    io.ipinNW[1] <= UInt<1>("h00") @[Interconnect.scala 426:20]
    io.ipinNE[0] <= UInt<1>("h00") @[Interconnect.scala 427:20]
    io.ipinNE[1] <= UInt<1>("h00") @[Interconnect.scala 427:20]
    io.ipinSW[0] <= UInt<1>("h00") @[Interconnect.scala 428:20]
    io.ipinSW[1] <= UInt<1>("h00") @[Interconnect.scala 428:20]
    io.ipinSE[0] <= UInt<1>("h00") @[Interconnect.scala 429:20]
    io.ipinSE[1] <= UInt<1>("h00") @[Interconnect.scala 429:20]
    io.otrackW[0] <= UInt<1>("h00") @[Interconnect.scala 430:21]
    io.otrackN[0] <= UInt<1>("h00") @[Interconnect.scala 431:21]
    io.otrackE[0] <= UInt<1>("h00") @[Interconnect.scala 432:21]
    io.otrackS[0] <= UInt<1>("h00") @[Interconnect.scala 433:21]
    inst ConfigMem of ConfigMem_105 @[Interconnect.scala 463:21]
    ConfigMem.clock <= clock
    ConfigMem.reset <= reset
    node _T = bits(io.cfg_addr, 11, 2) @[Interconnect.scala 464:65]
    node _T_1 = eq(UInt<6>("h03e"), _T) @[Interconnect.scala 464:50]
    node _T_2 = and(io.cfg_en, _T_1) @[Interconnect.scala 464:32]
    ConfigMem.io.cfg_en <= _T_2 @[Interconnect.scala 464:19]
    node _T_3 = bits(io.cfg_addr, 1, 0) @[Interconnect.scala 465:35]
    ConfigMem.io.cfg_addr <= _T_3 @[Interconnect.scala 465:21]
    ConfigMem.io.cfg_data <= io.cfg_data @[Interconnect.scala 466:21]
    inst Muxn of Muxn_408 @[Interconnect.scala 473:25]
    Muxn.clock <= clock
    Muxn.reset <= reset
    Muxn.io.in[0] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn.io.in[2] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNW[0] <= Muxn.io.out @[Interconnect.scala 479:45]
    node _T_4 = bits(ConfigMem.io.out[0], 1, 0) @[Interconnect.scala 483:39]
    Muxn.io.config <= _T_4 @[Interconnect.scala 483:23]
    inst Muxn_1 of Muxn_409 @[Interconnect.scala 473:25]
    Muxn_1.clock <= clock
    Muxn_1.reset <= reset
    Muxn_1.io.in[0] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[2] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNW[1] <= Muxn_1.io.out @[Interconnect.scala 479:45]
    node _T_5 = bits(ConfigMem.io.out[0], 3, 2) @[Interconnect.scala 483:39]
    Muxn_1.io.config <= _T_5 @[Interconnect.scala 483:23]
    inst Muxn_2 of Muxn_410 @[Interconnect.scala 473:25]
    Muxn_2.clock <= clock
    Muxn_2.reset <= reset
    Muxn_2.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNE[0] <= Muxn_2.io.out @[Interconnect.scala 479:45]
    node _T_6 = bits(ConfigMem.io.out[0], 5, 4) @[Interconnect.scala 483:39]
    Muxn_2.io.config <= _T_6 @[Interconnect.scala 483:23]
    inst Muxn_3 of Muxn_411 @[Interconnect.scala 473:25]
    Muxn_3.clock <= clock
    Muxn_3.reset <= reset
    Muxn_3.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNE[1] <= Muxn_3.io.out @[Interconnect.scala 479:45]
    node _T_7 = bits(ConfigMem.io.out[0], 7, 6) @[Interconnect.scala 483:39]
    Muxn_3.io.config <= _T_7 @[Interconnect.scala 483:23]
    inst Muxn_4 of Muxn_412 @[Interconnect.scala 473:25]
    Muxn_4.clock <= clock
    Muxn_4.reset <= reset
    Muxn_4.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[1] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    io.ipinSE[0] <= Muxn_4.io.out @[Interconnect.scala 479:45]
    node _T_8 = bits(ConfigMem.io.out[0], 9, 8) @[Interconnect.scala 483:39]
    Muxn_4.io.config <= _T_8 @[Interconnect.scala 483:23]
    inst Muxn_5 of Muxn_413 @[Interconnect.scala 473:25]
    Muxn_5.clock <= clock
    Muxn_5.reset <= reset
    Muxn_5.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[1] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    io.ipinSE[1] <= Muxn_5.io.out @[Interconnect.scala 479:45]
    node _T_9 = bits(ConfigMem.io.out[0], 11, 10) @[Interconnect.scala 483:39]
    Muxn_5.io.config <= _T_9 @[Interconnect.scala 483:23]
    inst Muxn_6 of Muxn_414 @[Interconnect.scala 473:25]
    Muxn_6.clock <= clock
    Muxn_6.reset <= reset
    Muxn_6.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[1] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    io.ipinSW[0] <= Muxn_6.io.out @[Interconnect.scala 479:45]
    node _T_10 = bits(ConfigMem.io.out[0], 13, 12) @[Interconnect.scala 483:39]
    Muxn_6.io.config <= _T_10 @[Interconnect.scala 483:23]
    inst Muxn_7 of Muxn_415 @[Interconnect.scala 473:25]
    Muxn_7.clock <= clock
    Muxn_7.reset <= reset
    Muxn_7.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[1] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    io.ipinSW[1] <= Muxn_7.io.out @[Interconnect.scala 479:45]
    node _T_11 = bits(ConfigMem.io.out[0], 15, 14) @[Interconnect.scala 483:39]
    Muxn_7.io.config <= _T_11 @[Interconnect.scala 483:23]
    inst Muxn_8 of Muxn_416 @[Interconnect.scala 473:25]
    Muxn_8.clock <= clock
    Muxn_8.reset <= reset
    Muxn_8.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[1] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    reg _T_12 : UInt, clock @[Interconnect.scala 477:55]
    _T_12 <= Muxn_8.io.out @[Interconnect.scala 477:55]
    io.otrackW[0] <= _T_12 @[Interconnect.scala 477:45]
    node _T_13 = bits(ConfigMem.io.out[0], 18, 16) @[Interconnect.scala 483:39]
    Muxn_8.io.config <= _T_13 @[Interconnect.scala 483:23]
    inst Muxn_9 of Muxn_417 @[Interconnect.scala 473:25]
    Muxn_9.clock <= clock
    Muxn_9.reset <= reset
    Muxn_9.io.in[0] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    reg _T_14 : UInt, clock @[Interconnect.scala 477:55]
    _T_14 <= Muxn_9.io.out @[Interconnect.scala 477:55]
    io.otrackN[0] <= _T_14 @[Interconnect.scala 477:45]
    node _T_15 = bits(ConfigMem.io.out[0], 21, 19) @[Interconnect.scala 483:39]
    Muxn_9.io.config <= _T_15 @[Interconnect.scala 483:23]
    inst Muxn_10 of Muxn_418 @[Interconnect.scala 473:25]
    Muxn_10.clock <= clock
    Muxn_10.reset <= reset
    Muxn_10.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    reg _T_16 : UInt, clock @[Interconnect.scala 477:55]
    _T_16 <= Muxn_10.io.out @[Interconnect.scala 477:55]
    io.otrackE[0] <= _T_16 @[Interconnect.scala 477:45]
    node _T_17 = bits(ConfigMem.io.out[0], 24, 22) @[Interconnect.scala 483:39]
    Muxn_10.io.config <= _T_17 @[Interconnect.scala 483:23]
    inst Muxn_11 of Muxn_419 @[Interconnect.scala 473:25]
    Muxn_11.clock <= clock
    Muxn_11.reset <= reset
    Muxn_11.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[1] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[4] <= io.itrackE[0] @[Interconnect.scala 475:63]
    reg _T_18 : UInt, clock @[Interconnect.scala 477:55]
    _T_18 <= Muxn_11.io.out @[Interconnect.scala 477:55]
    io.otrackS[0] <= _T_18 @[Interconnect.scala 477:45]
    node _T_19 = bits(ConfigMem.io.out[0], 27, 25) @[Interconnect.scala 483:39]
    Muxn_11.io.config <= _T_19 @[Interconnect.scala 483:23]
    
  module ConfigMem_106 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<0>, flip cfg_data : UInt<32>, out : UInt<15>[1]}
    
    wire _T : UInt<15>[1] @[ConfigMem.scala 27:29]
    _T[0] <= UInt<15>("h00") @[ConfigMem.scala 27:29]
    reg regs : UInt<15>[1], clock with : (reset => (reset, _T)) @[ConfigMem.scala 27:21]
    node _T_1 = eq(io.cfg_addr, UInt<1>("h00")) @[ConfigMem.scala 32:38]
    node _T_2 = and(io.cfg_en, _T_1) @[ConfigMem.scala 32:22]
    when _T_2 : @[ConfigMem.scala 32:54]
      node _T_3 = bits(io.cfg_data, 14, 0) @[ConfigMem.scala 33:31]
      regs[0] <= _T_3 @[ConfigMem.scala 33:17]
      skip @[ConfigMem.scala 32:54]
    io.out[0] <= regs[0] @[ConfigMem.scala 52:45]
    
  module Muxn_420 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[3], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_421 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[3], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_422 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<1>, flip in : UInt<32>[2], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    io.out <= _T_1 @[Multiplexer.scala 20:10]
    
  module Muxn_423 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<1>, flip in : UInt<32>[2], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    io.out <= _T_1 @[Multiplexer.scala 20:10]
    
  module Muxn_424 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[3], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_425 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_426 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_427 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module GIB_26 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<12>, flip cfg_data : UInt<32>, ipinNW : UInt<32>[2], flip opinNW : UInt<32>[1], ipinNE : UInt<32>[0], flip opinNE : UInt<32>[0], ipinSE : UInt<32>[0], flip opinSE : UInt<32>[0], ipinSW : UInt<32>[2], flip opinSW : UInt<32>[1], flip itrackW : UInt<32>[1], otrackW : UInt<32>[1], flip itrackN : UInt<32>[1], otrackN : UInt<32>[1], flip itrackE : UInt<32>[1], otrackE : UInt<32>[1], flip itrackS : UInt<32>[1], otrackS : UInt<32>[1]}
    
    io.ipinNW[0] <= UInt<1>("h00") @[Interconnect.scala 426:20]
    io.ipinNW[1] <= UInt<1>("h00") @[Interconnect.scala 426:20]
    io.ipinSW[0] <= UInt<1>("h00") @[Interconnect.scala 428:20]
    io.ipinSW[1] <= UInt<1>("h00") @[Interconnect.scala 428:20]
    io.otrackW[0] <= UInt<1>("h00") @[Interconnect.scala 430:21]
    io.otrackN[0] <= UInt<1>("h00") @[Interconnect.scala 431:21]
    io.otrackE[0] <= UInt<1>("h00") @[Interconnect.scala 432:21]
    io.otrackS[0] <= UInt<1>("h00") @[Interconnect.scala 433:21]
    inst ConfigMem of ConfigMem_106 @[Interconnect.scala 463:21]
    ConfigMem.clock <= clock
    ConfigMem.reset <= reset
    node _T = bits(io.cfg_addr, 11, 2) @[Interconnect.scala 464:65]
    node _T_1 = eq(UInt<6>("h03f"), _T) @[Interconnect.scala 464:50]
    node _T_2 = and(io.cfg_en, _T_1) @[Interconnect.scala 464:32]
    ConfigMem.io.cfg_en <= _T_2 @[Interconnect.scala 464:19]
    node _T_3 = bits(io.cfg_addr, 1, 0) @[Interconnect.scala 465:35]
    ConfigMem.io.cfg_addr <= _T_3 @[Interconnect.scala 465:21]
    ConfigMem.io.cfg_data <= io.cfg_data @[Interconnect.scala 466:21]
    inst Muxn of Muxn_420 @[Interconnect.scala 473:25]
    Muxn.clock <= clock
    Muxn.reset <= reset
    Muxn.io.in[0] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn.io.in[1] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn.io.in[2] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNW[0] <= Muxn.io.out @[Interconnect.scala 479:45]
    node _T_4 = bits(ConfigMem.io.out[0], 1, 0) @[Interconnect.scala 483:39]
    Muxn.io.config <= _T_4 @[Interconnect.scala 483:23]
    inst Muxn_1 of Muxn_421 @[Interconnect.scala 473:25]
    Muxn_1.clock <= clock
    Muxn_1.reset <= reset
    Muxn_1.io.in[0] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[1] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[2] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNW[1] <= Muxn_1.io.out @[Interconnect.scala 479:45]
    node _T_5 = bits(ConfigMem.io.out[0], 3, 2) @[Interconnect.scala 483:39]
    Muxn_1.io.config <= _T_5 @[Interconnect.scala 483:23]
    inst Muxn_2 of Muxn_422 @[Interconnect.scala 473:25]
    Muxn_2.clock <= clock
    Muxn_2.reset <= reset
    Muxn_2.io.in[0] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[1] <= io.itrackE[0] @[Interconnect.scala 475:63]
    io.ipinSW[0] <= Muxn_2.io.out @[Interconnect.scala 479:45]
    node _T_6 = bits(ConfigMem.io.out[0], 4, 4) @[Interconnect.scala 483:39]
    Muxn_2.io.config <= _T_6 @[Interconnect.scala 483:23]
    inst Muxn_3 of Muxn_423 @[Interconnect.scala 473:25]
    Muxn_3.clock <= clock
    Muxn_3.reset <= reset
    Muxn_3.io.in[0] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[1] <= io.itrackE[0] @[Interconnect.scala 475:63]
    io.ipinSW[1] <= Muxn_3.io.out @[Interconnect.scala 479:45]
    node _T_7 = bits(ConfigMem.io.out[0], 5, 5) @[Interconnect.scala 483:39]
    Muxn_3.io.config <= _T_7 @[Interconnect.scala 483:23]
    inst Muxn_4 of Muxn_424 @[Interconnect.scala 473:25]
    Muxn_4.clock <= clock
    Muxn_4.reset <= reset
    Muxn_4.io.in[0] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[1] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[2] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.otrackW[0] <= Muxn_4.io.out @[Interconnect.scala 479:45]
    node _T_8 = bits(ConfigMem.io.out[0], 7, 6) @[Interconnect.scala 483:39]
    Muxn_4.io.config <= _T_8 @[Interconnect.scala 483:23]
    inst Muxn_5 of Muxn_425 @[Interconnect.scala 473:25]
    Muxn_5.clock <= clock
    Muxn_5.reset <= reset
    Muxn_5.io.in[0] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[1] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[2] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.otrackN[0] <= Muxn_5.io.out @[Interconnect.scala 479:45]
    node _T_9 = bits(ConfigMem.io.out[0], 9, 8) @[Interconnect.scala 483:39]
    Muxn_5.io.config <= _T_9 @[Interconnect.scala 483:23]
    inst Muxn_6 of Muxn_426 @[Interconnect.scala 473:25]
    Muxn_6.clock <= clock
    Muxn_6.reset <= reset
    Muxn_6.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.otrackE[0] <= Muxn_6.io.out @[Interconnect.scala 479:45]
    node _T_10 = bits(ConfigMem.io.out[0], 12, 10) @[Interconnect.scala 483:39]
    Muxn_6.io.config <= _T_10 @[Interconnect.scala 483:23]
    inst Muxn_7 of Muxn_427 @[Interconnect.scala 473:25]
    Muxn_7.clock <= clock
    Muxn_7.reset <= reset
    Muxn_7.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[1] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    io.otrackS[0] <= Muxn_7.io.out @[Interconnect.scala 479:45]
    node _T_11 = bits(ConfigMem.io.out[0], 14, 13) @[Interconnect.scala 483:39]
    Muxn_7.io.config <= _T_11 @[Interconnect.scala 483:23]
    
  module ConfigMem_107 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<0>, flip cfg_data : UInt<32>, out : UInt<15>[1]}
    
    wire _T : UInt<15>[1] @[ConfigMem.scala 27:29]
    _T[0] <= UInt<15>("h00") @[ConfigMem.scala 27:29]
    reg regs : UInt<15>[1], clock with : (reset => (reset, _T)) @[ConfigMem.scala 27:21]
    node _T_1 = eq(io.cfg_addr, UInt<1>("h00")) @[ConfigMem.scala 32:38]
    node _T_2 = and(io.cfg_en, _T_1) @[ConfigMem.scala 32:22]
    when _T_2 : @[ConfigMem.scala 32:54]
      node _T_3 = bits(io.cfg_data, 14, 0) @[ConfigMem.scala 33:31]
      regs[0] <= _T_3 @[ConfigMem.scala 33:17]
      skip @[ConfigMem.scala 32:54]
    io.out[0] <= regs[0] @[ConfigMem.scala 52:45]
    
  module Muxn_428 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<1>, flip in : UInt<32>[2], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    io.out <= _T_1 @[Multiplexer.scala 20:10]
    
  module Muxn_429 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<1>, flip in : UInt<32>[2], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    io.out <= _T_1 @[Multiplexer.scala 20:10]
    
  module Muxn_430 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[3], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_431 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[3], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_432 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_433 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_434 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[3], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_435 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module GIB_27 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<12>, flip cfg_data : UInt<32>, ipinNW : UInt<32>[0], flip opinNW : UInt<32>[0], ipinNE : UInt<32>[2], flip opinNE : UInt<32>[1], ipinSE : UInt<32>[2], flip opinSE : UInt<32>[1], ipinSW : UInt<32>[0], flip opinSW : UInt<32>[0], flip itrackW : UInt<32>[1], otrackW : UInt<32>[1], flip itrackN : UInt<32>[1], otrackN : UInt<32>[1], flip itrackE : UInt<32>[1], otrackE : UInt<32>[1], flip itrackS : UInt<32>[1], otrackS : UInt<32>[1]}
    
    io.ipinNE[0] <= UInt<1>("h00") @[Interconnect.scala 427:20]
    io.ipinNE[1] <= UInt<1>("h00") @[Interconnect.scala 427:20]
    io.ipinSE[0] <= UInt<1>("h00") @[Interconnect.scala 429:20]
    io.ipinSE[1] <= UInt<1>("h00") @[Interconnect.scala 429:20]
    io.otrackW[0] <= UInt<1>("h00") @[Interconnect.scala 430:21]
    io.otrackN[0] <= UInt<1>("h00") @[Interconnect.scala 431:21]
    io.otrackE[0] <= UInt<1>("h00") @[Interconnect.scala 432:21]
    io.otrackS[0] <= UInt<1>("h00") @[Interconnect.scala 433:21]
    inst ConfigMem of ConfigMem_107 @[Interconnect.scala 463:21]
    ConfigMem.clock <= clock
    ConfigMem.reset <= reset
    node _T = bits(io.cfg_addr, 11, 2) @[Interconnect.scala 464:65]
    node _T_1 = eq(UInt<7>("h049"), _T) @[Interconnect.scala 464:50]
    node _T_2 = and(io.cfg_en, _T_1) @[Interconnect.scala 464:32]
    ConfigMem.io.cfg_en <= _T_2 @[Interconnect.scala 464:19]
    node _T_3 = bits(io.cfg_addr, 1, 0) @[Interconnect.scala 465:35]
    ConfigMem.io.cfg_addr <= _T_3 @[Interconnect.scala 465:21]
    ConfigMem.io.cfg_data <= io.cfg_data @[Interconnect.scala 466:21]
    inst Muxn of Muxn_428 @[Interconnect.scala 473:25]
    Muxn.clock <= clock
    Muxn.reset <= reset
    Muxn.io.in[0] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn.io.in[1] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNE[0] <= Muxn.io.out @[Interconnect.scala 479:45]
    node _T_4 = bits(ConfigMem.io.out[0], 0, 0) @[Interconnect.scala 483:39]
    Muxn.io.config <= _T_4 @[Interconnect.scala 483:23]
    inst Muxn_1 of Muxn_429 @[Interconnect.scala 473:25]
    Muxn_1.clock <= clock
    Muxn_1.reset <= reset
    Muxn_1.io.in[0] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[1] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNE[1] <= Muxn_1.io.out @[Interconnect.scala 479:45]
    node _T_5 = bits(ConfigMem.io.out[0], 1, 1) @[Interconnect.scala 483:39]
    Muxn_1.io.config <= _T_5 @[Interconnect.scala 483:23]
    inst Muxn_2 of Muxn_430 @[Interconnect.scala 473:25]
    Muxn_2.clock <= clock
    Muxn_2.reset <= reset
    Muxn_2.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[1] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    io.ipinSE[0] <= Muxn_2.io.out @[Interconnect.scala 479:45]
    node _T_6 = bits(ConfigMem.io.out[0], 3, 2) @[Interconnect.scala 483:39]
    Muxn_2.io.config <= _T_6 @[Interconnect.scala 483:23]
    inst Muxn_3 of Muxn_431 @[Interconnect.scala 473:25]
    Muxn_3.clock <= clock
    Muxn_3.reset <= reset
    Muxn_3.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[1] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    io.ipinSE[1] <= Muxn_3.io.out @[Interconnect.scala 479:45]
    node _T_7 = bits(ConfigMem.io.out[0], 5, 4) @[Interconnect.scala 483:39]
    Muxn_3.io.config <= _T_7 @[Interconnect.scala 483:23]
    inst Muxn_4 of Muxn_432 @[Interconnect.scala 473:25]
    Muxn_4.clock <= clock
    Muxn_4.reset <= reset
    Muxn_4.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[1] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    reg _T_8 : UInt, clock @[Interconnect.scala 477:55]
    _T_8 <= Muxn_4.io.out @[Interconnect.scala 477:55]
    io.otrackW[0] <= _T_8 @[Interconnect.scala 477:45]
    node _T_9 = bits(ConfigMem.io.out[0], 8, 6) @[Interconnect.scala 483:39]
    Muxn_4.io.config <= _T_9 @[Interconnect.scala 483:23]
    inst Muxn_5 of Muxn_433 @[Interconnect.scala 473:25]
    Muxn_5.clock <= clock
    Muxn_5.reset <= reset
    Muxn_5.io.in[0] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[1] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[2] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    reg _T_10 : UInt, clock @[Interconnect.scala 477:55]
    _T_10 <= Muxn_5.io.out @[Interconnect.scala 477:55]
    io.otrackN[0] <= _T_10 @[Interconnect.scala 477:45]
    node _T_11 = bits(ConfigMem.io.out[0], 10, 9) @[Interconnect.scala 483:39]
    Muxn_5.io.config <= _T_11 @[Interconnect.scala 483:23]
    inst Muxn_6 of Muxn_434 @[Interconnect.scala 473:25]
    Muxn_6.clock <= clock
    Muxn_6.reset <= reset
    Muxn_6.io.in[0] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[1] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[2] <= io.itrackS[0] @[Interconnect.scala 475:63]
    reg _T_12 : UInt, clock @[Interconnect.scala 477:55]
    _T_12 <= Muxn_6.io.out @[Interconnect.scala 477:55]
    io.otrackE[0] <= _T_12 @[Interconnect.scala 477:45]
    node _T_13 = bits(ConfigMem.io.out[0], 12, 11) @[Interconnect.scala 483:39]
    Muxn_6.io.config <= _T_13 @[Interconnect.scala 483:23]
    inst Muxn_7 of Muxn_435 @[Interconnect.scala 473:25]
    Muxn_7.clock <= clock
    Muxn_7.reset <= reset
    Muxn_7.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[1] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    reg _T_14 : UInt, clock @[Interconnect.scala 477:55]
    _T_14 <= Muxn_7.io.out @[Interconnect.scala 477:55]
    io.otrackS[0] <= _T_14 @[Interconnect.scala 477:45]
    node _T_15 = bits(ConfigMem.io.out[0], 14, 13) @[Interconnect.scala 483:39]
    Muxn_7.io.config <= _T_15 @[Interconnect.scala 483:23]
    
  module ConfigMem_108 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<0>, flip cfg_data : UInt<32>, out : UInt<28>[1]}
    
    wire _T : UInt<28>[1] @[ConfigMem.scala 27:29]
    _T[0] <= UInt<28>("h00") @[ConfigMem.scala 27:29]
    reg regs : UInt<28>[1], clock with : (reset => (reset, _T)) @[ConfigMem.scala 27:21]
    node _T_1 = eq(io.cfg_addr, UInt<1>("h00")) @[ConfigMem.scala 32:38]
    node _T_2 = and(io.cfg_en, _T_1) @[ConfigMem.scala 32:22]
    when _T_2 : @[ConfigMem.scala 32:54]
      node _T_3 = bits(io.cfg_data, 27, 0) @[ConfigMem.scala 33:31]
      regs[0] <= _T_3 @[ConfigMem.scala 33:17]
      skip @[ConfigMem.scala 32:54]
    io.out[0] <= regs[0] @[ConfigMem.scala 52:45]
    
  module Muxn_436 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_437 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_438 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_439 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_440 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_441 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_442 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_443 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_444 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_445 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_446 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_447 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module GIB_28 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<12>, flip cfg_data : UInt<32>, ipinNW : UInt<32>[2], flip opinNW : UInt<32>[1], ipinNE : UInt<32>[2], flip opinNE : UInt<32>[1], ipinSE : UInt<32>[2], flip opinSE : UInt<32>[1], ipinSW : UInt<32>[2], flip opinSW : UInt<32>[1], flip itrackW : UInt<32>[1], otrackW : UInt<32>[1], flip itrackN : UInt<32>[1], otrackN : UInt<32>[1], flip itrackE : UInt<32>[1], otrackE : UInt<32>[1], flip itrackS : UInt<32>[1], otrackS : UInt<32>[1]}
    
    io.ipinNW[0] <= UInt<1>("h00") @[Interconnect.scala 426:20]
    io.ipinNW[1] <= UInt<1>("h00") @[Interconnect.scala 426:20]
    io.ipinNE[0] <= UInt<1>("h00") @[Interconnect.scala 427:20]
    io.ipinNE[1] <= UInt<1>("h00") @[Interconnect.scala 427:20]
    io.ipinSW[0] <= UInt<1>("h00") @[Interconnect.scala 428:20]
    io.ipinSW[1] <= UInt<1>("h00") @[Interconnect.scala 428:20]
    io.ipinSE[0] <= UInt<1>("h00") @[Interconnect.scala 429:20]
    io.ipinSE[1] <= UInt<1>("h00") @[Interconnect.scala 429:20]
    io.otrackW[0] <= UInt<1>("h00") @[Interconnect.scala 430:21]
    io.otrackN[0] <= UInt<1>("h00") @[Interconnect.scala 431:21]
    io.otrackE[0] <= UInt<1>("h00") @[Interconnect.scala 432:21]
    io.otrackS[0] <= UInt<1>("h00") @[Interconnect.scala 433:21]
    inst ConfigMem of ConfigMem_108 @[Interconnect.scala 463:21]
    ConfigMem.clock <= clock
    ConfigMem.reset <= reset
    node _T = bits(io.cfg_addr, 11, 2) @[Interconnect.scala 464:65]
    node _T_1 = eq(UInt<7>("h04a"), _T) @[Interconnect.scala 464:50]
    node _T_2 = and(io.cfg_en, _T_1) @[Interconnect.scala 464:32]
    ConfigMem.io.cfg_en <= _T_2 @[Interconnect.scala 464:19]
    node _T_3 = bits(io.cfg_addr, 1, 0) @[Interconnect.scala 465:35]
    ConfigMem.io.cfg_addr <= _T_3 @[Interconnect.scala 465:21]
    ConfigMem.io.cfg_data <= io.cfg_data @[Interconnect.scala 466:21]
    inst Muxn of Muxn_436 @[Interconnect.scala 473:25]
    Muxn.clock <= clock
    Muxn.reset <= reset
    Muxn.io.in[0] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn.io.in[2] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNW[0] <= Muxn.io.out @[Interconnect.scala 479:45]
    node _T_4 = bits(ConfigMem.io.out[0], 1, 0) @[Interconnect.scala 483:39]
    Muxn.io.config <= _T_4 @[Interconnect.scala 483:23]
    inst Muxn_1 of Muxn_437 @[Interconnect.scala 473:25]
    Muxn_1.clock <= clock
    Muxn_1.reset <= reset
    Muxn_1.io.in[0] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[2] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNW[1] <= Muxn_1.io.out @[Interconnect.scala 479:45]
    node _T_5 = bits(ConfigMem.io.out[0], 3, 2) @[Interconnect.scala 483:39]
    Muxn_1.io.config <= _T_5 @[Interconnect.scala 483:23]
    inst Muxn_2 of Muxn_438 @[Interconnect.scala 473:25]
    Muxn_2.clock <= clock
    Muxn_2.reset <= reset
    Muxn_2.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNE[0] <= Muxn_2.io.out @[Interconnect.scala 479:45]
    node _T_6 = bits(ConfigMem.io.out[0], 5, 4) @[Interconnect.scala 483:39]
    Muxn_2.io.config <= _T_6 @[Interconnect.scala 483:23]
    inst Muxn_3 of Muxn_439 @[Interconnect.scala 473:25]
    Muxn_3.clock <= clock
    Muxn_3.reset <= reset
    Muxn_3.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNE[1] <= Muxn_3.io.out @[Interconnect.scala 479:45]
    node _T_7 = bits(ConfigMem.io.out[0], 7, 6) @[Interconnect.scala 483:39]
    Muxn_3.io.config <= _T_7 @[Interconnect.scala 483:23]
    inst Muxn_4 of Muxn_440 @[Interconnect.scala 473:25]
    Muxn_4.clock <= clock
    Muxn_4.reset <= reset
    Muxn_4.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[1] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    io.ipinSE[0] <= Muxn_4.io.out @[Interconnect.scala 479:45]
    node _T_8 = bits(ConfigMem.io.out[0], 9, 8) @[Interconnect.scala 483:39]
    Muxn_4.io.config <= _T_8 @[Interconnect.scala 483:23]
    inst Muxn_5 of Muxn_441 @[Interconnect.scala 473:25]
    Muxn_5.clock <= clock
    Muxn_5.reset <= reset
    Muxn_5.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[1] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    io.ipinSE[1] <= Muxn_5.io.out @[Interconnect.scala 479:45]
    node _T_9 = bits(ConfigMem.io.out[0], 11, 10) @[Interconnect.scala 483:39]
    Muxn_5.io.config <= _T_9 @[Interconnect.scala 483:23]
    inst Muxn_6 of Muxn_442 @[Interconnect.scala 473:25]
    Muxn_6.clock <= clock
    Muxn_6.reset <= reset
    Muxn_6.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[1] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    io.ipinSW[0] <= Muxn_6.io.out @[Interconnect.scala 479:45]
    node _T_10 = bits(ConfigMem.io.out[0], 13, 12) @[Interconnect.scala 483:39]
    Muxn_6.io.config <= _T_10 @[Interconnect.scala 483:23]
    inst Muxn_7 of Muxn_443 @[Interconnect.scala 473:25]
    Muxn_7.clock <= clock
    Muxn_7.reset <= reset
    Muxn_7.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[1] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    io.ipinSW[1] <= Muxn_7.io.out @[Interconnect.scala 479:45]
    node _T_11 = bits(ConfigMem.io.out[0], 15, 14) @[Interconnect.scala 483:39]
    Muxn_7.io.config <= _T_11 @[Interconnect.scala 483:23]
    inst Muxn_8 of Muxn_444 @[Interconnect.scala 473:25]
    Muxn_8.clock <= clock
    Muxn_8.reset <= reset
    Muxn_8.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[1] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.otrackW[0] <= Muxn_8.io.out @[Interconnect.scala 479:45]
    node _T_12 = bits(ConfigMem.io.out[0], 18, 16) @[Interconnect.scala 483:39]
    Muxn_8.io.config <= _T_12 @[Interconnect.scala 483:23]
    inst Muxn_9 of Muxn_445 @[Interconnect.scala 473:25]
    Muxn_9.clock <= clock
    Muxn_9.reset <= reset
    Muxn_9.io.in[0] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.otrackN[0] <= Muxn_9.io.out @[Interconnect.scala 479:45]
    node _T_13 = bits(ConfigMem.io.out[0], 21, 19) @[Interconnect.scala 483:39]
    Muxn_9.io.config <= _T_13 @[Interconnect.scala 483:23]
    inst Muxn_10 of Muxn_446 @[Interconnect.scala 473:25]
    Muxn_10.clock <= clock
    Muxn_10.reset <= reset
    Muxn_10.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.otrackE[0] <= Muxn_10.io.out @[Interconnect.scala 479:45]
    node _T_14 = bits(ConfigMem.io.out[0], 24, 22) @[Interconnect.scala 483:39]
    Muxn_10.io.config <= _T_14 @[Interconnect.scala 483:23]
    inst Muxn_11 of Muxn_447 @[Interconnect.scala 473:25]
    Muxn_11.clock <= clock
    Muxn_11.reset <= reset
    Muxn_11.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[1] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[4] <= io.itrackE[0] @[Interconnect.scala 475:63]
    io.otrackS[0] <= Muxn_11.io.out @[Interconnect.scala 479:45]
    node _T_15 = bits(ConfigMem.io.out[0], 27, 25) @[Interconnect.scala 483:39]
    Muxn_11.io.config <= _T_15 @[Interconnect.scala 483:23]
    
  module ConfigMem_109 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<0>, flip cfg_data : UInt<32>, out : UInt<28>[1]}
    
    wire _T : UInt<28>[1] @[ConfigMem.scala 27:29]
    _T[0] <= UInt<28>("h00") @[ConfigMem.scala 27:29]
    reg regs : UInt<28>[1], clock with : (reset => (reset, _T)) @[ConfigMem.scala 27:21]
    node _T_1 = eq(io.cfg_addr, UInt<1>("h00")) @[ConfigMem.scala 32:38]
    node _T_2 = and(io.cfg_en, _T_1) @[ConfigMem.scala 32:22]
    when _T_2 : @[ConfigMem.scala 32:54]
      node _T_3 = bits(io.cfg_data, 27, 0) @[ConfigMem.scala 33:31]
      regs[0] <= _T_3 @[ConfigMem.scala 33:17]
      skip @[ConfigMem.scala 32:54]
    io.out[0] <= regs[0] @[ConfigMem.scala 52:45]
    
  module Muxn_448 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_449 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_450 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_451 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_452 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_453 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_454 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_455 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_456 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_457 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_458 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_459 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module GIB_29 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<12>, flip cfg_data : UInt<32>, ipinNW : UInt<32>[2], flip opinNW : UInt<32>[1], ipinNE : UInt<32>[2], flip opinNE : UInt<32>[1], ipinSE : UInt<32>[2], flip opinSE : UInt<32>[1], ipinSW : UInt<32>[2], flip opinSW : UInt<32>[1], flip itrackW : UInt<32>[1], otrackW : UInt<32>[1], flip itrackN : UInt<32>[1], otrackN : UInt<32>[1], flip itrackE : UInt<32>[1], otrackE : UInt<32>[1], flip itrackS : UInt<32>[1], otrackS : UInt<32>[1]}
    
    io.ipinNW[0] <= UInt<1>("h00") @[Interconnect.scala 426:20]
    io.ipinNW[1] <= UInt<1>("h00") @[Interconnect.scala 426:20]
    io.ipinNE[0] <= UInt<1>("h00") @[Interconnect.scala 427:20]
    io.ipinNE[1] <= UInt<1>("h00") @[Interconnect.scala 427:20]
    io.ipinSW[0] <= UInt<1>("h00") @[Interconnect.scala 428:20]
    io.ipinSW[1] <= UInt<1>("h00") @[Interconnect.scala 428:20]
    io.ipinSE[0] <= UInt<1>("h00") @[Interconnect.scala 429:20]
    io.ipinSE[1] <= UInt<1>("h00") @[Interconnect.scala 429:20]
    io.otrackW[0] <= UInt<1>("h00") @[Interconnect.scala 430:21]
    io.otrackN[0] <= UInt<1>("h00") @[Interconnect.scala 431:21]
    io.otrackE[0] <= UInt<1>("h00") @[Interconnect.scala 432:21]
    io.otrackS[0] <= UInt<1>("h00") @[Interconnect.scala 433:21]
    inst ConfigMem of ConfigMem_109 @[Interconnect.scala 463:21]
    ConfigMem.clock <= clock
    ConfigMem.reset <= reset
    node _T = bits(io.cfg_addr, 11, 2) @[Interconnect.scala 464:65]
    node _T_1 = eq(UInt<7>("h04b"), _T) @[Interconnect.scala 464:50]
    node _T_2 = and(io.cfg_en, _T_1) @[Interconnect.scala 464:32]
    ConfigMem.io.cfg_en <= _T_2 @[Interconnect.scala 464:19]
    node _T_3 = bits(io.cfg_addr, 1, 0) @[Interconnect.scala 465:35]
    ConfigMem.io.cfg_addr <= _T_3 @[Interconnect.scala 465:21]
    ConfigMem.io.cfg_data <= io.cfg_data @[Interconnect.scala 466:21]
    inst Muxn of Muxn_448 @[Interconnect.scala 473:25]
    Muxn.clock <= clock
    Muxn.reset <= reset
    Muxn.io.in[0] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn.io.in[2] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNW[0] <= Muxn.io.out @[Interconnect.scala 479:45]
    node _T_4 = bits(ConfigMem.io.out[0], 1, 0) @[Interconnect.scala 483:39]
    Muxn.io.config <= _T_4 @[Interconnect.scala 483:23]
    inst Muxn_1 of Muxn_449 @[Interconnect.scala 473:25]
    Muxn_1.clock <= clock
    Muxn_1.reset <= reset
    Muxn_1.io.in[0] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[2] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNW[1] <= Muxn_1.io.out @[Interconnect.scala 479:45]
    node _T_5 = bits(ConfigMem.io.out[0], 3, 2) @[Interconnect.scala 483:39]
    Muxn_1.io.config <= _T_5 @[Interconnect.scala 483:23]
    inst Muxn_2 of Muxn_450 @[Interconnect.scala 473:25]
    Muxn_2.clock <= clock
    Muxn_2.reset <= reset
    Muxn_2.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNE[0] <= Muxn_2.io.out @[Interconnect.scala 479:45]
    node _T_6 = bits(ConfigMem.io.out[0], 5, 4) @[Interconnect.scala 483:39]
    Muxn_2.io.config <= _T_6 @[Interconnect.scala 483:23]
    inst Muxn_3 of Muxn_451 @[Interconnect.scala 473:25]
    Muxn_3.clock <= clock
    Muxn_3.reset <= reset
    Muxn_3.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNE[1] <= Muxn_3.io.out @[Interconnect.scala 479:45]
    node _T_7 = bits(ConfigMem.io.out[0], 7, 6) @[Interconnect.scala 483:39]
    Muxn_3.io.config <= _T_7 @[Interconnect.scala 483:23]
    inst Muxn_4 of Muxn_452 @[Interconnect.scala 473:25]
    Muxn_4.clock <= clock
    Muxn_4.reset <= reset
    Muxn_4.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[1] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    io.ipinSE[0] <= Muxn_4.io.out @[Interconnect.scala 479:45]
    node _T_8 = bits(ConfigMem.io.out[0], 9, 8) @[Interconnect.scala 483:39]
    Muxn_4.io.config <= _T_8 @[Interconnect.scala 483:23]
    inst Muxn_5 of Muxn_453 @[Interconnect.scala 473:25]
    Muxn_5.clock <= clock
    Muxn_5.reset <= reset
    Muxn_5.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[1] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    io.ipinSE[1] <= Muxn_5.io.out @[Interconnect.scala 479:45]
    node _T_9 = bits(ConfigMem.io.out[0], 11, 10) @[Interconnect.scala 483:39]
    Muxn_5.io.config <= _T_9 @[Interconnect.scala 483:23]
    inst Muxn_6 of Muxn_454 @[Interconnect.scala 473:25]
    Muxn_6.clock <= clock
    Muxn_6.reset <= reset
    Muxn_6.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[1] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    io.ipinSW[0] <= Muxn_6.io.out @[Interconnect.scala 479:45]
    node _T_10 = bits(ConfigMem.io.out[0], 13, 12) @[Interconnect.scala 483:39]
    Muxn_6.io.config <= _T_10 @[Interconnect.scala 483:23]
    inst Muxn_7 of Muxn_455 @[Interconnect.scala 473:25]
    Muxn_7.clock <= clock
    Muxn_7.reset <= reset
    Muxn_7.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[1] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    io.ipinSW[1] <= Muxn_7.io.out @[Interconnect.scala 479:45]
    node _T_11 = bits(ConfigMem.io.out[0], 15, 14) @[Interconnect.scala 483:39]
    Muxn_7.io.config <= _T_11 @[Interconnect.scala 483:23]
    inst Muxn_8 of Muxn_456 @[Interconnect.scala 473:25]
    Muxn_8.clock <= clock
    Muxn_8.reset <= reset
    Muxn_8.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[1] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    reg _T_12 : UInt, clock @[Interconnect.scala 477:55]
    _T_12 <= Muxn_8.io.out @[Interconnect.scala 477:55]
    io.otrackW[0] <= _T_12 @[Interconnect.scala 477:45]
    node _T_13 = bits(ConfigMem.io.out[0], 18, 16) @[Interconnect.scala 483:39]
    Muxn_8.io.config <= _T_13 @[Interconnect.scala 483:23]
    inst Muxn_9 of Muxn_457 @[Interconnect.scala 473:25]
    Muxn_9.clock <= clock
    Muxn_9.reset <= reset
    Muxn_9.io.in[0] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    reg _T_14 : UInt, clock @[Interconnect.scala 477:55]
    _T_14 <= Muxn_9.io.out @[Interconnect.scala 477:55]
    io.otrackN[0] <= _T_14 @[Interconnect.scala 477:45]
    node _T_15 = bits(ConfigMem.io.out[0], 21, 19) @[Interconnect.scala 483:39]
    Muxn_9.io.config <= _T_15 @[Interconnect.scala 483:23]
    inst Muxn_10 of Muxn_458 @[Interconnect.scala 473:25]
    Muxn_10.clock <= clock
    Muxn_10.reset <= reset
    Muxn_10.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    reg _T_16 : UInt, clock @[Interconnect.scala 477:55]
    _T_16 <= Muxn_10.io.out @[Interconnect.scala 477:55]
    io.otrackE[0] <= _T_16 @[Interconnect.scala 477:45]
    node _T_17 = bits(ConfigMem.io.out[0], 24, 22) @[Interconnect.scala 483:39]
    Muxn_10.io.config <= _T_17 @[Interconnect.scala 483:23]
    inst Muxn_11 of Muxn_459 @[Interconnect.scala 473:25]
    Muxn_11.clock <= clock
    Muxn_11.reset <= reset
    Muxn_11.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[1] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[4] <= io.itrackE[0] @[Interconnect.scala 475:63]
    reg _T_18 : UInt, clock @[Interconnect.scala 477:55]
    _T_18 <= Muxn_11.io.out @[Interconnect.scala 477:55]
    io.otrackS[0] <= _T_18 @[Interconnect.scala 477:45]
    node _T_19 = bits(ConfigMem.io.out[0], 27, 25) @[Interconnect.scala 483:39]
    Muxn_11.io.config <= _T_19 @[Interconnect.scala 483:23]
    
  module ConfigMem_110 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<0>, flip cfg_data : UInt<32>, out : UInt<28>[1]}
    
    wire _T : UInt<28>[1] @[ConfigMem.scala 27:29]
    _T[0] <= UInt<28>("h00") @[ConfigMem.scala 27:29]
    reg regs : UInt<28>[1], clock with : (reset => (reset, _T)) @[ConfigMem.scala 27:21]
    node _T_1 = eq(io.cfg_addr, UInt<1>("h00")) @[ConfigMem.scala 32:38]
    node _T_2 = and(io.cfg_en, _T_1) @[ConfigMem.scala 32:22]
    when _T_2 : @[ConfigMem.scala 32:54]
      node _T_3 = bits(io.cfg_data, 27, 0) @[ConfigMem.scala 33:31]
      regs[0] <= _T_3 @[ConfigMem.scala 33:17]
      skip @[ConfigMem.scala 32:54]
    io.out[0] <= regs[0] @[ConfigMem.scala 52:45]
    
  module Muxn_460 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_461 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_462 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_463 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_464 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_465 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_466 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_467 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_468 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_469 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_470 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_471 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module GIB_30 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<12>, flip cfg_data : UInt<32>, ipinNW : UInt<32>[2], flip opinNW : UInt<32>[1], ipinNE : UInt<32>[2], flip opinNE : UInt<32>[1], ipinSE : UInt<32>[2], flip opinSE : UInt<32>[1], ipinSW : UInt<32>[2], flip opinSW : UInt<32>[1], flip itrackW : UInt<32>[1], otrackW : UInt<32>[1], flip itrackN : UInt<32>[1], otrackN : UInt<32>[1], flip itrackE : UInt<32>[1], otrackE : UInt<32>[1], flip itrackS : UInt<32>[1], otrackS : UInt<32>[1]}
    
    io.ipinNW[0] <= UInt<1>("h00") @[Interconnect.scala 426:20]
    io.ipinNW[1] <= UInt<1>("h00") @[Interconnect.scala 426:20]
    io.ipinNE[0] <= UInt<1>("h00") @[Interconnect.scala 427:20]
    io.ipinNE[1] <= UInt<1>("h00") @[Interconnect.scala 427:20]
    io.ipinSW[0] <= UInt<1>("h00") @[Interconnect.scala 428:20]
    io.ipinSW[1] <= UInt<1>("h00") @[Interconnect.scala 428:20]
    io.ipinSE[0] <= UInt<1>("h00") @[Interconnect.scala 429:20]
    io.ipinSE[1] <= UInt<1>("h00") @[Interconnect.scala 429:20]
    io.otrackW[0] <= UInt<1>("h00") @[Interconnect.scala 430:21]
    io.otrackN[0] <= UInt<1>("h00") @[Interconnect.scala 431:21]
    io.otrackE[0] <= UInt<1>("h00") @[Interconnect.scala 432:21]
    io.otrackS[0] <= UInt<1>("h00") @[Interconnect.scala 433:21]
    inst ConfigMem of ConfigMem_110 @[Interconnect.scala 463:21]
    ConfigMem.clock <= clock
    ConfigMem.reset <= reset
    node _T = bits(io.cfg_addr, 11, 2) @[Interconnect.scala 464:65]
    node _T_1 = eq(UInt<7>("h04c"), _T) @[Interconnect.scala 464:50]
    node _T_2 = and(io.cfg_en, _T_1) @[Interconnect.scala 464:32]
    ConfigMem.io.cfg_en <= _T_2 @[Interconnect.scala 464:19]
    node _T_3 = bits(io.cfg_addr, 1, 0) @[Interconnect.scala 465:35]
    ConfigMem.io.cfg_addr <= _T_3 @[Interconnect.scala 465:21]
    ConfigMem.io.cfg_data <= io.cfg_data @[Interconnect.scala 466:21]
    inst Muxn of Muxn_460 @[Interconnect.scala 473:25]
    Muxn.clock <= clock
    Muxn.reset <= reset
    Muxn.io.in[0] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn.io.in[2] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNW[0] <= Muxn.io.out @[Interconnect.scala 479:45]
    node _T_4 = bits(ConfigMem.io.out[0], 1, 0) @[Interconnect.scala 483:39]
    Muxn.io.config <= _T_4 @[Interconnect.scala 483:23]
    inst Muxn_1 of Muxn_461 @[Interconnect.scala 473:25]
    Muxn_1.clock <= clock
    Muxn_1.reset <= reset
    Muxn_1.io.in[0] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[2] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNW[1] <= Muxn_1.io.out @[Interconnect.scala 479:45]
    node _T_5 = bits(ConfigMem.io.out[0], 3, 2) @[Interconnect.scala 483:39]
    Muxn_1.io.config <= _T_5 @[Interconnect.scala 483:23]
    inst Muxn_2 of Muxn_462 @[Interconnect.scala 473:25]
    Muxn_2.clock <= clock
    Muxn_2.reset <= reset
    Muxn_2.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNE[0] <= Muxn_2.io.out @[Interconnect.scala 479:45]
    node _T_6 = bits(ConfigMem.io.out[0], 5, 4) @[Interconnect.scala 483:39]
    Muxn_2.io.config <= _T_6 @[Interconnect.scala 483:23]
    inst Muxn_3 of Muxn_463 @[Interconnect.scala 473:25]
    Muxn_3.clock <= clock
    Muxn_3.reset <= reset
    Muxn_3.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNE[1] <= Muxn_3.io.out @[Interconnect.scala 479:45]
    node _T_7 = bits(ConfigMem.io.out[0], 7, 6) @[Interconnect.scala 483:39]
    Muxn_3.io.config <= _T_7 @[Interconnect.scala 483:23]
    inst Muxn_4 of Muxn_464 @[Interconnect.scala 473:25]
    Muxn_4.clock <= clock
    Muxn_4.reset <= reset
    Muxn_4.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[1] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    io.ipinSE[0] <= Muxn_4.io.out @[Interconnect.scala 479:45]
    node _T_8 = bits(ConfigMem.io.out[0], 9, 8) @[Interconnect.scala 483:39]
    Muxn_4.io.config <= _T_8 @[Interconnect.scala 483:23]
    inst Muxn_5 of Muxn_465 @[Interconnect.scala 473:25]
    Muxn_5.clock <= clock
    Muxn_5.reset <= reset
    Muxn_5.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[1] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    io.ipinSE[1] <= Muxn_5.io.out @[Interconnect.scala 479:45]
    node _T_9 = bits(ConfigMem.io.out[0], 11, 10) @[Interconnect.scala 483:39]
    Muxn_5.io.config <= _T_9 @[Interconnect.scala 483:23]
    inst Muxn_6 of Muxn_466 @[Interconnect.scala 473:25]
    Muxn_6.clock <= clock
    Muxn_6.reset <= reset
    Muxn_6.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[1] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    io.ipinSW[0] <= Muxn_6.io.out @[Interconnect.scala 479:45]
    node _T_10 = bits(ConfigMem.io.out[0], 13, 12) @[Interconnect.scala 483:39]
    Muxn_6.io.config <= _T_10 @[Interconnect.scala 483:23]
    inst Muxn_7 of Muxn_467 @[Interconnect.scala 473:25]
    Muxn_7.clock <= clock
    Muxn_7.reset <= reset
    Muxn_7.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[1] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    io.ipinSW[1] <= Muxn_7.io.out @[Interconnect.scala 479:45]
    node _T_11 = bits(ConfigMem.io.out[0], 15, 14) @[Interconnect.scala 483:39]
    Muxn_7.io.config <= _T_11 @[Interconnect.scala 483:23]
    inst Muxn_8 of Muxn_468 @[Interconnect.scala 473:25]
    Muxn_8.clock <= clock
    Muxn_8.reset <= reset
    Muxn_8.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[1] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.otrackW[0] <= Muxn_8.io.out @[Interconnect.scala 479:45]
    node _T_12 = bits(ConfigMem.io.out[0], 18, 16) @[Interconnect.scala 483:39]
    Muxn_8.io.config <= _T_12 @[Interconnect.scala 483:23]
    inst Muxn_9 of Muxn_469 @[Interconnect.scala 473:25]
    Muxn_9.clock <= clock
    Muxn_9.reset <= reset
    Muxn_9.io.in[0] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.otrackN[0] <= Muxn_9.io.out @[Interconnect.scala 479:45]
    node _T_13 = bits(ConfigMem.io.out[0], 21, 19) @[Interconnect.scala 483:39]
    Muxn_9.io.config <= _T_13 @[Interconnect.scala 483:23]
    inst Muxn_10 of Muxn_470 @[Interconnect.scala 473:25]
    Muxn_10.clock <= clock
    Muxn_10.reset <= reset
    Muxn_10.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.otrackE[0] <= Muxn_10.io.out @[Interconnect.scala 479:45]
    node _T_14 = bits(ConfigMem.io.out[0], 24, 22) @[Interconnect.scala 483:39]
    Muxn_10.io.config <= _T_14 @[Interconnect.scala 483:23]
    inst Muxn_11 of Muxn_471 @[Interconnect.scala 473:25]
    Muxn_11.clock <= clock
    Muxn_11.reset <= reset
    Muxn_11.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[1] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[4] <= io.itrackE[0] @[Interconnect.scala 475:63]
    io.otrackS[0] <= Muxn_11.io.out @[Interconnect.scala 479:45]
    node _T_15 = bits(ConfigMem.io.out[0], 27, 25) @[Interconnect.scala 483:39]
    Muxn_11.io.config <= _T_15 @[Interconnect.scala 483:23]
    
  module ConfigMem_111 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<0>, flip cfg_data : UInt<32>, out : UInt<28>[1]}
    
    wire _T : UInt<28>[1] @[ConfigMem.scala 27:29]
    _T[0] <= UInt<28>("h00") @[ConfigMem.scala 27:29]
    reg regs : UInt<28>[1], clock with : (reset => (reset, _T)) @[ConfigMem.scala 27:21]
    node _T_1 = eq(io.cfg_addr, UInt<1>("h00")) @[ConfigMem.scala 32:38]
    node _T_2 = and(io.cfg_en, _T_1) @[ConfigMem.scala 32:22]
    when _T_2 : @[ConfigMem.scala 32:54]
      node _T_3 = bits(io.cfg_data, 27, 0) @[ConfigMem.scala 33:31]
      regs[0] <= _T_3 @[ConfigMem.scala 33:17]
      skip @[ConfigMem.scala 32:54]
    io.out[0] <= regs[0] @[ConfigMem.scala 52:45]
    
  module Muxn_472 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_473 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_474 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_475 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_476 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_477 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_478 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_479 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_480 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_481 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_482 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_483 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module GIB_31 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<12>, flip cfg_data : UInt<32>, ipinNW : UInt<32>[2], flip opinNW : UInt<32>[1], ipinNE : UInt<32>[2], flip opinNE : UInt<32>[1], ipinSE : UInt<32>[2], flip opinSE : UInt<32>[1], ipinSW : UInt<32>[2], flip opinSW : UInt<32>[1], flip itrackW : UInt<32>[1], otrackW : UInt<32>[1], flip itrackN : UInt<32>[1], otrackN : UInt<32>[1], flip itrackE : UInt<32>[1], otrackE : UInt<32>[1], flip itrackS : UInt<32>[1], otrackS : UInt<32>[1]}
    
    io.ipinNW[0] <= UInt<1>("h00") @[Interconnect.scala 426:20]
    io.ipinNW[1] <= UInt<1>("h00") @[Interconnect.scala 426:20]
    io.ipinNE[0] <= UInt<1>("h00") @[Interconnect.scala 427:20]
    io.ipinNE[1] <= UInt<1>("h00") @[Interconnect.scala 427:20]
    io.ipinSW[0] <= UInt<1>("h00") @[Interconnect.scala 428:20]
    io.ipinSW[1] <= UInt<1>("h00") @[Interconnect.scala 428:20]
    io.ipinSE[0] <= UInt<1>("h00") @[Interconnect.scala 429:20]
    io.ipinSE[1] <= UInt<1>("h00") @[Interconnect.scala 429:20]
    io.otrackW[0] <= UInt<1>("h00") @[Interconnect.scala 430:21]
    io.otrackN[0] <= UInt<1>("h00") @[Interconnect.scala 431:21]
    io.otrackE[0] <= UInt<1>("h00") @[Interconnect.scala 432:21]
    io.otrackS[0] <= UInt<1>("h00") @[Interconnect.scala 433:21]
    inst ConfigMem of ConfigMem_111 @[Interconnect.scala 463:21]
    ConfigMem.clock <= clock
    ConfigMem.reset <= reset
    node _T = bits(io.cfg_addr, 11, 2) @[Interconnect.scala 464:65]
    node _T_1 = eq(UInt<7>("h04d"), _T) @[Interconnect.scala 464:50]
    node _T_2 = and(io.cfg_en, _T_1) @[Interconnect.scala 464:32]
    ConfigMem.io.cfg_en <= _T_2 @[Interconnect.scala 464:19]
    node _T_3 = bits(io.cfg_addr, 1, 0) @[Interconnect.scala 465:35]
    ConfigMem.io.cfg_addr <= _T_3 @[Interconnect.scala 465:21]
    ConfigMem.io.cfg_data <= io.cfg_data @[Interconnect.scala 466:21]
    inst Muxn of Muxn_472 @[Interconnect.scala 473:25]
    Muxn.clock <= clock
    Muxn.reset <= reset
    Muxn.io.in[0] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn.io.in[2] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNW[0] <= Muxn.io.out @[Interconnect.scala 479:45]
    node _T_4 = bits(ConfigMem.io.out[0], 1, 0) @[Interconnect.scala 483:39]
    Muxn.io.config <= _T_4 @[Interconnect.scala 483:23]
    inst Muxn_1 of Muxn_473 @[Interconnect.scala 473:25]
    Muxn_1.clock <= clock
    Muxn_1.reset <= reset
    Muxn_1.io.in[0] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[2] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNW[1] <= Muxn_1.io.out @[Interconnect.scala 479:45]
    node _T_5 = bits(ConfigMem.io.out[0], 3, 2) @[Interconnect.scala 483:39]
    Muxn_1.io.config <= _T_5 @[Interconnect.scala 483:23]
    inst Muxn_2 of Muxn_474 @[Interconnect.scala 473:25]
    Muxn_2.clock <= clock
    Muxn_2.reset <= reset
    Muxn_2.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNE[0] <= Muxn_2.io.out @[Interconnect.scala 479:45]
    node _T_6 = bits(ConfigMem.io.out[0], 5, 4) @[Interconnect.scala 483:39]
    Muxn_2.io.config <= _T_6 @[Interconnect.scala 483:23]
    inst Muxn_3 of Muxn_475 @[Interconnect.scala 473:25]
    Muxn_3.clock <= clock
    Muxn_3.reset <= reset
    Muxn_3.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNE[1] <= Muxn_3.io.out @[Interconnect.scala 479:45]
    node _T_7 = bits(ConfigMem.io.out[0], 7, 6) @[Interconnect.scala 483:39]
    Muxn_3.io.config <= _T_7 @[Interconnect.scala 483:23]
    inst Muxn_4 of Muxn_476 @[Interconnect.scala 473:25]
    Muxn_4.clock <= clock
    Muxn_4.reset <= reset
    Muxn_4.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[1] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    io.ipinSE[0] <= Muxn_4.io.out @[Interconnect.scala 479:45]
    node _T_8 = bits(ConfigMem.io.out[0], 9, 8) @[Interconnect.scala 483:39]
    Muxn_4.io.config <= _T_8 @[Interconnect.scala 483:23]
    inst Muxn_5 of Muxn_477 @[Interconnect.scala 473:25]
    Muxn_5.clock <= clock
    Muxn_5.reset <= reset
    Muxn_5.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[1] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    io.ipinSE[1] <= Muxn_5.io.out @[Interconnect.scala 479:45]
    node _T_9 = bits(ConfigMem.io.out[0], 11, 10) @[Interconnect.scala 483:39]
    Muxn_5.io.config <= _T_9 @[Interconnect.scala 483:23]
    inst Muxn_6 of Muxn_478 @[Interconnect.scala 473:25]
    Muxn_6.clock <= clock
    Muxn_6.reset <= reset
    Muxn_6.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[1] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    io.ipinSW[0] <= Muxn_6.io.out @[Interconnect.scala 479:45]
    node _T_10 = bits(ConfigMem.io.out[0], 13, 12) @[Interconnect.scala 483:39]
    Muxn_6.io.config <= _T_10 @[Interconnect.scala 483:23]
    inst Muxn_7 of Muxn_479 @[Interconnect.scala 473:25]
    Muxn_7.clock <= clock
    Muxn_7.reset <= reset
    Muxn_7.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[1] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    io.ipinSW[1] <= Muxn_7.io.out @[Interconnect.scala 479:45]
    node _T_11 = bits(ConfigMem.io.out[0], 15, 14) @[Interconnect.scala 483:39]
    Muxn_7.io.config <= _T_11 @[Interconnect.scala 483:23]
    inst Muxn_8 of Muxn_480 @[Interconnect.scala 473:25]
    Muxn_8.clock <= clock
    Muxn_8.reset <= reset
    Muxn_8.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[1] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    reg _T_12 : UInt, clock @[Interconnect.scala 477:55]
    _T_12 <= Muxn_8.io.out @[Interconnect.scala 477:55]
    io.otrackW[0] <= _T_12 @[Interconnect.scala 477:45]
    node _T_13 = bits(ConfigMem.io.out[0], 18, 16) @[Interconnect.scala 483:39]
    Muxn_8.io.config <= _T_13 @[Interconnect.scala 483:23]
    inst Muxn_9 of Muxn_481 @[Interconnect.scala 473:25]
    Muxn_9.clock <= clock
    Muxn_9.reset <= reset
    Muxn_9.io.in[0] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    reg _T_14 : UInt, clock @[Interconnect.scala 477:55]
    _T_14 <= Muxn_9.io.out @[Interconnect.scala 477:55]
    io.otrackN[0] <= _T_14 @[Interconnect.scala 477:45]
    node _T_15 = bits(ConfigMem.io.out[0], 21, 19) @[Interconnect.scala 483:39]
    Muxn_9.io.config <= _T_15 @[Interconnect.scala 483:23]
    inst Muxn_10 of Muxn_482 @[Interconnect.scala 473:25]
    Muxn_10.clock <= clock
    Muxn_10.reset <= reset
    Muxn_10.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    reg _T_16 : UInt, clock @[Interconnect.scala 477:55]
    _T_16 <= Muxn_10.io.out @[Interconnect.scala 477:55]
    io.otrackE[0] <= _T_16 @[Interconnect.scala 477:45]
    node _T_17 = bits(ConfigMem.io.out[0], 24, 22) @[Interconnect.scala 483:39]
    Muxn_10.io.config <= _T_17 @[Interconnect.scala 483:23]
    inst Muxn_11 of Muxn_483 @[Interconnect.scala 473:25]
    Muxn_11.clock <= clock
    Muxn_11.reset <= reset
    Muxn_11.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[1] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[4] <= io.itrackE[0] @[Interconnect.scala 475:63]
    reg _T_18 : UInt, clock @[Interconnect.scala 477:55]
    _T_18 <= Muxn_11.io.out @[Interconnect.scala 477:55]
    io.otrackS[0] <= _T_18 @[Interconnect.scala 477:45]
    node _T_19 = bits(ConfigMem.io.out[0], 27, 25) @[Interconnect.scala 483:39]
    Muxn_11.io.config <= _T_19 @[Interconnect.scala 483:23]
    
  module ConfigMem_112 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<0>, flip cfg_data : UInt<32>, out : UInt<28>[1]}
    
    wire _T : UInt<28>[1] @[ConfigMem.scala 27:29]
    _T[0] <= UInt<28>("h00") @[ConfigMem.scala 27:29]
    reg regs : UInt<28>[1], clock with : (reset => (reset, _T)) @[ConfigMem.scala 27:21]
    node _T_1 = eq(io.cfg_addr, UInt<1>("h00")) @[ConfigMem.scala 32:38]
    node _T_2 = and(io.cfg_en, _T_1) @[ConfigMem.scala 32:22]
    when _T_2 : @[ConfigMem.scala 32:54]
      node _T_3 = bits(io.cfg_data, 27, 0) @[ConfigMem.scala 33:31]
      regs[0] <= _T_3 @[ConfigMem.scala 33:17]
      skip @[ConfigMem.scala 32:54]
    io.out[0] <= regs[0] @[ConfigMem.scala 52:45]
    
  module Muxn_484 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_485 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_486 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_487 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_488 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_489 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_490 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_491 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_492 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_493 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_494 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_495 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module GIB_32 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<12>, flip cfg_data : UInt<32>, ipinNW : UInt<32>[2], flip opinNW : UInt<32>[1], ipinNE : UInt<32>[2], flip opinNE : UInt<32>[1], ipinSE : UInt<32>[2], flip opinSE : UInt<32>[1], ipinSW : UInt<32>[2], flip opinSW : UInt<32>[1], flip itrackW : UInt<32>[1], otrackW : UInt<32>[1], flip itrackN : UInt<32>[1], otrackN : UInt<32>[1], flip itrackE : UInt<32>[1], otrackE : UInt<32>[1], flip itrackS : UInt<32>[1], otrackS : UInt<32>[1]}
    
    io.ipinNW[0] <= UInt<1>("h00") @[Interconnect.scala 426:20]
    io.ipinNW[1] <= UInt<1>("h00") @[Interconnect.scala 426:20]
    io.ipinNE[0] <= UInt<1>("h00") @[Interconnect.scala 427:20]
    io.ipinNE[1] <= UInt<1>("h00") @[Interconnect.scala 427:20]
    io.ipinSW[0] <= UInt<1>("h00") @[Interconnect.scala 428:20]
    io.ipinSW[1] <= UInt<1>("h00") @[Interconnect.scala 428:20]
    io.ipinSE[0] <= UInt<1>("h00") @[Interconnect.scala 429:20]
    io.ipinSE[1] <= UInt<1>("h00") @[Interconnect.scala 429:20]
    io.otrackW[0] <= UInt<1>("h00") @[Interconnect.scala 430:21]
    io.otrackN[0] <= UInt<1>("h00") @[Interconnect.scala 431:21]
    io.otrackE[0] <= UInt<1>("h00") @[Interconnect.scala 432:21]
    io.otrackS[0] <= UInt<1>("h00") @[Interconnect.scala 433:21]
    inst ConfigMem of ConfigMem_112 @[Interconnect.scala 463:21]
    ConfigMem.clock <= clock
    ConfigMem.reset <= reset
    node _T = bits(io.cfg_addr, 11, 2) @[Interconnect.scala 464:65]
    node _T_1 = eq(UInt<7>("h04e"), _T) @[Interconnect.scala 464:50]
    node _T_2 = and(io.cfg_en, _T_1) @[Interconnect.scala 464:32]
    ConfigMem.io.cfg_en <= _T_2 @[Interconnect.scala 464:19]
    node _T_3 = bits(io.cfg_addr, 1, 0) @[Interconnect.scala 465:35]
    ConfigMem.io.cfg_addr <= _T_3 @[Interconnect.scala 465:21]
    ConfigMem.io.cfg_data <= io.cfg_data @[Interconnect.scala 466:21]
    inst Muxn of Muxn_484 @[Interconnect.scala 473:25]
    Muxn.clock <= clock
    Muxn.reset <= reset
    Muxn.io.in[0] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn.io.in[2] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNW[0] <= Muxn.io.out @[Interconnect.scala 479:45]
    node _T_4 = bits(ConfigMem.io.out[0], 1, 0) @[Interconnect.scala 483:39]
    Muxn.io.config <= _T_4 @[Interconnect.scala 483:23]
    inst Muxn_1 of Muxn_485 @[Interconnect.scala 473:25]
    Muxn_1.clock <= clock
    Muxn_1.reset <= reset
    Muxn_1.io.in[0] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[2] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNW[1] <= Muxn_1.io.out @[Interconnect.scala 479:45]
    node _T_5 = bits(ConfigMem.io.out[0], 3, 2) @[Interconnect.scala 483:39]
    Muxn_1.io.config <= _T_5 @[Interconnect.scala 483:23]
    inst Muxn_2 of Muxn_486 @[Interconnect.scala 473:25]
    Muxn_2.clock <= clock
    Muxn_2.reset <= reset
    Muxn_2.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNE[0] <= Muxn_2.io.out @[Interconnect.scala 479:45]
    node _T_6 = bits(ConfigMem.io.out[0], 5, 4) @[Interconnect.scala 483:39]
    Muxn_2.io.config <= _T_6 @[Interconnect.scala 483:23]
    inst Muxn_3 of Muxn_487 @[Interconnect.scala 473:25]
    Muxn_3.clock <= clock
    Muxn_3.reset <= reset
    Muxn_3.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNE[1] <= Muxn_3.io.out @[Interconnect.scala 479:45]
    node _T_7 = bits(ConfigMem.io.out[0], 7, 6) @[Interconnect.scala 483:39]
    Muxn_3.io.config <= _T_7 @[Interconnect.scala 483:23]
    inst Muxn_4 of Muxn_488 @[Interconnect.scala 473:25]
    Muxn_4.clock <= clock
    Muxn_4.reset <= reset
    Muxn_4.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[1] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    io.ipinSE[0] <= Muxn_4.io.out @[Interconnect.scala 479:45]
    node _T_8 = bits(ConfigMem.io.out[0], 9, 8) @[Interconnect.scala 483:39]
    Muxn_4.io.config <= _T_8 @[Interconnect.scala 483:23]
    inst Muxn_5 of Muxn_489 @[Interconnect.scala 473:25]
    Muxn_5.clock <= clock
    Muxn_5.reset <= reset
    Muxn_5.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[1] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    io.ipinSE[1] <= Muxn_5.io.out @[Interconnect.scala 479:45]
    node _T_9 = bits(ConfigMem.io.out[0], 11, 10) @[Interconnect.scala 483:39]
    Muxn_5.io.config <= _T_9 @[Interconnect.scala 483:23]
    inst Muxn_6 of Muxn_490 @[Interconnect.scala 473:25]
    Muxn_6.clock <= clock
    Muxn_6.reset <= reset
    Muxn_6.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[1] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    io.ipinSW[0] <= Muxn_6.io.out @[Interconnect.scala 479:45]
    node _T_10 = bits(ConfigMem.io.out[0], 13, 12) @[Interconnect.scala 483:39]
    Muxn_6.io.config <= _T_10 @[Interconnect.scala 483:23]
    inst Muxn_7 of Muxn_491 @[Interconnect.scala 473:25]
    Muxn_7.clock <= clock
    Muxn_7.reset <= reset
    Muxn_7.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[1] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    io.ipinSW[1] <= Muxn_7.io.out @[Interconnect.scala 479:45]
    node _T_11 = bits(ConfigMem.io.out[0], 15, 14) @[Interconnect.scala 483:39]
    Muxn_7.io.config <= _T_11 @[Interconnect.scala 483:23]
    inst Muxn_8 of Muxn_492 @[Interconnect.scala 473:25]
    Muxn_8.clock <= clock
    Muxn_8.reset <= reset
    Muxn_8.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[1] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.otrackW[0] <= Muxn_8.io.out @[Interconnect.scala 479:45]
    node _T_12 = bits(ConfigMem.io.out[0], 18, 16) @[Interconnect.scala 483:39]
    Muxn_8.io.config <= _T_12 @[Interconnect.scala 483:23]
    inst Muxn_9 of Muxn_493 @[Interconnect.scala 473:25]
    Muxn_9.clock <= clock
    Muxn_9.reset <= reset
    Muxn_9.io.in[0] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.otrackN[0] <= Muxn_9.io.out @[Interconnect.scala 479:45]
    node _T_13 = bits(ConfigMem.io.out[0], 21, 19) @[Interconnect.scala 483:39]
    Muxn_9.io.config <= _T_13 @[Interconnect.scala 483:23]
    inst Muxn_10 of Muxn_494 @[Interconnect.scala 473:25]
    Muxn_10.clock <= clock
    Muxn_10.reset <= reset
    Muxn_10.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.otrackE[0] <= Muxn_10.io.out @[Interconnect.scala 479:45]
    node _T_14 = bits(ConfigMem.io.out[0], 24, 22) @[Interconnect.scala 483:39]
    Muxn_10.io.config <= _T_14 @[Interconnect.scala 483:23]
    inst Muxn_11 of Muxn_495 @[Interconnect.scala 473:25]
    Muxn_11.clock <= clock
    Muxn_11.reset <= reset
    Muxn_11.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[1] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[4] <= io.itrackE[0] @[Interconnect.scala 475:63]
    io.otrackS[0] <= Muxn_11.io.out @[Interconnect.scala 479:45]
    node _T_15 = bits(ConfigMem.io.out[0], 27, 25) @[Interconnect.scala 483:39]
    Muxn_11.io.config <= _T_15 @[Interconnect.scala 483:23]
    
  module ConfigMem_113 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<0>, flip cfg_data : UInt<32>, out : UInt<28>[1]}
    
    wire _T : UInt<28>[1] @[ConfigMem.scala 27:29]
    _T[0] <= UInt<28>("h00") @[ConfigMem.scala 27:29]
    reg regs : UInt<28>[1], clock with : (reset => (reset, _T)) @[ConfigMem.scala 27:21]
    node _T_1 = eq(io.cfg_addr, UInt<1>("h00")) @[ConfigMem.scala 32:38]
    node _T_2 = and(io.cfg_en, _T_1) @[ConfigMem.scala 32:22]
    when _T_2 : @[ConfigMem.scala 32:54]
      node _T_3 = bits(io.cfg_data, 27, 0) @[ConfigMem.scala 33:31]
      regs[0] <= _T_3 @[ConfigMem.scala 33:17]
      skip @[ConfigMem.scala 32:54]
    io.out[0] <= regs[0] @[ConfigMem.scala 52:45]
    
  module Muxn_496 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_497 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_498 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_499 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_500 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_501 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_502 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_503 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_504 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_505 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_506 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_507 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module GIB_33 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<12>, flip cfg_data : UInt<32>, ipinNW : UInt<32>[2], flip opinNW : UInt<32>[1], ipinNE : UInt<32>[2], flip opinNE : UInt<32>[1], ipinSE : UInt<32>[2], flip opinSE : UInt<32>[1], ipinSW : UInt<32>[2], flip opinSW : UInt<32>[1], flip itrackW : UInt<32>[1], otrackW : UInt<32>[1], flip itrackN : UInt<32>[1], otrackN : UInt<32>[1], flip itrackE : UInt<32>[1], otrackE : UInt<32>[1], flip itrackS : UInt<32>[1], otrackS : UInt<32>[1]}
    
    io.ipinNW[0] <= UInt<1>("h00") @[Interconnect.scala 426:20]
    io.ipinNW[1] <= UInt<1>("h00") @[Interconnect.scala 426:20]
    io.ipinNE[0] <= UInt<1>("h00") @[Interconnect.scala 427:20]
    io.ipinNE[1] <= UInt<1>("h00") @[Interconnect.scala 427:20]
    io.ipinSW[0] <= UInt<1>("h00") @[Interconnect.scala 428:20]
    io.ipinSW[1] <= UInt<1>("h00") @[Interconnect.scala 428:20]
    io.ipinSE[0] <= UInt<1>("h00") @[Interconnect.scala 429:20]
    io.ipinSE[1] <= UInt<1>("h00") @[Interconnect.scala 429:20]
    io.otrackW[0] <= UInt<1>("h00") @[Interconnect.scala 430:21]
    io.otrackN[0] <= UInt<1>("h00") @[Interconnect.scala 431:21]
    io.otrackE[0] <= UInt<1>("h00") @[Interconnect.scala 432:21]
    io.otrackS[0] <= UInt<1>("h00") @[Interconnect.scala 433:21]
    inst ConfigMem of ConfigMem_113 @[Interconnect.scala 463:21]
    ConfigMem.clock <= clock
    ConfigMem.reset <= reset
    node _T = bits(io.cfg_addr, 11, 2) @[Interconnect.scala 464:65]
    node _T_1 = eq(UInt<7>("h04f"), _T) @[Interconnect.scala 464:50]
    node _T_2 = and(io.cfg_en, _T_1) @[Interconnect.scala 464:32]
    ConfigMem.io.cfg_en <= _T_2 @[Interconnect.scala 464:19]
    node _T_3 = bits(io.cfg_addr, 1, 0) @[Interconnect.scala 465:35]
    ConfigMem.io.cfg_addr <= _T_3 @[Interconnect.scala 465:21]
    ConfigMem.io.cfg_data <= io.cfg_data @[Interconnect.scala 466:21]
    inst Muxn of Muxn_496 @[Interconnect.scala 473:25]
    Muxn.clock <= clock
    Muxn.reset <= reset
    Muxn.io.in[0] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn.io.in[2] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNW[0] <= Muxn.io.out @[Interconnect.scala 479:45]
    node _T_4 = bits(ConfigMem.io.out[0], 1, 0) @[Interconnect.scala 483:39]
    Muxn.io.config <= _T_4 @[Interconnect.scala 483:23]
    inst Muxn_1 of Muxn_497 @[Interconnect.scala 473:25]
    Muxn_1.clock <= clock
    Muxn_1.reset <= reset
    Muxn_1.io.in[0] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[2] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNW[1] <= Muxn_1.io.out @[Interconnect.scala 479:45]
    node _T_5 = bits(ConfigMem.io.out[0], 3, 2) @[Interconnect.scala 483:39]
    Muxn_1.io.config <= _T_5 @[Interconnect.scala 483:23]
    inst Muxn_2 of Muxn_498 @[Interconnect.scala 473:25]
    Muxn_2.clock <= clock
    Muxn_2.reset <= reset
    Muxn_2.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNE[0] <= Muxn_2.io.out @[Interconnect.scala 479:45]
    node _T_6 = bits(ConfigMem.io.out[0], 5, 4) @[Interconnect.scala 483:39]
    Muxn_2.io.config <= _T_6 @[Interconnect.scala 483:23]
    inst Muxn_3 of Muxn_499 @[Interconnect.scala 473:25]
    Muxn_3.clock <= clock
    Muxn_3.reset <= reset
    Muxn_3.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNE[1] <= Muxn_3.io.out @[Interconnect.scala 479:45]
    node _T_7 = bits(ConfigMem.io.out[0], 7, 6) @[Interconnect.scala 483:39]
    Muxn_3.io.config <= _T_7 @[Interconnect.scala 483:23]
    inst Muxn_4 of Muxn_500 @[Interconnect.scala 473:25]
    Muxn_4.clock <= clock
    Muxn_4.reset <= reset
    Muxn_4.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[1] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    io.ipinSE[0] <= Muxn_4.io.out @[Interconnect.scala 479:45]
    node _T_8 = bits(ConfigMem.io.out[0], 9, 8) @[Interconnect.scala 483:39]
    Muxn_4.io.config <= _T_8 @[Interconnect.scala 483:23]
    inst Muxn_5 of Muxn_501 @[Interconnect.scala 473:25]
    Muxn_5.clock <= clock
    Muxn_5.reset <= reset
    Muxn_5.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[1] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    io.ipinSE[1] <= Muxn_5.io.out @[Interconnect.scala 479:45]
    node _T_9 = bits(ConfigMem.io.out[0], 11, 10) @[Interconnect.scala 483:39]
    Muxn_5.io.config <= _T_9 @[Interconnect.scala 483:23]
    inst Muxn_6 of Muxn_502 @[Interconnect.scala 473:25]
    Muxn_6.clock <= clock
    Muxn_6.reset <= reset
    Muxn_6.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[1] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    io.ipinSW[0] <= Muxn_6.io.out @[Interconnect.scala 479:45]
    node _T_10 = bits(ConfigMem.io.out[0], 13, 12) @[Interconnect.scala 483:39]
    Muxn_6.io.config <= _T_10 @[Interconnect.scala 483:23]
    inst Muxn_7 of Muxn_503 @[Interconnect.scala 473:25]
    Muxn_7.clock <= clock
    Muxn_7.reset <= reset
    Muxn_7.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[1] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    io.ipinSW[1] <= Muxn_7.io.out @[Interconnect.scala 479:45]
    node _T_11 = bits(ConfigMem.io.out[0], 15, 14) @[Interconnect.scala 483:39]
    Muxn_7.io.config <= _T_11 @[Interconnect.scala 483:23]
    inst Muxn_8 of Muxn_504 @[Interconnect.scala 473:25]
    Muxn_8.clock <= clock
    Muxn_8.reset <= reset
    Muxn_8.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[1] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    reg _T_12 : UInt, clock @[Interconnect.scala 477:55]
    _T_12 <= Muxn_8.io.out @[Interconnect.scala 477:55]
    io.otrackW[0] <= _T_12 @[Interconnect.scala 477:45]
    node _T_13 = bits(ConfigMem.io.out[0], 18, 16) @[Interconnect.scala 483:39]
    Muxn_8.io.config <= _T_13 @[Interconnect.scala 483:23]
    inst Muxn_9 of Muxn_505 @[Interconnect.scala 473:25]
    Muxn_9.clock <= clock
    Muxn_9.reset <= reset
    Muxn_9.io.in[0] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    reg _T_14 : UInt, clock @[Interconnect.scala 477:55]
    _T_14 <= Muxn_9.io.out @[Interconnect.scala 477:55]
    io.otrackN[0] <= _T_14 @[Interconnect.scala 477:45]
    node _T_15 = bits(ConfigMem.io.out[0], 21, 19) @[Interconnect.scala 483:39]
    Muxn_9.io.config <= _T_15 @[Interconnect.scala 483:23]
    inst Muxn_10 of Muxn_506 @[Interconnect.scala 473:25]
    Muxn_10.clock <= clock
    Muxn_10.reset <= reset
    Muxn_10.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    reg _T_16 : UInt, clock @[Interconnect.scala 477:55]
    _T_16 <= Muxn_10.io.out @[Interconnect.scala 477:55]
    io.otrackE[0] <= _T_16 @[Interconnect.scala 477:45]
    node _T_17 = bits(ConfigMem.io.out[0], 24, 22) @[Interconnect.scala 483:39]
    Muxn_10.io.config <= _T_17 @[Interconnect.scala 483:23]
    inst Muxn_11 of Muxn_507 @[Interconnect.scala 473:25]
    Muxn_11.clock <= clock
    Muxn_11.reset <= reset
    Muxn_11.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[1] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[4] <= io.itrackE[0] @[Interconnect.scala 475:63]
    reg _T_18 : UInt, clock @[Interconnect.scala 477:55]
    _T_18 <= Muxn_11.io.out @[Interconnect.scala 477:55]
    io.otrackS[0] <= _T_18 @[Interconnect.scala 477:45]
    node _T_19 = bits(ConfigMem.io.out[0], 27, 25) @[Interconnect.scala 483:39]
    Muxn_11.io.config <= _T_19 @[Interconnect.scala 483:23]
    
  module ConfigMem_114 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<0>, flip cfg_data : UInt<32>, out : UInt<28>[1]}
    
    wire _T : UInt<28>[1] @[ConfigMem.scala 27:29]
    _T[0] <= UInt<28>("h00") @[ConfigMem.scala 27:29]
    reg regs : UInt<28>[1], clock with : (reset => (reset, _T)) @[ConfigMem.scala 27:21]
    node _T_1 = eq(io.cfg_addr, UInt<1>("h00")) @[ConfigMem.scala 32:38]
    node _T_2 = and(io.cfg_en, _T_1) @[ConfigMem.scala 32:22]
    when _T_2 : @[ConfigMem.scala 32:54]
      node _T_3 = bits(io.cfg_data, 27, 0) @[ConfigMem.scala 33:31]
      regs[0] <= _T_3 @[ConfigMem.scala 33:17]
      skip @[ConfigMem.scala 32:54]
    io.out[0] <= regs[0] @[ConfigMem.scala 52:45]
    
  module Muxn_508 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_509 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_510 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_511 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_512 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_513 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_514 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_515 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_516 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_517 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_518 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_519 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module GIB_34 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<12>, flip cfg_data : UInt<32>, ipinNW : UInt<32>[2], flip opinNW : UInt<32>[1], ipinNE : UInt<32>[2], flip opinNE : UInt<32>[1], ipinSE : UInt<32>[2], flip opinSE : UInt<32>[1], ipinSW : UInt<32>[2], flip opinSW : UInt<32>[1], flip itrackW : UInt<32>[1], otrackW : UInt<32>[1], flip itrackN : UInt<32>[1], otrackN : UInt<32>[1], flip itrackE : UInt<32>[1], otrackE : UInt<32>[1], flip itrackS : UInt<32>[1], otrackS : UInt<32>[1]}
    
    io.ipinNW[0] <= UInt<1>("h00") @[Interconnect.scala 426:20]
    io.ipinNW[1] <= UInt<1>("h00") @[Interconnect.scala 426:20]
    io.ipinNE[0] <= UInt<1>("h00") @[Interconnect.scala 427:20]
    io.ipinNE[1] <= UInt<1>("h00") @[Interconnect.scala 427:20]
    io.ipinSW[0] <= UInt<1>("h00") @[Interconnect.scala 428:20]
    io.ipinSW[1] <= UInt<1>("h00") @[Interconnect.scala 428:20]
    io.ipinSE[0] <= UInt<1>("h00") @[Interconnect.scala 429:20]
    io.ipinSE[1] <= UInt<1>("h00") @[Interconnect.scala 429:20]
    io.otrackW[0] <= UInt<1>("h00") @[Interconnect.scala 430:21]
    io.otrackN[0] <= UInt<1>("h00") @[Interconnect.scala 431:21]
    io.otrackE[0] <= UInt<1>("h00") @[Interconnect.scala 432:21]
    io.otrackS[0] <= UInt<1>("h00") @[Interconnect.scala 433:21]
    inst ConfigMem of ConfigMem_114 @[Interconnect.scala 463:21]
    ConfigMem.clock <= clock
    ConfigMem.reset <= reset
    node _T = bits(io.cfg_addr, 11, 2) @[Interconnect.scala 464:65]
    node _T_1 = eq(UInt<7>("h050"), _T) @[Interconnect.scala 464:50]
    node _T_2 = and(io.cfg_en, _T_1) @[Interconnect.scala 464:32]
    ConfigMem.io.cfg_en <= _T_2 @[Interconnect.scala 464:19]
    node _T_3 = bits(io.cfg_addr, 1, 0) @[Interconnect.scala 465:35]
    ConfigMem.io.cfg_addr <= _T_3 @[Interconnect.scala 465:21]
    ConfigMem.io.cfg_data <= io.cfg_data @[Interconnect.scala 466:21]
    inst Muxn of Muxn_508 @[Interconnect.scala 473:25]
    Muxn.clock <= clock
    Muxn.reset <= reset
    Muxn.io.in[0] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn.io.in[2] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNW[0] <= Muxn.io.out @[Interconnect.scala 479:45]
    node _T_4 = bits(ConfigMem.io.out[0], 1, 0) @[Interconnect.scala 483:39]
    Muxn.io.config <= _T_4 @[Interconnect.scala 483:23]
    inst Muxn_1 of Muxn_509 @[Interconnect.scala 473:25]
    Muxn_1.clock <= clock
    Muxn_1.reset <= reset
    Muxn_1.io.in[0] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[2] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNW[1] <= Muxn_1.io.out @[Interconnect.scala 479:45]
    node _T_5 = bits(ConfigMem.io.out[0], 3, 2) @[Interconnect.scala 483:39]
    Muxn_1.io.config <= _T_5 @[Interconnect.scala 483:23]
    inst Muxn_2 of Muxn_510 @[Interconnect.scala 473:25]
    Muxn_2.clock <= clock
    Muxn_2.reset <= reset
    Muxn_2.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNE[0] <= Muxn_2.io.out @[Interconnect.scala 479:45]
    node _T_6 = bits(ConfigMem.io.out[0], 5, 4) @[Interconnect.scala 483:39]
    Muxn_2.io.config <= _T_6 @[Interconnect.scala 483:23]
    inst Muxn_3 of Muxn_511 @[Interconnect.scala 473:25]
    Muxn_3.clock <= clock
    Muxn_3.reset <= reset
    Muxn_3.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNE[1] <= Muxn_3.io.out @[Interconnect.scala 479:45]
    node _T_7 = bits(ConfigMem.io.out[0], 7, 6) @[Interconnect.scala 483:39]
    Muxn_3.io.config <= _T_7 @[Interconnect.scala 483:23]
    inst Muxn_4 of Muxn_512 @[Interconnect.scala 473:25]
    Muxn_4.clock <= clock
    Muxn_4.reset <= reset
    Muxn_4.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[1] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    io.ipinSE[0] <= Muxn_4.io.out @[Interconnect.scala 479:45]
    node _T_8 = bits(ConfigMem.io.out[0], 9, 8) @[Interconnect.scala 483:39]
    Muxn_4.io.config <= _T_8 @[Interconnect.scala 483:23]
    inst Muxn_5 of Muxn_513 @[Interconnect.scala 473:25]
    Muxn_5.clock <= clock
    Muxn_5.reset <= reset
    Muxn_5.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[1] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    io.ipinSE[1] <= Muxn_5.io.out @[Interconnect.scala 479:45]
    node _T_9 = bits(ConfigMem.io.out[0], 11, 10) @[Interconnect.scala 483:39]
    Muxn_5.io.config <= _T_9 @[Interconnect.scala 483:23]
    inst Muxn_6 of Muxn_514 @[Interconnect.scala 473:25]
    Muxn_6.clock <= clock
    Muxn_6.reset <= reset
    Muxn_6.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[1] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    io.ipinSW[0] <= Muxn_6.io.out @[Interconnect.scala 479:45]
    node _T_10 = bits(ConfigMem.io.out[0], 13, 12) @[Interconnect.scala 483:39]
    Muxn_6.io.config <= _T_10 @[Interconnect.scala 483:23]
    inst Muxn_7 of Muxn_515 @[Interconnect.scala 473:25]
    Muxn_7.clock <= clock
    Muxn_7.reset <= reset
    Muxn_7.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[1] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    io.ipinSW[1] <= Muxn_7.io.out @[Interconnect.scala 479:45]
    node _T_11 = bits(ConfigMem.io.out[0], 15, 14) @[Interconnect.scala 483:39]
    Muxn_7.io.config <= _T_11 @[Interconnect.scala 483:23]
    inst Muxn_8 of Muxn_516 @[Interconnect.scala 473:25]
    Muxn_8.clock <= clock
    Muxn_8.reset <= reset
    Muxn_8.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[1] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.otrackW[0] <= Muxn_8.io.out @[Interconnect.scala 479:45]
    node _T_12 = bits(ConfigMem.io.out[0], 18, 16) @[Interconnect.scala 483:39]
    Muxn_8.io.config <= _T_12 @[Interconnect.scala 483:23]
    inst Muxn_9 of Muxn_517 @[Interconnect.scala 473:25]
    Muxn_9.clock <= clock
    Muxn_9.reset <= reset
    Muxn_9.io.in[0] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.otrackN[0] <= Muxn_9.io.out @[Interconnect.scala 479:45]
    node _T_13 = bits(ConfigMem.io.out[0], 21, 19) @[Interconnect.scala 483:39]
    Muxn_9.io.config <= _T_13 @[Interconnect.scala 483:23]
    inst Muxn_10 of Muxn_518 @[Interconnect.scala 473:25]
    Muxn_10.clock <= clock
    Muxn_10.reset <= reset
    Muxn_10.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.otrackE[0] <= Muxn_10.io.out @[Interconnect.scala 479:45]
    node _T_14 = bits(ConfigMem.io.out[0], 24, 22) @[Interconnect.scala 483:39]
    Muxn_10.io.config <= _T_14 @[Interconnect.scala 483:23]
    inst Muxn_11 of Muxn_519 @[Interconnect.scala 473:25]
    Muxn_11.clock <= clock
    Muxn_11.reset <= reset
    Muxn_11.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[1] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[4] <= io.itrackE[0] @[Interconnect.scala 475:63]
    io.otrackS[0] <= Muxn_11.io.out @[Interconnect.scala 479:45]
    node _T_15 = bits(ConfigMem.io.out[0], 27, 25) @[Interconnect.scala 483:39]
    Muxn_11.io.config <= _T_15 @[Interconnect.scala 483:23]
    
  module ConfigMem_115 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<0>, flip cfg_data : UInt<32>, out : UInt<15>[1]}
    
    wire _T : UInt<15>[1] @[ConfigMem.scala 27:29]
    _T[0] <= UInt<15>("h00") @[ConfigMem.scala 27:29]
    reg regs : UInt<15>[1], clock with : (reset => (reset, _T)) @[ConfigMem.scala 27:21]
    node _T_1 = eq(io.cfg_addr, UInt<1>("h00")) @[ConfigMem.scala 32:38]
    node _T_2 = and(io.cfg_en, _T_1) @[ConfigMem.scala 32:22]
    when _T_2 : @[ConfigMem.scala 32:54]
      node _T_3 = bits(io.cfg_data, 14, 0) @[ConfigMem.scala 33:31]
      regs[0] <= _T_3 @[ConfigMem.scala 33:17]
      skip @[ConfigMem.scala 32:54]
    io.out[0] <= regs[0] @[ConfigMem.scala 52:45]
    
  module Muxn_520 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[3], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_521 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[3], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_522 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<1>, flip in : UInt<32>[2], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    io.out <= _T_1 @[Multiplexer.scala 20:10]
    
  module Muxn_523 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<1>, flip in : UInt<32>[2], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    io.out <= _T_1 @[Multiplexer.scala 20:10]
    
  module Muxn_524 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[3], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_525 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_526 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_527 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module GIB_35 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<12>, flip cfg_data : UInt<32>, ipinNW : UInt<32>[2], flip opinNW : UInt<32>[1], ipinNE : UInt<32>[0], flip opinNE : UInt<32>[0], ipinSE : UInt<32>[0], flip opinSE : UInt<32>[0], ipinSW : UInt<32>[2], flip opinSW : UInt<32>[1], flip itrackW : UInt<32>[1], otrackW : UInt<32>[1], flip itrackN : UInt<32>[1], otrackN : UInt<32>[1], flip itrackE : UInt<32>[1], otrackE : UInt<32>[1], flip itrackS : UInt<32>[1], otrackS : UInt<32>[1]}
    
    io.ipinNW[0] <= UInt<1>("h00") @[Interconnect.scala 426:20]
    io.ipinNW[1] <= UInt<1>("h00") @[Interconnect.scala 426:20]
    io.ipinSW[0] <= UInt<1>("h00") @[Interconnect.scala 428:20]
    io.ipinSW[1] <= UInt<1>("h00") @[Interconnect.scala 428:20]
    io.otrackW[0] <= UInt<1>("h00") @[Interconnect.scala 430:21]
    io.otrackN[0] <= UInt<1>("h00") @[Interconnect.scala 431:21]
    io.otrackE[0] <= UInt<1>("h00") @[Interconnect.scala 432:21]
    io.otrackS[0] <= UInt<1>("h00") @[Interconnect.scala 433:21]
    inst ConfigMem of ConfigMem_115 @[Interconnect.scala 463:21]
    ConfigMem.clock <= clock
    ConfigMem.reset <= reset
    node _T = bits(io.cfg_addr, 11, 2) @[Interconnect.scala 464:65]
    node _T_1 = eq(UInt<7>("h051"), _T) @[Interconnect.scala 464:50]
    node _T_2 = and(io.cfg_en, _T_1) @[Interconnect.scala 464:32]
    ConfigMem.io.cfg_en <= _T_2 @[Interconnect.scala 464:19]
    node _T_3 = bits(io.cfg_addr, 1, 0) @[Interconnect.scala 465:35]
    ConfigMem.io.cfg_addr <= _T_3 @[Interconnect.scala 465:21]
    ConfigMem.io.cfg_data <= io.cfg_data @[Interconnect.scala 466:21]
    inst Muxn of Muxn_520 @[Interconnect.scala 473:25]
    Muxn.clock <= clock
    Muxn.reset <= reset
    Muxn.io.in[0] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn.io.in[1] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn.io.in[2] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNW[0] <= Muxn.io.out @[Interconnect.scala 479:45]
    node _T_4 = bits(ConfigMem.io.out[0], 1, 0) @[Interconnect.scala 483:39]
    Muxn.io.config <= _T_4 @[Interconnect.scala 483:23]
    inst Muxn_1 of Muxn_521 @[Interconnect.scala 473:25]
    Muxn_1.clock <= clock
    Muxn_1.reset <= reset
    Muxn_1.io.in[0] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[1] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[2] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNW[1] <= Muxn_1.io.out @[Interconnect.scala 479:45]
    node _T_5 = bits(ConfigMem.io.out[0], 3, 2) @[Interconnect.scala 483:39]
    Muxn_1.io.config <= _T_5 @[Interconnect.scala 483:23]
    inst Muxn_2 of Muxn_522 @[Interconnect.scala 473:25]
    Muxn_2.clock <= clock
    Muxn_2.reset <= reset
    Muxn_2.io.in[0] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[1] <= io.itrackE[0] @[Interconnect.scala 475:63]
    io.ipinSW[0] <= Muxn_2.io.out @[Interconnect.scala 479:45]
    node _T_6 = bits(ConfigMem.io.out[0], 4, 4) @[Interconnect.scala 483:39]
    Muxn_2.io.config <= _T_6 @[Interconnect.scala 483:23]
    inst Muxn_3 of Muxn_523 @[Interconnect.scala 473:25]
    Muxn_3.clock <= clock
    Muxn_3.reset <= reset
    Muxn_3.io.in[0] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[1] <= io.itrackE[0] @[Interconnect.scala 475:63]
    io.ipinSW[1] <= Muxn_3.io.out @[Interconnect.scala 479:45]
    node _T_7 = bits(ConfigMem.io.out[0], 5, 5) @[Interconnect.scala 483:39]
    Muxn_3.io.config <= _T_7 @[Interconnect.scala 483:23]
    inst Muxn_4 of Muxn_524 @[Interconnect.scala 473:25]
    Muxn_4.clock <= clock
    Muxn_4.reset <= reset
    Muxn_4.io.in[0] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[1] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[2] <= io.itrackS[0] @[Interconnect.scala 475:63]
    reg _T_8 : UInt, clock @[Interconnect.scala 477:55]
    _T_8 <= Muxn_4.io.out @[Interconnect.scala 477:55]
    io.otrackW[0] <= _T_8 @[Interconnect.scala 477:45]
    node _T_9 = bits(ConfigMem.io.out[0], 7, 6) @[Interconnect.scala 483:39]
    Muxn_4.io.config <= _T_9 @[Interconnect.scala 483:23]
    inst Muxn_5 of Muxn_525 @[Interconnect.scala 473:25]
    Muxn_5.clock <= clock
    Muxn_5.reset <= reset
    Muxn_5.io.in[0] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[1] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[2] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    reg _T_10 : UInt, clock @[Interconnect.scala 477:55]
    _T_10 <= Muxn_5.io.out @[Interconnect.scala 477:55]
    io.otrackN[0] <= _T_10 @[Interconnect.scala 477:45]
    node _T_11 = bits(ConfigMem.io.out[0], 9, 8) @[Interconnect.scala 483:39]
    Muxn_5.io.config <= _T_11 @[Interconnect.scala 483:23]
    inst Muxn_6 of Muxn_526 @[Interconnect.scala 473:25]
    Muxn_6.clock <= clock
    Muxn_6.reset <= reset
    Muxn_6.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    reg _T_12 : UInt, clock @[Interconnect.scala 477:55]
    _T_12 <= Muxn_6.io.out @[Interconnect.scala 477:55]
    io.otrackE[0] <= _T_12 @[Interconnect.scala 477:45]
    node _T_13 = bits(ConfigMem.io.out[0], 12, 10) @[Interconnect.scala 483:39]
    Muxn_6.io.config <= _T_13 @[Interconnect.scala 483:23]
    inst Muxn_7 of Muxn_527 @[Interconnect.scala 473:25]
    Muxn_7.clock <= clock
    Muxn_7.reset <= reset
    Muxn_7.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[1] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    reg _T_14 : UInt, clock @[Interconnect.scala 477:55]
    _T_14 <= Muxn_7.io.out @[Interconnect.scala 477:55]
    io.otrackS[0] <= _T_14 @[Interconnect.scala 477:45]
    node _T_15 = bits(ConfigMem.io.out[0], 14, 13) @[Interconnect.scala 483:39]
    Muxn_7.io.config <= _T_15 @[Interconnect.scala 483:23]
    
  module ConfigMem_116 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<0>, flip cfg_data : UInt<32>, out : UInt<15>[1]}
    
    wire _T : UInt<15>[1] @[ConfigMem.scala 27:29]
    _T[0] <= UInt<15>("h00") @[ConfigMem.scala 27:29]
    reg regs : UInt<15>[1], clock with : (reset => (reset, _T)) @[ConfigMem.scala 27:21]
    node _T_1 = eq(io.cfg_addr, UInt<1>("h00")) @[ConfigMem.scala 32:38]
    node _T_2 = and(io.cfg_en, _T_1) @[ConfigMem.scala 32:22]
    when _T_2 : @[ConfigMem.scala 32:54]
      node _T_3 = bits(io.cfg_data, 14, 0) @[ConfigMem.scala 33:31]
      regs[0] <= _T_3 @[ConfigMem.scala 33:17]
      skip @[ConfigMem.scala 32:54]
    io.out[0] <= regs[0] @[ConfigMem.scala 52:45]
    
  module Muxn_528 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<1>, flip in : UInt<32>[2], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    io.out <= _T_1 @[Multiplexer.scala 20:10]
    
  module Muxn_529 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<1>, flip in : UInt<32>[2], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    io.out <= _T_1 @[Multiplexer.scala 20:10]
    
  module Muxn_530 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[3], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_531 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[3], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_532 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_533 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_534 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[3], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_535 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module GIB_36 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<12>, flip cfg_data : UInt<32>, ipinNW : UInt<32>[0], flip opinNW : UInt<32>[0], ipinNE : UInt<32>[2], flip opinNE : UInt<32>[1], ipinSE : UInt<32>[2], flip opinSE : UInt<32>[1], ipinSW : UInt<32>[0], flip opinSW : UInt<32>[0], flip itrackW : UInt<32>[1], otrackW : UInt<32>[1], flip itrackN : UInt<32>[1], otrackN : UInt<32>[1], flip itrackE : UInt<32>[1], otrackE : UInt<32>[1], flip itrackS : UInt<32>[1], otrackS : UInt<32>[1]}
    
    io.ipinNE[0] <= UInt<1>("h00") @[Interconnect.scala 427:20]
    io.ipinNE[1] <= UInt<1>("h00") @[Interconnect.scala 427:20]
    io.ipinSE[0] <= UInt<1>("h00") @[Interconnect.scala 429:20]
    io.ipinSE[1] <= UInt<1>("h00") @[Interconnect.scala 429:20]
    io.otrackW[0] <= UInt<1>("h00") @[Interconnect.scala 430:21]
    io.otrackN[0] <= UInt<1>("h00") @[Interconnect.scala 431:21]
    io.otrackE[0] <= UInt<1>("h00") @[Interconnect.scala 432:21]
    io.otrackS[0] <= UInt<1>("h00") @[Interconnect.scala 433:21]
    inst ConfigMem of ConfigMem_116 @[Interconnect.scala 463:21]
    ConfigMem.clock <= clock
    ConfigMem.reset <= reset
    node _T = bits(io.cfg_addr, 11, 2) @[Interconnect.scala 464:65]
    node _T_1 = eq(UInt<7>("h05b"), _T) @[Interconnect.scala 464:50]
    node _T_2 = and(io.cfg_en, _T_1) @[Interconnect.scala 464:32]
    ConfigMem.io.cfg_en <= _T_2 @[Interconnect.scala 464:19]
    node _T_3 = bits(io.cfg_addr, 1, 0) @[Interconnect.scala 465:35]
    ConfigMem.io.cfg_addr <= _T_3 @[Interconnect.scala 465:21]
    ConfigMem.io.cfg_data <= io.cfg_data @[Interconnect.scala 466:21]
    inst Muxn of Muxn_528 @[Interconnect.scala 473:25]
    Muxn.clock <= clock
    Muxn.reset <= reset
    Muxn.io.in[0] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn.io.in[1] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNE[0] <= Muxn.io.out @[Interconnect.scala 479:45]
    node _T_4 = bits(ConfigMem.io.out[0], 0, 0) @[Interconnect.scala 483:39]
    Muxn.io.config <= _T_4 @[Interconnect.scala 483:23]
    inst Muxn_1 of Muxn_529 @[Interconnect.scala 473:25]
    Muxn_1.clock <= clock
    Muxn_1.reset <= reset
    Muxn_1.io.in[0] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[1] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNE[1] <= Muxn_1.io.out @[Interconnect.scala 479:45]
    node _T_5 = bits(ConfigMem.io.out[0], 1, 1) @[Interconnect.scala 483:39]
    Muxn_1.io.config <= _T_5 @[Interconnect.scala 483:23]
    inst Muxn_2 of Muxn_530 @[Interconnect.scala 473:25]
    Muxn_2.clock <= clock
    Muxn_2.reset <= reset
    Muxn_2.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[1] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    io.ipinSE[0] <= Muxn_2.io.out @[Interconnect.scala 479:45]
    node _T_6 = bits(ConfigMem.io.out[0], 3, 2) @[Interconnect.scala 483:39]
    Muxn_2.io.config <= _T_6 @[Interconnect.scala 483:23]
    inst Muxn_3 of Muxn_531 @[Interconnect.scala 473:25]
    Muxn_3.clock <= clock
    Muxn_3.reset <= reset
    Muxn_3.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[1] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    io.ipinSE[1] <= Muxn_3.io.out @[Interconnect.scala 479:45]
    node _T_7 = bits(ConfigMem.io.out[0], 5, 4) @[Interconnect.scala 483:39]
    Muxn_3.io.config <= _T_7 @[Interconnect.scala 483:23]
    inst Muxn_4 of Muxn_532 @[Interconnect.scala 473:25]
    Muxn_4.clock <= clock
    Muxn_4.reset <= reset
    Muxn_4.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[1] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.otrackW[0] <= Muxn_4.io.out @[Interconnect.scala 479:45]
    node _T_8 = bits(ConfigMem.io.out[0], 8, 6) @[Interconnect.scala 483:39]
    Muxn_4.io.config <= _T_8 @[Interconnect.scala 483:23]
    inst Muxn_5 of Muxn_533 @[Interconnect.scala 473:25]
    Muxn_5.clock <= clock
    Muxn_5.reset <= reset
    Muxn_5.io.in[0] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[1] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[2] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.otrackN[0] <= Muxn_5.io.out @[Interconnect.scala 479:45]
    node _T_9 = bits(ConfigMem.io.out[0], 10, 9) @[Interconnect.scala 483:39]
    Muxn_5.io.config <= _T_9 @[Interconnect.scala 483:23]
    inst Muxn_6 of Muxn_534 @[Interconnect.scala 473:25]
    Muxn_6.clock <= clock
    Muxn_6.reset <= reset
    Muxn_6.io.in[0] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[1] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[2] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.otrackE[0] <= Muxn_6.io.out @[Interconnect.scala 479:45]
    node _T_10 = bits(ConfigMem.io.out[0], 12, 11) @[Interconnect.scala 483:39]
    Muxn_6.io.config <= _T_10 @[Interconnect.scala 483:23]
    inst Muxn_7 of Muxn_535 @[Interconnect.scala 473:25]
    Muxn_7.clock <= clock
    Muxn_7.reset <= reset
    Muxn_7.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[1] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    io.otrackS[0] <= Muxn_7.io.out @[Interconnect.scala 479:45]
    node _T_11 = bits(ConfigMem.io.out[0], 14, 13) @[Interconnect.scala 483:39]
    Muxn_7.io.config <= _T_11 @[Interconnect.scala 483:23]
    
  module ConfigMem_117 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<0>, flip cfg_data : UInt<32>, out : UInt<28>[1]}
    
    wire _T : UInt<28>[1] @[ConfigMem.scala 27:29]
    _T[0] <= UInt<28>("h00") @[ConfigMem.scala 27:29]
    reg regs : UInt<28>[1], clock with : (reset => (reset, _T)) @[ConfigMem.scala 27:21]
    node _T_1 = eq(io.cfg_addr, UInt<1>("h00")) @[ConfigMem.scala 32:38]
    node _T_2 = and(io.cfg_en, _T_1) @[ConfigMem.scala 32:22]
    when _T_2 : @[ConfigMem.scala 32:54]
      node _T_3 = bits(io.cfg_data, 27, 0) @[ConfigMem.scala 33:31]
      regs[0] <= _T_3 @[ConfigMem.scala 33:17]
      skip @[ConfigMem.scala 32:54]
    io.out[0] <= regs[0] @[ConfigMem.scala 52:45]
    
  module Muxn_536 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_537 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_538 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_539 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_540 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_541 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_542 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_543 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_544 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_545 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_546 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_547 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module GIB_37 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<12>, flip cfg_data : UInt<32>, ipinNW : UInt<32>[2], flip opinNW : UInt<32>[1], ipinNE : UInt<32>[2], flip opinNE : UInt<32>[1], ipinSE : UInt<32>[2], flip opinSE : UInt<32>[1], ipinSW : UInt<32>[2], flip opinSW : UInt<32>[1], flip itrackW : UInt<32>[1], otrackW : UInt<32>[1], flip itrackN : UInt<32>[1], otrackN : UInt<32>[1], flip itrackE : UInt<32>[1], otrackE : UInt<32>[1], flip itrackS : UInt<32>[1], otrackS : UInt<32>[1]}
    
    io.ipinNW[0] <= UInt<1>("h00") @[Interconnect.scala 426:20]
    io.ipinNW[1] <= UInt<1>("h00") @[Interconnect.scala 426:20]
    io.ipinNE[0] <= UInt<1>("h00") @[Interconnect.scala 427:20]
    io.ipinNE[1] <= UInt<1>("h00") @[Interconnect.scala 427:20]
    io.ipinSW[0] <= UInt<1>("h00") @[Interconnect.scala 428:20]
    io.ipinSW[1] <= UInt<1>("h00") @[Interconnect.scala 428:20]
    io.ipinSE[0] <= UInt<1>("h00") @[Interconnect.scala 429:20]
    io.ipinSE[1] <= UInt<1>("h00") @[Interconnect.scala 429:20]
    io.otrackW[0] <= UInt<1>("h00") @[Interconnect.scala 430:21]
    io.otrackN[0] <= UInt<1>("h00") @[Interconnect.scala 431:21]
    io.otrackE[0] <= UInt<1>("h00") @[Interconnect.scala 432:21]
    io.otrackS[0] <= UInt<1>("h00") @[Interconnect.scala 433:21]
    inst ConfigMem of ConfigMem_117 @[Interconnect.scala 463:21]
    ConfigMem.clock <= clock
    ConfigMem.reset <= reset
    node _T = bits(io.cfg_addr, 11, 2) @[Interconnect.scala 464:65]
    node _T_1 = eq(UInt<7>("h05c"), _T) @[Interconnect.scala 464:50]
    node _T_2 = and(io.cfg_en, _T_1) @[Interconnect.scala 464:32]
    ConfigMem.io.cfg_en <= _T_2 @[Interconnect.scala 464:19]
    node _T_3 = bits(io.cfg_addr, 1, 0) @[Interconnect.scala 465:35]
    ConfigMem.io.cfg_addr <= _T_3 @[Interconnect.scala 465:21]
    ConfigMem.io.cfg_data <= io.cfg_data @[Interconnect.scala 466:21]
    inst Muxn of Muxn_536 @[Interconnect.scala 473:25]
    Muxn.clock <= clock
    Muxn.reset <= reset
    Muxn.io.in[0] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn.io.in[2] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNW[0] <= Muxn.io.out @[Interconnect.scala 479:45]
    node _T_4 = bits(ConfigMem.io.out[0], 1, 0) @[Interconnect.scala 483:39]
    Muxn.io.config <= _T_4 @[Interconnect.scala 483:23]
    inst Muxn_1 of Muxn_537 @[Interconnect.scala 473:25]
    Muxn_1.clock <= clock
    Muxn_1.reset <= reset
    Muxn_1.io.in[0] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[2] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNW[1] <= Muxn_1.io.out @[Interconnect.scala 479:45]
    node _T_5 = bits(ConfigMem.io.out[0], 3, 2) @[Interconnect.scala 483:39]
    Muxn_1.io.config <= _T_5 @[Interconnect.scala 483:23]
    inst Muxn_2 of Muxn_538 @[Interconnect.scala 473:25]
    Muxn_2.clock <= clock
    Muxn_2.reset <= reset
    Muxn_2.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNE[0] <= Muxn_2.io.out @[Interconnect.scala 479:45]
    node _T_6 = bits(ConfigMem.io.out[0], 5, 4) @[Interconnect.scala 483:39]
    Muxn_2.io.config <= _T_6 @[Interconnect.scala 483:23]
    inst Muxn_3 of Muxn_539 @[Interconnect.scala 473:25]
    Muxn_3.clock <= clock
    Muxn_3.reset <= reset
    Muxn_3.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNE[1] <= Muxn_3.io.out @[Interconnect.scala 479:45]
    node _T_7 = bits(ConfigMem.io.out[0], 7, 6) @[Interconnect.scala 483:39]
    Muxn_3.io.config <= _T_7 @[Interconnect.scala 483:23]
    inst Muxn_4 of Muxn_540 @[Interconnect.scala 473:25]
    Muxn_4.clock <= clock
    Muxn_4.reset <= reset
    Muxn_4.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[1] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    io.ipinSE[0] <= Muxn_4.io.out @[Interconnect.scala 479:45]
    node _T_8 = bits(ConfigMem.io.out[0], 9, 8) @[Interconnect.scala 483:39]
    Muxn_4.io.config <= _T_8 @[Interconnect.scala 483:23]
    inst Muxn_5 of Muxn_541 @[Interconnect.scala 473:25]
    Muxn_5.clock <= clock
    Muxn_5.reset <= reset
    Muxn_5.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[1] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    io.ipinSE[1] <= Muxn_5.io.out @[Interconnect.scala 479:45]
    node _T_9 = bits(ConfigMem.io.out[0], 11, 10) @[Interconnect.scala 483:39]
    Muxn_5.io.config <= _T_9 @[Interconnect.scala 483:23]
    inst Muxn_6 of Muxn_542 @[Interconnect.scala 473:25]
    Muxn_6.clock <= clock
    Muxn_6.reset <= reset
    Muxn_6.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[1] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    io.ipinSW[0] <= Muxn_6.io.out @[Interconnect.scala 479:45]
    node _T_10 = bits(ConfigMem.io.out[0], 13, 12) @[Interconnect.scala 483:39]
    Muxn_6.io.config <= _T_10 @[Interconnect.scala 483:23]
    inst Muxn_7 of Muxn_543 @[Interconnect.scala 473:25]
    Muxn_7.clock <= clock
    Muxn_7.reset <= reset
    Muxn_7.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[1] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    io.ipinSW[1] <= Muxn_7.io.out @[Interconnect.scala 479:45]
    node _T_11 = bits(ConfigMem.io.out[0], 15, 14) @[Interconnect.scala 483:39]
    Muxn_7.io.config <= _T_11 @[Interconnect.scala 483:23]
    inst Muxn_8 of Muxn_544 @[Interconnect.scala 473:25]
    Muxn_8.clock <= clock
    Muxn_8.reset <= reset
    Muxn_8.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[1] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    reg _T_12 : UInt, clock @[Interconnect.scala 477:55]
    _T_12 <= Muxn_8.io.out @[Interconnect.scala 477:55]
    io.otrackW[0] <= _T_12 @[Interconnect.scala 477:45]
    node _T_13 = bits(ConfigMem.io.out[0], 18, 16) @[Interconnect.scala 483:39]
    Muxn_8.io.config <= _T_13 @[Interconnect.scala 483:23]
    inst Muxn_9 of Muxn_545 @[Interconnect.scala 473:25]
    Muxn_9.clock <= clock
    Muxn_9.reset <= reset
    Muxn_9.io.in[0] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    reg _T_14 : UInt, clock @[Interconnect.scala 477:55]
    _T_14 <= Muxn_9.io.out @[Interconnect.scala 477:55]
    io.otrackN[0] <= _T_14 @[Interconnect.scala 477:45]
    node _T_15 = bits(ConfigMem.io.out[0], 21, 19) @[Interconnect.scala 483:39]
    Muxn_9.io.config <= _T_15 @[Interconnect.scala 483:23]
    inst Muxn_10 of Muxn_546 @[Interconnect.scala 473:25]
    Muxn_10.clock <= clock
    Muxn_10.reset <= reset
    Muxn_10.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    reg _T_16 : UInt, clock @[Interconnect.scala 477:55]
    _T_16 <= Muxn_10.io.out @[Interconnect.scala 477:55]
    io.otrackE[0] <= _T_16 @[Interconnect.scala 477:45]
    node _T_17 = bits(ConfigMem.io.out[0], 24, 22) @[Interconnect.scala 483:39]
    Muxn_10.io.config <= _T_17 @[Interconnect.scala 483:23]
    inst Muxn_11 of Muxn_547 @[Interconnect.scala 473:25]
    Muxn_11.clock <= clock
    Muxn_11.reset <= reset
    Muxn_11.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[1] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[4] <= io.itrackE[0] @[Interconnect.scala 475:63]
    reg _T_18 : UInt, clock @[Interconnect.scala 477:55]
    _T_18 <= Muxn_11.io.out @[Interconnect.scala 477:55]
    io.otrackS[0] <= _T_18 @[Interconnect.scala 477:45]
    node _T_19 = bits(ConfigMem.io.out[0], 27, 25) @[Interconnect.scala 483:39]
    Muxn_11.io.config <= _T_19 @[Interconnect.scala 483:23]
    
  module ConfigMem_118 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<0>, flip cfg_data : UInt<32>, out : UInt<28>[1]}
    
    wire _T : UInt<28>[1] @[ConfigMem.scala 27:29]
    _T[0] <= UInt<28>("h00") @[ConfigMem.scala 27:29]
    reg regs : UInt<28>[1], clock with : (reset => (reset, _T)) @[ConfigMem.scala 27:21]
    node _T_1 = eq(io.cfg_addr, UInt<1>("h00")) @[ConfigMem.scala 32:38]
    node _T_2 = and(io.cfg_en, _T_1) @[ConfigMem.scala 32:22]
    when _T_2 : @[ConfigMem.scala 32:54]
      node _T_3 = bits(io.cfg_data, 27, 0) @[ConfigMem.scala 33:31]
      regs[0] <= _T_3 @[ConfigMem.scala 33:17]
      skip @[ConfigMem.scala 32:54]
    io.out[0] <= regs[0] @[ConfigMem.scala 52:45]
    
  module Muxn_548 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_549 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_550 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_551 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_552 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_553 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_554 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_555 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_556 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_557 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_558 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_559 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module GIB_38 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<12>, flip cfg_data : UInt<32>, ipinNW : UInt<32>[2], flip opinNW : UInt<32>[1], ipinNE : UInt<32>[2], flip opinNE : UInt<32>[1], ipinSE : UInt<32>[2], flip opinSE : UInt<32>[1], ipinSW : UInt<32>[2], flip opinSW : UInt<32>[1], flip itrackW : UInt<32>[1], otrackW : UInt<32>[1], flip itrackN : UInt<32>[1], otrackN : UInt<32>[1], flip itrackE : UInt<32>[1], otrackE : UInt<32>[1], flip itrackS : UInt<32>[1], otrackS : UInt<32>[1]}
    
    io.ipinNW[0] <= UInt<1>("h00") @[Interconnect.scala 426:20]
    io.ipinNW[1] <= UInt<1>("h00") @[Interconnect.scala 426:20]
    io.ipinNE[0] <= UInt<1>("h00") @[Interconnect.scala 427:20]
    io.ipinNE[1] <= UInt<1>("h00") @[Interconnect.scala 427:20]
    io.ipinSW[0] <= UInt<1>("h00") @[Interconnect.scala 428:20]
    io.ipinSW[1] <= UInt<1>("h00") @[Interconnect.scala 428:20]
    io.ipinSE[0] <= UInt<1>("h00") @[Interconnect.scala 429:20]
    io.ipinSE[1] <= UInt<1>("h00") @[Interconnect.scala 429:20]
    io.otrackW[0] <= UInt<1>("h00") @[Interconnect.scala 430:21]
    io.otrackN[0] <= UInt<1>("h00") @[Interconnect.scala 431:21]
    io.otrackE[0] <= UInt<1>("h00") @[Interconnect.scala 432:21]
    io.otrackS[0] <= UInt<1>("h00") @[Interconnect.scala 433:21]
    inst ConfigMem of ConfigMem_118 @[Interconnect.scala 463:21]
    ConfigMem.clock <= clock
    ConfigMem.reset <= reset
    node _T = bits(io.cfg_addr, 11, 2) @[Interconnect.scala 464:65]
    node _T_1 = eq(UInt<7>("h05d"), _T) @[Interconnect.scala 464:50]
    node _T_2 = and(io.cfg_en, _T_1) @[Interconnect.scala 464:32]
    ConfigMem.io.cfg_en <= _T_2 @[Interconnect.scala 464:19]
    node _T_3 = bits(io.cfg_addr, 1, 0) @[Interconnect.scala 465:35]
    ConfigMem.io.cfg_addr <= _T_3 @[Interconnect.scala 465:21]
    ConfigMem.io.cfg_data <= io.cfg_data @[Interconnect.scala 466:21]
    inst Muxn of Muxn_548 @[Interconnect.scala 473:25]
    Muxn.clock <= clock
    Muxn.reset <= reset
    Muxn.io.in[0] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn.io.in[2] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNW[0] <= Muxn.io.out @[Interconnect.scala 479:45]
    node _T_4 = bits(ConfigMem.io.out[0], 1, 0) @[Interconnect.scala 483:39]
    Muxn.io.config <= _T_4 @[Interconnect.scala 483:23]
    inst Muxn_1 of Muxn_549 @[Interconnect.scala 473:25]
    Muxn_1.clock <= clock
    Muxn_1.reset <= reset
    Muxn_1.io.in[0] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[2] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNW[1] <= Muxn_1.io.out @[Interconnect.scala 479:45]
    node _T_5 = bits(ConfigMem.io.out[0], 3, 2) @[Interconnect.scala 483:39]
    Muxn_1.io.config <= _T_5 @[Interconnect.scala 483:23]
    inst Muxn_2 of Muxn_550 @[Interconnect.scala 473:25]
    Muxn_2.clock <= clock
    Muxn_2.reset <= reset
    Muxn_2.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNE[0] <= Muxn_2.io.out @[Interconnect.scala 479:45]
    node _T_6 = bits(ConfigMem.io.out[0], 5, 4) @[Interconnect.scala 483:39]
    Muxn_2.io.config <= _T_6 @[Interconnect.scala 483:23]
    inst Muxn_3 of Muxn_551 @[Interconnect.scala 473:25]
    Muxn_3.clock <= clock
    Muxn_3.reset <= reset
    Muxn_3.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNE[1] <= Muxn_3.io.out @[Interconnect.scala 479:45]
    node _T_7 = bits(ConfigMem.io.out[0], 7, 6) @[Interconnect.scala 483:39]
    Muxn_3.io.config <= _T_7 @[Interconnect.scala 483:23]
    inst Muxn_4 of Muxn_552 @[Interconnect.scala 473:25]
    Muxn_4.clock <= clock
    Muxn_4.reset <= reset
    Muxn_4.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[1] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    io.ipinSE[0] <= Muxn_4.io.out @[Interconnect.scala 479:45]
    node _T_8 = bits(ConfigMem.io.out[0], 9, 8) @[Interconnect.scala 483:39]
    Muxn_4.io.config <= _T_8 @[Interconnect.scala 483:23]
    inst Muxn_5 of Muxn_553 @[Interconnect.scala 473:25]
    Muxn_5.clock <= clock
    Muxn_5.reset <= reset
    Muxn_5.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[1] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    io.ipinSE[1] <= Muxn_5.io.out @[Interconnect.scala 479:45]
    node _T_9 = bits(ConfigMem.io.out[0], 11, 10) @[Interconnect.scala 483:39]
    Muxn_5.io.config <= _T_9 @[Interconnect.scala 483:23]
    inst Muxn_6 of Muxn_554 @[Interconnect.scala 473:25]
    Muxn_6.clock <= clock
    Muxn_6.reset <= reset
    Muxn_6.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[1] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    io.ipinSW[0] <= Muxn_6.io.out @[Interconnect.scala 479:45]
    node _T_10 = bits(ConfigMem.io.out[0], 13, 12) @[Interconnect.scala 483:39]
    Muxn_6.io.config <= _T_10 @[Interconnect.scala 483:23]
    inst Muxn_7 of Muxn_555 @[Interconnect.scala 473:25]
    Muxn_7.clock <= clock
    Muxn_7.reset <= reset
    Muxn_7.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[1] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    io.ipinSW[1] <= Muxn_7.io.out @[Interconnect.scala 479:45]
    node _T_11 = bits(ConfigMem.io.out[0], 15, 14) @[Interconnect.scala 483:39]
    Muxn_7.io.config <= _T_11 @[Interconnect.scala 483:23]
    inst Muxn_8 of Muxn_556 @[Interconnect.scala 473:25]
    Muxn_8.clock <= clock
    Muxn_8.reset <= reset
    Muxn_8.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[1] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.otrackW[0] <= Muxn_8.io.out @[Interconnect.scala 479:45]
    node _T_12 = bits(ConfigMem.io.out[0], 18, 16) @[Interconnect.scala 483:39]
    Muxn_8.io.config <= _T_12 @[Interconnect.scala 483:23]
    inst Muxn_9 of Muxn_557 @[Interconnect.scala 473:25]
    Muxn_9.clock <= clock
    Muxn_9.reset <= reset
    Muxn_9.io.in[0] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.otrackN[0] <= Muxn_9.io.out @[Interconnect.scala 479:45]
    node _T_13 = bits(ConfigMem.io.out[0], 21, 19) @[Interconnect.scala 483:39]
    Muxn_9.io.config <= _T_13 @[Interconnect.scala 483:23]
    inst Muxn_10 of Muxn_558 @[Interconnect.scala 473:25]
    Muxn_10.clock <= clock
    Muxn_10.reset <= reset
    Muxn_10.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.otrackE[0] <= Muxn_10.io.out @[Interconnect.scala 479:45]
    node _T_14 = bits(ConfigMem.io.out[0], 24, 22) @[Interconnect.scala 483:39]
    Muxn_10.io.config <= _T_14 @[Interconnect.scala 483:23]
    inst Muxn_11 of Muxn_559 @[Interconnect.scala 473:25]
    Muxn_11.clock <= clock
    Muxn_11.reset <= reset
    Muxn_11.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[1] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[4] <= io.itrackE[0] @[Interconnect.scala 475:63]
    io.otrackS[0] <= Muxn_11.io.out @[Interconnect.scala 479:45]
    node _T_15 = bits(ConfigMem.io.out[0], 27, 25) @[Interconnect.scala 483:39]
    Muxn_11.io.config <= _T_15 @[Interconnect.scala 483:23]
    
  module ConfigMem_119 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<0>, flip cfg_data : UInt<32>, out : UInt<28>[1]}
    
    wire _T : UInt<28>[1] @[ConfigMem.scala 27:29]
    _T[0] <= UInt<28>("h00") @[ConfigMem.scala 27:29]
    reg regs : UInt<28>[1], clock with : (reset => (reset, _T)) @[ConfigMem.scala 27:21]
    node _T_1 = eq(io.cfg_addr, UInt<1>("h00")) @[ConfigMem.scala 32:38]
    node _T_2 = and(io.cfg_en, _T_1) @[ConfigMem.scala 32:22]
    when _T_2 : @[ConfigMem.scala 32:54]
      node _T_3 = bits(io.cfg_data, 27, 0) @[ConfigMem.scala 33:31]
      regs[0] <= _T_3 @[ConfigMem.scala 33:17]
      skip @[ConfigMem.scala 32:54]
    io.out[0] <= regs[0] @[ConfigMem.scala 52:45]
    
  module Muxn_560 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_561 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_562 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_563 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_564 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_565 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_566 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_567 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_568 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_569 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_570 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_571 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module GIB_39 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<12>, flip cfg_data : UInt<32>, ipinNW : UInt<32>[2], flip opinNW : UInt<32>[1], ipinNE : UInt<32>[2], flip opinNE : UInt<32>[1], ipinSE : UInt<32>[2], flip opinSE : UInt<32>[1], ipinSW : UInt<32>[2], flip opinSW : UInt<32>[1], flip itrackW : UInt<32>[1], otrackW : UInt<32>[1], flip itrackN : UInt<32>[1], otrackN : UInt<32>[1], flip itrackE : UInt<32>[1], otrackE : UInt<32>[1], flip itrackS : UInt<32>[1], otrackS : UInt<32>[1]}
    
    io.ipinNW[0] <= UInt<1>("h00") @[Interconnect.scala 426:20]
    io.ipinNW[1] <= UInt<1>("h00") @[Interconnect.scala 426:20]
    io.ipinNE[0] <= UInt<1>("h00") @[Interconnect.scala 427:20]
    io.ipinNE[1] <= UInt<1>("h00") @[Interconnect.scala 427:20]
    io.ipinSW[0] <= UInt<1>("h00") @[Interconnect.scala 428:20]
    io.ipinSW[1] <= UInt<1>("h00") @[Interconnect.scala 428:20]
    io.ipinSE[0] <= UInt<1>("h00") @[Interconnect.scala 429:20]
    io.ipinSE[1] <= UInt<1>("h00") @[Interconnect.scala 429:20]
    io.otrackW[0] <= UInt<1>("h00") @[Interconnect.scala 430:21]
    io.otrackN[0] <= UInt<1>("h00") @[Interconnect.scala 431:21]
    io.otrackE[0] <= UInt<1>("h00") @[Interconnect.scala 432:21]
    io.otrackS[0] <= UInt<1>("h00") @[Interconnect.scala 433:21]
    inst ConfigMem of ConfigMem_119 @[Interconnect.scala 463:21]
    ConfigMem.clock <= clock
    ConfigMem.reset <= reset
    node _T = bits(io.cfg_addr, 11, 2) @[Interconnect.scala 464:65]
    node _T_1 = eq(UInt<7>("h05e"), _T) @[Interconnect.scala 464:50]
    node _T_2 = and(io.cfg_en, _T_1) @[Interconnect.scala 464:32]
    ConfigMem.io.cfg_en <= _T_2 @[Interconnect.scala 464:19]
    node _T_3 = bits(io.cfg_addr, 1, 0) @[Interconnect.scala 465:35]
    ConfigMem.io.cfg_addr <= _T_3 @[Interconnect.scala 465:21]
    ConfigMem.io.cfg_data <= io.cfg_data @[Interconnect.scala 466:21]
    inst Muxn of Muxn_560 @[Interconnect.scala 473:25]
    Muxn.clock <= clock
    Muxn.reset <= reset
    Muxn.io.in[0] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn.io.in[2] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNW[0] <= Muxn.io.out @[Interconnect.scala 479:45]
    node _T_4 = bits(ConfigMem.io.out[0], 1, 0) @[Interconnect.scala 483:39]
    Muxn.io.config <= _T_4 @[Interconnect.scala 483:23]
    inst Muxn_1 of Muxn_561 @[Interconnect.scala 473:25]
    Muxn_1.clock <= clock
    Muxn_1.reset <= reset
    Muxn_1.io.in[0] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[2] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNW[1] <= Muxn_1.io.out @[Interconnect.scala 479:45]
    node _T_5 = bits(ConfigMem.io.out[0], 3, 2) @[Interconnect.scala 483:39]
    Muxn_1.io.config <= _T_5 @[Interconnect.scala 483:23]
    inst Muxn_2 of Muxn_562 @[Interconnect.scala 473:25]
    Muxn_2.clock <= clock
    Muxn_2.reset <= reset
    Muxn_2.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNE[0] <= Muxn_2.io.out @[Interconnect.scala 479:45]
    node _T_6 = bits(ConfigMem.io.out[0], 5, 4) @[Interconnect.scala 483:39]
    Muxn_2.io.config <= _T_6 @[Interconnect.scala 483:23]
    inst Muxn_3 of Muxn_563 @[Interconnect.scala 473:25]
    Muxn_3.clock <= clock
    Muxn_3.reset <= reset
    Muxn_3.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNE[1] <= Muxn_3.io.out @[Interconnect.scala 479:45]
    node _T_7 = bits(ConfigMem.io.out[0], 7, 6) @[Interconnect.scala 483:39]
    Muxn_3.io.config <= _T_7 @[Interconnect.scala 483:23]
    inst Muxn_4 of Muxn_564 @[Interconnect.scala 473:25]
    Muxn_4.clock <= clock
    Muxn_4.reset <= reset
    Muxn_4.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[1] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    io.ipinSE[0] <= Muxn_4.io.out @[Interconnect.scala 479:45]
    node _T_8 = bits(ConfigMem.io.out[0], 9, 8) @[Interconnect.scala 483:39]
    Muxn_4.io.config <= _T_8 @[Interconnect.scala 483:23]
    inst Muxn_5 of Muxn_565 @[Interconnect.scala 473:25]
    Muxn_5.clock <= clock
    Muxn_5.reset <= reset
    Muxn_5.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[1] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    io.ipinSE[1] <= Muxn_5.io.out @[Interconnect.scala 479:45]
    node _T_9 = bits(ConfigMem.io.out[0], 11, 10) @[Interconnect.scala 483:39]
    Muxn_5.io.config <= _T_9 @[Interconnect.scala 483:23]
    inst Muxn_6 of Muxn_566 @[Interconnect.scala 473:25]
    Muxn_6.clock <= clock
    Muxn_6.reset <= reset
    Muxn_6.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[1] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    io.ipinSW[0] <= Muxn_6.io.out @[Interconnect.scala 479:45]
    node _T_10 = bits(ConfigMem.io.out[0], 13, 12) @[Interconnect.scala 483:39]
    Muxn_6.io.config <= _T_10 @[Interconnect.scala 483:23]
    inst Muxn_7 of Muxn_567 @[Interconnect.scala 473:25]
    Muxn_7.clock <= clock
    Muxn_7.reset <= reset
    Muxn_7.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[1] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    io.ipinSW[1] <= Muxn_7.io.out @[Interconnect.scala 479:45]
    node _T_11 = bits(ConfigMem.io.out[0], 15, 14) @[Interconnect.scala 483:39]
    Muxn_7.io.config <= _T_11 @[Interconnect.scala 483:23]
    inst Muxn_8 of Muxn_568 @[Interconnect.scala 473:25]
    Muxn_8.clock <= clock
    Muxn_8.reset <= reset
    Muxn_8.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[1] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    reg _T_12 : UInt, clock @[Interconnect.scala 477:55]
    _T_12 <= Muxn_8.io.out @[Interconnect.scala 477:55]
    io.otrackW[0] <= _T_12 @[Interconnect.scala 477:45]
    node _T_13 = bits(ConfigMem.io.out[0], 18, 16) @[Interconnect.scala 483:39]
    Muxn_8.io.config <= _T_13 @[Interconnect.scala 483:23]
    inst Muxn_9 of Muxn_569 @[Interconnect.scala 473:25]
    Muxn_9.clock <= clock
    Muxn_9.reset <= reset
    Muxn_9.io.in[0] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    reg _T_14 : UInt, clock @[Interconnect.scala 477:55]
    _T_14 <= Muxn_9.io.out @[Interconnect.scala 477:55]
    io.otrackN[0] <= _T_14 @[Interconnect.scala 477:45]
    node _T_15 = bits(ConfigMem.io.out[0], 21, 19) @[Interconnect.scala 483:39]
    Muxn_9.io.config <= _T_15 @[Interconnect.scala 483:23]
    inst Muxn_10 of Muxn_570 @[Interconnect.scala 473:25]
    Muxn_10.clock <= clock
    Muxn_10.reset <= reset
    Muxn_10.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    reg _T_16 : UInt, clock @[Interconnect.scala 477:55]
    _T_16 <= Muxn_10.io.out @[Interconnect.scala 477:55]
    io.otrackE[0] <= _T_16 @[Interconnect.scala 477:45]
    node _T_17 = bits(ConfigMem.io.out[0], 24, 22) @[Interconnect.scala 483:39]
    Muxn_10.io.config <= _T_17 @[Interconnect.scala 483:23]
    inst Muxn_11 of Muxn_571 @[Interconnect.scala 473:25]
    Muxn_11.clock <= clock
    Muxn_11.reset <= reset
    Muxn_11.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[1] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[4] <= io.itrackE[0] @[Interconnect.scala 475:63]
    reg _T_18 : UInt, clock @[Interconnect.scala 477:55]
    _T_18 <= Muxn_11.io.out @[Interconnect.scala 477:55]
    io.otrackS[0] <= _T_18 @[Interconnect.scala 477:45]
    node _T_19 = bits(ConfigMem.io.out[0], 27, 25) @[Interconnect.scala 483:39]
    Muxn_11.io.config <= _T_19 @[Interconnect.scala 483:23]
    
  module ConfigMem_120 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<0>, flip cfg_data : UInt<32>, out : UInt<28>[1]}
    
    wire _T : UInt<28>[1] @[ConfigMem.scala 27:29]
    _T[0] <= UInt<28>("h00") @[ConfigMem.scala 27:29]
    reg regs : UInt<28>[1], clock with : (reset => (reset, _T)) @[ConfigMem.scala 27:21]
    node _T_1 = eq(io.cfg_addr, UInt<1>("h00")) @[ConfigMem.scala 32:38]
    node _T_2 = and(io.cfg_en, _T_1) @[ConfigMem.scala 32:22]
    when _T_2 : @[ConfigMem.scala 32:54]
      node _T_3 = bits(io.cfg_data, 27, 0) @[ConfigMem.scala 33:31]
      regs[0] <= _T_3 @[ConfigMem.scala 33:17]
      skip @[ConfigMem.scala 32:54]
    io.out[0] <= regs[0] @[ConfigMem.scala 52:45]
    
  module Muxn_572 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_573 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_574 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_575 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_576 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_577 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_578 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_579 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_580 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_581 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_582 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_583 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module GIB_40 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<12>, flip cfg_data : UInt<32>, ipinNW : UInt<32>[2], flip opinNW : UInt<32>[1], ipinNE : UInt<32>[2], flip opinNE : UInt<32>[1], ipinSE : UInt<32>[2], flip opinSE : UInt<32>[1], ipinSW : UInt<32>[2], flip opinSW : UInt<32>[1], flip itrackW : UInt<32>[1], otrackW : UInt<32>[1], flip itrackN : UInt<32>[1], otrackN : UInt<32>[1], flip itrackE : UInt<32>[1], otrackE : UInt<32>[1], flip itrackS : UInt<32>[1], otrackS : UInt<32>[1]}
    
    io.ipinNW[0] <= UInt<1>("h00") @[Interconnect.scala 426:20]
    io.ipinNW[1] <= UInt<1>("h00") @[Interconnect.scala 426:20]
    io.ipinNE[0] <= UInt<1>("h00") @[Interconnect.scala 427:20]
    io.ipinNE[1] <= UInt<1>("h00") @[Interconnect.scala 427:20]
    io.ipinSW[0] <= UInt<1>("h00") @[Interconnect.scala 428:20]
    io.ipinSW[1] <= UInt<1>("h00") @[Interconnect.scala 428:20]
    io.ipinSE[0] <= UInt<1>("h00") @[Interconnect.scala 429:20]
    io.ipinSE[1] <= UInt<1>("h00") @[Interconnect.scala 429:20]
    io.otrackW[0] <= UInt<1>("h00") @[Interconnect.scala 430:21]
    io.otrackN[0] <= UInt<1>("h00") @[Interconnect.scala 431:21]
    io.otrackE[0] <= UInt<1>("h00") @[Interconnect.scala 432:21]
    io.otrackS[0] <= UInt<1>("h00") @[Interconnect.scala 433:21]
    inst ConfigMem of ConfigMem_120 @[Interconnect.scala 463:21]
    ConfigMem.clock <= clock
    ConfigMem.reset <= reset
    node _T = bits(io.cfg_addr, 11, 2) @[Interconnect.scala 464:65]
    node _T_1 = eq(UInt<7>("h05f"), _T) @[Interconnect.scala 464:50]
    node _T_2 = and(io.cfg_en, _T_1) @[Interconnect.scala 464:32]
    ConfigMem.io.cfg_en <= _T_2 @[Interconnect.scala 464:19]
    node _T_3 = bits(io.cfg_addr, 1, 0) @[Interconnect.scala 465:35]
    ConfigMem.io.cfg_addr <= _T_3 @[Interconnect.scala 465:21]
    ConfigMem.io.cfg_data <= io.cfg_data @[Interconnect.scala 466:21]
    inst Muxn of Muxn_572 @[Interconnect.scala 473:25]
    Muxn.clock <= clock
    Muxn.reset <= reset
    Muxn.io.in[0] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn.io.in[2] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNW[0] <= Muxn.io.out @[Interconnect.scala 479:45]
    node _T_4 = bits(ConfigMem.io.out[0], 1, 0) @[Interconnect.scala 483:39]
    Muxn.io.config <= _T_4 @[Interconnect.scala 483:23]
    inst Muxn_1 of Muxn_573 @[Interconnect.scala 473:25]
    Muxn_1.clock <= clock
    Muxn_1.reset <= reset
    Muxn_1.io.in[0] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[2] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNW[1] <= Muxn_1.io.out @[Interconnect.scala 479:45]
    node _T_5 = bits(ConfigMem.io.out[0], 3, 2) @[Interconnect.scala 483:39]
    Muxn_1.io.config <= _T_5 @[Interconnect.scala 483:23]
    inst Muxn_2 of Muxn_574 @[Interconnect.scala 473:25]
    Muxn_2.clock <= clock
    Muxn_2.reset <= reset
    Muxn_2.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNE[0] <= Muxn_2.io.out @[Interconnect.scala 479:45]
    node _T_6 = bits(ConfigMem.io.out[0], 5, 4) @[Interconnect.scala 483:39]
    Muxn_2.io.config <= _T_6 @[Interconnect.scala 483:23]
    inst Muxn_3 of Muxn_575 @[Interconnect.scala 473:25]
    Muxn_3.clock <= clock
    Muxn_3.reset <= reset
    Muxn_3.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNE[1] <= Muxn_3.io.out @[Interconnect.scala 479:45]
    node _T_7 = bits(ConfigMem.io.out[0], 7, 6) @[Interconnect.scala 483:39]
    Muxn_3.io.config <= _T_7 @[Interconnect.scala 483:23]
    inst Muxn_4 of Muxn_576 @[Interconnect.scala 473:25]
    Muxn_4.clock <= clock
    Muxn_4.reset <= reset
    Muxn_4.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[1] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    io.ipinSE[0] <= Muxn_4.io.out @[Interconnect.scala 479:45]
    node _T_8 = bits(ConfigMem.io.out[0], 9, 8) @[Interconnect.scala 483:39]
    Muxn_4.io.config <= _T_8 @[Interconnect.scala 483:23]
    inst Muxn_5 of Muxn_577 @[Interconnect.scala 473:25]
    Muxn_5.clock <= clock
    Muxn_5.reset <= reset
    Muxn_5.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[1] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    io.ipinSE[1] <= Muxn_5.io.out @[Interconnect.scala 479:45]
    node _T_9 = bits(ConfigMem.io.out[0], 11, 10) @[Interconnect.scala 483:39]
    Muxn_5.io.config <= _T_9 @[Interconnect.scala 483:23]
    inst Muxn_6 of Muxn_578 @[Interconnect.scala 473:25]
    Muxn_6.clock <= clock
    Muxn_6.reset <= reset
    Muxn_6.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[1] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    io.ipinSW[0] <= Muxn_6.io.out @[Interconnect.scala 479:45]
    node _T_10 = bits(ConfigMem.io.out[0], 13, 12) @[Interconnect.scala 483:39]
    Muxn_6.io.config <= _T_10 @[Interconnect.scala 483:23]
    inst Muxn_7 of Muxn_579 @[Interconnect.scala 473:25]
    Muxn_7.clock <= clock
    Muxn_7.reset <= reset
    Muxn_7.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[1] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    io.ipinSW[1] <= Muxn_7.io.out @[Interconnect.scala 479:45]
    node _T_11 = bits(ConfigMem.io.out[0], 15, 14) @[Interconnect.scala 483:39]
    Muxn_7.io.config <= _T_11 @[Interconnect.scala 483:23]
    inst Muxn_8 of Muxn_580 @[Interconnect.scala 473:25]
    Muxn_8.clock <= clock
    Muxn_8.reset <= reset
    Muxn_8.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[1] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.otrackW[0] <= Muxn_8.io.out @[Interconnect.scala 479:45]
    node _T_12 = bits(ConfigMem.io.out[0], 18, 16) @[Interconnect.scala 483:39]
    Muxn_8.io.config <= _T_12 @[Interconnect.scala 483:23]
    inst Muxn_9 of Muxn_581 @[Interconnect.scala 473:25]
    Muxn_9.clock <= clock
    Muxn_9.reset <= reset
    Muxn_9.io.in[0] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.otrackN[0] <= Muxn_9.io.out @[Interconnect.scala 479:45]
    node _T_13 = bits(ConfigMem.io.out[0], 21, 19) @[Interconnect.scala 483:39]
    Muxn_9.io.config <= _T_13 @[Interconnect.scala 483:23]
    inst Muxn_10 of Muxn_582 @[Interconnect.scala 473:25]
    Muxn_10.clock <= clock
    Muxn_10.reset <= reset
    Muxn_10.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.otrackE[0] <= Muxn_10.io.out @[Interconnect.scala 479:45]
    node _T_14 = bits(ConfigMem.io.out[0], 24, 22) @[Interconnect.scala 483:39]
    Muxn_10.io.config <= _T_14 @[Interconnect.scala 483:23]
    inst Muxn_11 of Muxn_583 @[Interconnect.scala 473:25]
    Muxn_11.clock <= clock
    Muxn_11.reset <= reset
    Muxn_11.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[1] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[4] <= io.itrackE[0] @[Interconnect.scala 475:63]
    io.otrackS[0] <= Muxn_11.io.out @[Interconnect.scala 479:45]
    node _T_15 = bits(ConfigMem.io.out[0], 27, 25) @[Interconnect.scala 483:39]
    Muxn_11.io.config <= _T_15 @[Interconnect.scala 483:23]
    
  module ConfigMem_121 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<0>, flip cfg_data : UInt<32>, out : UInt<28>[1]}
    
    wire _T : UInt<28>[1] @[ConfigMem.scala 27:29]
    _T[0] <= UInt<28>("h00") @[ConfigMem.scala 27:29]
    reg regs : UInt<28>[1], clock with : (reset => (reset, _T)) @[ConfigMem.scala 27:21]
    node _T_1 = eq(io.cfg_addr, UInt<1>("h00")) @[ConfigMem.scala 32:38]
    node _T_2 = and(io.cfg_en, _T_1) @[ConfigMem.scala 32:22]
    when _T_2 : @[ConfigMem.scala 32:54]
      node _T_3 = bits(io.cfg_data, 27, 0) @[ConfigMem.scala 33:31]
      regs[0] <= _T_3 @[ConfigMem.scala 33:17]
      skip @[ConfigMem.scala 32:54]
    io.out[0] <= regs[0] @[ConfigMem.scala 52:45]
    
  module Muxn_584 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_585 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_586 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_587 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_588 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_589 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_590 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_591 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_592 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_593 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_594 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_595 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module GIB_41 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<12>, flip cfg_data : UInt<32>, ipinNW : UInt<32>[2], flip opinNW : UInt<32>[1], ipinNE : UInt<32>[2], flip opinNE : UInt<32>[1], ipinSE : UInt<32>[2], flip opinSE : UInt<32>[1], ipinSW : UInt<32>[2], flip opinSW : UInt<32>[1], flip itrackW : UInt<32>[1], otrackW : UInt<32>[1], flip itrackN : UInt<32>[1], otrackN : UInt<32>[1], flip itrackE : UInt<32>[1], otrackE : UInt<32>[1], flip itrackS : UInt<32>[1], otrackS : UInt<32>[1]}
    
    io.ipinNW[0] <= UInt<1>("h00") @[Interconnect.scala 426:20]
    io.ipinNW[1] <= UInt<1>("h00") @[Interconnect.scala 426:20]
    io.ipinNE[0] <= UInt<1>("h00") @[Interconnect.scala 427:20]
    io.ipinNE[1] <= UInt<1>("h00") @[Interconnect.scala 427:20]
    io.ipinSW[0] <= UInt<1>("h00") @[Interconnect.scala 428:20]
    io.ipinSW[1] <= UInt<1>("h00") @[Interconnect.scala 428:20]
    io.ipinSE[0] <= UInt<1>("h00") @[Interconnect.scala 429:20]
    io.ipinSE[1] <= UInt<1>("h00") @[Interconnect.scala 429:20]
    io.otrackW[0] <= UInt<1>("h00") @[Interconnect.scala 430:21]
    io.otrackN[0] <= UInt<1>("h00") @[Interconnect.scala 431:21]
    io.otrackE[0] <= UInt<1>("h00") @[Interconnect.scala 432:21]
    io.otrackS[0] <= UInt<1>("h00") @[Interconnect.scala 433:21]
    inst ConfigMem of ConfigMem_121 @[Interconnect.scala 463:21]
    ConfigMem.clock <= clock
    ConfigMem.reset <= reset
    node _T = bits(io.cfg_addr, 11, 2) @[Interconnect.scala 464:65]
    node _T_1 = eq(UInt<7>("h060"), _T) @[Interconnect.scala 464:50]
    node _T_2 = and(io.cfg_en, _T_1) @[Interconnect.scala 464:32]
    ConfigMem.io.cfg_en <= _T_2 @[Interconnect.scala 464:19]
    node _T_3 = bits(io.cfg_addr, 1, 0) @[Interconnect.scala 465:35]
    ConfigMem.io.cfg_addr <= _T_3 @[Interconnect.scala 465:21]
    ConfigMem.io.cfg_data <= io.cfg_data @[Interconnect.scala 466:21]
    inst Muxn of Muxn_584 @[Interconnect.scala 473:25]
    Muxn.clock <= clock
    Muxn.reset <= reset
    Muxn.io.in[0] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn.io.in[2] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNW[0] <= Muxn.io.out @[Interconnect.scala 479:45]
    node _T_4 = bits(ConfigMem.io.out[0], 1, 0) @[Interconnect.scala 483:39]
    Muxn.io.config <= _T_4 @[Interconnect.scala 483:23]
    inst Muxn_1 of Muxn_585 @[Interconnect.scala 473:25]
    Muxn_1.clock <= clock
    Muxn_1.reset <= reset
    Muxn_1.io.in[0] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[2] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNW[1] <= Muxn_1.io.out @[Interconnect.scala 479:45]
    node _T_5 = bits(ConfigMem.io.out[0], 3, 2) @[Interconnect.scala 483:39]
    Muxn_1.io.config <= _T_5 @[Interconnect.scala 483:23]
    inst Muxn_2 of Muxn_586 @[Interconnect.scala 473:25]
    Muxn_2.clock <= clock
    Muxn_2.reset <= reset
    Muxn_2.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNE[0] <= Muxn_2.io.out @[Interconnect.scala 479:45]
    node _T_6 = bits(ConfigMem.io.out[0], 5, 4) @[Interconnect.scala 483:39]
    Muxn_2.io.config <= _T_6 @[Interconnect.scala 483:23]
    inst Muxn_3 of Muxn_587 @[Interconnect.scala 473:25]
    Muxn_3.clock <= clock
    Muxn_3.reset <= reset
    Muxn_3.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNE[1] <= Muxn_3.io.out @[Interconnect.scala 479:45]
    node _T_7 = bits(ConfigMem.io.out[0], 7, 6) @[Interconnect.scala 483:39]
    Muxn_3.io.config <= _T_7 @[Interconnect.scala 483:23]
    inst Muxn_4 of Muxn_588 @[Interconnect.scala 473:25]
    Muxn_4.clock <= clock
    Muxn_4.reset <= reset
    Muxn_4.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[1] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    io.ipinSE[0] <= Muxn_4.io.out @[Interconnect.scala 479:45]
    node _T_8 = bits(ConfigMem.io.out[0], 9, 8) @[Interconnect.scala 483:39]
    Muxn_4.io.config <= _T_8 @[Interconnect.scala 483:23]
    inst Muxn_5 of Muxn_589 @[Interconnect.scala 473:25]
    Muxn_5.clock <= clock
    Muxn_5.reset <= reset
    Muxn_5.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[1] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    io.ipinSE[1] <= Muxn_5.io.out @[Interconnect.scala 479:45]
    node _T_9 = bits(ConfigMem.io.out[0], 11, 10) @[Interconnect.scala 483:39]
    Muxn_5.io.config <= _T_9 @[Interconnect.scala 483:23]
    inst Muxn_6 of Muxn_590 @[Interconnect.scala 473:25]
    Muxn_6.clock <= clock
    Muxn_6.reset <= reset
    Muxn_6.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[1] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    io.ipinSW[0] <= Muxn_6.io.out @[Interconnect.scala 479:45]
    node _T_10 = bits(ConfigMem.io.out[0], 13, 12) @[Interconnect.scala 483:39]
    Muxn_6.io.config <= _T_10 @[Interconnect.scala 483:23]
    inst Muxn_7 of Muxn_591 @[Interconnect.scala 473:25]
    Muxn_7.clock <= clock
    Muxn_7.reset <= reset
    Muxn_7.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[1] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    io.ipinSW[1] <= Muxn_7.io.out @[Interconnect.scala 479:45]
    node _T_11 = bits(ConfigMem.io.out[0], 15, 14) @[Interconnect.scala 483:39]
    Muxn_7.io.config <= _T_11 @[Interconnect.scala 483:23]
    inst Muxn_8 of Muxn_592 @[Interconnect.scala 473:25]
    Muxn_8.clock <= clock
    Muxn_8.reset <= reset
    Muxn_8.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[1] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    reg _T_12 : UInt, clock @[Interconnect.scala 477:55]
    _T_12 <= Muxn_8.io.out @[Interconnect.scala 477:55]
    io.otrackW[0] <= _T_12 @[Interconnect.scala 477:45]
    node _T_13 = bits(ConfigMem.io.out[0], 18, 16) @[Interconnect.scala 483:39]
    Muxn_8.io.config <= _T_13 @[Interconnect.scala 483:23]
    inst Muxn_9 of Muxn_593 @[Interconnect.scala 473:25]
    Muxn_9.clock <= clock
    Muxn_9.reset <= reset
    Muxn_9.io.in[0] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    reg _T_14 : UInt, clock @[Interconnect.scala 477:55]
    _T_14 <= Muxn_9.io.out @[Interconnect.scala 477:55]
    io.otrackN[0] <= _T_14 @[Interconnect.scala 477:45]
    node _T_15 = bits(ConfigMem.io.out[0], 21, 19) @[Interconnect.scala 483:39]
    Muxn_9.io.config <= _T_15 @[Interconnect.scala 483:23]
    inst Muxn_10 of Muxn_594 @[Interconnect.scala 473:25]
    Muxn_10.clock <= clock
    Muxn_10.reset <= reset
    Muxn_10.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    reg _T_16 : UInt, clock @[Interconnect.scala 477:55]
    _T_16 <= Muxn_10.io.out @[Interconnect.scala 477:55]
    io.otrackE[0] <= _T_16 @[Interconnect.scala 477:45]
    node _T_17 = bits(ConfigMem.io.out[0], 24, 22) @[Interconnect.scala 483:39]
    Muxn_10.io.config <= _T_17 @[Interconnect.scala 483:23]
    inst Muxn_11 of Muxn_595 @[Interconnect.scala 473:25]
    Muxn_11.clock <= clock
    Muxn_11.reset <= reset
    Muxn_11.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[1] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[4] <= io.itrackE[0] @[Interconnect.scala 475:63]
    reg _T_18 : UInt, clock @[Interconnect.scala 477:55]
    _T_18 <= Muxn_11.io.out @[Interconnect.scala 477:55]
    io.otrackS[0] <= _T_18 @[Interconnect.scala 477:45]
    node _T_19 = bits(ConfigMem.io.out[0], 27, 25) @[Interconnect.scala 483:39]
    Muxn_11.io.config <= _T_19 @[Interconnect.scala 483:23]
    
  module ConfigMem_122 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<0>, flip cfg_data : UInt<32>, out : UInt<28>[1]}
    
    wire _T : UInt<28>[1] @[ConfigMem.scala 27:29]
    _T[0] <= UInt<28>("h00") @[ConfigMem.scala 27:29]
    reg regs : UInt<28>[1], clock with : (reset => (reset, _T)) @[ConfigMem.scala 27:21]
    node _T_1 = eq(io.cfg_addr, UInt<1>("h00")) @[ConfigMem.scala 32:38]
    node _T_2 = and(io.cfg_en, _T_1) @[ConfigMem.scala 32:22]
    when _T_2 : @[ConfigMem.scala 32:54]
      node _T_3 = bits(io.cfg_data, 27, 0) @[ConfigMem.scala 33:31]
      regs[0] <= _T_3 @[ConfigMem.scala 33:17]
      skip @[ConfigMem.scala 32:54]
    io.out[0] <= regs[0] @[ConfigMem.scala 52:45]
    
  module Muxn_596 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_597 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_598 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_599 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_600 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_601 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_602 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_603 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_604 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_605 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_606 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_607 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module GIB_42 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<12>, flip cfg_data : UInt<32>, ipinNW : UInt<32>[2], flip opinNW : UInt<32>[1], ipinNE : UInt<32>[2], flip opinNE : UInt<32>[1], ipinSE : UInt<32>[2], flip opinSE : UInt<32>[1], ipinSW : UInt<32>[2], flip opinSW : UInt<32>[1], flip itrackW : UInt<32>[1], otrackW : UInt<32>[1], flip itrackN : UInt<32>[1], otrackN : UInt<32>[1], flip itrackE : UInt<32>[1], otrackE : UInt<32>[1], flip itrackS : UInt<32>[1], otrackS : UInt<32>[1]}
    
    io.ipinNW[0] <= UInt<1>("h00") @[Interconnect.scala 426:20]
    io.ipinNW[1] <= UInt<1>("h00") @[Interconnect.scala 426:20]
    io.ipinNE[0] <= UInt<1>("h00") @[Interconnect.scala 427:20]
    io.ipinNE[1] <= UInt<1>("h00") @[Interconnect.scala 427:20]
    io.ipinSW[0] <= UInt<1>("h00") @[Interconnect.scala 428:20]
    io.ipinSW[1] <= UInt<1>("h00") @[Interconnect.scala 428:20]
    io.ipinSE[0] <= UInt<1>("h00") @[Interconnect.scala 429:20]
    io.ipinSE[1] <= UInt<1>("h00") @[Interconnect.scala 429:20]
    io.otrackW[0] <= UInt<1>("h00") @[Interconnect.scala 430:21]
    io.otrackN[0] <= UInt<1>("h00") @[Interconnect.scala 431:21]
    io.otrackE[0] <= UInt<1>("h00") @[Interconnect.scala 432:21]
    io.otrackS[0] <= UInt<1>("h00") @[Interconnect.scala 433:21]
    inst ConfigMem of ConfigMem_122 @[Interconnect.scala 463:21]
    ConfigMem.clock <= clock
    ConfigMem.reset <= reset
    node _T = bits(io.cfg_addr, 11, 2) @[Interconnect.scala 464:65]
    node _T_1 = eq(UInt<7>("h061"), _T) @[Interconnect.scala 464:50]
    node _T_2 = and(io.cfg_en, _T_1) @[Interconnect.scala 464:32]
    ConfigMem.io.cfg_en <= _T_2 @[Interconnect.scala 464:19]
    node _T_3 = bits(io.cfg_addr, 1, 0) @[Interconnect.scala 465:35]
    ConfigMem.io.cfg_addr <= _T_3 @[Interconnect.scala 465:21]
    ConfigMem.io.cfg_data <= io.cfg_data @[Interconnect.scala 466:21]
    inst Muxn of Muxn_596 @[Interconnect.scala 473:25]
    Muxn.clock <= clock
    Muxn.reset <= reset
    Muxn.io.in[0] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn.io.in[2] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNW[0] <= Muxn.io.out @[Interconnect.scala 479:45]
    node _T_4 = bits(ConfigMem.io.out[0], 1, 0) @[Interconnect.scala 483:39]
    Muxn.io.config <= _T_4 @[Interconnect.scala 483:23]
    inst Muxn_1 of Muxn_597 @[Interconnect.scala 473:25]
    Muxn_1.clock <= clock
    Muxn_1.reset <= reset
    Muxn_1.io.in[0] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[2] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNW[1] <= Muxn_1.io.out @[Interconnect.scala 479:45]
    node _T_5 = bits(ConfigMem.io.out[0], 3, 2) @[Interconnect.scala 483:39]
    Muxn_1.io.config <= _T_5 @[Interconnect.scala 483:23]
    inst Muxn_2 of Muxn_598 @[Interconnect.scala 473:25]
    Muxn_2.clock <= clock
    Muxn_2.reset <= reset
    Muxn_2.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNE[0] <= Muxn_2.io.out @[Interconnect.scala 479:45]
    node _T_6 = bits(ConfigMem.io.out[0], 5, 4) @[Interconnect.scala 483:39]
    Muxn_2.io.config <= _T_6 @[Interconnect.scala 483:23]
    inst Muxn_3 of Muxn_599 @[Interconnect.scala 473:25]
    Muxn_3.clock <= clock
    Muxn_3.reset <= reset
    Muxn_3.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNE[1] <= Muxn_3.io.out @[Interconnect.scala 479:45]
    node _T_7 = bits(ConfigMem.io.out[0], 7, 6) @[Interconnect.scala 483:39]
    Muxn_3.io.config <= _T_7 @[Interconnect.scala 483:23]
    inst Muxn_4 of Muxn_600 @[Interconnect.scala 473:25]
    Muxn_4.clock <= clock
    Muxn_4.reset <= reset
    Muxn_4.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[1] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    io.ipinSE[0] <= Muxn_4.io.out @[Interconnect.scala 479:45]
    node _T_8 = bits(ConfigMem.io.out[0], 9, 8) @[Interconnect.scala 483:39]
    Muxn_4.io.config <= _T_8 @[Interconnect.scala 483:23]
    inst Muxn_5 of Muxn_601 @[Interconnect.scala 473:25]
    Muxn_5.clock <= clock
    Muxn_5.reset <= reset
    Muxn_5.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[1] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    io.ipinSE[1] <= Muxn_5.io.out @[Interconnect.scala 479:45]
    node _T_9 = bits(ConfigMem.io.out[0], 11, 10) @[Interconnect.scala 483:39]
    Muxn_5.io.config <= _T_9 @[Interconnect.scala 483:23]
    inst Muxn_6 of Muxn_602 @[Interconnect.scala 473:25]
    Muxn_6.clock <= clock
    Muxn_6.reset <= reset
    Muxn_6.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[1] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    io.ipinSW[0] <= Muxn_6.io.out @[Interconnect.scala 479:45]
    node _T_10 = bits(ConfigMem.io.out[0], 13, 12) @[Interconnect.scala 483:39]
    Muxn_6.io.config <= _T_10 @[Interconnect.scala 483:23]
    inst Muxn_7 of Muxn_603 @[Interconnect.scala 473:25]
    Muxn_7.clock <= clock
    Muxn_7.reset <= reset
    Muxn_7.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[1] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    io.ipinSW[1] <= Muxn_7.io.out @[Interconnect.scala 479:45]
    node _T_11 = bits(ConfigMem.io.out[0], 15, 14) @[Interconnect.scala 483:39]
    Muxn_7.io.config <= _T_11 @[Interconnect.scala 483:23]
    inst Muxn_8 of Muxn_604 @[Interconnect.scala 473:25]
    Muxn_8.clock <= clock
    Muxn_8.reset <= reset
    Muxn_8.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[1] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.otrackW[0] <= Muxn_8.io.out @[Interconnect.scala 479:45]
    node _T_12 = bits(ConfigMem.io.out[0], 18, 16) @[Interconnect.scala 483:39]
    Muxn_8.io.config <= _T_12 @[Interconnect.scala 483:23]
    inst Muxn_9 of Muxn_605 @[Interconnect.scala 473:25]
    Muxn_9.clock <= clock
    Muxn_9.reset <= reset
    Muxn_9.io.in[0] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.otrackN[0] <= Muxn_9.io.out @[Interconnect.scala 479:45]
    node _T_13 = bits(ConfigMem.io.out[0], 21, 19) @[Interconnect.scala 483:39]
    Muxn_9.io.config <= _T_13 @[Interconnect.scala 483:23]
    inst Muxn_10 of Muxn_606 @[Interconnect.scala 473:25]
    Muxn_10.clock <= clock
    Muxn_10.reset <= reset
    Muxn_10.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.otrackE[0] <= Muxn_10.io.out @[Interconnect.scala 479:45]
    node _T_14 = bits(ConfigMem.io.out[0], 24, 22) @[Interconnect.scala 483:39]
    Muxn_10.io.config <= _T_14 @[Interconnect.scala 483:23]
    inst Muxn_11 of Muxn_607 @[Interconnect.scala 473:25]
    Muxn_11.clock <= clock
    Muxn_11.reset <= reset
    Muxn_11.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[1] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[4] <= io.itrackE[0] @[Interconnect.scala 475:63]
    io.otrackS[0] <= Muxn_11.io.out @[Interconnect.scala 479:45]
    node _T_15 = bits(ConfigMem.io.out[0], 27, 25) @[Interconnect.scala 483:39]
    Muxn_11.io.config <= _T_15 @[Interconnect.scala 483:23]
    
  module ConfigMem_123 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<0>, flip cfg_data : UInt<32>, out : UInt<28>[1]}
    
    wire _T : UInt<28>[1] @[ConfigMem.scala 27:29]
    _T[0] <= UInt<28>("h00") @[ConfigMem.scala 27:29]
    reg regs : UInt<28>[1], clock with : (reset => (reset, _T)) @[ConfigMem.scala 27:21]
    node _T_1 = eq(io.cfg_addr, UInt<1>("h00")) @[ConfigMem.scala 32:38]
    node _T_2 = and(io.cfg_en, _T_1) @[ConfigMem.scala 32:22]
    when _T_2 : @[ConfigMem.scala 32:54]
      node _T_3 = bits(io.cfg_data, 27, 0) @[ConfigMem.scala 33:31]
      regs[0] <= _T_3 @[ConfigMem.scala 33:17]
      skip @[ConfigMem.scala 32:54]
    io.out[0] <= regs[0] @[ConfigMem.scala 52:45]
    
  module Muxn_608 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_609 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_610 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_611 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_612 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_613 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_614 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_615 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_616 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_617 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_618 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_619 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module GIB_43 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<12>, flip cfg_data : UInt<32>, ipinNW : UInt<32>[2], flip opinNW : UInt<32>[1], ipinNE : UInt<32>[2], flip opinNE : UInt<32>[1], ipinSE : UInt<32>[2], flip opinSE : UInt<32>[1], ipinSW : UInt<32>[2], flip opinSW : UInt<32>[1], flip itrackW : UInt<32>[1], otrackW : UInt<32>[1], flip itrackN : UInt<32>[1], otrackN : UInt<32>[1], flip itrackE : UInt<32>[1], otrackE : UInt<32>[1], flip itrackS : UInt<32>[1], otrackS : UInt<32>[1]}
    
    io.ipinNW[0] <= UInt<1>("h00") @[Interconnect.scala 426:20]
    io.ipinNW[1] <= UInt<1>("h00") @[Interconnect.scala 426:20]
    io.ipinNE[0] <= UInt<1>("h00") @[Interconnect.scala 427:20]
    io.ipinNE[1] <= UInt<1>("h00") @[Interconnect.scala 427:20]
    io.ipinSW[0] <= UInt<1>("h00") @[Interconnect.scala 428:20]
    io.ipinSW[1] <= UInt<1>("h00") @[Interconnect.scala 428:20]
    io.ipinSE[0] <= UInt<1>("h00") @[Interconnect.scala 429:20]
    io.ipinSE[1] <= UInt<1>("h00") @[Interconnect.scala 429:20]
    io.otrackW[0] <= UInt<1>("h00") @[Interconnect.scala 430:21]
    io.otrackN[0] <= UInt<1>("h00") @[Interconnect.scala 431:21]
    io.otrackE[0] <= UInt<1>("h00") @[Interconnect.scala 432:21]
    io.otrackS[0] <= UInt<1>("h00") @[Interconnect.scala 433:21]
    inst ConfigMem of ConfigMem_123 @[Interconnect.scala 463:21]
    ConfigMem.clock <= clock
    ConfigMem.reset <= reset
    node _T = bits(io.cfg_addr, 11, 2) @[Interconnect.scala 464:65]
    node _T_1 = eq(UInt<7>("h062"), _T) @[Interconnect.scala 464:50]
    node _T_2 = and(io.cfg_en, _T_1) @[Interconnect.scala 464:32]
    ConfigMem.io.cfg_en <= _T_2 @[Interconnect.scala 464:19]
    node _T_3 = bits(io.cfg_addr, 1, 0) @[Interconnect.scala 465:35]
    ConfigMem.io.cfg_addr <= _T_3 @[Interconnect.scala 465:21]
    ConfigMem.io.cfg_data <= io.cfg_data @[Interconnect.scala 466:21]
    inst Muxn of Muxn_608 @[Interconnect.scala 473:25]
    Muxn.clock <= clock
    Muxn.reset <= reset
    Muxn.io.in[0] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn.io.in[2] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNW[0] <= Muxn.io.out @[Interconnect.scala 479:45]
    node _T_4 = bits(ConfigMem.io.out[0], 1, 0) @[Interconnect.scala 483:39]
    Muxn.io.config <= _T_4 @[Interconnect.scala 483:23]
    inst Muxn_1 of Muxn_609 @[Interconnect.scala 473:25]
    Muxn_1.clock <= clock
    Muxn_1.reset <= reset
    Muxn_1.io.in[0] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[2] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNW[1] <= Muxn_1.io.out @[Interconnect.scala 479:45]
    node _T_5 = bits(ConfigMem.io.out[0], 3, 2) @[Interconnect.scala 483:39]
    Muxn_1.io.config <= _T_5 @[Interconnect.scala 483:23]
    inst Muxn_2 of Muxn_610 @[Interconnect.scala 473:25]
    Muxn_2.clock <= clock
    Muxn_2.reset <= reset
    Muxn_2.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNE[0] <= Muxn_2.io.out @[Interconnect.scala 479:45]
    node _T_6 = bits(ConfigMem.io.out[0], 5, 4) @[Interconnect.scala 483:39]
    Muxn_2.io.config <= _T_6 @[Interconnect.scala 483:23]
    inst Muxn_3 of Muxn_611 @[Interconnect.scala 473:25]
    Muxn_3.clock <= clock
    Muxn_3.reset <= reset
    Muxn_3.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNE[1] <= Muxn_3.io.out @[Interconnect.scala 479:45]
    node _T_7 = bits(ConfigMem.io.out[0], 7, 6) @[Interconnect.scala 483:39]
    Muxn_3.io.config <= _T_7 @[Interconnect.scala 483:23]
    inst Muxn_4 of Muxn_612 @[Interconnect.scala 473:25]
    Muxn_4.clock <= clock
    Muxn_4.reset <= reset
    Muxn_4.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[1] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    io.ipinSE[0] <= Muxn_4.io.out @[Interconnect.scala 479:45]
    node _T_8 = bits(ConfigMem.io.out[0], 9, 8) @[Interconnect.scala 483:39]
    Muxn_4.io.config <= _T_8 @[Interconnect.scala 483:23]
    inst Muxn_5 of Muxn_613 @[Interconnect.scala 473:25]
    Muxn_5.clock <= clock
    Muxn_5.reset <= reset
    Muxn_5.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[1] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    io.ipinSE[1] <= Muxn_5.io.out @[Interconnect.scala 479:45]
    node _T_9 = bits(ConfigMem.io.out[0], 11, 10) @[Interconnect.scala 483:39]
    Muxn_5.io.config <= _T_9 @[Interconnect.scala 483:23]
    inst Muxn_6 of Muxn_614 @[Interconnect.scala 473:25]
    Muxn_6.clock <= clock
    Muxn_6.reset <= reset
    Muxn_6.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[1] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    io.ipinSW[0] <= Muxn_6.io.out @[Interconnect.scala 479:45]
    node _T_10 = bits(ConfigMem.io.out[0], 13, 12) @[Interconnect.scala 483:39]
    Muxn_6.io.config <= _T_10 @[Interconnect.scala 483:23]
    inst Muxn_7 of Muxn_615 @[Interconnect.scala 473:25]
    Muxn_7.clock <= clock
    Muxn_7.reset <= reset
    Muxn_7.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[1] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    io.ipinSW[1] <= Muxn_7.io.out @[Interconnect.scala 479:45]
    node _T_11 = bits(ConfigMem.io.out[0], 15, 14) @[Interconnect.scala 483:39]
    Muxn_7.io.config <= _T_11 @[Interconnect.scala 483:23]
    inst Muxn_8 of Muxn_616 @[Interconnect.scala 473:25]
    Muxn_8.clock <= clock
    Muxn_8.reset <= reset
    Muxn_8.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[1] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    reg _T_12 : UInt, clock @[Interconnect.scala 477:55]
    _T_12 <= Muxn_8.io.out @[Interconnect.scala 477:55]
    io.otrackW[0] <= _T_12 @[Interconnect.scala 477:45]
    node _T_13 = bits(ConfigMem.io.out[0], 18, 16) @[Interconnect.scala 483:39]
    Muxn_8.io.config <= _T_13 @[Interconnect.scala 483:23]
    inst Muxn_9 of Muxn_617 @[Interconnect.scala 473:25]
    Muxn_9.clock <= clock
    Muxn_9.reset <= reset
    Muxn_9.io.in[0] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    reg _T_14 : UInt, clock @[Interconnect.scala 477:55]
    _T_14 <= Muxn_9.io.out @[Interconnect.scala 477:55]
    io.otrackN[0] <= _T_14 @[Interconnect.scala 477:45]
    node _T_15 = bits(ConfigMem.io.out[0], 21, 19) @[Interconnect.scala 483:39]
    Muxn_9.io.config <= _T_15 @[Interconnect.scala 483:23]
    inst Muxn_10 of Muxn_618 @[Interconnect.scala 473:25]
    Muxn_10.clock <= clock
    Muxn_10.reset <= reset
    Muxn_10.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    reg _T_16 : UInt, clock @[Interconnect.scala 477:55]
    _T_16 <= Muxn_10.io.out @[Interconnect.scala 477:55]
    io.otrackE[0] <= _T_16 @[Interconnect.scala 477:45]
    node _T_17 = bits(ConfigMem.io.out[0], 24, 22) @[Interconnect.scala 483:39]
    Muxn_10.io.config <= _T_17 @[Interconnect.scala 483:23]
    inst Muxn_11 of Muxn_619 @[Interconnect.scala 473:25]
    Muxn_11.clock <= clock
    Muxn_11.reset <= reset
    Muxn_11.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[1] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[4] <= io.itrackE[0] @[Interconnect.scala 475:63]
    reg _T_18 : UInt, clock @[Interconnect.scala 477:55]
    _T_18 <= Muxn_11.io.out @[Interconnect.scala 477:55]
    io.otrackS[0] <= _T_18 @[Interconnect.scala 477:45]
    node _T_19 = bits(ConfigMem.io.out[0], 27, 25) @[Interconnect.scala 483:39]
    Muxn_11.io.config <= _T_19 @[Interconnect.scala 483:23]
    
  module ConfigMem_124 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<0>, flip cfg_data : UInt<32>, out : UInt<15>[1]}
    
    wire _T : UInt<15>[1] @[ConfigMem.scala 27:29]
    _T[0] <= UInt<15>("h00") @[ConfigMem.scala 27:29]
    reg regs : UInt<15>[1], clock with : (reset => (reset, _T)) @[ConfigMem.scala 27:21]
    node _T_1 = eq(io.cfg_addr, UInt<1>("h00")) @[ConfigMem.scala 32:38]
    node _T_2 = and(io.cfg_en, _T_1) @[ConfigMem.scala 32:22]
    when _T_2 : @[ConfigMem.scala 32:54]
      node _T_3 = bits(io.cfg_data, 14, 0) @[ConfigMem.scala 33:31]
      regs[0] <= _T_3 @[ConfigMem.scala 33:17]
      skip @[ConfigMem.scala 32:54]
    io.out[0] <= regs[0] @[ConfigMem.scala 52:45]
    
  module Muxn_620 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[3], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_621 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[3], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_622 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<1>, flip in : UInt<32>[2], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    io.out <= _T_1 @[Multiplexer.scala 20:10]
    
  module Muxn_623 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<1>, flip in : UInt<32>[2], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    io.out <= _T_1 @[Multiplexer.scala 20:10]
    
  module Muxn_624 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[3], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_625 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_626 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_627 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module GIB_44 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<12>, flip cfg_data : UInt<32>, ipinNW : UInt<32>[2], flip opinNW : UInt<32>[1], ipinNE : UInt<32>[0], flip opinNE : UInt<32>[0], ipinSE : UInt<32>[0], flip opinSE : UInt<32>[0], ipinSW : UInt<32>[2], flip opinSW : UInt<32>[1], flip itrackW : UInt<32>[1], otrackW : UInt<32>[1], flip itrackN : UInt<32>[1], otrackN : UInt<32>[1], flip itrackE : UInt<32>[1], otrackE : UInt<32>[1], flip itrackS : UInt<32>[1], otrackS : UInt<32>[1]}
    
    io.ipinNW[0] <= UInt<1>("h00") @[Interconnect.scala 426:20]
    io.ipinNW[1] <= UInt<1>("h00") @[Interconnect.scala 426:20]
    io.ipinSW[0] <= UInt<1>("h00") @[Interconnect.scala 428:20]
    io.ipinSW[1] <= UInt<1>("h00") @[Interconnect.scala 428:20]
    io.otrackW[0] <= UInt<1>("h00") @[Interconnect.scala 430:21]
    io.otrackN[0] <= UInt<1>("h00") @[Interconnect.scala 431:21]
    io.otrackE[0] <= UInt<1>("h00") @[Interconnect.scala 432:21]
    io.otrackS[0] <= UInt<1>("h00") @[Interconnect.scala 433:21]
    inst ConfigMem of ConfigMem_124 @[Interconnect.scala 463:21]
    ConfigMem.clock <= clock
    ConfigMem.reset <= reset
    node _T = bits(io.cfg_addr, 11, 2) @[Interconnect.scala 464:65]
    node _T_1 = eq(UInt<7>("h063"), _T) @[Interconnect.scala 464:50]
    node _T_2 = and(io.cfg_en, _T_1) @[Interconnect.scala 464:32]
    ConfigMem.io.cfg_en <= _T_2 @[Interconnect.scala 464:19]
    node _T_3 = bits(io.cfg_addr, 1, 0) @[Interconnect.scala 465:35]
    ConfigMem.io.cfg_addr <= _T_3 @[Interconnect.scala 465:21]
    ConfigMem.io.cfg_data <= io.cfg_data @[Interconnect.scala 466:21]
    inst Muxn of Muxn_620 @[Interconnect.scala 473:25]
    Muxn.clock <= clock
    Muxn.reset <= reset
    Muxn.io.in[0] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn.io.in[1] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn.io.in[2] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNW[0] <= Muxn.io.out @[Interconnect.scala 479:45]
    node _T_4 = bits(ConfigMem.io.out[0], 1, 0) @[Interconnect.scala 483:39]
    Muxn.io.config <= _T_4 @[Interconnect.scala 483:23]
    inst Muxn_1 of Muxn_621 @[Interconnect.scala 473:25]
    Muxn_1.clock <= clock
    Muxn_1.reset <= reset
    Muxn_1.io.in[0] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[1] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[2] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNW[1] <= Muxn_1.io.out @[Interconnect.scala 479:45]
    node _T_5 = bits(ConfigMem.io.out[0], 3, 2) @[Interconnect.scala 483:39]
    Muxn_1.io.config <= _T_5 @[Interconnect.scala 483:23]
    inst Muxn_2 of Muxn_622 @[Interconnect.scala 473:25]
    Muxn_2.clock <= clock
    Muxn_2.reset <= reset
    Muxn_2.io.in[0] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[1] <= io.itrackE[0] @[Interconnect.scala 475:63]
    io.ipinSW[0] <= Muxn_2.io.out @[Interconnect.scala 479:45]
    node _T_6 = bits(ConfigMem.io.out[0], 4, 4) @[Interconnect.scala 483:39]
    Muxn_2.io.config <= _T_6 @[Interconnect.scala 483:23]
    inst Muxn_3 of Muxn_623 @[Interconnect.scala 473:25]
    Muxn_3.clock <= clock
    Muxn_3.reset <= reset
    Muxn_3.io.in[0] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[1] <= io.itrackE[0] @[Interconnect.scala 475:63]
    io.ipinSW[1] <= Muxn_3.io.out @[Interconnect.scala 479:45]
    node _T_7 = bits(ConfigMem.io.out[0], 5, 5) @[Interconnect.scala 483:39]
    Muxn_3.io.config <= _T_7 @[Interconnect.scala 483:23]
    inst Muxn_4 of Muxn_624 @[Interconnect.scala 473:25]
    Muxn_4.clock <= clock
    Muxn_4.reset <= reset
    Muxn_4.io.in[0] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[1] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[2] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.otrackW[0] <= Muxn_4.io.out @[Interconnect.scala 479:45]
    node _T_8 = bits(ConfigMem.io.out[0], 7, 6) @[Interconnect.scala 483:39]
    Muxn_4.io.config <= _T_8 @[Interconnect.scala 483:23]
    inst Muxn_5 of Muxn_625 @[Interconnect.scala 473:25]
    Muxn_5.clock <= clock
    Muxn_5.reset <= reset
    Muxn_5.io.in[0] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[1] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[2] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.otrackN[0] <= Muxn_5.io.out @[Interconnect.scala 479:45]
    node _T_9 = bits(ConfigMem.io.out[0], 9, 8) @[Interconnect.scala 483:39]
    Muxn_5.io.config <= _T_9 @[Interconnect.scala 483:23]
    inst Muxn_6 of Muxn_626 @[Interconnect.scala 473:25]
    Muxn_6.clock <= clock
    Muxn_6.reset <= reset
    Muxn_6.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.otrackE[0] <= Muxn_6.io.out @[Interconnect.scala 479:45]
    node _T_10 = bits(ConfigMem.io.out[0], 12, 10) @[Interconnect.scala 483:39]
    Muxn_6.io.config <= _T_10 @[Interconnect.scala 483:23]
    inst Muxn_7 of Muxn_627 @[Interconnect.scala 473:25]
    Muxn_7.clock <= clock
    Muxn_7.reset <= reset
    Muxn_7.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[1] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    io.otrackS[0] <= Muxn_7.io.out @[Interconnect.scala 479:45]
    node _T_11 = bits(ConfigMem.io.out[0], 14, 13) @[Interconnect.scala 483:39]
    Muxn_7.io.config <= _T_11 @[Interconnect.scala 483:23]
    
  module ConfigMem_125 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<0>, flip cfg_data : UInt<32>, out : UInt<15>[1]}
    
    wire _T : UInt<15>[1] @[ConfigMem.scala 27:29]
    _T[0] <= UInt<15>("h00") @[ConfigMem.scala 27:29]
    reg regs : UInt<15>[1], clock with : (reset => (reset, _T)) @[ConfigMem.scala 27:21]
    node _T_1 = eq(io.cfg_addr, UInt<1>("h00")) @[ConfigMem.scala 32:38]
    node _T_2 = and(io.cfg_en, _T_1) @[ConfigMem.scala 32:22]
    when _T_2 : @[ConfigMem.scala 32:54]
      node _T_3 = bits(io.cfg_data, 14, 0) @[ConfigMem.scala 33:31]
      regs[0] <= _T_3 @[ConfigMem.scala 33:17]
      skip @[ConfigMem.scala 32:54]
    io.out[0] <= regs[0] @[ConfigMem.scala 52:45]
    
  module Muxn_628 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<1>, flip in : UInt<32>[2], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    io.out <= _T_1 @[Multiplexer.scala 20:10]
    
  module Muxn_629 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<1>, flip in : UInt<32>[2], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    io.out <= _T_1 @[Multiplexer.scala 20:10]
    
  module Muxn_630 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[3], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_631 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[3], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_632 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_633 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_634 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[3], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_635 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module GIB_45 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<12>, flip cfg_data : UInt<32>, ipinNW : UInt<32>[0], flip opinNW : UInt<32>[0], ipinNE : UInt<32>[2], flip opinNE : UInt<32>[1], ipinSE : UInt<32>[2], flip opinSE : UInt<32>[1], ipinSW : UInt<32>[0], flip opinSW : UInt<32>[0], flip itrackW : UInt<32>[1], otrackW : UInt<32>[1], flip itrackN : UInt<32>[1], otrackN : UInt<32>[1], flip itrackE : UInt<32>[1], otrackE : UInt<32>[1], flip itrackS : UInt<32>[1], otrackS : UInt<32>[1]}
    
    io.ipinNE[0] <= UInt<1>("h00") @[Interconnect.scala 427:20]
    io.ipinNE[1] <= UInt<1>("h00") @[Interconnect.scala 427:20]
    io.ipinSE[0] <= UInt<1>("h00") @[Interconnect.scala 429:20]
    io.ipinSE[1] <= UInt<1>("h00") @[Interconnect.scala 429:20]
    io.otrackW[0] <= UInt<1>("h00") @[Interconnect.scala 430:21]
    io.otrackN[0] <= UInt<1>("h00") @[Interconnect.scala 431:21]
    io.otrackE[0] <= UInt<1>("h00") @[Interconnect.scala 432:21]
    io.otrackS[0] <= UInt<1>("h00") @[Interconnect.scala 433:21]
    inst ConfigMem of ConfigMem_125 @[Interconnect.scala 463:21]
    ConfigMem.clock <= clock
    ConfigMem.reset <= reset
    node _T = bits(io.cfg_addr, 11, 2) @[Interconnect.scala 464:65]
    node _T_1 = eq(UInt<7>("h06d"), _T) @[Interconnect.scala 464:50]
    node _T_2 = and(io.cfg_en, _T_1) @[Interconnect.scala 464:32]
    ConfigMem.io.cfg_en <= _T_2 @[Interconnect.scala 464:19]
    node _T_3 = bits(io.cfg_addr, 1, 0) @[Interconnect.scala 465:35]
    ConfigMem.io.cfg_addr <= _T_3 @[Interconnect.scala 465:21]
    ConfigMem.io.cfg_data <= io.cfg_data @[Interconnect.scala 466:21]
    inst Muxn of Muxn_628 @[Interconnect.scala 473:25]
    Muxn.clock <= clock
    Muxn.reset <= reset
    Muxn.io.in[0] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn.io.in[1] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNE[0] <= Muxn.io.out @[Interconnect.scala 479:45]
    node _T_4 = bits(ConfigMem.io.out[0], 0, 0) @[Interconnect.scala 483:39]
    Muxn.io.config <= _T_4 @[Interconnect.scala 483:23]
    inst Muxn_1 of Muxn_629 @[Interconnect.scala 473:25]
    Muxn_1.clock <= clock
    Muxn_1.reset <= reset
    Muxn_1.io.in[0] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[1] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNE[1] <= Muxn_1.io.out @[Interconnect.scala 479:45]
    node _T_5 = bits(ConfigMem.io.out[0], 1, 1) @[Interconnect.scala 483:39]
    Muxn_1.io.config <= _T_5 @[Interconnect.scala 483:23]
    inst Muxn_2 of Muxn_630 @[Interconnect.scala 473:25]
    Muxn_2.clock <= clock
    Muxn_2.reset <= reset
    Muxn_2.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[1] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    io.ipinSE[0] <= Muxn_2.io.out @[Interconnect.scala 479:45]
    node _T_6 = bits(ConfigMem.io.out[0], 3, 2) @[Interconnect.scala 483:39]
    Muxn_2.io.config <= _T_6 @[Interconnect.scala 483:23]
    inst Muxn_3 of Muxn_631 @[Interconnect.scala 473:25]
    Muxn_3.clock <= clock
    Muxn_3.reset <= reset
    Muxn_3.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[1] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    io.ipinSE[1] <= Muxn_3.io.out @[Interconnect.scala 479:45]
    node _T_7 = bits(ConfigMem.io.out[0], 5, 4) @[Interconnect.scala 483:39]
    Muxn_3.io.config <= _T_7 @[Interconnect.scala 483:23]
    inst Muxn_4 of Muxn_632 @[Interconnect.scala 473:25]
    Muxn_4.clock <= clock
    Muxn_4.reset <= reset
    Muxn_4.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[1] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    reg _T_8 : UInt, clock @[Interconnect.scala 477:55]
    _T_8 <= Muxn_4.io.out @[Interconnect.scala 477:55]
    io.otrackW[0] <= _T_8 @[Interconnect.scala 477:45]
    node _T_9 = bits(ConfigMem.io.out[0], 8, 6) @[Interconnect.scala 483:39]
    Muxn_4.io.config <= _T_9 @[Interconnect.scala 483:23]
    inst Muxn_5 of Muxn_633 @[Interconnect.scala 473:25]
    Muxn_5.clock <= clock
    Muxn_5.reset <= reset
    Muxn_5.io.in[0] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[1] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[2] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    reg _T_10 : UInt, clock @[Interconnect.scala 477:55]
    _T_10 <= Muxn_5.io.out @[Interconnect.scala 477:55]
    io.otrackN[0] <= _T_10 @[Interconnect.scala 477:45]
    node _T_11 = bits(ConfigMem.io.out[0], 10, 9) @[Interconnect.scala 483:39]
    Muxn_5.io.config <= _T_11 @[Interconnect.scala 483:23]
    inst Muxn_6 of Muxn_634 @[Interconnect.scala 473:25]
    Muxn_6.clock <= clock
    Muxn_6.reset <= reset
    Muxn_6.io.in[0] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[1] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[2] <= io.itrackS[0] @[Interconnect.scala 475:63]
    reg _T_12 : UInt, clock @[Interconnect.scala 477:55]
    _T_12 <= Muxn_6.io.out @[Interconnect.scala 477:55]
    io.otrackE[0] <= _T_12 @[Interconnect.scala 477:45]
    node _T_13 = bits(ConfigMem.io.out[0], 12, 11) @[Interconnect.scala 483:39]
    Muxn_6.io.config <= _T_13 @[Interconnect.scala 483:23]
    inst Muxn_7 of Muxn_635 @[Interconnect.scala 473:25]
    Muxn_7.clock <= clock
    Muxn_7.reset <= reset
    Muxn_7.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[1] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    reg _T_14 : UInt, clock @[Interconnect.scala 477:55]
    _T_14 <= Muxn_7.io.out @[Interconnect.scala 477:55]
    io.otrackS[0] <= _T_14 @[Interconnect.scala 477:45]
    node _T_15 = bits(ConfigMem.io.out[0], 14, 13) @[Interconnect.scala 483:39]
    Muxn_7.io.config <= _T_15 @[Interconnect.scala 483:23]
    
  module ConfigMem_126 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<0>, flip cfg_data : UInt<32>, out : UInt<28>[1]}
    
    wire _T : UInt<28>[1] @[ConfigMem.scala 27:29]
    _T[0] <= UInt<28>("h00") @[ConfigMem.scala 27:29]
    reg regs : UInt<28>[1], clock with : (reset => (reset, _T)) @[ConfigMem.scala 27:21]
    node _T_1 = eq(io.cfg_addr, UInt<1>("h00")) @[ConfigMem.scala 32:38]
    node _T_2 = and(io.cfg_en, _T_1) @[ConfigMem.scala 32:22]
    when _T_2 : @[ConfigMem.scala 32:54]
      node _T_3 = bits(io.cfg_data, 27, 0) @[ConfigMem.scala 33:31]
      regs[0] <= _T_3 @[ConfigMem.scala 33:17]
      skip @[ConfigMem.scala 32:54]
    io.out[0] <= regs[0] @[ConfigMem.scala 52:45]
    
  module Muxn_636 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_637 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_638 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_639 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_640 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_641 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_642 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_643 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_644 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_645 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_646 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_647 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module GIB_46 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<12>, flip cfg_data : UInt<32>, ipinNW : UInt<32>[2], flip opinNW : UInt<32>[1], ipinNE : UInt<32>[2], flip opinNE : UInt<32>[1], ipinSE : UInt<32>[2], flip opinSE : UInt<32>[1], ipinSW : UInt<32>[2], flip opinSW : UInt<32>[1], flip itrackW : UInt<32>[1], otrackW : UInt<32>[1], flip itrackN : UInt<32>[1], otrackN : UInt<32>[1], flip itrackE : UInt<32>[1], otrackE : UInt<32>[1], flip itrackS : UInt<32>[1], otrackS : UInt<32>[1]}
    
    io.ipinNW[0] <= UInt<1>("h00") @[Interconnect.scala 426:20]
    io.ipinNW[1] <= UInt<1>("h00") @[Interconnect.scala 426:20]
    io.ipinNE[0] <= UInt<1>("h00") @[Interconnect.scala 427:20]
    io.ipinNE[1] <= UInt<1>("h00") @[Interconnect.scala 427:20]
    io.ipinSW[0] <= UInt<1>("h00") @[Interconnect.scala 428:20]
    io.ipinSW[1] <= UInt<1>("h00") @[Interconnect.scala 428:20]
    io.ipinSE[0] <= UInt<1>("h00") @[Interconnect.scala 429:20]
    io.ipinSE[1] <= UInt<1>("h00") @[Interconnect.scala 429:20]
    io.otrackW[0] <= UInt<1>("h00") @[Interconnect.scala 430:21]
    io.otrackN[0] <= UInt<1>("h00") @[Interconnect.scala 431:21]
    io.otrackE[0] <= UInt<1>("h00") @[Interconnect.scala 432:21]
    io.otrackS[0] <= UInt<1>("h00") @[Interconnect.scala 433:21]
    inst ConfigMem of ConfigMem_126 @[Interconnect.scala 463:21]
    ConfigMem.clock <= clock
    ConfigMem.reset <= reset
    node _T = bits(io.cfg_addr, 11, 2) @[Interconnect.scala 464:65]
    node _T_1 = eq(UInt<7>("h06e"), _T) @[Interconnect.scala 464:50]
    node _T_2 = and(io.cfg_en, _T_1) @[Interconnect.scala 464:32]
    ConfigMem.io.cfg_en <= _T_2 @[Interconnect.scala 464:19]
    node _T_3 = bits(io.cfg_addr, 1, 0) @[Interconnect.scala 465:35]
    ConfigMem.io.cfg_addr <= _T_3 @[Interconnect.scala 465:21]
    ConfigMem.io.cfg_data <= io.cfg_data @[Interconnect.scala 466:21]
    inst Muxn of Muxn_636 @[Interconnect.scala 473:25]
    Muxn.clock <= clock
    Muxn.reset <= reset
    Muxn.io.in[0] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn.io.in[2] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNW[0] <= Muxn.io.out @[Interconnect.scala 479:45]
    node _T_4 = bits(ConfigMem.io.out[0], 1, 0) @[Interconnect.scala 483:39]
    Muxn.io.config <= _T_4 @[Interconnect.scala 483:23]
    inst Muxn_1 of Muxn_637 @[Interconnect.scala 473:25]
    Muxn_1.clock <= clock
    Muxn_1.reset <= reset
    Muxn_1.io.in[0] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[2] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNW[1] <= Muxn_1.io.out @[Interconnect.scala 479:45]
    node _T_5 = bits(ConfigMem.io.out[0], 3, 2) @[Interconnect.scala 483:39]
    Muxn_1.io.config <= _T_5 @[Interconnect.scala 483:23]
    inst Muxn_2 of Muxn_638 @[Interconnect.scala 473:25]
    Muxn_2.clock <= clock
    Muxn_2.reset <= reset
    Muxn_2.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNE[0] <= Muxn_2.io.out @[Interconnect.scala 479:45]
    node _T_6 = bits(ConfigMem.io.out[0], 5, 4) @[Interconnect.scala 483:39]
    Muxn_2.io.config <= _T_6 @[Interconnect.scala 483:23]
    inst Muxn_3 of Muxn_639 @[Interconnect.scala 473:25]
    Muxn_3.clock <= clock
    Muxn_3.reset <= reset
    Muxn_3.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNE[1] <= Muxn_3.io.out @[Interconnect.scala 479:45]
    node _T_7 = bits(ConfigMem.io.out[0], 7, 6) @[Interconnect.scala 483:39]
    Muxn_3.io.config <= _T_7 @[Interconnect.scala 483:23]
    inst Muxn_4 of Muxn_640 @[Interconnect.scala 473:25]
    Muxn_4.clock <= clock
    Muxn_4.reset <= reset
    Muxn_4.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[1] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    io.ipinSE[0] <= Muxn_4.io.out @[Interconnect.scala 479:45]
    node _T_8 = bits(ConfigMem.io.out[0], 9, 8) @[Interconnect.scala 483:39]
    Muxn_4.io.config <= _T_8 @[Interconnect.scala 483:23]
    inst Muxn_5 of Muxn_641 @[Interconnect.scala 473:25]
    Muxn_5.clock <= clock
    Muxn_5.reset <= reset
    Muxn_5.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[1] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    io.ipinSE[1] <= Muxn_5.io.out @[Interconnect.scala 479:45]
    node _T_9 = bits(ConfigMem.io.out[0], 11, 10) @[Interconnect.scala 483:39]
    Muxn_5.io.config <= _T_9 @[Interconnect.scala 483:23]
    inst Muxn_6 of Muxn_642 @[Interconnect.scala 473:25]
    Muxn_6.clock <= clock
    Muxn_6.reset <= reset
    Muxn_6.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[1] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    io.ipinSW[0] <= Muxn_6.io.out @[Interconnect.scala 479:45]
    node _T_10 = bits(ConfigMem.io.out[0], 13, 12) @[Interconnect.scala 483:39]
    Muxn_6.io.config <= _T_10 @[Interconnect.scala 483:23]
    inst Muxn_7 of Muxn_643 @[Interconnect.scala 473:25]
    Muxn_7.clock <= clock
    Muxn_7.reset <= reset
    Muxn_7.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[1] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    io.ipinSW[1] <= Muxn_7.io.out @[Interconnect.scala 479:45]
    node _T_11 = bits(ConfigMem.io.out[0], 15, 14) @[Interconnect.scala 483:39]
    Muxn_7.io.config <= _T_11 @[Interconnect.scala 483:23]
    inst Muxn_8 of Muxn_644 @[Interconnect.scala 473:25]
    Muxn_8.clock <= clock
    Muxn_8.reset <= reset
    Muxn_8.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[1] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.otrackW[0] <= Muxn_8.io.out @[Interconnect.scala 479:45]
    node _T_12 = bits(ConfigMem.io.out[0], 18, 16) @[Interconnect.scala 483:39]
    Muxn_8.io.config <= _T_12 @[Interconnect.scala 483:23]
    inst Muxn_9 of Muxn_645 @[Interconnect.scala 473:25]
    Muxn_9.clock <= clock
    Muxn_9.reset <= reset
    Muxn_9.io.in[0] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.otrackN[0] <= Muxn_9.io.out @[Interconnect.scala 479:45]
    node _T_13 = bits(ConfigMem.io.out[0], 21, 19) @[Interconnect.scala 483:39]
    Muxn_9.io.config <= _T_13 @[Interconnect.scala 483:23]
    inst Muxn_10 of Muxn_646 @[Interconnect.scala 473:25]
    Muxn_10.clock <= clock
    Muxn_10.reset <= reset
    Muxn_10.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.otrackE[0] <= Muxn_10.io.out @[Interconnect.scala 479:45]
    node _T_14 = bits(ConfigMem.io.out[0], 24, 22) @[Interconnect.scala 483:39]
    Muxn_10.io.config <= _T_14 @[Interconnect.scala 483:23]
    inst Muxn_11 of Muxn_647 @[Interconnect.scala 473:25]
    Muxn_11.clock <= clock
    Muxn_11.reset <= reset
    Muxn_11.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[1] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[4] <= io.itrackE[0] @[Interconnect.scala 475:63]
    io.otrackS[0] <= Muxn_11.io.out @[Interconnect.scala 479:45]
    node _T_15 = bits(ConfigMem.io.out[0], 27, 25) @[Interconnect.scala 483:39]
    Muxn_11.io.config <= _T_15 @[Interconnect.scala 483:23]
    
  module ConfigMem_127 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<0>, flip cfg_data : UInt<32>, out : UInt<28>[1]}
    
    wire _T : UInt<28>[1] @[ConfigMem.scala 27:29]
    _T[0] <= UInt<28>("h00") @[ConfigMem.scala 27:29]
    reg regs : UInt<28>[1], clock with : (reset => (reset, _T)) @[ConfigMem.scala 27:21]
    node _T_1 = eq(io.cfg_addr, UInt<1>("h00")) @[ConfigMem.scala 32:38]
    node _T_2 = and(io.cfg_en, _T_1) @[ConfigMem.scala 32:22]
    when _T_2 : @[ConfigMem.scala 32:54]
      node _T_3 = bits(io.cfg_data, 27, 0) @[ConfigMem.scala 33:31]
      regs[0] <= _T_3 @[ConfigMem.scala 33:17]
      skip @[ConfigMem.scala 32:54]
    io.out[0] <= regs[0] @[ConfigMem.scala 52:45]
    
  module Muxn_648 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_649 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_650 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_651 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_652 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_653 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_654 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_655 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_656 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_657 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_658 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_659 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module GIB_47 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<12>, flip cfg_data : UInt<32>, ipinNW : UInt<32>[2], flip opinNW : UInt<32>[1], ipinNE : UInt<32>[2], flip opinNE : UInt<32>[1], ipinSE : UInt<32>[2], flip opinSE : UInt<32>[1], ipinSW : UInt<32>[2], flip opinSW : UInt<32>[1], flip itrackW : UInt<32>[1], otrackW : UInt<32>[1], flip itrackN : UInt<32>[1], otrackN : UInt<32>[1], flip itrackE : UInt<32>[1], otrackE : UInt<32>[1], flip itrackS : UInt<32>[1], otrackS : UInt<32>[1]}
    
    io.ipinNW[0] <= UInt<1>("h00") @[Interconnect.scala 426:20]
    io.ipinNW[1] <= UInt<1>("h00") @[Interconnect.scala 426:20]
    io.ipinNE[0] <= UInt<1>("h00") @[Interconnect.scala 427:20]
    io.ipinNE[1] <= UInt<1>("h00") @[Interconnect.scala 427:20]
    io.ipinSW[0] <= UInt<1>("h00") @[Interconnect.scala 428:20]
    io.ipinSW[1] <= UInt<1>("h00") @[Interconnect.scala 428:20]
    io.ipinSE[0] <= UInt<1>("h00") @[Interconnect.scala 429:20]
    io.ipinSE[1] <= UInt<1>("h00") @[Interconnect.scala 429:20]
    io.otrackW[0] <= UInt<1>("h00") @[Interconnect.scala 430:21]
    io.otrackN[0] <= UInt<1>("h00") @[Interconnect.scala 431:21]
    io.otrackE[0] <= UInt<1>("h00") @[Interconnect.scala 432:21]
    io.otrackS[0] <= UInt<1>("h00") @[Interconnect.scala 433:21]
    inst ConfigMem of ConfigMem_127 @[Interconnect.scala 463:21]
    ConfigMem.clock <= clock
    ConfigMem.reset <= reset
    node _T = bits(io.cfg_addr, 11, 2) @[Interconnect.scala 464:65]
    node _T_1 = eq(UInt<7>("h06f"), _T) @[Interconnect.scala 464:50]
    node _T_2 = and(io.cfg_en, _T_1) @[Interconnect.scala 464:32]
    ConfigMem.io.cfg_en <= _T_2 @[Interconnect.scala 464:19]
    node _T_3 = bits(io.cfg_addr, 1, 0) @[Interconnect.scala 465:35]
    ConfigMem.io.cfg_addr <= _T_3 @[Interconnect.scala 465:21]
    ConfigMem.io.cfg_data <= io.cfg_data @[Interconnect.scala 466:21]
    inst Muxn of Muxn_648 @[Interconnect.scala 473:25]
    Muxn.clock <= clock
    Muxn.reset <= reset
    Muxn.io.in[0] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn.io.in[2] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNW[0] <= Muxn.io.out @[Interconnect.scala 479:45]
    node _T_4 = bits(ConfigMem.io.out[0], 1, 0) @[Interconnect.scala 483:39]
    Muxn.io.config <= _T_4 @[Interconnect.scala 483:23]
    inst Muxn_1 of Muxn_649 @[Interconnect.scala 473:25]
    Muxn_1.clock <= clock
    Muxn_1.reset <= reset
    Muxn_1.io.in[0] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[2] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNW[1] <= Muxn_1.io.out @[Interconnect.scala 479:45]
    node _T_5 = bits(ConfigMem.io.out[0], 3, 2) @[Interconnect.scala 483:39]
    Muxn_1.io.config <= _T_5 @[Interconnect.scala 483:23]
    inst Muxn_2 of Muxn_650 @[Interconnect.scala 473:25]
    Muxn_2.clock <= clock
    Muxn_2.reset <= reset
    Muxn_2.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNE[0] <= Muxn_2.io.out @[Interconnect.scala 479:45]
    node _T_6 = bits(ConfigMem.io.out[0], 5, 4) @[Interconnect.scala 483:39]
    Muxn_2.io.config <= _T_6 @[Interconnect.scala 483:23]
    inst Muxn_3 of Muxn_651 @[Interconnect.scala 473:25]
    Muxn_3.clock <= clock
    Muxn_3.reset <= reset
    Muxn_3.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNE[1] <= Muxn_3.io.out @[Interconnect.scala 479:45]
    node _T_7 = bits(ConfigMem.io.out[0], 7, 6) @[Interconnect.scala 483:39]
    Muxn_3.io.config <= _T_7 @[Interconnect.scala 483:23]
    inst Muxn_4 of Muxn_652 @[Interconnect.scala 473:25]
    Muxn_4.clock <= clock
    Muxn_4.reset <= reset
    Muxn_4.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[1] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    io.ipinSE[0] <= Muxn_4.io.out @[Interconnect.scala 479:45]
    node _T_8 = bits(ConfigMem.io.out[0], 9, 8) @[Interconnect.scala 483:39]
    Muxn_4.io.config <= _T_8 @[Interconnect.scala 483:23]
    inst Muxn_5 of Muxn_653 @[Interconnect.scala 473:25]
    Muxn_5.clock <= clock
    Muxn_5.reset <= reset
    Muxn_5.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[1] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    io.ipinSE[1] <= Muxn_5.io.out @[Interconnect.scala 479:45]
    node _T_9 = bits(ConfigMem.io.out[0], 11, 10) @[Interconnect.scala 483:39]
    Muxn_5.io.config <= _T_9 @[Interconnect.scala 483:23]
    inst Muxn_6 of Muxn_654 @[Interconnect.scala 473:25]
    Muxn_6.clock <= clock
    Muxn_6.reset <= reset
    Muxn_6.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[1] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    io.ipinSW[0] <= Muxn_6.io.out @[Interconnect.scala 479:45]
    node _T_10 = bits(ConfigMem.io.out[0], 13, 12) @[Interconnect.scala 483:39]
    Muxn_6.io.config <= _T_10 @[Interconnect.scala 483:23]
    inst Muxn_7 of Muxn_655 @[Interconnect.scala 473:25]
    Muxn_7.clock <= clock
    Muxn_7.reset <= reset
    Muxn_7.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[1] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    io.ipinSW[1] <= Muxn_7.io.out @[Interconnect.scala 479:45]
    node _T_11 = bits(ConfigMem.io.out[0], 15, 14) @[Interconnect.scala 483:39]
    Muxn_7.io.config <= _T_11 @[Interconnect.scala 483:23]
    inst Muxn_8 of Muxn_656 @[Interconnect.scala 473:25]
    Muxn_8.clock <= clock
    Muxn_8.reset <= reset
    Muxn_8.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[1] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    reg _T_12 : UInt, clock @[Interconnect.scala 477:55]
    _T_12 <= Muxn_8.io.out @[Interconnect.scala 477:55]
    io.otrackW[0] <= _T_12 @[Interconnect.scala 477:45]
    node _T_13 = bits(ConfigMem.io.out[0], 18, 16) @[Interconnect.scala 483:39]
    Muxn_8.io.config <= _T_13 @[Interconnect.scala 483:23]
    inst Muxn_9 of Muxn_657 @[Interconnect.scala 473:25]
    Muxn_9.clock <= clock
    Muxn_9.reset <= reset
    Muxn_9.io.in[0] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    reg _T_14 : UInt, clock @[Interconnect.scala 477:55]
    _T_14 <= Muxn_9.io.out @[Interconnect.scala 477:55]
    io.otrackN[0] <= _T_14 @[Interconnect.scala 477:45]
    node _T_15 = bits(ConfigMem.io.out[0], 21, 19) @[Interconnect.scala 483:39]
    Muxn_9.io.config <= _T_15 @[Interconnect.scala 483:23]
    inst Muxn_10 of Muxn_658 @[Interconnect.scala 473:25]
    Muxn_10.clock <= clock
    Muxn_10.reset <= reset
    Muxn_10.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    reg _T_16 : UInt, clock @[Interconnect.scala 477:55]
    _T_16 <= Muxn_10.io.out @[Interconnect.scala 477:55]
    io.otrackE[0] <= _T_16 @[Interconnect.scala 477:45]
    node _T_17 = bits(ConfigMem.io.out[0], 24, 22) @[Interconnect.scala 483:39]
    Muxn_10.io.config <= _T_17 @[Interconnect.scala 483:23]
    inst Muxn_11 of Muxn_659 @[Interconnect.scala 473:25]
    Muxn_11.clock <= clock
    Muxn_11.reset <= reset
    Muxn_11.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[1] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[4] <= io.itrackE[0] @[Interconnect.scala 475:63]
    reg _T_18 : UInt, clock @[Interconnect.scala 477:55]
    _T_18 <= Muxn_11.io.out @[Interconnect.scala 477:55]
    io.otrackS[0] <= _T_18 @[Interconnect.scala 477:45]
    node _T_19 = bits(ConfigMem.io.out[0], 27, 25) @[Interconnect.scala 483:39]
    Muxn_11.io.config <= _T_19 @[Interconnect.scala 483:23]
    
  module ConfigMem_128 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<0>, flip cfg_data : UInt<32>, out : UInt<28>[1]}
    
    wire _T : UInt<28>[1] @[ConfigMem.scala 27:29]
    _T[0] <= UInt<28>("h00") @[ConfigMem.scala 27:29]
    reg regs : UInt<28>[1], clock with : (reset => (reset, _T)) @[ConfigMem.scala 27:21]
    node _T_1 = eq(io.cfg_addr, UInt<1>("h00")) @[ConfigMem.scala 32:38]
    node _T_2 = and(io.cfg_en, _T_1) @[ConfigMem.scala 32:22]
    when _T_2 : @[ConfigMem.scala 32:54]
      node _T_3 = bits(io.cfg_data, 27, 0) @[ConfigMem.scala 33:31]
      regs[0] <= _T_3 @[ConfigMem.scala 33:17]
      skip @[ConfigMem.scala 32:54]
    io.out[0] <= regs[0] @[ConfigMem.scala 52:45]
    
  module Muxn_660 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_661 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_662 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_663 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_664 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_665 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_666 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_667 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_668 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_669 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_670 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_671 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module GIB_48 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<12>, flip cfg_data : UInt<32>, ipinNW : UInt<32>[2], flip opinNW : UInt<32>[1], ipinNE : UInt<32>[2], flip opinNE : UInt<32>[1], ipinSE : UInt<32>[2], flip opinSE : UInt<32>[1], ipinSW : UInt<32>[2], flip opinSW : UInt<32>[1], flip itrackW : UInt<32>[1], otrackW : UInt<32>[1], flip itrackN : UInt<32>[1], otrackN : UInt<32>[1], flip itrackE : UInt<32>[1], otrackE : UInt<32>[1], flip itrackS : UInt<32>[1], otrackS : UInt<32>[1]}
    
    io.ipinNW[0] <= UInt<1>("h00") @[Interconnect.scala 426:20]
    io.ipinNW[1] <= UInt<1>("h00") @[Interconnect.scala 426:20]
    io.ipinNE[0] <= UInt<1>("h00") @[Interconnect.scala 427:20]
    io.ipinNE[1] <= UInt<1>("h00") @[Interconnect.scala 427:20]
    io.ipinSW[0] <= UInt<1>("h00") @[Interconnect.scala 428:20]
    io.ipinSW[1] <= UInt<1>("h00") @[Interconnect.scala 428:20]
    io.ipinSE[0] <= UInt<1>("h00") @[Interconnect.scala 429:20]
    io.ipinSE[1] <= UInt<1>("h00") @[Interconnect.scala 429:20]
    io.otrackW[0] <= UInt<1>("h00") @[Interconnect.scala 430:21]
    io.otrackN[0] <= UInt<1>("h00") @[Interconnect.scala 431:21]
    io.otrackE[0] <= UInt<1>("h00") @[Interconnect.scala 432:21]
    io.otrackS[0] <= UInt<1>("h00") @[Interconnect.scala 433:21]
    inst ConfigMem of ConfigMem_128 @[Interconnect.scala 463:21]
    ConfigMem.clock <= clock
    ConfigMem.reset <= reset
    node _T = bits(io.cfg_addr, 11, 2) @[Interconnect.scala 464:65]
    node _T_1 = eq(UInt<7>("h070"), _T) @[Interconnect.scala 464:50]
    node _T_2 = and(io.cfg_en, _T_1) @[Interconnect.scala 464:32]
    ConfigMem.io.cfg_en <= _T_2 @[Interconnect.scala 464:19]
    node _T_3 = bits(io.cfg_addr, 1, 0) @[Interconnect.scala 465:35]
    ConfigMem.io.cfg_addr <= _T_3 @[Interconnect.scala 465:21]
    ConfigMem.io.cfg_data <= io.cfg_data @[Interconnect.scala 466:21]
    inst Muxn of Muxn_660 @[Interconnect.scala 473:25]
    Muxn.clock <= clock
    Muxn.reset <= reset
    Muxn.io.in[0] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn.io.in[2] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNW[0] <= Muxn.io.out @[Interconnect.scala 479:45]
    node _T_4 = bits(ConfigMem.io.out[0], 1, 0) @[Interconnect.scala 483:39]
    Muxn.io.config <= _T_4 @[Interconnect.scala 483:23]
    inst Muxn_1 of Muxn_661 @[Interconnect.scala 473:25]
    Muxn_1.clock <= clock
    Muxn_1.reset <= reset
    Muxn_1.io.in[0] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[2] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNW[1] <= Muxn_1.io.out @[Interconnect.scala 479:45]
    node _T_5 = bits(ConfigMem.io.out[0], 3, 2) @[Interconnect.scala 483:39]
    Muxn_1.io.config <= _T_5 @[Interconnect.scala 483:23]
    inst Muxn_2 of Muxn_662 @[Interconnect.scala 473:25]
    Muxn_2.clock <= clock
    Muxn_2.reset <= reset
    Muxn_2.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNE[0] <= Muxn_2.io.out @[Interconnect.scala 479:45]
    node _T_6 = bits(ConfigMem.io.out[0], 5, 4) @[Interconnect.scala 483:39]
    Muxn_2.io.config <= _T_6 @[Interconnect.scala 483:23]
    inst Muxn_3 of Muxn_663 @[Interconnect.scala 473:25]
    Muxn_3.clock <= clock
    Muxn_3.reset <= reset
    Muxn_3.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNE[1] <= Muxn_3.io.out @[Interconnect.scala 479:45]
    node _T_7 = bits(ConfigMem.io.out[0], 7, 6) @[Interconnect.scala 483:39]
    Muxn_3.io.config <= _T_7 @[Interconnect.scala 483:23]
    inst Muxn_4 of Muxn_664 @[Interconnect.scala 473:25]
    Muxn_4.clock <= clock
    Muxn_4.reset <= reset
    Muxn_4.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[1] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    io.ipinSE[0] <= Muxn_4.io.out @[Interconnect.scala 479:45]
    node _T_8 = bits(ConfigMem.io.out[0], 9, 8) @[Interconnect.scala 483:39]
    Muxn_4.io.config <= _T_8 @[Interconnect.scala 483:23]
    inst Muxn_5 of Muxn_665 @[Interconnect.scala 473:25]
    Muxn_5.clock <= clock
    Muxn_5.reset <= reset
    Muxn_5.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[1] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    io.ipinSE[1] <= Muxn_5.io.out @[Interconnect.scala 479:45]
    node _T_9 = bits(ConfigMem.io.out[0], 11, 10) @[Interconnect.scala 483:39]
    Muxn_5.io.config <= _T_9 @[Interconnect.scala 483:23]
    inst Muxn_6 of Muxn_666 @[Interconnect.scala 473:25]
    Muxn_6.clock <= clock
    Muxn_6.reset <= reset
    Muxn_6.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[1] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    io.ipinSW[0] <= Muxn_6.io.out @[Interconnect.scala 479:45]
    node _T_10 = bits(ConfigMem.io.out[0], 13, 12) @[Interconnect.scala 483:39]
    Muxn_6.io.config <= _T_10 @[Interconnect.scala 483:23]
    inst Muxn_7 of Muxn_667 @[Interconnect.scala 473:25]
    Muxn_7.clock <= clock
    Muxn_7.reset <= reset
    Muxn_7.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[1] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    io.ipinSW[1] <= Muxn_7.io.out @[Interconnect.scala 479:45]
    node _T_11 = bits(ConfigMem.io.out[0], 15, 14) @[Interconnect.scala 483:39]
    Muxn_7.io.config <= _T_11 @[Interconnect.scala 483:23]
    inst Muxn_8 of Muxn_668 @[Interconnect.scala 473:25]
    Muxn_8.clock <= clock
    Muxn_8.reset <= reset
    Muxn_8.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[1] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.otrackW[0] <= Muxn_8.io.out @[Interconnect.scala 479:45]
    node _T_12 = bits(ConfigMem.io.out[0], 18, 16) @[Interconnect.scala 483:39]
    Muxn_8.io.config <= _T_12 @[Interconnect.scala 483:23]
    inst Muxn_9 of Muxn_669 @[Interconnect.scala 473:25]
    Muxn_9.clock <= clock
    Muxn_9.reset <= reset
    Muxn_9.io.in[0] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.otrackN[0] <= Muxn_9.io.out @[Interconnect.scala 479:45]
    node _T_13 = bits(ConfigMem.io.out[0], 21, 19) @[Interconnect.scala 483:39]
    Muxn_9.io.config <= _T_13 @[Interconnect.scala 483:23]
    inst Muxn_10 of Muxn_670 @[Interconnect.scala 473:25]
    Muxn_10.clock <= clock
    Muxn_10.reset <= reset
    Muxn_10.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.otrackE[0] <= Muxn_10.io.out @[Interconnect.scala 479:45]
    node _T_14 = bits(ConfigMem.io.out[0], 24, 22) @[Interconnect.scala 483:39]
    Muxn_10.io.config <= _T_14 @[Interconnect.scala 483:23]
    inst Muxn_11 of Muxn_671 @[Interconnect.scala 473:25]
    Muxn_11.clock <= clock
    Muxn_11.reset <= reset
    Muxn_11.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[1] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[4] <= io.itrackE[0] @[Interconnect.scala 475:63]
    io.otrackS[0] <= Muxn_11.io.out @[Interconnect.scala 479:45]
    node _T_15 = bits(ConfigMem.io.out[0], 27, 25) @[Interconnect.scala 483:39]
    Muxn_11.io.config <= _T_15 @[Interconnect.scala 483:23]
    
  module ConfigMem_129 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<0>, flip cfg_data : UInt<32>, out : UInt<28>[1]}
    
    wire _T : UInt<28>[1] @[ConfigMem.scala 27:29]
    _T[0] <= UInt<28>("h00") @[ConfigMem.scala 27:29]
    reg regs : UInt<28>[1], clock with : (reset => (reset, _T)) @[ConfigMem.scala 27:21]
    node _T_1 = eq(io.cfg_addr, UInt<1>("h00")) @[ConfigMem.scala 32:38]
    node _T_2 = and(io.cfg_en, _T_1) @[ConfigMem.scala 32:22]
    when _T_2 : @[ConfigMem.scala 32:54]
      node _T_3 = bits(io.cfg_data, 27, 0) @[ConfigMem.scala 33:31]
      regs[0] <= _T_3 @[ConfigMem.scala 33:17]
      skip @[ConfigMem.scala 32:54]
    io.out[0] <= regs[0] @[ConfigMem.scala 52:45]
    
  module Muxn_672 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_673 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_674 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_675 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_676 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_677 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_678 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_679 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_680 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_681 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_682 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_683 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module GIB_49 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<12>, flip cfg_data : UInt<32>, ipinNW : UInt<32>[2], flip opinNW : UInt<32>[1], ipinNE : UInt<32>[2], flip opinNE : UInt<32>[1], ipinSE : UInt<32>[2], flip opinSE : UInt<32>[1], ipinSW : UInt<32>[2], flip opinSW : UInt<32>[1], flip itrackW : UInt<32>[1], otrackW : UInt<32>[1], flip itrackN : UInt<32>[1], otrackN : UInt<32>[1], flip itrackE : UInt<32>[1], otrackE : UInt<32>[1], flip itrackS : UInt<32>[1], otrackS : UInt<32>[1]}
    
    io.ipinNW[0] <= UInt<1>("h00") @[Interconnect.scala 426:20]
    io.ipinNW[1] <= UInt<1>("h00") @[Interconnect.scala 426:20]
    io.ipinNE[0] <= UInt<1>("h00") @[Interconnect.scala 427:20]
    io.ipinNE[1] <= UInt<1>("h00") @[Interconnect.scala 427:20]
    io.ipinSW[0] <= UInt<1>("h00") @[Interconnect.scala 428:20]
    io.ipinSW[1] <= UInt<1>("h00") @[Interconnect.scala 428:20]
    io.ipinSE[0] <= UInt<1>("h00") @[Interconnect.scala 429:20]
    io.ipinSE[1] <= UInt<1>("h00") @[Interconnect.scala 429:20]
    io.otrackW[0] <= UInt<1>("h00") @[Interconnect.scala 430:21]
    io.otrackN[0] <= UInt<1>("h00") @[Interconnect.scala 431:21]
    io.otrackE[0] <= UInt<1>("h00") @[Interconnect.scala 432:21]
    io.otrackS[0] <= UInt<1>("h00") @[Interconnect.scala 433:21]
    inst ConfigMem of ConfigMem_129 @[Interconnect.scala 463:21]
    ConfigMem.clock <= clock
    ConfigMem.reset <= reset
    node _T = bits(io.cfg_addr, 11, 2) @[Interconnect.scala 464:65]
    node _T_1 = eq(UInt<7>("h071"), _T) @[Interconnect.scala 464:50]
    node _T_2 = and(io.cfg_en, _T_1) @[Interconnect.scala 464:32]
    ConfigMem.io.cfg_en <= _T_2 @[Interconnect.scala 464:19]
    node _T_3 = bits(io.cfg_addr, 1, 0) @[Interconnect.scala 465:35]
    ConfigMem.io.cfg_addr <= _T_3 @[Interconnect.scala 465:21]
    ConfigMem.io.cfg_data <= io.cfg_data @[Interconnect.scala 466:21]
    inst Muxn of Muxn_672 @[Interconnect.scala 473:25]
    Muxn.clock <= clock
    Muxn.reset <= reset
    Muxn.io.in[0] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn.io.in[2] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNW[0] <= Muxn.io.out @[Interconnect.scala 479:45]
    node _T_4 = bits(ConfigMem.io.out[0], 1, 0) @[Interconnect.scala 483:39]
    Muxn.io.config <= _T_4 @[Interconnect.scala 483:23]
    inst Muxn_1 of Muxn_673 @[Interconnect.scala 473:25]
    Muxn_1.clock <= clock
    Muxn_1.reset <= reset
    Muxn_1.io.in[0] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[2] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNW[1] <= Muxn_1.io.out @[Interconnect.scala 479:45]
    node _T_5 = bits(ConfigMem.io.out[0], 3, 2) @[Interconnect.scala 483:39]
    Muxn_1.io.config <= _T_5 @[Interconnect.scala 483:23]
    inst Muxn_2 of Muxn_674 @[Interconnect.scala 473:25]
    Muxn_2.clock <= clock
    Muxn_2.reset <= reset
    Muxn_2.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNE[0] <= Muxn_2.io.out @[Interconnect.scala 479:45]
    node _T_6 = bits(ConfigMem.io.out[0], 5, 4) @[Interconnect.scala 483:39]
    Muxn_2.io.config <= _T_6 @[Interconnect.scala 483:23]
    inst Muxn_3 of Muxn_675 @[Interconnect.scala 473:25]
    Muxn_3.clock <= clock
    Muxn_3.reset <= reset
    Muxn_3.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNE[1] <= Muxn_3.io.out @[Interconnect.scala 479:45]
    node _T_7 = bits(ConfigMem.io.out[0], 7, 6) @[Interconnect.scala 483:39]
    Muxn_3.io.config <= _T_7 @[Interconnect.scala 483:23]
    inst Muxn_4 of Muxn_676 @[Interconnect.scala 473:25]
    Muxn_4.clock <= clock
    Muxn_4.reset <= reset
    Muxn_4.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[1] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    io.ipinSE[0] <= Muxn_4.io.out @[Interconnect.scala 479:45]
    node _T_8 = bits(ConfigMem.io.out[0], 9, 8) @[Interconnect.scala 483:39]
    Muxn_4.io.config <= _T_8 @[Interconnect.scala 483:23]
    inst Muxn_5 of Muxn_677 @[Interconnect.scala 473:25]
    Muxn_5.clock <= clock
    Muxn_5.reset <= reset
    Muxn_5.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[1] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    io.ipinSE[1] <= Muxn_5.io.out @[Interconnect.scala 479:45]
    node _T_9 = bits(ConfigMem.io.out[0], 11, 10) @[Interconnect.scala 483:39]
    Muxn_5.io.config <= _T_9 @[Interconnect.scala 483:23]
    inst Muxn_6 of Muxn_678 @[Interconnect.scala 473:25]
    Muxn_6.clock <= clock
    Muxn_6.reset <= reset
    Muxn_6.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[1] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    io.ipinSW[0] <= Muxn_6.io.out @[Interconnect.scala 479:45]
    node _T_10 = bits(ConfigMem.io.out[0], 13, 12) @[Interconnect.scala 483:39]
    Muxn_6.io.config <= _T_10 @[Interconnect.scala 483:23]
    inst Muxn_7 of Muxn_679 @[Interconnect.scala 473:25]
    Muxn_7.clock <= clock
    Muxn_7.reset <= reset
    Muxn_7.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[1] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    io.ipinSW[1] <= Muxn_7.io.out @[Interconnect.scala 479:45]
    node _T_11 = bits(ConfigMem.io.out[0], 15, 14) @[Interconnect.scala 483:39]
    Muxn_7.io.config <= _T_11 @[Interconnect.scala 483:23]
    inst Muxn_8 of Muxn_680 @[Interconnect.scala 473:25]
    Muxn_8.clock <= clock
    Muxn_8.reset <= reset
    Muxn_8.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[1] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    reg _T_12 : UInt, clock @[Interconnect.scala 477:55]
    _T_12 <= Muxn_8.io.out @[Interconnect.scala 477:55]
    io.otrackW[0] <= _T_12 @[Interconnect.scala 477:45]
    node _T_13 = bits(ConfigMem.io.out[0], 18, 16) @[Interconnect.scala 483:39]
    Muxn_8.io.config <= _T_13 @[Interconnect.scala 483:23]
    inst Muxn_9 of Muxn_681 @[Interconnect.scala 473:25]
    Muxn_9.clock <= clock
    Muxn_9.reset <= reset
    Muxn_9.io.in[0] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    reg _T_14 : UInt, clock @[Interconnect.scala 477:55]
    _T_14 <= Muxn_9.io.out @[Interconnect.scala 477:55]
    io.otrackN[0] <= _T_14 @[Interconnect.scala 477:45]
    node _T_15 = bits(ConfigMem.io.out[0], 21, 19) @[Interconnect.scala 483:39]
    Muxn_9.io.config <= _T_15 @[Interconnect.scala 483:23]
    inst Muxn_10 of Muxn_682 @[Interconnect.scala 473:25]
    Muxn_10.clock <= clock
    Muxn_10.reset <= reset
    Muxn_10.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    reg _T_16 : UInt, clock @[Interconnect.scala 477:55]
    _T_16 <= Muxn_10.io.out @[Interconnect.scala 477:55]
    io.otrackE[0] <= _T_16 @[Interconnect.scala 477:45]
    node _T_17 = bits(ConfigMem.io.out[0], 24, 22) @[Interconnect.scala 483:39]
    Muxn_10.io.config <= _T_17 @[Interconnect.scala 483:23]
    inst Muxn_11 of Muxn_683 @[Interconnect.scala 473:25]
    Muxn_11.clock <= clock
    Muxn_11.reset <= reset
    Muxn_11.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[1] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[4] <= io.itrackE[0] @[Interconnect.scala 475:63]
    reg _T_18 : UInt, clock @[Interconnect.scala 477:55]
    _T_18 <= Muxn_11.io.out @[Interconnect.scala 477:55]
    io.otrackS[0] <= _T_18 @[Interconnect.scala 477:45]
    node _T_19 = bits(ConfigMem.io.out[0], 27, 25) @[Interconnect.scala 483:39]
    Muxn_11.io.config <= _T_19 @[Interconnect.scala 483:23]
    
  module ConfigMem_130 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<0>, flip cfg_data : UInt<32>, out : UInt<28>[1]}
    
    wire _T : UInt<28>[1] @[ConfigMem.scala 27:29]
    _T[0] <= UInt<28>("h00") @[ConfigMem.scala 27:29]
    reg regs : UInt<28>[1], clock with : (reset => (reset, _T)) @[ConfigMem.scala 27:21]
    node _T_1 = eq(io.cfg_addr, UInt<1>("h00")) @[ConfigMem.scala 32:38]
    node _T_2 = and(io.cfg_en, _T_1) @[ConfigMem.scala 32:22]
    when _T_2 : @[ConfigMem.scala 32:54]
      node _T_3 = bits(io.cfg_data, 27, 0) @[ConfigMem.scala 33:31]
      regs[0] <= _T_3 @[ConfigMem.scala 33:17]
      skip @[ConfigMem.scala 32:54]
    io.out[0] <= regs[0] @[ConfigMem.scala 52:45]
    
  module Muxn_684 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_685 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_686 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_687 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_688 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_689 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_690 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_691 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_692 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_693 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_694 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_695 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module GIB_50 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<12>, flip cfg_data : UInt<32>, ipinNW : UInt<32>[2], flip opinNW : UInt<32>[1], ipinNE : UInt<32>[2], flip opinNE : UInt<32>[1], ipinSE : UInt<32>[2], flip opinSE : UInt<32>[1], ipinSW : UInt<32>[2], flip opinSW : UInt<32>[1], flip itrackW : UInt<32>[1], otrackW : UInt<32>[1], flip itrackN : UInt<32>[1], otrackN : UInt<32>[1], flip itrackE : UInt<32>[1], otrackE : UInt<32>[1], flip itrackS : UInt<32>[1], otrackS : UInt<32>[1]}
    
    io.ipinNW[0] <= UInt<1>("h00") @[Interconnect.scala 426:20]
    io.ipinNW[1] <= UInt<1>("h00") @[Interconnect.scala 426:20]
    io.ipinNE[0] <= UInt<1>("h00") @[Interconnect.scala 427:20]
    io.ipinNE[1] <= UInt<1>("h00") @[Interconnect.scala 427:20]
    io.ipinSW[0] <= UInt<1>("h00") @[Interconnect.scala 428:20]
    io.ipinSW[1] <= UInt<1>("h00") @[Interconnect.scala 428:20]
    io.ipinSE[0] <= UInt<1>("h00") @[Interconnect.scala 429:20]
    io.ipinSE[1] <= UInt<1>("h00") @[Interconnect.scala 429:20]
    io.otrackW[0] <= UInt<1>("h00") @[Interconnect.scala 430:21]
    io.otrackN[0] <= UInt<1>("h00") @[Interconnect.scala 431:21]
    io.otrackE[0] <= UInt<1>("h00") @[Interconnect.scala 432:21]
    io.otrackS[0] <= UInt<1>("h00") @[Interconnect.scala 433:21]
    inst ConfigMem of ConfigMem_130 @[Interconnect.scala 463:21]
    ConfigMem.clock <= clock
    ConfigMem.reset <= reset
    node _T = bits(io.cfg_addr, 11, 2) @[Interconnect.scala 464:65]
    node _T_1 = eq(UInt<7>("h072"), _T) @[Interconnect.scala 464:50]
    node _T_2 = and(io.cfg_en, _T_1) @[Interconnect.scala 464:32]
    ConfigMem.io.cfg_en <= _T_2 @[Interconnect.scala 464:19]
    node _T_3 = bits(io.cfg_addr, 1, 0) @[Interconnect.scala 465:35]
    ConfigMem.io.cfg_addr <= _T_3 @[Interconnect.scala 465:21]
    ConfigMem.io.cfg_data <= io.cfg_data @[Interconnect.scala 466:21]
    inst Muxn of Muxn_684 @[Interconnect.scala 473:25]
    Muxn.clock <= clock
    Muxn.reset <= reset
    Muxn.io.in[0] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn.io.in[2] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNW[0] <= Muxn.io.out @[Interconnect.scala 479:45]
    node _T_4 = bits(ConfigMem.io.out[0], 1, 0) @[Interconnect.scala 483:39]
    Muxn.io.config <= _T_4 @[Interconnect.scala 483:23]
    inst Muxn_1 of Muxn_685 @[Interconnect.scala 473:25]
    Muxn_1.clock <= clock
    Muxn_1.reset <= reset
    Muxn_1.io.in[0] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[2] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNW[1] <= Muxn_1.io.out @[Interconnect.scala 479:45]
    node _T_5 = bits(ConfigMem.io.out[0], 3, 2) @[Interconnect.scala 483:39]
    Muxn_1.io.config <= _T_5 @[Interconnect.scala 483:23]
    inst Muxn_2 of Muxn_686 @[Interconnect.scala 473:25]
    Muxn_2.clock <= clock
    Muxn_2.reset <= reset
    Muxn_2.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNE[0] <= Muxn_2.io.out @[Interconnect.scala 479:45]
    node _T_6 = bits(ConfigMem.io.out[0], 5, 4) @[Interconnect.scala 483:39]
    Muxn_2.io.config <= _T_6 @[Interconnect.scala 483:23]
    inst Muxn_3 of Muxn_687 @[Interconnect.scala 473:25]
    Muxn_3.clock <= clock
    Muxn_3.reset <= reset
    Muxn_3.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNE[1] <= Muxn_3.io.out @[Interconnect.scala 479:45]
    node _T_7 = bits(ConfigMem.io.out[0], 7, 6) @[Interconnect.scala 483:39]
    Muxn_3.io.config <= _T_7 @[Interconnect.scala 483:23]
    inst Muxn_4 of Muxn_688 @[Interconnect.scala 473:25]
    Muxn_4.clock <= clock
    Muxn_4.reset <= reset
    Muxn_4.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[1] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    io.ipinSE[0] <= Muxn_4.io.out @[Interconnect.scala 479:45]
    node _T_8 = bits(ConfigMem.io.out[0], 9, 8) @[Interconnect.scala 483:39]
    Muxn_4.io.config <= _T_8 @[Interconnect.scala 483:23]
    inst Muxn_5 of Muxn_689 @[Interconnect.scala 473:25]
    Muxn_5.clock <= clock
    Muxn_5.reset <= reset
    Muxn_5.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[1] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    io.ipinSE[1] <= Muxn_5.io.out @[Interconnect.scala 479:45]
    node _T_9 = bits(ConfigMem.io.out[0], 11, 10) @[Interconnect.scala 483:39]
    Muxn_5.io.config <= _T_9 @[Interconnect.scala 483:23]
    inst Muxn_6 of Muxn_690 @[Interconnect.scala 473:25]
    Muxn_6.clock <= clock
    Muxn_6.reset <= reset
    Muxn_6.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[1] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    io.ipinSW[0] <= Muxn_6.io.out @[Interconnect.scala 479:45]
    node _T_10 = bits(ConfigMem.io.out[0], 13, 12) @[Interconnect.scala 483:39]
    Muxn_6.io.config <= _T_10 @[Interconnect.scala 483:23]
    inst Muxn_7 of Muxn_691 @[Interconnect.scala 473:25]
    Muxn_7.clock <= clock
    Muxn_7.reset <= reset
    Muxn_7.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[1] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    io.ipinSW[1] <= Muxn_7.io.out @[Interconnect.scala 479:45]
    node _T_11 = bits(ConfigMem.io.out[0], 15, 14) @[Interconnect.scala 483:39]
    Muxn_7.io.config <= _T_11 @[Interconnect.scala 483:23]
    inst Muxn_8 of Muxn_692 @[Interconnect.scala 473:25]
    Muxn_8.clock <= clock
    Muxn_8.reset <= reset
    Muxn_8.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[1] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.otrackW[0] <= Muxn_8.io.out @[Interconnect.scala 479:45]
    node _T_12 = bits(ConfigMem.io.out[0], 18, 16) @[Interconnect.scala 483:39]
    Muxn_8.io.config <= _T_12 @[Interconnect.scala 483:23]
    inst Muxn_9 of Muxn_693 @[Interconnect.scala 473:25]
    Muxn_9.clock <= clock
    Muxn_9.reset <= reset
    Muxn_9.io.in[0] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.otrackN[0] <= Muxn_9.io.out @[Interconnect.scala 479:45]
    node _T_13 = bits(ConfigMem.io.out[0], 21, 19) @[Interconnect.scala 483:39]
    Muxn_9.io.config <= _T_13 @[Interconnect.scala 483:23]
    inst Muxn_10 of Muxn_694 @[Interconnect.scala 473:25]
    Muxn_10.clock <= clock
    Muxn_10.reset <= reset
    Muxn_10.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.otrackE[0] <= Muxn_10.io.out @[Interconnect.scala 479:45]
    node _T_14 = bits(ConfigMem.io.out[0], 24, 22) @[Interconnect.scala 483:39]
    Muxn_10.io.config <= _T_14 @[Interconnect.scala 483:23]
    inst Muxn_11 of Muxn_695 @[Interconnect.scala 473:25]
    Muxn_11.clock <= clock
    Muxn_11.reset <= reset
    Muxn_11.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[1] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[4] <= io.itrackE[0] @[Interconnect.scala 475:63]
    io.otrackS[0] <= Muxn_11.io.out @[Interconnect.scala 479:45]
    node _T_15 = bits(ConfigMem.io.out[0], 27, 25) @[Interconnect.scala 483:39]
    Muxn_11.io.config <= _T_15 @[Interconnect.scala 483:23]
    
  module ConfigMem_131 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<0>, flip cfg_data : UInt<32>, out : UInt<28>[1]}
    
    wire _T : UInt<28>[1] @[ConfigMem.scala 27:29]
    _T[0] <= UInt<28>("h00") @[ConfigMem.scala 27:29]
    reg regs : UInt<28>[1], clock with : (reset => (reset, _T)) @[ConfigMem.scala 27:21]
    node _T_1 = eq(io.cfg_addr, UInt<1>("h00")) @[ConfigMem.scala 32:38]
    node _T_2 = and(io.cfg_en, _T_1) @[ConfigMem.scala 32:22]
    when _T_2 : @[ConfigMem.scala 32:54]
      node _T_3 = bits(io.cfg_data, 27, 0) @[ConfigMem.scala 33:31]
      regs[0] <= _T_3 @[ConfigMem.scala 33:17]
      skip @[ConfigMem.scala 32:54]
    io.out[0] <= regs[0] @[ConfigMem.scala 52:45]
    
  module Muxn_696 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_697 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_698 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_699 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_700 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_701 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_702 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_703 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_704 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_705 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_706 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_707 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module GIB_51 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<12>, flip cfg_data : UInt<32>, ipinNW : UInt<32>[2], flip opinNW : UInt<32>[1], ipinNE : UInt<32>[2], flip opinNE : UInt<32>[1], ipinSE : UInt<32>[2], flip opinSE : UInt<32>[1], ipinSW : UInt<32>[2], flip opinSW : UInt<32>[1], flip itrackW : UInt<32>[1], otrackW : UInt<32>[1], flip itrackN : UInt<32>[1], otrackN : UInt<32>[1], flip itrackE : UInt<32>[1], otrackE : UInt<32>[1], flip itrackS : UInt<32>[1], otrackS : UInt<32>[1]}
    
    io.ipinNW[0] <= UInt<1>("h00") @[Interconnect.scala 426:20]
    io.ipinNW[1] <= UInt<1>("h00") @[Interconnect.scala 426:20]
    io.ipinNE[0] <= UInt<1>("h00") @[Interconnect.scala 427:20]
    io.ipinNE[1] <= UInt<1>("h00") @[Interconnect.scala 427:20]
    io.ipinSW[0] <= UInt<1>("h00") @[Interconnect.scala 428:20]
    io.ipinSW[1] <= UInt<1>("h00") @[Interconnect.scala 428:20]
    io.ipinSE[0] <= UInt<1>("h00") @[Interconnect.scala 429:20]
    io.ipinSE[1] <= UInt<1>("h00") @[Interconnect.scala 429:20]
    io.otrackW[0] <= UInt<1>("h00") @[Interconnect.scala 430:21]
    io.otrackN[0] <= UInt<1>("h00") @[Interconnect.scala 431:21]
    io.otrackE[0] <= UInt<1>("h00") @[Interconnect.scala 432:21]
    io.otrackS[0] <= UInt<1>("h00") @[Interconnect.scala 433:21]
    inst ConfigMem of ConfigMem_131 @[Interconnect.scala 463:21]
    ConfigMem.clock <= clock
    ConfigMem.reset <= reset
    node _T = bits(io.cfg_addr, 11, 2) @[Interconnect.scala 464:65]
    node _T_1 = eq(UInt<7>("h073"), _T) @[Interconnect.scala 464:50]
    node _T_2 = and(io.cfg_en, _T_1) @[Interconnect.scala 464:32]
    ConfigMem.io.cfg_en <= _T_2 @[Interconnect.scala 464:19]
    node _T_3 = bits(io.cfg_addr, 1, 0) @[Interconnect.scala 465:35]
    ConfigMem.io.cfg_addr <= _T_3 @[Interconnect.scala 465:21]
    ConfigMem.io.cfg_data <= io.cfg_data @[Interconnect.scala 466:21]
    inst Muxn of Muxn_696 @[Interconnect.scala 473:25]
    Muxn.clock <= clock
    Muxn.reset <= reset
    Muxn.io.in[0] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn.io.in[2] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNW[0] <= Muxn.io.out @[Interconnect.scala 479:45]
    node _T_4 = bits(ConfigMem.io.out[0], 1, 0) @[Interconnect.scala 483:39]
    Muxn.io.config <= _T_4 @[Interconnect.scala 483:23]
    inst Muxn_1 of Muxn_697 @[Interconnect.scala 473:25]
    Muxn_1.clock <= clock
    Muxn_1.reset <= reset
    Muxn_1.io.in[0] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[2] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNW[1] <= Muxn_1.io.out @[Interconnect.scala 479:45]
    node _T_5 = bits(ConfigMem.io.out[0], 3, 2) @[Interconnect.scala 483:39]
    Muxn_1.io.config <= _T_5 @[Interconnect.scala 483:23]
    inst Muxn_2 of Muxn_698 @[Interconnect.scala 473:25]
    Muxn_2.clock <= clock
    Muxn_2.reset <= reset
    Muxn_2.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNE[0] <= Muxn_2.io.out @[Interconnect.scala 479:45]
    node _T_6 = bits(ConfigMem.io.out[0], 5, 4) @[Interconnect.scala 483:39]
    Muxn_2.io.config <= _T_6 @[Interconnect.scala 483:23]
    inst Muxn_3 of Muxn_699 @[Interconnect.scala 473:25]
    Muxn_3.clock <= clock
    Muxn_3.reset <= reset
    Muxn_3.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNE[1] <= Muxn_3.io.out @[Interconnect.scala 479:45]
    node _T_7 = bits(ConfigMem.io.out[0], 7, 6) @[Interconnect.scala 483:39]
    Muxn_3.io.config <= _T_7 @[Interconnect.scala 483:23]
    inst Muxn_4 of Muxn_700 @[Interconnect.scala 473:25]
    Muxn_4.clock <= clock
    Muxn_4.reset <= reset
    Muxn_4.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[1] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    io.ipinSE[0] <= Muxn_4.io.out @[Interconnect.scala 479:45]
    node _T_8 = bits(ConfigMem.io.out[0], 9, 8) @[Interconnect.scala 483:39]
    Muxn_4.io.config <= _T_8 @[Interconnect.scala 483:23]
    inst Muxn_5 of Muxn_701 @[Interconnect.scala 473:25]
    Muxn_5.clock <= clock
    Muxn_5.reset <= reset
    Muxn_5.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[1] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    io.ipinSE[1] <= Muxn_5.io.out @[Interconnect.scala 479:45]
    node _T_9 = bits(ConfigMem.io.out[0], 11, 10) @[Interconnect.scala 483:39]
    Muxn_5.io.config <= _T_9 @[Interconnect.scala 483:23]
    inst Muxn_6 of Muxn_702 @[Interconnect.scala 473:25]
    Muxn_6.clock <= clock
    Muxn_6.reset <= reset
    Muxn_6.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[1] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    io.ipinSW[0] <= Muxn_6.io.out @[Interconnect.scala 479:45]
    node _T_10 = bits(ConfigMem.io.out[0], 13, 12) @[Interconnect.scala 483:39]
    Muxn_6.io.config <= _T_10 @[Interconnect.scala 483:23]
    inst Muxn_7 of Muxn_703 @[Interconnect.scala 473:25]
    Muxn_7.clock <= clock
    Muxn_7.reset <= reset
    Muxn_7.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[1] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    io.ipinSW[1] <= Muxn_7.io.out @[Interconnect.scala 479:45]
    node _T_11 = bits(ConfigMem.io.out[0], 15, 14) @[Interconnect.scala 483:39]
    Muxn_7.io.config <= _T_11 @[Interconnect.scala 483:23]
    inst Muxn_8 of Muxn_704 @[Interconnect.scala 473:25]
    Muxn_8.clock <= clock
    Muxn_8.reset <= reset
    Muxn_8.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[1] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    reg _T_12 : UInt, clock @[Interconnect.scala 477:55]
    _T_12 <= Muxn_8.io.out @[Interconnect.scala 477:55]
    io.otrackW[0] <= _T_12 @[Interconnect.scala 477:45]
    node _T_13 = bits(ConfigMem.io.out[0], 18, 16) @[Interconnect.scala 483:39]
    Muxn_8.io.config <= _T_13 @[Interconnect.scala 483:23]
    inst Muxn_9 of Muxn_705 @[Interconnect.scala 473:25]
    Muxn_9.clock <= clock
    Muxn_9.reset <= reset
    Muxn_9.io.in[0] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    reg _T_14 : UInt, clock @[Interconnect.scala 477:55]
    _T_14 <= Muxn_9.io.out @[Interconnect.scala 477:55]
    io.otrackN[0] <= _T_14 @[Interconnect.scala 477:45]
    node _T_15 = bits(ConfigMem.io.out[0], 21, 19) @[Interconnect.scala 483:39]
    Muxn_9.io.config <= _T_15 @[Interconnect.scala 483:23]
    inst Muxn_10 of Muxn_706 @[Interconnect.scala 473:25]
    Muxn_10.clock <= clock
    Muxn_10.reset <= reset
    Muxn_10.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    reg _T_16 : UInt, clock @[Interconnect.scala 477:55]
    _T_16 <= Muxn_10.io.out @[Interconnect.scala 477:55]
    io.otrackE[0] <= _T_16 @[Interconnect.scala 477:45]
    node _T_17 = bits(ConfigMem.io.out[0], 24, 22) @[Interconnect.scala 483:39]
    Muxn_10.io.config <= _T_17 @[Interconnect.scala 483:23]
    inst Muxn_11 of Muxn_707 @[Interconnect.scala 473:25]
    Muxn_11.clock <= clock
    Muxn_11.reset <= reset
    Muxn_11.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[1] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[4] <= io.itrackE[0] @[Interconnect.scala 475:63]
    reg _T_18 : UInt, clock @[Interconnect.scala 477:55]
    _T_18 <= Muxn_11.io.out @[Interconnect.scala 477:55]
    io.otrackS[0] <= _T_18 @[Interconnect.scala 477:45]
    node _T_19 = bits(ConfigMem.io.out[0], 27, 25) @[Interconnect.scala 483:39]
    Muxn_11.io.config <= _T_19 @[Interconnect.scala 483:23]
    
  module ConfigMem_132 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<0>, flip cfg_data : UInt<32>, out : UInt<28>[1]}
    
    wire _T : UInt<28>[1] @[ConfigMem.scala 27:29]
    _T[0] <= UInt<28>("h00") @[ConfigMem.scala 27:29]
    reg regs : UInt<28>[1], clock with : (reset => (reset, _T)) @[ConfigMem.scala 27:21]
    node _T_1 = eq(io.cfg_addr, UInt<1>("h00")) @[ConfigMem.scala 32:38]
    node _T_2 = and(io.cfg_en, _T_1) @[ConfigMem.scala 32:22]
    when _T_2 : @[ConfigMem.scala 32:54]
      node _T_3 = bits(io.cfg_data, 27, 0) @[ConfigMem.scala 33:31]
      regs[0] <= _T_3 @[ConfigMem.scala 33:17]
      skip @[ConfigMem.scala 32:54]
    io.out[0] <= regs[0] @[ConfigMem.scala 52:45]
    
  module Muxn_708 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_709 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_710 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_711 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_712 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_713 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_714 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_715 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_716 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_717 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_718 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_719 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module GIB_52 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<12>, flip cfg_data : UInt<32>, ipinNW : UInt<32>[2], flip opinNW : UInt<32>[1], ipinNE : UInt<32>[2], flip opinNE : UInt<32>[1], ipinSE : UInt<32>[2], flip opinSE : UInt<32>[1], ipinSW : UInt<32>[2], flip opinSW : UInt<32>[1], flip itrackW : UInt<32>[1], otrackW : UInt<32>[1], flip itrackN : UInt<32>[1], otrackN : UInt<32>[1], flip itrackE : UInt<32>[1], otrackE : UInt<32>[1], flip itrackS : UInt<32>[1], otrackS : UInt<32>[1]}
    
    io.ipinNW[0] <= UInt<1>("h00") @[Interconnect.scala 426:20]
    io.ipinNW[1] <= UInt<1>("h00") @[Interconnect.scala 426:20]
    io.ipinNE[0] <= UInt<1>("h00") @[Interconnect.scala 427:20]
    io.ipinNE[1] <= UInt<1>("h00") @[Interconnect.scala 427:20]
    io.ipinSW[0] <= UInt<1>("h00") @[Interconnect.scala 428:20]
    io.ipinSW[1] <= UInt<1>("h00") @[Interconnect.scala 428:20]
    io.ipinSE[0] <= UInt<1>("h00") @[Interconnect.scala 429:20]
    io.ipinSE[1] <= UInt<1>("h00") @[Interconnect.scala 429:20]
    io.otrackW[0] <= UInt<1>("h00") @[Interconnect.scala 430:21]
    io.otrackN[0] <= UInt<1>("h00") @[Interconnect.scala 431:21]
    io.otrackE[0] <= UInt<1>("h00") @[Interconnect.scala 432:21]
    io.otrackS[0] <= UInt<1>("h00") @[Interconnect.scala 433:21]
    inst ConfigMem of ConfigMem_132 @[Interconnect.scala 463:21]
    ConfigMem.clock <= clock
    ConfigMem.reset <= reset
    node _T = bits(io.cfg_addr, 11, 2) @[Interconnect.scala 464:65]
    node _T_1 = eq(UInt<7>("h074"), _T) @[Interconnect.scala 464:50]
    node _T_2 = and(io.cfg_en, _T_1) @[Interconnect.scala 464:32]
    ConfigMem.io.cfg_en <= _T_2 @[Interconnect.scala 464:19]
    node _T_3 = bits(io.cfg_addr, 1, 0) @[Interconnect.scala 465:35]
    ConfigMem.io.cfg_addr <= _T_3 @[Interconnect.scala 465:21]
    ConfigMem.io.cfg_data <= io.cfg_data @[Interconnect.scala 466:21]
    inst Muxn of Muxn_708 @[Interconnect.scala 473:25]
    Muxn.clock <= clock
    Muxn.reset <= reset
    Muxn.io.in[0] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn.io.in[2] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNW[0] <= Muxn.io.out @[Interconnect.scala 479:45]
    node _T_4 = bits(ConfigMem.io.out[0], 1, 0) @[Interconnect.scala 483:39]
    Muxn.io.config <= _T_4 @[Interconnect.scala 483:23]
    inst Muxn_1 of Muxn_709 @[Interconnect.scala 473:25]
    Muxn_1.clock <= clock
    Muxn_1.reset <= reset
    Muxn_1.io.in[0] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[2] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNW[1] <= Muxn_1.io.out @[Interconnect.scala 479:45]
    node _T_5 = bits(ConfigMem.io.out[0], 3, 2) @[Interconnect.scala 483:39]
    Muxn_1.io.config <= _T_5 @[Interconnect.scala 483:23]
    inst Muxn_2 of Muxn_710 @[Interconnect.scala 473:25]
    Muxn_2.clock <= clock
    Muxn_2.reset <= reset
    Muxn_2.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNE[0] <= Muxn_2.io.out @[Interconnect.scala 479:45]
    node _T_6 = bits(ConfigMem.io.out[0], 5, 4) @[Interconnect.scala 483:39]
    Muxn_2.io.config <= _T_6 @[Interconnect.scala 483:23]
    inst Muxn_3 of Muxn_711 @[Interconnect.scala 473:25]
    Muxn_3.clock <= clock
    Muxn_3.reset <= reset
    Muxn_3.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNE[1] <= Muxn_3.io.out @[Interconnect.scala 479:45]
    node _T_7 = bits(ConfigMem.io.out[0], 7, 6) @[Interconnect.scala 483:39]
    Muxn_3.io.config <= _T_7 @[Interconnect.scala 483:23]
    inst Muxn_4 of Muxn_712 @[Interconnect.scala 473:25]
    Muxn_4.clock <= clock
    Muxn_4.reset <= reset
    Muxn_4.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[1] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    io.ipinSE[0] <= Muxn_4.io.out @[Interconnect.scala 479:45]
    node _T_8 = bits(ConfigMem.io.out[0], 9, 8) @[Interconnect.scala 483:39]
    Muxn_4.io.config <= _T_8 @[Interconnect.scala 483:23]
    inst Muxn_5 of Muxn_713 @[Interconnect.scala 473:25]
    Muxn_5.clock <= clock
    Muxn_5.reset <= reset
    Muxn_5.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[1] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    io.ipinSE[1] <= Muxn_5.io.out @[Interconnect.scala 479:45]
    node _T_9 = bits(ConfigMem.io.out[0], 11, 10) @[Interconnect.scala 483:39]
    Muxn_5.io.config <= _T_9 @[Interconnect.scala 483:23]
    inst Muxn_6 of Muxn_714 @[Interconnect.scala 473:25]
    Muxn_6.clock <= clock
    Muxn_6.reset <= reset
    Muxn_6.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[1] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    io.ipinSW[0] <= Muxn_6.io.out @[Interconnect.scala 479:45]
    node _T_10 = bits(ConfigMem.io.out[0], 13, 12) @[Interconnect.scala 483:39]
    Muxn_6.io.config <= _T_10 @[Interconnect.scala 483:23]
    inst Muxn_7 of Muxn_715 @[Interconnect.scala 473:25]
    Muxn_7.clock <= clock
    Muxn_7.reset <= reset
    Muxn_7.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[1] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    io.ipinSW[1] <= Muxn_7.io.out @[Interconnect.scala 479:45]
    node _T_11 = bits(ConfigMem.io.out[0], 15, 14) @[Interconnect.scala 483:39]
    Muxn_7.io.config <= _T_11 @[Interconnect.scala 483:23]
    inst Muxn_8 of Muxn_716 @[Interconnect.scala 473:25]
    Muxn_8.clock <= clock
    Muxn_8.reset <= reset
    Muxn_8.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[1] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.otrackW[0] <= Muxn_8.io.out @[Interconnect.scala 479:45]
    node _T_12 = bits(ConfigMem.io.out[0], 18, 16) @[Interconnect.scala 483:39]
    Muxn_8.io.config <= _T_12 @[Interconnect.scala 483:23]
    inst Muxn_9 of Muxn_717 @[Interconnect.scala 473:25]
    Muxn_9.clock <= clock
    Muxn_9.reset <= reset
    Muxn_9.io.in[0] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.otrackN[0] <= Muxn_9.io.out @[Interconnect.scala 479:45]
    node _T_13 = bits(ConfigMem.io.out[0], 21, 19) @[Interconnect.scala 483:39]
    Muxn_9.io.config <= _T_13 @[Interconnect.scala 483:23]
    inst Muxn_10 of Muxn_718 @[Interconnect.scala 473:25]
    Muxn_10.clock <= clock
    Muxn_10.reset <= reset
    Muxn_10.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.otrackE[0] <= Muxn_10.io.out @[Interconnect.scala 479:45]
    node _T_14 = bits(ConfigMem.io.out[0], 24, 22) @[Interconnect.scala 483:39]
    Muxn_10.io.config <= _T_14 @[Interconnect.scala 483:23]
    inst Muxn_11 of Muxn_719 @[Interconnect.scala 473:25]
    Muxn_11.clock <= clock
    Muxn_11.reset <= reset
    Muxn_11.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[1] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[4] <= io.itrackE[0] @[Interconnect.scala 475:63]
    io.otrackS[0] <= Muxn_11.io.out @[Interconnect.scala 479:45]
    node _T_15 = bits(ConfigMem.io.out[0], 27, 25) @[Interconnect.scala 483:39]
    Muxn_11.io.config <= _T_15 @[Interconnect.scala 483:23]
    
  module ConfigMem_133 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<0>, flip cfg_data : UInt<32>, out : UInt<15>[1]}
    
    wire _T : UInt<15>[1] @[ConfigMem.scala 27:29]
    _T[0] <= UInt<15>("h00") @[ConfigMem.scala 27:29]
    reg regs : UInt<15>[1], clock with : (reset => (reset, _T)) @[ConfigMem.scala 27:21]
    node _T_1 = eq(io.cfg_addr, UInt<1>("h00")) @[ConfigMem.scala 32:38]
    node _T_2 = and(io.cfg_en, _T_1) @[ConfigMem.scala 32:22]
    when _T_2 : @[ConfigMem.scala 32:54]
      node _T_3 = bits(io.cfg_data, 14, 0) @[ConfigMem.scala 33:31]
      regs[0] <= _T_3 @[ConfigMem.scala 33:17]
      skip @[ConfigMem.scala 32:54]
    io.out[0] <= regs[0] @[ConfigMem.scala 52:45]
    
  module Muxn_720 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[3], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_721 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[3], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_722 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<1>, flip in : UInt<32>[2], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    io.out <= _T_1 @[Multiplexer.scala 20:10]
    
  module Muxn_723 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<1>, flip in : UInt<32>[2], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    io.out <= _T_1 @[Multiplexer.scala 20:10]
    
  module Muxn_724 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[3], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_725 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_726 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_727 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module GIB_53 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<12>, flip cfg_data : UInt<32>, ipinNW : UInt<32>[2], flip opinNW : UInt<32>[1], ipinNE : UInt<32>[0], flip opinNE : UInt<32>[0], ipinSE : UInt<32>[0], flip opinSE : UInt<32>[0], ipinSW : UInt<32>[2], flip opinSW : UInt<32>[1], flip itrackW : UInt<32>[1], otrackW : UInt<32>[1], flip itrackN : UInt<32>[1], otrackN : UInt<32>[1], flip itrackE : UInt<32>[1], otrackE : UInt<32>[1], flip itrackS : UInt<32>[1], otrackS : UInt<32>[1]}
    
    io.ipinNW[0] <= UInt<1>("h00") @[Interconnect.scala 426:20]
    io.ipinNW[1] <= UInt<1>("h00") @[Interconnect.scala 426:20]
    io.ipinSW[0] <= UInt<1>("h00") @[Interconnect.scala 428:20]
    io.ipinSW[1] <= UInt<1>("h00") @[Interconnect.scala 428:20]
    io.otrackW[0] <= UInt<1>("h00") @[Interconnect.scala 430:21]
    io.otrackN[0] <= UInt<1>("h00") @[Interconnect.scala 431:21]
    io.otrackE[0] <= UInt<1>("h00") @[Interconnect.scala 432:21]
    io.otrackS[0] <= UInt<1>("h00") @[Interconnect.scala 433:21]
    inst ConfigMem of ConfigMem_133 @[Interconnect.scala 463:21]
    ConfigMem.clock <= clock
    ConfigMem.reset <= reset
    node _T = bits(io.cfg_addr, 11, 2) @[Interconnect.scala 464:65]
    node _T_1 = eq(UInt<7>("h075"), _T) @[Interconnect.scala 464:50]
    node _T_2 = and(io.cfg_en, _T_1) @[Interconnect.scala 464:32]
    ConfigMem.io.cfg_en <= _T_2 @[Interconnect.scala 464:19]
    node _T_3 = bits(io.cfg_addr, 1, 0) @[Interconnect.scala 465:35]
    ConfigMem.io.cfg_addr <= _T_3 @[Interconnect.scala 465:21]
    ConfigMem.io.cfg_data <= io.cfg_data @[Interconnect.scala 466:21]
    inst Muxn of Muxn_720 @[Interconnect.scala 473:25]
    Muxn.clock <= clock
    Muxn.reset <= reset
    Muxn.io.in[0] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn.io.in[1] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn.io.in[2] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNW[0] <= Muxn.io.out @[Interconnect.scala 479:45]
    node _T_4 = bits(ConfigMem.io.out[0], 1, 0) @[Interconnect.scala 483:39]
    Muxn.io.config <= _T_4 @[Interconnect.scala 483:23]
    inst Muxn_1 of Muxn_721 @[Interconnect.scala 473:25]
    Muxn_1.clock <= clock
    Muxn_1.reset <= reset
    Muxn_1.io.in[0] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[1] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[2] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNW[1] <= Muxn_1.io.out @[Interconnect.scala 479:45]
    node _T_5 = bits(ConfigMem.io.out[0], 3, 2) @[Interconnect.scala 483:39]
    Muxn_1.io.config <= _T_5 @[Interconnect.scala 483:23]
    inst Muxn_2 of Muxn_722 @[Interconnect.scala 473:25]
    Muxn_2.clock <= clock
    Muxn_2.reset <= reset
    Muxn_2.io.in[0] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[1] <= io.itrackE[0] @[Interconnect.scala 475:63]
    io.ipinSW[0] <= Muxn_2.io.out @[Interconnect.scala 479:45]
    node _T_6 = bits(ConfigMem.io.out[0], 4, 4) @[Interconnect.scala 483:39]
    Muxn_2.io.config <= _T_6 @[Interconnect.scala 483:23]
    inst Muxn_3 of Muxn_723 @[Interconnect.scala 473:25]
    Muxn_3.clock <= clock
    Muxn_3.reset <= reset
    Muxn_3.io.in[0] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[1] <= io.itrackE[0] @[Interconnect.scala 475:63]
    io.ipinSW[1] <= Muxn_3.io.out @[Interconnect.scala 479:45]
    node _T_7 = bits(ConfigMem.io.out[0], 5, 5) @[Interconnect.scala 483:39]
    Muxn_3.io.config <= _T_7 @[Interconnect.scala 483:23]
    inst Muxn_4 of Muxn_724 @[Interconnect.scala 473:25]
    Muxn_4.clock <= clock
    Muxn_4.reset <= reset
    Muxn_4.io.in[0] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[1] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[2] <= io.itrackS[0] @[Interconnect.scala 475:63]
    reg _T_8 : UInt, clock @[Interconnect.scala 477:55]
    _T_8 <= Muxn_4.io.out @[Interconnect.scala 477:55]
    io.otrackW[0] <= _T_8 @[Interconnect.scala 477:45]
    node _T_9 = bits(ConfigMem.io.out[0], 7, 6) @[Interconnect.scala 483:39]
    Muxn_4.io.config <= _T_9 @[Interconnect.scala 483:23]
    inst Muxn_5 of Muxn_725 @[Interconnect.scala 473:25]
    Muxn_5.clock <= clock
    Muxn_5.reset <= reset
    Muxn_5.io.in[0] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[1] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[2] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    reg _T_10 : UInt, clock @[Interconnect.scala 477:55]
    _T_10 <= Muxn_5.io.out @[Interconnect.scala 477:55]
    io.otrackN[0] <= _T_10 @[Interconnect.scala 477:45]
    node _T_11 = bits(ConfigMem.io.out[0], 9, 8) @[Interconnect.scala 483:39]
    Muxn_5.io.config <= _T_11 @[Interconnect.scala 483:23]
    inst Muxn_6 of Muxn_726 @[Interconnect.scala 473:25]
    Muxn_6.clock <= clock
    Muxn_6.reset <= reset
    Muxn_6.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    reg _T_12 : UInt, clock @[Interconnect.scala 477:55]
    _T_12 <= Muxn_6.io.out @[Interconnect.scala 477:55]
    io.otrackE[0] <= _T_12 @[Interconnect.scala 477:45]
    node _T_13 = bits(ConfigMem.io.out[0], 12, 10) @[Interconnect.scala 483:39]
    Muxn_6.io.config <= _T_13 @[Interconnect.scala 483:23]
    inst Muxn_7 of Muxn_727 @[Interconnect.scala 473:25]
    Muxn_7.clock <= clock
    Muxn_7.reset <= reset
    Muxn_7.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[1] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    reg _T_14 : UInt, clock @[Interconnect.scala 477:55]
    _T_14 <= Muxn_7.io.out @[Interconnect.scala 477:55]
    io.otrackS[0] <= _T_14 @[Interconnect.scala 477:45]
    node _T_15 = bits(ConfigMem.io.out[0], 14, 13) @[Interconnect.scala 483:39]
    Muxn_7.io.config <= _T_15 @[Interconnect.scala 483:23]
    
  module ConfigMem_134 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<0>, flip cfg_data : UInt<32>, out : UInt<15>[1]}
    
    wire _T : UInt<15>[1] @[ConfigMem.scala 27:29]
    _T[0] <= UInt<15>("h00") @[ConfigMem.scala 27:29]
    reg regs : UInt<15>[1], clock with : (reset => (reset, _T)) @[ConfigMem.scala 27:21]
    node _T_1 = eq(io.cfg_addr, UInt<1>("h00")) @[ConfigMem.scala 32:38]
    node _T_2 = and(io.cfg_en, _T_1) @[ConfigMem.scala 32:22]
    when _T_2 : @[ConfigMem.scala 32:54]
      node _T_3 = bits(io.cfg_data, 14, 0) @[ConfigMem.scala 33:31]
      regs[0] <= _T_3 @[ConfigMem.scala 33:17]
      skip @[ConfigMem.scala 32:54]
    io.out[0] <= regs[0] @[ConfigMem.scala 52:45]
    
  module Muxn_728 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<1>, flip in : UInt<32>[2], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    io.out <= _T_1 @[Multiplexer.scala 20:10]
    
  module Muxn_729 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<1>, flip in : UInt<32>[2], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    io.out <= _T_1 @[Multiplexer.scala 20:10]
    
  module Muxn_730 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[3], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_731 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[3], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_732 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_733 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_734 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[3], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_735 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module GIB_54 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<12>, flip cfg_data : UInt<32>, ipinNW : UInt<32>[0], flip opinNW : UInt<32>[0], ipinNE : UInt<32>[2], flip opinNE : UInt<32>[1], ipinSE : UInt<32>[2], flip opinSE : UInt<32>[1], ipinSW : UInt<32>[0], flip opinSW : UInt<32>[0], flip itrackW : UInt<32>[1], otrackW : UInt<32>[1], flip itrackN : UInt<32>[1], otrackN : UInt<32>[1], flip itrackE : UInt<32>[1], otrackE : UInt<32>[1], flip itrackS : UInt<32>[1], otrackS : UInt<32>[1]}
    
    io.ipinNE[0] <= UInt<1>("h00") @[Interconnect.scala 427:20]
    io.ipinNE[1] <= UInt<1>("h00") @[Interconnect.scala 427:20]
    io.ipinSE[0] <= UInt<1>("h00") @[Interconnect.scala 429:20]
    io.ipinSE[1] <= UInt<1>("h00") @[Interconnect.scala 429:20]
    io.otrackW[0] <= UInt<1>("h00") @[Interconnect.scala 430:21]
    io.otrackN[0] <= UInt<1>("h00") @[Interconnect.scala 431:21]
    io.otrackE[0] <= UInt<1>("h00") @[Interconnect.scala 432:21]
    io.otrackS[0] <= UInt<1>("h00") @[Interconnect.scala 433:21]
    inst ConfigMem of ConfigMem_134 @[Interconnect.scala 463:21]
    ConfigMem.clock <= clock
    ConfigMem.reset <= reset
    node _T = bits(io.cfg_addr, 11, 2) @[Interconnect.scala 464:65]
    node _T_1 = eq(UInt<7>("h07f"), _T) @[Interconnect.scala 464:50]
    node _T_2 = and(io.cfg_en, _T_1) @[Interconnect.scala 464:32]
    ConfigMem.io.cfg_en <= _T_2 @[Interconnect.scala 464:19]
    node _T_3 = bits(io.cfg_addr, 1, 0) @[Interconnect.scala 465:35]
    ConfigMem.io.cfg_addr <= _T_3 @[Interconnect.scala 465:21]
    ConfigMem.io.cfg_data <= io.cfg_data @[Interconnect.scala 466:21]
    inst Muxn of Muxn_728 @[Interconnect.scala 473:25]
    Muxn.clock <= clock
    Muxn.reset <= reset
    Muxn.io.in[0] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn.io.in[1] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNE[0] <= Muxn.io.out @[Interconnect.scala 479:45]
    node _T_4 = bits(ConfigMem.io.out[0], 0, 0) @[Interconnect.scala 483:39]
    Muxn.io.config <= _T_4 @[Interconnect.scala 483:23]
    inst Muxn_1 of Muxn_729 @[Interconnect.scala 473:25]
    Muxn_1.clock <= clock
    Muxn_1.reset <= reset
    Muxn_1.io.in[0] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[1] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNE[1] <= Muxn_1.io.out @[Interconnect.scala 479:45]
    node _T_5 = bits(ConfigMem.io.out[0], 1, 1) @[Interconnect.scala 483:39]
    Muxn_1.io.config <= _T_5 @[Interconnect.scala 483:23]
    inst Muxn_2 of Muxn_730 @[Interconnect.scala 473:25]
    Muxn_2.clock <= clock
    Muxn_2.reset <= reset
    Muxn_2.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[1] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    io.ipinSE[0] <= Muxn_2.io.out @[Interconnect.scala 479:45]
    node _T_6 = bits(ConfigMem.io.out[0], 3, 2) @[Interconnect.scala 483:39]
    Muxn_2.io.config <= _T_6 @[Interconnect.scala 483:23]
    inst Muxn_3 of Muxn_731 @[Interconnect.scala 473:25]
    Muxn_3.clock <= clock
    Muxn_3.reset <= reset
    Muxn_3.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[1] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    io.ipinSE[1] <= Muxn_3.io.out @[Interconnect.scala 479:45]
    node _T_7 = bits(ConfigMem.io.out[0], 5, 4) @[Interconnect.scala 483:39]
    Muxn_3.io.config <= _T_7 @[Interconnect.scala 483:23]
    inst Muxn_4 of Muxn_732 @[Interconnect.scala 473:25]
    Muxn_4.clock <= clock
    Muxn_4.reset <= reset
    Muxn_4.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[1] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.otrackW[0] <= Muxn_4.io.out @[Interconnect.scala 479:45]
    node _T_8 = bits(ConfigMem.io.out[0], 8, 6) @[Interconnect.scala 483:39]
    Muxn_4.io.config <= _T_8 @[Interconnect.scala 483:23]
    inst Muxn_5 of Muxn_733 @[Interconnect.scala 473:25]
    Muxn_5.clock <= clock
    Muxn_5.reset <= reset
    Muxn_5.io.in[0] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[1] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[2] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.otrackN[0] <= Muxn_5.io.out @[Interconnect.scala 479:45]
    node _T_9 = bits(ConfigMem.io.out[0], 10, 9) @[Interconnect.scala 483:39]
    Muxn_5.io.config <= _T_9 @[Interconnect.scala 483:23]
    inst Muxn_6 of Muxn_734 @[Interconnect.scala 473:25]
    Muxn_6.clock <= clock
    Muxn_6.reset <= reset
    Muxn_6.io.in[0] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[1] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[2] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.otrackE[0] <= Muxn_6.io.out @[Interconnect.scala 479:45]
    node _T_10 = bits(ConfigMem.io.out[0], 12, 11) @[Interconnect.scala 483:39]
    Muxn_6.io.config <= _T_10 @[Interconnect.scala 483:23]
    inst Muxn_7 of Muxn_735 @[Interconnect.scala 473:25]
    Muxn_7.clock <= clock
    Muxn_7.reset <= reset
    Muxn_7.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[1] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    io.otrackS[0] <= Muxn_7.io.out @[Interconnect.scala 479:45]
    node _T_11 = bits(ConfigMem.io.out[0], 14, 13) @[Interconnect.scala 483:39]
    Muxn_7.io.config <= _T_11 @[Interconnect.scala 483:23]
    
  module ConfigMem_135 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<0>, flip cfg_data : UInt<32>, out : UInt<28>[1]}
    
    wire _T : UInt<28>[1] @[ConfigMem.scala 27:29]
    _T[0] <= UInt<28>("h00") @[ConfigMem.scala 27:29]
    reg regs : UInt<28>[1], clock with : (reset => (reset, _T)) @[ConfigMem.scala 27:21]
    node _T_1 = eq(io.cfg_addr, UInt<1>("h00")) @[ConfigMem.scala 32:38]
    node _T_2 = and(io.cfg_en, _T_1) @[ConfigMem.scala 32:22]
    when _T_2 : @[ConfigMem.scala 32:54]
      node _T_3 = bits(io.cfg_data, 27, 0) @[ConfigMem.scala 33:31]
      regs[0] <= _T_3 @[ConfigMem.scala 33:17]
      skip @[ConfigMem.scala 32:54]
    io.out[0] <= regs[0] @[ConfigMem.scala 52:45]
    
  module Muxn_736 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_737 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_738 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_739 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_740 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_741 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_742 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_743 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_744 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_745 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_746 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_747 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module GIB_55 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<12>, flip cfg_data : UInt<32>, ipinNW : UInt<32>[2], flip opinNW : UInt<32>[1], ipinNE : UInt<32>[2], flip opinNE : UInt<32>[1], ipinSE : UInt<32>[2], flip opinSE : UInt<32>[1], ipinSW : UInt<32>[2], flip opinSW : UInt<32>[1], flip itrackW : UInt<32>[1], otrackW : UInt<32>[1], flip itrackN : UInt<32>[1], otrackN : UInt<32>[1], flip itrackE : UInt<32>[1], otrackE : UInt<32>[1], flip itrackS : UInt<32>[1], otrackS : UInt<32>[1]}
    
    io.ipinNW[0] <= UInt<1>("h00") @[Interconnect.scala 426:20]
    io.ipinNW[1] <= UInt<1>("h00") @[Interconnect.scala 426:20]
    io.ipinNE[0] <= UInt<1>("h00") @[Interconnect.scala 427:20]
    io.ipinNE[1] <= UInt<1>("h00") @[Interconnect.scala 427:20]
    io.ipinSW[0] <= UInt<1>("h00") @[Interconnect.scala 428:20]
    io.ipinSW[1] <= UInt<1>("h00") @[Interconnect.scala 428:20]
    io.ipinSE[0] <= UInt<1>("h00") @[Interconnect.scala 429:20]
    io.ipinSE[1] <= UInt<1>("h00") @[Interconnect.scala 429:20]
    io.otrackW[0] <= UInt<1>("h00") @[Interconnect.scala 430:21]
    io.otrackN[0] <= UInt<1>("h00") @[Interconnect.scala 431:21]
    io.otrackE[0] <= UInt<1>("h00") @[Interconnect.scala 432:21]
    io.otrackS[0] <= UInt<1>("h00") @[Interconnect.scala 433:21]
    inst ConfigMem of ConfigMem_135 @[Interconnect.scala 463:21]
    ConfigMem.clock <= clock
    ConfigMem.reset <= reset
    node _T = bits(io.cfg_addr, 11, 2) @[Interconnect.scala 464:65]
    node _T_1 = eq(UInt<8>("h080"), _T) @[Interconnect.scala 464:50]
    node _T_2 = and(io.cfg_en, _T_1) @[Interconnect.scala 464:32]
    ConfigMem.io.cfg_en <= _T_2 @[Interconnect.scala 464:19]
    node _T_3 = bits(io.cfg_addr, 1, 0) @[Interconnect.scala 465:35]
    ConfigMem.io.cfg_addr <= _T_3 @[Interconnect.scala 465:21]
    ConfigMem.io.cfg_data <= io.cfg_data @[Interconnect.scala 466:21]
    inst Muxn of Muxn_736 @[Interconnect.scala 473:25]
    Muxn.clock <= clock
    Muxn.reset <= reset
    Muxn.io.in[0] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn.io.in[2] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNW[0] <= Muxn.io.out @[Interconnect.scala 479:45]
    node _T_4 = bits(ConfigMem.io.out[0], 1, 0) @[Interconnect.scala 483:39]
    Muxn.io.config <= _T_4 @[Interconnect.scala 483:23]
    inst Muxn_1 of Muxn_737 @[Interconnect.scala 473:25]
    Muxn_1.clock <= clock
    Muxn_1.reset <= reset
    Muxn_1.io.in[0] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[2] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNW[1] <= Muxn_1.io.out @[Interconnect.scala 479:45]
    node _T_5 = bits(ConfigMem.io.out[0], 3, 2) @[Interconnect.scala 483:39]
    Muxn_1.io.config <= _T_5 @[Interconnect.scala 483:23]
    inst Muxn_2 of Muxn_738 @[Interconnect.scala 473:25]
    Muxn_2.clock <= clock
    Muxn_2.reset <= reset
    Muxn_2.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNE[0] <= Muxn_2.io.out @[Interconnect.scala 479:45]
    node _T_6 = bits(ConfigMem.io.out[0], 5, 4) @[Interconnect.scala 483:39]
    Muxn_2.io.config <= _T_6 @[Interconnect.scala 483:23]
    inst Muxn_3 of Muxn_739 @[Interconnect.scala 473:25]
    Muxn_3.clock <= clock
    Muxn_3.reset <= reset
    Muxn_3.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNE[1] <= Muxn_3.io.out @[Interconnect.scala 479:45]
    node _T_7 = bits(ConfigMem.io.out[0], 7, 6) @[Interconnect.scala 483:39]
    Muxn_3.io.config <= _T_7 @[Interconnect.scala 483:23]
    inst Muxn_4 of Muxn_740 @[Interconnect.scala 473:25]
    Muxn_4.clock <= clock
    Muxn_4.reset <= reset
    Muxn_4.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[1] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    io.ipinSE[0] <= Muxn_4.io.out @[Interconnect.scala 479:45]
    node _T_8 = bits(ConfigMem.io.out[0], 9, 8) @[Interconnect.scala 483:39]
    Muxn_4.io.config <= _T_8 @[Interconnect.scala 483:23]
    inst Muxn_5 of Muxn_741 @[Interconnect.scala 473:25]
    Muxn_5.clock <= clock
    Muxn_5.reset <= reset
    Muxn_5.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[1] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    io.ipinSE[1] <= Muxn_5.io.out @[Interconnect.scala 479:45]
    node _T_9 = bits(ConfigMem.io.out[0], 11, 10) @[Interconnect.scala 483:39]
    Muxn_5.io.config <= _T_9 @[Interconnect.scala 483:23]
    inst Muxn_6 of Muxn_742 @[Interconnect.scala 473:25]
    Muxn_6.clock <= clock
    Muxn_6.reset <= reset
    Muxn_6.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[1] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    io.ipinSW[0] <= Muxn_6.io.out @[Interconnect.scala 479:45]
    node _T_10 = bits(ConfigMem.io.out[0], 13, 12) @[Interconnect.scala 483:39]
    Muxn_6.io.config <= _T_10 @[Interconnect.scala 483:23]
    inst Muxn_7 of Muxn_743 @[Interconnect.scala 473:25]
    Muxn_7.clock <= clock
    Muxn_7.reset <= reset
    Muxn_7.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[1] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    io.ipinSW[1] <= Muxn_7.io.out @[Interconnect.scala 479:45]
    node _T_11 = bits(ConfigMem.io.out[0], 15, 14) @[Interconnect.scala 483:39]
    Muxn_7.io.config <= _T_11 @[Interconnect.scala 483:23]
    inst Muxn_8 of Muxn_744 @[Interconnect.scala 473:25]
    Muxn_8.clock <= clock
    Muxn_8.reset <= reset
    Muxn_8.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[1] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    reg _T_12 : UInt, clock @[Interconnect.scala 477:55]
    _T_12 <= Muxn_8.io.out @[Interconnect.scala 477:55]
    io.otrackW[0] <= _T_12 @[Interconnect.scala 477:45]
    node _T_13 = bits(ConfigMem.io.out[0], 18, 16) @[Interconnect.scala 483:39]
    Muxn_8.io.config <= _T_13 @[Interconnect.scala 483:23]
    inst Muxn_9 of Muxn_745 @[Interconnect.scala 473:25]
    Muxn_9.clock <= clock
    Muxn_9.reset <= reset
    Muxn_9.io.in[0] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    reg _T_14 : UInt, clock @[Interconnect.scala 477:55]
    _T_14 <= Muxn_9.io.out @[Interconnect.scala 477:55]
    io.otrackN[0] <= _T_14 @[Interconnect.scala 477:45]
    node _T_15 = bits(ConfigMem.io.out[0], 21, 19) @[Interconnect.scala 483:39]
    Muxn_9.io.config <= _T_15 @[Interconnect.scala 483:23]
    inst Muxn_10 of Muxn_746 @[Interconnect.scala 473:25]
    Muxn_10.clock <= clock
    Muxn_10.reset <= reset
    Muxn_10.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    reg _T_16 : UInt, clock @[Interconnect.scala 477:55]
    _T_16 <= Muxn_10.io.out @[Interconnect.scala 477:55]
    io.otrackE[0] <= _T_16 @[Interconnect.scala 477:45]
    node _T_17 = bits(ConfigMem.io.out[0], 24, 22) @[Interconnect.scala 483:39]
    Muxn_10.io.config <= _T_17 @[Interconnect.scala 483:23]
    inst Muxn_11 of Muxn_747 @[Interconnect.scala 473:25]
    Muxn_11.clock <= clock
    Muxn_11.reset <= reset
    Muxn_11.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[1] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[4] <= io.itrackE[0] @[Interconnect.scala 475:63]
    reg _T_18 : UInt, clock @[Interconnect.scala 477:55]
    _T_18 <= Muxn_11.io.out @[Interconnect.scala 477:55]
    io.otrackS[0] <= _T_18 @[Interconnect.scala 477:45]
    node _T_19 = bits(ConfigMem.io.out[0], 27, 25) @[Interconnect.scala 483:39]
    Muxn_11.io.config <= _T_19 @[Interconnect.scala 483:23]
    
  module ConfigMem_136 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<0>, flip cfg_data : UInt<32>, out : UInt<28>[1]}
    
    wire _T : UInt<28>[1] @[ConfigMem.scala 27:29]
    _T[0] <= UInt<28>("h00") @[ConfigMem.scala 27:29]
    reg regs : UInt<28>[1], clock with : (reset => (reset, _T)) @[ConfigMem.scala 27:21]
    node _T_1 = eq(io.cfg_addr, UInt<1>("h00")) @[ConfigMem.scala 32:38]
    node _T_2 = and(io.cfg_en, _T_1) @[ConfigMem.scala 32:22]
    when _T_2 : @[ConfigMem.scala 32:54]
      node _T_3 = bits(io.cfg_data, 27, 0) @[ConfigMem.scala 33:31]
      regs[0] <= _T_3 @[ConfigMem.scala 33:17]
      skip @[ConfigMem.scala 32:54]
    io.out[0] <= regs[0] @[ConfigMem.scala 52:45]
    
  module Muxn_748 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_749 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_750 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_751 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_752 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_753 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_754 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_755 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_756 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_757 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_758 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_759 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module GIB_56 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<12>, flip cfg_data : UInt<32>, ipinNW : UInt<32>[2], flip opinNW : UInt<32>[1], ipinNE : UInt<32>[2], flip opinNE : UInt<32>[1], ipinSE : UInt<32>[2], flip opinSE : UInt<32>[1], ipinSW : UInt<32>[2], flip opinSW : UInt<32>[1], flip itrackW : UInt<32>[1], otrackW : UInt<32>[1], flip itrackN : UInt<32>[1], otrackN : UInt<32>[1], flip itrackE : UInt<32>[1], otrackE : UInt<32>[1], flip itrackS : UInt<32>[1], otrackS : UInt<32>[1]}
    
    io.ipinNW[0] <= UInt<1>("h00") @[Interconnect.scala 426:20]
    io.ipinNW[1] <= UInt<1>("h00") @[Interconnect.scala 426:20]
    io.ipinNE[0] <= UInt<1>("h00") @[Interconnect.scala 427:20]
    io.ipinNE[1] <= UInt<1>("h00") @[Interconnect.scala 427:20]
    io.ipinSW[0] <= UInt<1>("h00") @[Interconnect.scala 428:20]
    io.ipinSW[1] <= UInt<1>("h00") @[Interconnect.scala 428:20]
    io.ipinSE[0] <= UInt<1>("h00") @[Interconnect.scala 429:20]
    io.ipinSE[1] <= UInt<1>("h00") @[Interconnect.scala 429:20]
    io.otrackW[0] <= UInt<1>("h00") @[Interconnect.scala 430:21]
    io.otrackN[0] <= UInt<1>("h00") @[Interconnect.scala 431:21]
    io.otrackE[0] <= UInt<1>("h00") @[Interconnect.scala 432:21]
    io.otrackS[0] <= UInt<1>("h00") @[Interconnect.scala 433:21]
    inst ConfigMem of ConfigMem_136 @[Interconnect.scala 463:21]
    ConfigMem.clock <= clock
    ConfigMem.reset <= reset
    node _T = bits(io.cfg_addr, 11, 2) @[Interconnect.scala 464:65]
    node _T_1 = eq(UInt<8>("h081"), _T) @[Interconnect.scala 464:50]
    node _T_2 = and(io.cfg_en, _T_1) @[Interconnect.scala 464:32]
    ConfigMem.io.cfg_en <= _T_2 @[Interconnect.scala 464:19]
    node _T_3 = bits(io.cfg_addr, 1, 0) @[Interconnect.scala 465:35]
    ConfigMem.io.cfg_addr <= _T_3 @[Interconnect.scala 465:21]
    ConfigMem.io.cfg_data <= io.cfg_data @[Interconnect.scala 466:21]
    inst Muxn of Muxn_748 @[Interconnect.scala 473:25]
    Muxn.clock <= clock
    Muxn.reset <= reset
    Muxn.io.in[0] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn.io.in[2] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNW[0] <= Muxn.io.out @[Interconnect.scala 479:45]
    node _T_4 = bits(ConfigMem.io.out[0], 1, 0) @[Interconnect.scala 483:39]
    Muxn.io.config <= _T_4 @[Interconnect.scala 483:23]
    inst Muxn_1 of Muxn_749 @[Interconnect.scala 473:25]
    Muxn_1.clock <= clock
    Muxn_1.reset <= reset
    Muxn_1.io.in[0] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[2] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNW[1] <= Muxn_1.io.out @[Interconnect.scala 479:45]
    node _T_5 = bits(ConfigMem.io.out[0], 3, 2) @[Interconnect.scala 483:39]
    Muxn_1.io.config <= _T_5 @[Interconnect.scala 483:23]
    inst Muxn_2 of Muxn_750 @[Interconnect.scala 473:25]
    Muxn_2.clock <= clock
    Muxn_2.reset <= reset
    Muxn_2.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNE[0] <= Muxn_2.io.out @[Interconnect.scala 479:45]
    node _T_6 = bits(ConfigMem.io.out[0], 5, 4) @[Interconnect.scala 483:39]
    Muxn_2.io.config <= _T_6 @[Interconnect.scala 483:23]
    inst Muxn_3 of Muxn_751 @[Interconnect.scala 473:25]
    Muxn_3.clock <= clock
    Muxn_3.reset <= reset
    Muxn_3.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNE[1] <= Muxn_3.io.out @[Interconnect.scala 479:45]
    node _T_7 = bits(ConfigMem.io.out[0], 7, 6) @[Interconnect.scala 483:39]
    Muxn_3.io.config <= _T_7 @[Interconnect.scala 483:23]
    inst Muxn_4 of Muxn_752 @[Interconnect.scala 473:25]
    Muxn_4.clock <= clock
    Muxn_4.reset <= reset
    Muxn_4.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[1] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    io.ipinSE[0] <= Muxn_4.io.out @[Interconnect.scala 479:45]
    node _T_8 = bits(ConfigMem.io.out[0], 9, 8) @[Interconnect.scala 483:39]
    Muxn_4.io.config <= _T_8 @[Interconnect.scala 483:23]
    inst Muxn_5 of Muxn_753 @[Interconnect.scala 473:25]
    Muxn_5.clock <= clock
    Muxn_5.reset <= reset
    Muxn_5.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[1] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    io.ipinSE[1] <= Muxn_5.io.out @[Interconnect.scala 479:45]
    node _T_9 = bits(ConfigMem.io.out[0], 11, 10) @[Interconnect.scala 483:39]
    Muxn_5.io.config <= _T_9 @[Interconnect.scala 483:23]
    inst Muxn_6 of Muxn_754 @[Interconnect.scala 473:25]
    Muxn_6.clock <= clock
    Muxn_6.reset <= reset
    Muxn_6.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[1] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    io.ipinSW[0] <= Muxn_6.io.out @[Interconnect.scala 479:45]
    node _T_10 = bits(ConfigMem.io.out[0], 13, 12) @[Interconnect.scala 483:39]
    Muxn_6.io.config <= _T_10 @[Interconnect.scala 483:23]
    inst Muxn_7 of Muxn_755 @[Interconnect.scala 473:25]
    Muxn_7.clock <= clock
    Muxn_7.reset <= reset
    Muxn_7.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[1] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    io.ipinSW[1] <= Muxn_7.io.out @[Interconnect.scala 479:45]
    node _T_11 = bits(ConfigMem.io.out[0], 15, 14) @[Interconnect.scala 483:39]
    Muxn_7.io.config <= _T_11 @[Interconnect.scala 483:23]
    inst Muxn_8 of Muxn_756 @[Interconnect.scala 473:25]
    Muxn_8.clock <= clock
    Muxn_8.reset <= reset
    Muxn_8.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[1] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.otrackW[0] <= Muxn_8.io.out @[Interconnect.scala 479:45]
    node _T_12 = bits(ConfigMem.io.out[0], 18, 16) @[Interconnect.scala 483:39]
    Muxn_8.io.config <= _T_12 @[Interconnect.scala 483:23]
    inst Muxn_9 of Muxn_757 @[Interconnect.scala 473:25]
    Muxn_9.clock <= clock
    Muxn_9.reset <= reset
    Muxn_9.io.in[0] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.otrackN[0] <= Muxn_9.io.out @[Interconnect.scala 479:45]
    node _T_13 = bits(ConfigMem.io.out[0], 21, 19) @[Interconnect.scala 483:39]
    Muxn_9.io.config <= _T_13 @[Interconnect.scala 483:23]
    inst Muxn_10 of Muxn_758 @[Interconnect.scala 473:25]
    Muxn_10.clock <= clock
    Muxn_10.reset <= reset
    Muxn_10.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.otrackE[0] <= Muxn_10.io.out @[Interconnect.scala 479:45]
    node _T_14 = bits(ConfigMem.io.out[0], 24, 22) @[Interconnect.scala 483:39]
    Muxn_10.io.config <= _T_14 @[Interconnect.scala 483:23]
    inst Muxn_11 of Muxn_759 @[Interconnect.scala 473:25]
    Muxn_11.clock <= clock
    Muxn_11.reset <= reset
    Muxn_11.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[1] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[4] <= io.itrackE[0] @[Interconnect.scala 475:63]
    io.otrackS[0] <= Muxn_11.io.out @[Interconnect.scala 479:45]
    node _T_15 = bits(ConfigMem.io.out[0], 27, 25) @[Interconnect.scala 483:39]
    Muxn_11.io.config <= _T_15 @[Interconnect.scala 483:23]
    
  module ConfigMem_137 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<0>, flip cfg_data : UInt<32>, out : UInt<28>[1]}
    
    wire _T : UInt<28>[1] @[ConfigMem.scala 27:29]
    _T[0] <= UInt<28>("h00") @[ConfigMem.scala 27:29]
    reg regs : UInt<28>[1], clock with : (reset => (reset, _T)) @[ConfigMem.scala 27:21]
    node _T_1 = eq(io.cfg_addr, UInt<1>("h00")) @[ConfigMem.scala 32:38]
    node _T_2 = and(io.cfg_en, _T_1) @[ConfigMem.scala 32:22]
    when _T_2 : @[ConfigMem.scala 32:54]
      node _T_3 = bits(io.cfg_data, 27, 0) @[ConfigMem.scala 33:31]
      regs[0] <= _T_3 @[ConfigMem.scala 33:17]
      skip @[ConfigMem.scala 32:54]
    io.out[0] <= regs[0] @[ConfigMem.scala 52:45]
    
  module Muxn_760 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_761 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_762 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_763 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_764 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_765 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_766 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_767 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_768 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_769 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_770 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_771 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module GIB_57 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<12>, flip cfg_data : UInt<32>, ipinNW : UInt<32>[2], flip opinNW : UInt<32>[1], ipinNE : UInt<32>[2], flip opinNE : UInt<32>[1], ipinSE : UInt<32>[2], flip opinSE : UInt<32>[1], ipinSW : UInt<32>[2], flip opinSW : UInt<32>[1], flip itrackW : UInt<32>[1], otrackW : UInt<32>[1], flip itrackN : UInt<32>[1], otrackN : UInt<32>[1], flip itrackE : UInt<32>[1], otrackE : UInt<32>[1], flip itrackS : UInt<32>[1], otrackS : UInt<32>[1]}
    
    io.ipinNW[0] <= UInt<1>("h00") @[Interconnect.scala 426:20]
    io.ipinNW[1] <= UInt<1>("h00") @[Interconnect.scala 426:20]
    io.ipinNE[0] <= UInt<1>("h00") @[Interconnect.scala 427:20]
    io.ipinNE[1] <= UInt<1>("h00") @[Interconnect.scala 427:20]
    io.ipinSW[0] <= UInt<1>("h00") @[Interconnect.scala 428:20]
    io.ipinSW[1] <= UInt<1>("h00") @[Interconnect.scala 428:20]
    io.ipinSE[0] <= UInt<1>("h00") @[Interconnect.scala 429:20]
    io.ipinSE[1] <= UInt<1>("h00") @[Interconnect.scala 429:20]
    io.otrackW[0] <= UInt<1>("h00") @[Interconnect.scala 430:21]
    io.otrackN[0] <= UInt<1>("h00") @[Interconnect.scala 431:21]
    io.otrackE[0] <= UInt<1>("h00") @[Interconnect.scala 432:21]
    io.otrackS[0] <= UInt<1>("h00") @[Interconnect.scala 433:21]
    inst ConfigMem of ConfigMem_137 @[Interconnect.scala 463:21]
    ConfigMem.clock <= clock
    ConfigMem.reset <= reset
    node _T = bits(io.cfg_addr, 11, 2) @[Interconnect.scala 464:65]
    node _T_1 = eq(UInt<8>("h082"), _T) @[Interconnect.scala 464:50]
    node _T_2 = and(io.cfg_en, _T_1) @[Interconnect.scala 464:32]
    ConfigMem.io.cfg_en <= _T_2 @[Interconnect.scala 464:19]
    node _T_3 = bits(io.cfg_addr, 1, 0) @[Interconnect.scala 465:35]
    ConfigMem.io.cfg_addr <= _T_3 @[Interconnect.scala 465:21]
    ConfigMem.io.cfg_data <= io.cfg_data @[Interconnect.scala 466:21]
    inst Muxn of Muxn_760 @[Interconnect.scala 473:25]
    Muxn.clock <= clock
    Muxn.reset <= reset
    Muxn.io.in[0] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn.io.in[2] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNW[0] <= Muxn.io.out @[Interconnect.scala 479:45]
    node _T_4 = bits(ConfigMem.io.out[0], 1, 0) @[Interconnect.scala 483:39]
    Muxn.io.config <= _T_4 @[Interconnect.scala 483:23]
    inst Muxn_1 of Muxn_761 @[Interconnect.scala 473:25]
    Muxn_1.clock <= clock
    Muxn_1.reset <= reset
    Muxn_1.io.in[0] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[2] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNW[1] <= Muxn_1.io.out @[Interconnect.scala 479:45]
    node _T_5 = bits(ConfigMem.io.out[0], 3, 2) @[Interconnect.scala 483:39]
    Muxn_1.io.config <= _T_5 @[Interconnect.scala 483:23]
    inst Muxn_2 of Muxn_762 @[Interconnect.scala 473:25]
    Muxn_2.clock <= clock
    Muxn_2.reset <= reset
    Muxn_2.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNE[0] <= Muxn_2.io.out @[Interconnect.scala 479:45]
    node _T_6 = bits(ConfigMem.io.out[0], 5, 4) @[Interconnect.scala 483:39]
    Muxn_2.io.config <= _T_6 @[Interconnect.scala 483:23]
    inst Muxn_3 of Muxn_763 @[Interconnect.scala 473:25]
    Muxn_3.clock <= clock
    Muxn_3.reset <= reset
    Muxn_3.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNE[1] <= Muxn_3.io.out @[Interconnect.scala 479:45]
    node _T_7 = bits(ConfigMem.io.out[0], 7, 6) @[Interconnect.scala 483:39]
    Muxn_3.io.config <= _T_7 @[Interconnect.scala 483:23]
    inst Muxn_4 of Muxn_764 @[Interconnect.scala 473:25]
    Muxn_4.clock <= clock
    Muxn_4.reset <= reset
    Muxn_4.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[1] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    io.ipinSE[0] <= Muxn_4.io.out @[Interconnect.scala 479:45]
    node _T_8 = bits(ConfigMem.io.out[0], 9, 8) @[Interconnect.scala 483:39]
    Muxn_4.io.config <= _T_8 @[Interconnect.scala 483:23]
    inst Muxn_5 of Muxn_765 @[Interconnect.scala 473:25]
    Muxn_5.clock <= clock
    Muxn_5.reset <= reset
    Muxn_5.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[1] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    io.ipinSE[1] <= Muxn_5.io.out @[Interconnect.scala 479:45]
    node _T_9 = bits(ConfigMem.io.out[0], 11, 10) @[Interconnect.scala 483:39]
    Muxn_5.io.config <= _T_9 @[Interconnect.scala 483:23]
    inst Muxn_6 of Muxn_766 @[Interconnect.scala 473:25]
    Muxn_6.clock <= clock
    Muxn_6.reset <= reset
    Muxn_6.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[1] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    io.ipinSW[0] <= Muxn_6.io.out @[Interconnect.scala 479:45]
    node _T_10 = bits(ConfigMem.io.out[0], 13, 12) @[Interconnect.scala 483:39]
    Muxn_6.io.config <= _T_10 @[Interconnect.scala 483:23]
    inst Muxn_7 of Muxn_767 @[Interconnect.scala 473:25]
    Muxn_7.clock <= clock
    Muxn_7.reset <= reset
    Muxn_7.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[1] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    io.ipinSW[1] <= Muxn_7.io.out @[Interconnect.scala 479:45]
    node _T_11 = bits(ConfigMem.io.out[0], 15, 14) @[Interconnect.scala 483:39]
    Muxn_7.io.config <= _T_11 @[Interconnect.scala 483:23]
    inst Muxn_8 of Muxn_768 @[Interconnect.scala 473:25]
    Muxn_8.clock <= clock
    Muxn_8.reset <= reset
    Muxn_8.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[1] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    reg _T_12 : UInt, clock @[Interconnect.scala 477:55]
    _T_12 <= Muxn_8.io.out @[Interconnect.scala 477:55]
    io.otrackW[0] <= _T_12 @[Interconnect.scala 477:45]
    node _T_13 = bits(ConfigMem.io.out[0], 18, 16) @[Interconnect.scala 483:39]
    Muxn_8.io.config <= _T_13 @[Interconnect.scala 483:23]
    inst Muxn_9 of Muxn_769 @[Interconnect.scala 473:25]
    Muxn_9.clock <= clock
    Muxn_9.reset <= reset
    Muxn_9.io.in[0] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    reg _T_14 : UInt, clock @[Interconnect.scala 477:55]
    _T_14 <= Muxn_9.io.out @[Interconnect.scala 477:55]
    io.otrackN[0] <= _T_14 @[Interconnect.scala 477:45]
    node _T_15 = bits(ConfigMem.io.out[0], 21, 19) @[Interconnect.scala 483:39]
    Muxn_9.io.config <= _T_15 @[Interconnect.scala 483:23]
    inst Muxn_10 of Muxn_770 @[Interconnect.scala 473:25]
    Muxn_10.clock <= clock
    Muxn_10.reset <= reset
    Muxn_10.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    reg _T_16 : UInt, clock @[Interconnect.scala 477:55]
    _T_16 <= Muxn_10.io.out @[Interconnect.scala 477:55]
    io.otrackE[0] <= _T_16 @[Interconnect.scala 477:45]
    node _T_17 = bits(ConfigMem.io.out[0], 24, 22) @[Interconnect.scala 483:39]
    Muxn_10.io.config <= _T_17 @[Interconnect.scala 483:23]
    inst Muxn_11 of Muxn_771 @[Interconnect.scala 473:25]
    Muxn_11.clock <= clock
    Muxn_11.reset <= reset
    Muxn_11.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[1] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[4] <= io.itrackE[0] @[Interconnect.scala 475:63]
    reg _T_18 : UInt, clock @[Interconnect.scala 477:55]
    _T_18 <= Muxn_11.io.out @[Interconnect.scala 477:55]
    io.otrackS[0] <= _T_18 @[Interconnect.scala 477:45]
    node _T_19 = bits(ConfigMem.io.out[0], 27, 25) @[Interconnect.scala 483:39]
    Muxn_11.io.config <= _T_19 @[Interconnect.scala 483:23]
    
  module ConfigMem_138 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<0>, flip cfg_data : UInt<32>, out : UInt<28>[1]}
    
    wire _T : UInt<28>[1] @[ConfigMem.scala 27:29]
    _T[0] <= UInt<28>("h00") @[ConfigMem.scala 27:29]
    reg regs : UInt<28>[1], clock with : (reset => (reset, _T)) @[ConfigMem.scala 27:21]
    node _T_1 = eq(io.cfg_addr, UInt<1>("h00")) @[ConfigMem.scala 32:38]
    node _T_2 = and(io.cfg_en, _T_1) @[ConfigMem.scala 32:22]
    when _T_2 : @[ConfigMem.scala 32:54]
      node _T_3 = bits(io.cfg_data, 27, 0) @[ConfigMem.scala 33:31]
      regs[0] <= _T_3 @[ConfigMem.scala 33:17]
      skip @[ConfigMem.scala 32:54]
    io.out[0] <= regs[0] @[ConfigMem.scala 52:45]
    
  module Muxn_772 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_773 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_774 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_775 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_776 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_777 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_778 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_779 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_780 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_781 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_782 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_783 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module GIB_58 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<12>, flip cfg_data : UInt<32>, ipinNW : UInt<32>[2], flip opinNW : UInt<32>[1], ipinNE : UInt<32>[2], flip opinNE : UInt<32>[1], ipinSE : UInt<32>[2], flip opinSE : UInt<32>[1], ipinSW : UInt<32>[2], flip opinSW : UInt<32>[1], flip itrackW : UInt<32>[1], otrackW : UInt<32>[1], flip itrackN : UInt<32>[1], otrackN : UInt<32>[1], flip itrackE : UInt<32>[1], otrackE : UInt<32>[1], flip itrackS : UInt<32>[1], otrackS : UInt<32>[1]}
    
    io.ipinNW[0] <= UInt<1>("h00") @[Interconnect.scala 426:20]
    io.ipinNW[1] <= UInt<1>("h00") @[Interconnect.scala 426:20]
    io.ipinNE[0] <= UInt<1>("h00") @[Interconnect.scala 427:20]
    io.ipinNE[1] <= UInt<1>("h00") @[Interconnect.scala 427:20]
    io.ipinSW[0] <= UInt<1>("h00") @[Interconnect.scala 428:20]
    io.ipinSW[1] <= UInt<1>("h00") @[Interconnect.scala 428:20]
    io.ipinSE[0] <= UInt<1>("h00") @[Interconnect.scala 429:20]
    io.ipinSE[1] <= UInt<1>("h00") @[Interconnect.scala 429:20]
    io.otrackW[0] <= UInt<1>("h00") @[Interconnect.scala 430:21]
    io.otrackN[0] <= UInt<1>("h00") @[Interconnect.scala 431:21]
    io.otrackE[0] <= UInt<1>("h00") @[Interconnect.scala 432:21]
    io.otrackS[0] <= UInt<1>("h00") @[Interconnect.scala 433:21]
    inst ConfigMem of ConfigMem_138 @[Interconnect.scala 463:21]
    ConfigMem.clock <= clock
    ConfigMem.reset <= reset
    node _T = bits(io.cfg_addr, 11, 2) @[Interconnect.scala 464:65]
    node _T_1 = eq(UInt<8>("h083"), _T) @[Interconnect.scala 464:50]
    node _T_2 = and(io.cfg_en, _T_1) @[Interconnect.scala 464:32]
    ConfigMem.io.cfg_en <= _T_2 @[Interconnect.scala 464:19]
    node _T_3 = bits(io.cfg_addr, 1, 0) @[Interconnect.scala 465:35]
    ConfigMem.io.cfg_addr <= _T_3 @[Interconnect.scala 465:21]
    ConfigMem.io.cfg_data <= io.cfg_data @[Interconnect.scala 466:21]
    inst Muxn of Muxn_772 @[Interconnect.scala 473:25]
    Muxn.clock <= clock
    Muxn.reset <= reset
    Muxn.io.in[0] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn.io.in[2] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNW[0] <= Muxn.io.out @[Interconnect.scala 479:45]
    node _T_4 = bits(ConfigMem.io.out[0], 1, 0) @[Interconnect.scala 483:39]
    Muxn.io.config <= _T_4 @[Interconnect.scala 483:23]
    inst Muxn_1 of Muxn_773 @[Interconnect.scala 473:25]
    Muxn_1.clock <= clock
    Muxn_1.reset <= reset
    Muxn_1.io.in[0] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[2] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNW[1] <= Muxn_1.io.out @[Interconnect.scala 479:45]
    node _T_5 = bits(ConfigMem.io.out[0], 3, 2) @[Interconnect.scala 483:39]
    Muxn_1.io.config <= _T_5 @[Interconnect.scala 483:23]
    inst Muxn_2 of Muxn_774 @[Interconnect.scala 473:25]
    Muxn_2.clock <= clock
    Muxn_2.reset <= reset
    Muxn_2.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNE[0] <= Muxn_2.io.out @[Interconnect.scala 479:45]
    node _T_6 = bits(ConfigMem.io.out[0], 5, 4) @[Interconnect.scala 483:39]
    Muxn_2.io.config <= _T_6 @[Interconnect.scala 483:23]
    inst Muxn_3 of Muxn_775 @[Interconnect.scala 473:25]
    Muxn_3.clock <= clock
    Muxn_3.reset <= reset
    Muxn_3.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNE[1] <= Muxn_3.io.out @[Interconnect.scala 479:45]
    node _T_7 = bits(ConfigMem.io.out[0], 7, 6) @[Interconnect.scala 483:39]
    Muxn_3.io.config <= _T_7 @[Interconnect.scala 483:23]
    inst Muxn_4 of Muxn_776 @[Interconnect.scala 473:25]
    Muxn_4.clock <= clock
    Muxn_4.reset <= reset
    Muxn_4.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[1] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    io.ipinSE[0] <= Muxn_4.io.out @[Interconnect.scala 479:45]
    node _T_8 = bits(ConfigMem.io.out[0], 9, 8) @[Interconnect.scala 483:39]
    Muxn_4.io.config <= _T_8 @[Interconnect.scala 483:23]
    inst Muxn_5 of Muxn_777 @[Interconnect.scala 473:25]
    Muxn_5.clock <= clock
    Muxn_5.reset <= reset
    Muxn_5.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[1] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    io.ipinSE[1] <= Muxn_5.io.out @[Interconnect.scala 479:45]
    node _T_9 = bits(ConfigMem.io.out[0], 11, 10) @[Interconnect.scala 483:39]
    Muxn_5.io.config <= _T_9 @[Interconnect.scala 483:23]
    inst Muxn_6 of Muxn_778 @[Interconnect.scala 473:25]
    Muxn_6.clock <= clock
    Muxn_6.reset <= reset
    Muxn_6.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[1] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    io.ipinSW[0] <= Muxn_6.io.out @[Interconnect.scala 479:45]
    node _T_10 = bits(ConfigMem.io.out[0], 13, 12) @[Interconnect.scala 483:39]
    Muxn_6.io.config <= _T_10 @[Interconnect.scala 483:23]
    inst Muxn_7 of Muxn_779 @[Interconnect.scala 473:25]
    Muxn_7.clock <= clock
    Muxn_7.reset <= reset
    Muxn_7.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[1] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    io.ipinSW[1] <= Muxn_7.io.out @[Interconnect.scala 479:45]
    node _T_11 = bits(ConfigMem.io.out[0], 15, 14) @[Interconnect.scala 483:39]
    Muxn_7.io.config <= _T_11 @[Interconnect.scala 483:23]
    inst Muxn_8 of Muxn_780 @[Interconnect.scala 473:25]
    Muxn_8.clock <= clock
    Muxn_8.reset <= reset
    Muxn_8.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[1] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.otrackW[0] <= Muxn_8.io.out @[Interconnect.scala 479:45]
    node _T_12 = bits(ConfigMem.io.out[0], 18, 16) @[Interconnect.scala 483:39]
    Muxn_8.io.config <= _T_12 @[Interconnect.scala 483:23]
    inst Muxn_9 of Muxn_781 @[Interconnect.scala 473:25]
    Muxn_9.clock <= clock
    Muxn_9.reset <= reset
    Muxn_9.io.in[0] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.otrackN[0] <= Muxn_9.io.out @[Interconnect.scala 479:45]
    node _T_13 = bits(ConfigMem.io.out[0], 21, 19) @[Interconnect.scala 483:39]
    Muxn_9.io.config <= _T_13 @[Interconnect.scala 483:23]
    inst Muxn_10 of Muxn_782 @[Interconnect.scala 473:25]
    Muxn_10.clock <= clock
    Muxn_10.reset <= reset
    Muxn_10.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.otrackE[0] <= Muxn_10.io.out @[Interconnect.scala 479:45]
    node _T_14 = bits(ConfigMem.io.out[0], 24, 22) @[Interconnect.scala 483:39]
    Muxn_10.io.config <= _T_14 @[Interconnect.scala 483:23]
    inst Muxn_11 of Muxn_783 @[Interconnect.scala 473:25]
    Muxn_11.clock <= clock
    Muxn_11.reset <= reset
    Muxn_11.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[1] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[4] <= io.itrackE[0] @[Interconnect.scala 475:63]
    io.otrackS[0] <= Muxn_11.io.out @[Interconnect.scala 479:45]
    node _T_15 = bits(ConfigMem.io.out[0], 27, 25) @[Interconnect.scala 483:39]
    Muxn_11.io.config <= _T_15 @[Interconnect.scala 483:23]
    
  module ConfigMem_139 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<0>, flip cfg_data : UInt<32>, out : UInt<28>[1]}
    
    wire _T : UInt<28>[1] @[ConfigMem.scala 27:29]
    _T[0] <= UInt<28>("h00") @[ConfigMem.scala 27:29]
    reg regs : UInt<28>[1], clock with : (reset => (reset, _T)) @[ConfigMem.scala 27:21]
    node _T_1 = eq(io.cfg_addr, UInt<1>("h00")) @[ConfigMem.scala 32:38]
    node _T_2 = and(io.cfg_en, _T_1) @[ConfigMem.scala 32:22]
    when _T_2 : @[ConfigMem.scala 32:54]
      node _T_3 = bits(io.cfg_data, 27, 0) @[ConfigMem.scala 33:31]
      regs[0] <= _T_3 @[ConfigMem.scala 33:17]
      skip @[ConfigMem.scala 32:54]
    io.out[0] <= regs[0] @[ConfigMem.scala 52:45]
    
  module Muxn_784 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_785 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_786 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_787 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_788 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_789 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_790 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_791 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_792 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_793 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_794 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_795 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module GIB_59 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<12>, flip cfg_data : UInt<32>, ipinNW : UInt<32>[2], flip opinNW : UInt<32>[1], ipinNE : UInt<32>[2], flip opinNE : UInt<32>[1], ipinSE : UInt<32>[2], flip opinSE : UInt<32>[1], ipinSW : UInt<32>[2], flip opinSW : UInt<32>[1], flip itrackW : UInt<32>[1], otrackW : UInt<32>[1], flip itrackN : UInt<32>[1], otrackN : UInt<32>[1], flip itrackE : UInt<32>[1], otrackE : UInt<32>[1], flip itrackS : UInt<32>[1], otrackS : UInt<32>[1]}
    
    io.ipinNW[0] <= UInt<1>("h00") @[Interconnect.scala 426:20]
    io.ipinNW[1] <= UInt<1>("h00") @[Interconnect.scala 426:20]
    io.ipinNE[0] <= UInt<1>("h00") @[Interconnect.scala 427:20]
    io.ipinNE[1] <= UInt<1>("h00") @[Interconnect.scala 427:20]
    io.ipinSW[0] <= UInt<1>("h00") @[Interconnect.scala 428:20]
    io.ipinSW[1] <= UInt<1>("h00") @[Interconnect.scala 428:20]
    io.ipinSE[0] <= UInt<1>("h00") @[Interconnect.scala 429:20]
    io.ipinSE[1] <= UInt<1>("h00") @[Interconnect.scala 429:20]
    io.otrackW[0] <= UInt<1>("h00") @[Interconnect.scala 430:21]
    io.otrackN[0] <= UInt<1>("h00") @[Interconnect.scala 431:21]
    io.otrackE[0] <= UInt<1>("h00") @[Interconnect.scala 432:21]
    io.otrackS[0] <= UInt<1>("h00") @[Interconnect.scala 433:21]
    inst ConfigMem of ConfigMem_139 @[Interconnect.scala 463:21]
    ConfigMem.clock <= clock
    ConfigMem.reset <= reset
    node _T = bits(io.cfg_addr, 11, 2) @[Interconnect.scala 464:65]
    node _T_1 = eq(UInt<8>("h084"), _T) @[Interconnect.scala 464:50]
    node _T_2 = and(io.cfg_en, _T_1) @[Interconnect.scala 464:32]
    ConfigMem.io.cfg_en <= _T_2 @[Interconnect.scala 464:19]
    node _T_3 = bits(io.cfg_addr, 1, 0) @[Interconnect.scala 465:35]
    ConfigMem.io.cfg_addr <= _T_3 @[Interconnect.scala 465:21]
    ConfigMem.io.cfg_data <= io.cfg_data @[Interconnect.scala 466:21]
    inst Muxn of Muxn_784 @[Interconnect.scala 473:25]
    Muxn.clock <= clock
    Muxn.reset <= reset
    Muxn.io.in[0] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn.io.in[2] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNW[0] <= Muxn.io.out @[Interconnect.scala 479:45]
    node _T_4 = bits(ConfigMem.io.out[0], 1, 0) @[Interconnect.scala 483:39]
    Muxn.io.config <= _T_4 @[Interconnect.scala 483:23]
    inst Muxn_1 of Muxn_785 @[Interconnect.scala 473:25]
    Muxn_1.clock <= clock
    Muxn_1.reset <= reset
    Muxn_1.io.in[0] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[2] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNW[1] <= Muxn_1.io.out @[Interconnect.scala 479:45]
    node _T_5 = bits(ConfigMem.io.out[0], 3, 2) @[Interconnect.scala 483:39]
    Muxn_1.io.config <= _T_5 @[Interconnect.scala 483:23]
    inst Muxn_2 of Muxn_786 @[Interconnect.scala 473:25]
    Muxn_2.clock <= clock
    Muxn_2.reset <= reset
    Muxn_2.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNE[0] <= Muxn_2.io.out @[Interconnect.scala 479:45]
    node _T_6 = bits(ConfigMem.io.out[0], 5, 4) @[Interconnect.scala 483:39]
    Muxn_2.io.config <= _T_6 @[Interconnect.scala 483:23]
    inst Muxn_3 of Muxn_787 @[Interconnect.scala 473:25]
    Muxn_3.clock <= clock
    Muxn_3.reset <= reset
    Muxn_3.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNE[1] <= Muxn_3.io.out @[Interconnect.scala 479:45]
    node _T_7 = bits(ConfigMem.io.out[0], 7, 6) @[Interconnect.scala 483:39]
    Muxn_3.io.config <= _T_7 @[Interconnect.scala 483:23]
    inst Muxn_4 of Muxn_788 @[Interconnect.scala 473:25]
    Muxn_4.clock <= clock
    Muxn_4.reset <= reset
    Muxn_4.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[1] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    io.ipinSE[0] <= Muxn_4.io.out @[Interconnect.scala 479:45]
    node _T_8 = bits(ConfigMem.io.out[0], 9, 8) @[Interconnect.scala 483:39]
    Muxn_4.io.config <= _T_8 @[Interconnect.scala 483:23]
    inst Muxn_5 of Muxn_789 @[Interconnect.scala 473:25]
    Muxn_5.clock <= clock
    Muxn_5.reset <= reset
    Muxn_5.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[1] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    io.ipinSE[1] <= Muxn_5.io.out @[Interconnect.scala 479:45]
    node _T_9 = bits(ConfigMem.io.out[0], 11, 10) @[Interconnect.scala 483:39]
    Muxn_5.io.config <= _T_9 @[Interconnect.scala 483:23]
    inst Muxn_6 of Muxn_790 @[Interconnect.scala 473:25]
    Muxn_6.clock <= clock
    Muxn_6.reset <= reset
    Muxn_6.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[1] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    io.ipinSW[0] <= Muxn_6.io.out @[Interconnect.scala 479:45]
    node _T_10 = bits(ConfigMem.io.out[0], 13, 12) @[Interconnect.scala 483:39]
    Muxn_6.io.config <= _T_10 @[Interconnect.scala 483:23]
    inst Muxn_7 of Muxn_791 @[Interconnect.scala 473:25]
    Muxn_7.clock <= clock
    Muxn_7.reset <= reset
    Muxn_7.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[1] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    io.ipinSW[1] <= Muxn_7.io.out @[Interconnect.scala 479:45]
    node _T_11 = bits(ConfigMem.io.out[0], 15, 14) @[Interconnect.scala 483:39]
    Muxn_7.io.config <= _T_11 @[Interconnect.scala 483:23]
    inst Muxn_8 of Muxn_792 @[Interconnect.scala 473:25]
    Muxn_8.clock <= clock
    Muxn_8.reset <= reset
    Muxn_8.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[1] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    reg _T_12 : UInt, clock @[Interconnect.scala 477:55]
    _T_12 <= Muxn_8.io.out @[Interconnect.scala 477:55]
    io.otrackW[0] <= _T_12 @[Interconnect.scala 477:45]
    node _T_13 = bits(ConfigMem.io.out[0], 18, 16) @[Interconnect.scala 483:39]
    Muxn_8.io.config <= _T_13 @[Interconnect.scala 483:23]
    inst Muxn_9 of Muxn_793 @[Interconnect.scala 473:25]
    Muxn_9.clock <= clock
    Muxn_9.reset <= reset
    Muxn_9.io.in[0] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    reg _T_14 : UInt, clock @[Interconnect.scala 477:55]
    _T_14 <= Muxn_9.io.out @[Interconnect.scala 477:55]
    io.otrackN[0] <= _T_14 @[Interconnect.scala 477:45]
    node _T_15 = bits(ConfigMem.io.out[0], 21, 19) @[Interconnect.scala 483:39]
    Muxn_9.io.config <= _T_15 @[Interconnect.scala 483:23]
    inst Muxn_10 of Muxn_794 @[Interconnect.scala 473:25]
    Muxn_10.clock <= clock
    Muxn_10.reset <= reset
    Muxn_10.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    reg _T_16 : UInt, clock @[Interconnect.scala 477:55]
    _T_16 <= Muxn_10.io.out @[Interconnect.scala 477:55]
    io.otrackE[0] <= _T_16 @[Interconnect.scala 477:45]
    node _T_17 = bits(ConfigMem.io.out[0], 24, 22) @[Interconnect.scala 483:39]
    Muxn_10.io.config <= _T_17 @[Interconnect.scala 483:23]
    inst Muxn_11 of Muxn_795 @[Interconnect.scala 473:25]
    Muxn_11.clock <= clock
    Muxn_11.reset <= reset
    Muxn_11.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[1] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[4] <= io.itrackE[0] @[Interconnect.scala 475:63]
    reg _T_18 : UInt, clock @[Interconnect.scala 477:55]
    _T_18 <= Muxn_11.io.out @[Interconnect.scala 477:55]
    io.otrackS[0] <= _T_18 @[Interconnect.scala 477:45]
    node _T_19 = bits(ConfigMem.io.out[0], 27, 25) @[Interconnect.scala 483:39]
    Muxn_11.io.config <= _T_19 @[Interconnect.scala 483:23]
    
  module ConfigMem_140 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<0>, flip cfg_data : UInt<32>, out : UInt<28>[1]}
    
    wire _T : UInt<28>[1] @[ConfigMem.scala 27:29]
    _T[0] <= UInt<28>("h00") @[ConfigMem.scala 27:29]
    reg regs : UInt<28>[1], clock with : (reset => (reset, _T)) @[ConfigMem.scala 27:21]
    node _T_1 = eq(io.cfg_addr, UInt<1>("h00")) @[ConfigMem.scala 32:38]
    node _T_2 = and(io.cfg_en, _T_1) @[ConfigMem.scala 32:22]
    when _T_2 : @[ConfigMem.scala 32:54]
      node _T_3 = bits(io.cfg_data, 27, 0) @[ConfigMem.scala 33:31]
      regs[0] <= _T_3 @[ConfigMem.scala 33:17]
      skip @[ConfigMem.scala 32:54]
    io.out[0] <= regs[0] @[ConfigMem.scala 52:45]
    
  module Muxn_796 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_797 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_798 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_799 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_800 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_801 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_802 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_803 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_804 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_805 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_806 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_807 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module GIB_60 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<12>, flip cfg_data : UInt<32>, ipinNW : UInt<32>[2], flip opinNW : UInt<32>[1], ipinNE : UInt<32>[2], flip opinNE : UInt<32>[1], ipinSE : UInt<32>[2], flip opinSE : UInt<32>[1], ipinSW : UInt<32>[2], flip opinSW : UInt<32>[1], flip itrackW : UInt<32>[1], otrackW : UInt<32>[1], flip itrackN : UInt<32>[1], otrackN : UInt<32>[1], flip itrackE : UInt<32>[1], otrackE : UInt<32>[1], flip itrackS : UInt<32>[1], otrackS : UInt<32>[1]}
    
    io.ipinNW[0] <= UInt<1>("h00") @[Interconnect.scala 426:20]
    io.ipinNW[1] <= UInt<1>("h00") @[Interconnect.scala 426:20]
    io.ipinNE[0] <= UInt<1>("h00") @[Interconnect.scala 427:20]
    io.ipinNE[1] <= UInt<1>("h00") @[Interconnect.scala 427:20]
    io.ipinSW[0] <= UInt<1>("h00") @[Interconnect.scala 428:20]
    io.ipinSW[1] <= UInt<1>("h00") @[Interconnect.scala 428:20]
    io.ipinSE[0] <= UInt<1>("h00") @[Interconnect.scala 429:20]
    io.ipinSE[1] <= UInt<1>("h00") @[Interconnect.scala 429:20]
    io.otrackW[0] <= UInt<1>("h00") @[Interconnect.scala 430:21]
    io.otrackN[0] <= UInt<1>("h00") @[Interconnect.scala 431:21]
    io.otrackE[0] <= UInt<1>("h00") @[Interconnect.scala 432:21]
    io.otrackS[0] <= UInt<1>("h00") @[Interconnect.scala 433:21]
    inst ConfigMem of ConfigMem_140 @[Interconnect.scala 463:21]
    ConfigMem.clock <= clock
    ConfigMem.reset <= reset
    node _T = bits(io.cfg_addr, 11, 2) @[Interconnect.scala 464:65]
    node _T_1 = eq(UInt<8>("h085"), _T) @[Interconnect.scala 464:50]
    node _T_2 = and(io.cfg_en, _T_1) @[Interconnect.scala 464:32]
    ConfigMem.io.cfg_en <= _T_2 @[Interconnect.scala 464:19]
    node _T_3 = bits(io.cfg_addr, 1, 0) @[Interconnect.scala 465:35]
    ConfigMem.io.cfg_addr <= _T_3 @[Interconnect.scala 465:21]
    ConfigMem.io.cfg_data <= io.cfg_data @[Interconnect.scala 466:21]
    inst Muxn of Muxn_796 @[Interconnect.scala 473:25]
    Muxn.clock <= clock
    Muxn.reset <= reset
    Muxn.io.in[0] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn.io.in[2] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNW[0] <= Muxn.io.out @[Interconnect.scala 479:45]
    node _T_4 = bits(ConfigMem.io.out[0], 1, 0) @[Interconnect.scala 483:39]
    Muxn.io.config <= _T_4 @[Interconnect.scala 483:23]
    inst Muxn_1 of Muxn_797 @[Interconnect.scala 473:25]
    Muxn_1.clock <= clock
    Muxn_1.reset <= reset
    Muxn_1.io.in[0] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[2] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNW[1] <= Muxn_1.io.out @[Interconnect.scala 479:45]
    node _T_5 = bits(ConfigMem.io.out[0], 3, 2) @[Interconnect.scala 483:39]
    Muxn_1.io.config <= _T_5 @[Interconnect.scala 483:23]
    inst Muxn_2 of Muxn_798 @[Interconnect.scala 473:25]
    Muxn_2.clock <= clock
    Muxn_2.reset <= reset
    Muxn_2.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNE[0] <= Muxn_2.io.out @[Interconnect.scala 479:45]
    node _T_6 = bits(ConfigMem.io.out[0], 5, 4) @[Interconnect.scala 483:39]
    Muxn_2.io.config <= _T_6 @[Interconnect.scala 483:23]
    inst Muxn_3 of Muxn_799 @[Interconnect.scala 473:25]
    Muxn_3.clock <= clock
    Muxn_3.reset <= reset
    Muxn_3.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNE[1] <= Muxn_3.io.out @[Interconnect.scala 479:45]
    node _T_7 = bits(ConfigMem.io.out[0], 7, 6) @[Interconnect.scala 483:39]
    Muxn_3.io.config <= _T_7 @[Interconnect.scala 483:23]
    inst Muxn_4 of Muxn_800 @[Interconnect.scala 473:25]
    Muxn_4.clock <= clock
    Muxn_4.reset <= reset
    Muxn_4.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[1] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    io.ipinSE[0] <= Muxn_4.io.out @[Interconnect.scala 479:45]
    node _T_8 = bits(ConfigMem.io.out[0], 9, 8) @[Interconnect.scala 483:39]
    Muxn_4.io.config <= _T_8 @[Interconnect.scala 483:23]
    inst Muxn_5 of Muxn_801 @[Interconnect.scala 473:25]
    Muxn_5.clock <= clock
    Muxn_5.reset <= reset
    Muxn_5.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[1] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    io.ipinSE[1] <= Muxn_5.io.out @[Interconnect.scala 479:45]
    node _T_9 = bits(ConfigMem.io.out[0], 11, 10) @[Interconnect.scala 483:39]
    Muxn_5.io.config <= _T_9 @[Interconnect.scala 483:23]
    inst Muxn_6 of Muxn_802 @[Interconnect.scala 473:25]
    Muxn_6.clock <= clock
    Muxn_6.reset <= reset
    Muxn_6.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[1] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    io.ipinSW[0] <= Muxn_6.io.out @[Interconnect.scala 479:45]
    node _T_10 = bits(ConfigMem.io.out[0], 13, 12) @[Interconnect.scala 483:39]
    Muxn_6.io.config <= _T_10 @[Interconnect.scala 483:23]
    inst Muxn_7 of Muxn_803 @[Interconnect.scala 473:25]
    Muxn_7.clock <= clock
    Muxn_7.reset <= reset
    Muxn_7.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[1] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    io.ipinSW[1] <= Muxn_7.io.out @[Interconnect.scala 479:45]
    node _T_11 = bits(ConfigMem.io.out[0], 15, 14) @[Interconnect.scala 483:39]
    Muxn_7.io.config <= _T_11 @[Interconnect.scala 483:23]
    inst Muxn_8 of Muxn_804 @[Interconnect.scala 473:25]
    Muxn_8.clock <= clock
    Muxn_8.reset <= reset
    Muxn_8.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[1] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.otrackW[0] <= Muxn_8.io.out @[Interconnect.scala 479:45]
    node _T_12 = bits(ConfigMem.io.out[0], 18, 16) @[Interconnect.scala 483:39]
    Muxn_8.io.config <= _T_12 @[Interconnect.scala 483:23]
    inst Muxn_9 of Muxn_805 @[Interconnect.scala 473:25]
    Muxn_9.clock <= clock
    Muxn_9.reset <= reset
    Muxn_9.io.in[0] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.otrackN[0] <= Muxn_9.io.out @[Interconnect.scala 479:45]
    node _T_13 = bits(ConfigMem.io.out[0], 21, 19) @[Interconnect.scala 483:39]
    Muxn_9.io.config <= _T_13 @[Interconnect.scala 483:23]
    inst Muxn_10 of Muxn_806 @[Interconnect.scala 473:25]
    Muxn_10.clock <= clock
    Muxn_10.reset <= reset
    Muxn_10.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.otrackE[0] <= Muxn_10.io.out @[Interconnect.scala 479:45]
    node _T_14 = bits(ConfigMem.io.out[0], 24, 22) @[Interconnect.scala 483:39]
    Muxn_10.io.config <= _T_14 @[Interconnect.scala 483:23]
    inst Muxn_11 of Muxn_807 @[Interconnect.scala 473:25]
    Muxn_11.clock <= clock
    Muxn_11.reset <= reset
    Muxn_11.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[1] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[4] <= io.itrackE[0] @[Interconnect.scala 475:63]
    io.otrackS[0] <= Muxn_11.io.out @[Interconnect.scala 479:45]
    node _T_15 = bits(ConfigMem.io.out[0], 27, 25) @[Interconnect.scala 483:39]
    Muxn_11.io.config <= _T_15 @[Interconnect.scala 483:23]
    
  module ConfigMem_141 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<0>, flip cfg_data : UInt<32>, out : UInt<28>[1]}
    
    wire _T : UInt<28>[1] @[ConfigMem.scala 27:29]
    _T[0] <= UInt<28>("h00") @[ConfigMem.scala 27:29]
    reg regs : UInt<28>[1], clock with : (reset => (reset, _T)) @[ConfigMem.scala 27:21]
    node _T_1 = eq(io.cfg_addr, UInt<1>("h00")) @[ConfigMem.scala 32:38]
    node _T_2 = and(io.cfg_en, _T_1) @[ConfigMem.scala 32:22]
    when _T_2 : @[ConfigMem.scala 32:54]
      node _T_3 = bits(io.cfg_data, 27, 0) @[ConfigMem.scala 33:31]
      regs[0] <= _T_3 @[ConfigMem.scala 33:17]
      skip @[ConfigMem.scala 32:54]
    io.out[0] <= regs[0] @[ConfigMem.scala 52:45]
    
  module Muxn_808 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_809 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_810 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_811 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_812 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_813 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_814 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_815 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_816 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_817 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_818 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_819 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module GIB_61 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<12>, flip cfg_data : UInt<32>, ipinNW : UInt<32>[2], flip opinNW : UInt<32>[1], ipinNE : UInt<32>[2], flip opinNE : UInt<32>[1], ipinSE : UInt<32>[2], flip opinSE : UInt<32>[1], ipinSW : UInt<32>[2], flip opinSW : UInt<32>[1], flip itrackW : UInt<32>[1], otrackW : UInt<32>[1], flip itrackN : UInt<32>[1], otrackN : UInt<32>[1], flip itrackE : UInt<32>[1], otrackE : UInt<32>[1], flip itrackS : UInt<32>[1], otrackS : UInt<32>[1]}
    
    io.ipinNW[0] <= UInt<1>("h00") @[Interconnect.scala 426:20]
    io.ipinNW[1] <= UInt<1>("h00") @[Interconnect.scala 426:20]
    io.ipinNE[0] <= UInt<1>("h00") @[Interconnect.scala 427:20]
    io.ipinNE[1] <= UInt<1>("h00") @[Interconnect.scala 427:20]
    io.ipinSW[0] <= UInt<1>("h00") @[Interconnect.scala 428:20]
    io.ipinSW[1] <= UInt<1>("h00") @[Interconnect.scala 428:20]
    io.ipinSE[0] <= UInt<1>("h00") @[Interconnect.scala 429:20]
    io.ipinSE[1] <= UInt<1>("h00") @[Interconnect.scala 429:20]
    io.otrackW[0] <= UInt<1>("h00") @[Interconnect.scala 430:21]
    io.otrackN[0] <= UInt<1>("h00") @[Interconnect.scala 431:21]
    io.otrackE[0] <= UInt<1>("h00") @[Interconnect.scala 432:21]
    io.otrackS[0] <= UInt<1>("h00") @[Interconnect.scala 433:21]
    inst ConfigMem of ConfigMem_141 @[Interconnect.scala 463:21]
    ConfigMem.clock <= clock
    ConfigMem.reset <= reset
    node _T = bits(io.cfg_addr, 11, 2) @[Interconnect.scala 464:65]
    node _T_1 = eq(UInt<8>("h086"), _T) @[Interconnect.scala 464:50]
    node _T_2 = and(io.cfg_en, _T_1) @[Interconnect.scala 464:32]
    ConfigMem.io.cfg_en <= _T_2 @[Interconnect.scala 464:19]
    node _T_3 = bits(io.cfg_addr, 1, 0) @[Interconnect.scala 465:35]
    ConfigMem.io.cfg_addr <= _T_3 @[Interconnect.scala 465:21]
    ConfigMem.io.cfg_data <= io.cfg_data @[Interconnect.scala 466:21]
    inst Muxn of Muxn_808 @[Interconnect.scala 473:25]
    Muxn.clock <= clock
    Muxn.reset <= reset
    Muxn.io.in[0] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn.io.in[2] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNW[0] <= Muxn.io.out @[Interconnect.scala 479:45]
    node _T_4 = bits(ConfigMem.io.out[0], 1, 0) @[Interconnect.scala 483:39]
    Muxn.io.config <= _T_4 @[Interconnect.scala 483:23]
    inst Muxn_1 of Muxn_809 @[Interconnect.scala 473:25]
    Muxn_1.clock <= clock
    Muxn_1.reset <= reset
    Muxn_1.io.in[0] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[2] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNW[1] <= Muxn_1.io.out @[Interconnect.scala 479:45]
    node _T_5 = bits(ConfigMem.io.out[0], 3, 2) @[Interconnect.scala 483:39]
    Muxn_1.io.config <= _T_5 @[Interconnect.scala 483:23]
    inst Muxn_2 of Muxn_810 @[Interconnect.scala 473:25]
    Muxn_2.clock <= clock
    Muxn_2.reset <= reset
    Muxn_2.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNE[0] <= Muxn_2.io.out @[Interconnect.scala 479:45]
    node _T_6 = bits(ConfigMem.io.out[0], 5, 4) @[Interconnect.scala 483:39]
    Muxn_2.io.config <= _T_6 @[Interconnect.scala 483:23]
    inst Muxn_3 of Muxn_811 @[Interconnect.scala 473:25]
    Muxn_3.clock <= clock
    Muxn_3.reset <= reset
    Muxn_3.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNE[1] <= Muxn_3.io.out @[Interconnect.scala 479:45]
    node _T_7 = bits(ConfigMem.io.out[0], 7, 6) @[Interconnect.scala 483:39]
    Muxn_3.io.config <= _T_7 @[Interconnect.scala 483:23]
    inst Muxn_4 of Muxn_812 @[Interconnect.scala 473:25]
    Muxn_4.clock <= clock
    Muxn_4.reset <= reset
    Muxn_4.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[1] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    io.ipinSE[0] <= Muxn_4.io.out @[Interconnect.scala 479:45]
    node _T_8 = bits(ConfigMem.io.out[0], 9, 8) @[Interconnect.scala 483:39]
    Muxn_4.io.config <= _T_8 @[Interconnect.scala 483:23]
    inst Muxn_5 of Muxn_813 @[Interconnect.scala 473:25]
    Muxn_5.clock <= clock
    Muxn_5.reset <= reset
    Muxn_5.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[1] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    io.ipinSE[1] <= Muxn_5.io.out @[Interconnect.scala 479:45]
    node _T_9 = bits(ConfigMem.io.out[0], 11, 10) @[Interconnect.scala 483:39]
    Muxn_5.io.config <= _T_9 @[Interconnect.scala 483:23]
    inst Muxn_6 of Muxn_814 @[Interconnect.scala 473:25]
    Muxn_6.clock <= clock
    Muxn_6.reset <= reset
    Muxn_6.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[1] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    io.ipinSW[0] <= Muxn_6.io.out @[Interconnect.scala 479:45]
    node _T_10 = bits(ConfigMem.io.out[0], 13, 12) @[Interconnect.scala 483:39]
    Muxn_6.io.config <= _T_10 @[Interconnect.scala 483:23]
    inst Muxn_7 of Muxn_815 @[Interconnect.scala 473:25]
    Muxn_7.clock <= clock
    Muxn_7.reset <= reset
    Muxn_7.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[1] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    io.ipinSW[1] <= Muxn_7.io.out @[Interconnect.scala 479:45]
    node _T_11 = bits(ConfigMem.io.out[0], 15, 14) @[Interconnect.scala 483:39]
    Muxn_7.io.config <= _T_11 @[Interconnect.scala 483:23]
    inst Muxn_8 of Muxn_816 @[Interconnect.scala 473:25]
    Muxn_8.clock <= clock
    Muxn_8.reset <= reset
    Muxn_8.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[1] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    reg _T_12 : UInt, clock @[Interconnect.scala 477:55]
    _T_12 <= Muxn_8.io.out @[Interconnect.scala 477:55]
    io.otrackW[0] <= _T_12 @[Interconnect.scala 477:45]
    node _T_13 = bits(ConfigMem.io.out[0], 18, 16) @[Interconnect.scala 483:39]
    Muxn_8.io.config <= _T_13 @[Interconnect.scala 483:23]
    inst Muxn_9 of Muxn_817 @[Interconnect.scala 473:25]
    Muxn_9.clock <= clock
    Muxn_9.reset <= reset
    Muxn_9.io.in[0] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    reg _T_14 : UInt, clock @[Interconnect.scala 477:55]
    _T_14 <= Muxn_9.io.out @[Interconnect.scala 477:55]
    io.otrackN[0] <= _T_14 @[Interconnect.scala 477:45]
    node _T_15 = bits(ConfigMem.io.out[0], 21, 19) @[Interconnect.scala 483:39]
    Muxn_9.io.config <= _T_15 @[Interconnect.scala 483:23]
    inst Muxn_10 of Muxn_818 @[Interconnect.scala 473:25]
    Muxn_10.clock <= clock
    Muxn_10.reset <= reset
    Muxn_10.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    reg _T_16 : UInt, clock @[Interconnect.scala 477:55]
    _T_16 <= Muxn_10.io.out @[Interconnect.scala 477:55]
    io.otrackE[0] <= _T_16 @[Interconnect.scala 477:45]
    node _T_17 = bits(ConfigMem.io.out[0], 24, 22) @[Interconnect.scala 483:39]
    Muxn_10.io.config <= _T_17 @[Interconnect.scala 483:23]
    inst Muxn_11 of Muxn_819 @[Interconnect.scala 473:25]
    Muxn_11.clock <= clock
    Muxn_11.reset <= reset
    Muxn_11.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[1] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[4] <= io.itrackE[0] @[Interconnect.scala 475:63]
    reg _T_18 : UInt, clock @[Interconnect.scala 477:55]
    _T_18 <= Muxn_11.io.out @[Interconnect.scala 477:55]
    io.otrackS[0] <= _T_18 @[Interconnect.scala 477:45]
    node _T_19 = bits(ConfigMem.io.out[0], 27, 25) @[Interconnect.scala 483:39]
    Muxn_11.io.config <= _T_19 @[Interconnect.scala 483:23]
    
  module ConfigMem_142 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<0>, flip cfg_data : UInt<32>, out : UInt<15>[1]}
    
    wire _T : UInt<15>[1] @[ConfigMem.scala 27:29]
    _T[0] <= UInt<15>("h00") @[ConfigMem.scala 27:29]
    reg regs : UInt<15>[1], clock with : (reset => (reset, _T)) @[ConfigMem.scala 27:21]
    node _T_1 = eq(io.cfg_addr, UInt<1>("h00")) @[ConfigMem.scala 32:38]
    node _T_2 = and(io.cfg_en, _T_1) @[ConfigMem.scala 32:22]
    when _T_2 : @[ConfigMem.scala 32:54]
      node _T_3 = bits(io.cfg_data, 14, 0) @[ConfigMem.scala 33:31]
      regs[0] <= _T_3 @[ConfigMem.scala 33:17]
      skip @[ConfigMem.scala 32:54]
    io.out[0] <= regs[0] @[ConfigMem.scala 52:45]
    
  module Muxn_820 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[3], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_821 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[3], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_822 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<1>, flip in : UInt<32>[2], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    io.out <= _T_1 @[Multiplexer.scala 20:10]
    
  module Muxn_823 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<1>, flip in : UInt<32>[2], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    io.out <= _T_1 @[Multiplexer.scala 20:10]
    
  module Muxn_824 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[3], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_825 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_826 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_827 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module GIB_62 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<12>, flip cfg_data : UInt<32>, ipinNW : UInt<32>[2], flip opinNW : UInt<32>[1], ipinNE : UInt<32>[0], flip opinNE : UInt<32>[0], ipinSE : UInt<32>[0], flip opinSE : UInt<32>[0], ipinSW : UInt<32>[2], flip opinSW : UInt<32>[1], flip itrackW : UInt<32>[1], otrackW : UInt<32>[1], flip itrackN : UInt<32>[1], otrackN : UInt<32>[1], flip itrackE : UInt<32>[1], otrackE : UInt<32>[1], flip itrackS : UInt<32>[1], otrackS : UInt<32>[1]}
    
    io.ipinNW[0] <= UInt<1>("h00") @[Interconnect.scala 426:20]
    io.ipinNW[1] <= UInt<1>("h00") @[Interconnect.scala 426:20]
    io.ipinSW[0] <= UInt<1>("h00") @[Interconnect.scala 428:20]
    io.ipinSW[1] <= UInt<1>("h00") @[Interconnect.scala 428:20]
    io.otrackW[0] <= UInt<1>("h00") @[Interconnect.scala 430:21]
    io.otrackN[0] <= UInt<1>("h00") @[Interconnect.scala 431:21]
    io.otrackE[0] <= UInt<1>("h00") @[Interconnect.scala 432:21]
    io.otrackS[0] <= UInt<1>("h00") @[Interconnect.scala 433:21]
    inst ConfigMem of ConfigMem_142 @[Interconnect.scala 463:21]
    ConfigMem.clock <= clock
    ConfigMem.reset <= reset
    node _T = bits(io.cfg_addr, 11, 2) @[Interconnect.scala 464:65]
    node _T_1 = eq(UInt<8>("h087"), _T) @[Interconnect.scala 464:50]
    node _T_2 = and(io.cfg_en, _T_1) @[Interconnect.scala 464:32]
    ConfigMem.io.cfg_en <= _T_2 @[Interconnect.scala 464:19]
    node _T_3 = bits(io.cfg_addr, 1, 0) @[Interconnect.scala 465:35]
    ConfigMem.io.cfg_addr <= _T_3 @[Interconnect.scala 465:21]
    ConfigMem.io.cfg_data <= io.cfg_data @[Interconnect.scala 466:21]
    inst Muxn of Muxn_820 @[Interconnect.scala 473:25]
    Muxn.clock <= clock
    Muxn.reset <= reset
    Muxn.io.in[0] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn.io.in[1] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn.io.in[2] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNW[0] <= Muxn.io.out @[Interconnect.scala 479:45]
    node _T_4 = bits(ConfigMem.io.out[0], 1, 0) @[Interconnect.scala 483:39]
    Muxn.io.config <= _T_4 @[Interconnect.scala 483:23]
    inst Muxn_1 of Muxn_821 @[Interconnect.scala 473:25]
    Muxn_1.clock <= clock
    Muxn_1.reset <= reset
    Muxn_1.io.in[0] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[1] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[2] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNW[1] <= Muxn_1.io.out @[Interconnect.scala 479:45]
    node _T_5 = bits(ConfigMem.io.out[0], 3, 2) @[Interconnect.scala 483:39]
    Muxn_1.io.config <= _T_5 @[Interconnect.scala 483:23]
    inst Muxn_2 of Muxn_822 @[Interconnect.scala 473:25]
    Muxn_2.clock <= clock
    Muxn_2.reset <= reset
    Muxn_2.io.in[0] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[1] <= io.itrackE[0] @[Interconnect.scala 475:63]
    io.ipinSW[0] <= Muxn_2.io.out @[Interconnect.scala 479:45]
    node _T_6 = bits(ConfigMem.io.out[0], 4, 4) @[Interconnect.scala 483:39]
    Muxn_2.io.config <= _T_6 @[Interconnect.scala 483:23]
    inst Muxn_3 of Muxn_823 @[Interconnect.scala 473:25]
    Muxn_3.clock <= clock
    Muxn_3.reset <= reset
    Muxn_3.io.in[0] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[1] <= io.itrackE[0] @[Interconnect.scala 475:63]
    io.ipinSW[1] <= Muxn_3.io.out @[Interconnect.scala 479:45]
    node _T_7 = bits(ConfigMem.io.out[0], 5, 5) @[Interconnect.scala 483:39]
    Muxn_3.io.config <= _T_7 @[Interconnect.scala 483:23]
    inst Muxn_4 of Muxn_824 @[Interconnect.scala 473:25]
    Muxn_4.clock <= clock
    Muxn_4.reset <= reset
    Muxn_4.io.in[0] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[1] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[2] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.otrackW[0] <= Muxn_4.io.out @[Interconnect.scala 479:45]
    node _T_8 = bits(ConfigMem.io.out[0], 7, 6) @[Interconnect.scala 483:39]
    Muxn_4.io.config <= _T_8 @[Interconnect.scala 483:23]
    inst Muxn_5 of Muxn_825 @[Interconnect.scala 473:25]
    Muxn_5.clock <= clock
    Muxn_5.reset <= reset
    Muxn_5.io.in[0] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[1] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[2] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.otrackN[0] <= Muxn_5.io.out @[Interconnect.scala 479:45]
    node _T_9 = bits(ConfigMem.io.out[0], 9, 8) @[Interconnect.scala 483:39]
    Muxn_5.io.config <= _T_9 @[Interconnect.scala 483:23]
    inst Muxn_6 of Muxn_826 @[Interconnect.scala 473:25]
    Muxn_6.clock <= clock
    Muxn_6.reset <= reset
    Muxn_6.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.otrackE[0] <= Muxn_6.io.out @[Interconnect.scala 479:45]
    node _T_10 = bits(ConfigMem.io.out[0], 12, 10) @[Interconnect.scala 483:39]
    Muxn_6.io.config <= _T_10 @[Interconnect.scala 483:23]
    inst Muxn_7 of Muxn_827 @[Interconnect.scala 473:25]
    Muxn_7.clock <= clock
    Muxn_7.reset <= reset
    Muxn_7.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[1] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    io.otrackS[0] <= Muxn_7.io.out @[Interconnect.scala 479:45]
    node _T_11 = bits(ConfigMem.io.out[0], 14, 13) @[Interconnect.scala 483:39]
    Muxn_7.io.config <= _T_11 @[Interconnect.scala 483:23]
    
  module ConfigMem_143 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<0>, flip cfg_data : UInt<32>, out : UInt<15>[1]}
    
    wire _T : UInt<15>[1] @[ConfigMem.scala 27:29]
    _T[0] <= UInt<15>("h00") @[ConfigMem.scala 27:29]
    reg regs : UInt<15>[1], clock with : (reset => (reset, _T)) @[ConfigMem.scala 27:21]
    node _T_1 = eq(io.cfg_addr, UInt<1>("h00")) @[ConfigMem.scala 32:38]
    node _T_2 = and(io.cfg_en, _T_1) @[ConfigMem.scala 32:22]
    when _T_2 : @[ConfigMem.scala 32:54]
      node _T_3 = bits(io.cfg_data, 14, 0) @[ConfigMem.scala 33:31]
      regs[0] <= _T_3 @[ConfigMem.scala 33:17]
      skip @[ConfigMem.scala 32:54]
    io.out[0] <= regs[0] @[ConfigMem.scala 52:45]
    
  module Muxn_828 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<1>, flip in : UInt<32>[2], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    io.out <= _T_1 @[Multiplexer.scala 20:10]
    
  module Muxn_829 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<1>, flip in : UInt<32>[2], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    io.out <= _T_1 @[Multiplexer.scala 20:10]
    
  module Muxn_830 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[3], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_831 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[3], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_832 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_833 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_834 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[3], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_835 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module GIB_63 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<12>, flip cfg_data : UInt<32>, ipinNW : UInt<32>[0], flip opinNW : UInt<32>[0], ipinNE : UInt<32>[2], flip opinNE : UInt<32>[1], ipinSE : UInt<32>[2], flip opinSE : UInt<32>[1], ipinSW : UInt<32>[0], flip opinSW : UInt<32>[0], flip itrackW : UInt<32>[1], otrackW : UInt<32>[1], flip itrackN : UInt<32>[1], otrackN : UInt<32>[1], flip itrackE : UInt<32>[1], otrackE : UInt<32>[1], flip itrackS : UInt<32>[1], otrackS : UInt<32>[1]}
    
    io.ipinNE[0] <= UInt<1>("h00") @[Interconnect.scala 427:20]
    io.ipinNE[1] <= UInt<1>("h00") @[Interconnect.scala 427:20]
    io.ipinSE[0] <= UInt<1>("h00") @[Interconnect.scala 429:20]
    io.ipinSE[1] <= UInt<1>("h00") @[Interconnect.scala 429:20]
    io.otrackW[0] <= UInt<1>("h00") @[Interconnect.scala 430:21]
    io.otrackN[0] <= UInt<1>("h00") @[Interconnect.scala 431:21]
    io.otrackE[0] <= UInt<1>("h00") @[Interconnect.scala 432:21]
    io.otrackS[0] <= UInt<1>("h00") @[Interconnect.scala 433:21]
    inst ConfigMem of ConfigMem_143 @[Interconnect.scala 463:21]
    ConfigMem.clock <= clock
    ConfigMem.reset <= reset
    node _T = bits(io.cfg_addr, 11, 2) @[Interconnect.scala 464:65]
    node _T_1 = eq(UInt<8>("h091"), _T) @[Interconnect.scala 464:50]
    node _T_2 = and(io.cfg_en, _T_1) @[Interconnect.scala 464:32]
    ConfigMem.io.cfg_en <= _T_2 @[Interconnect.scala 464:19]
    node _T_3 = bits(io.cfg_addr, 1, 0) @[Interconnect.scala 465:35]
    ConfigMem.io.cfg_addr <= _T_3 @[Interconnect.scala 465:21]
    ConfigMem.io.cfg_data <= io.cfg_data @[Interconnect.scala 466:21]
    inst Muxn of Muxn_828 @[Interconnect.scala 473:25]
    Muxn.clock <= clock
    Muxn.reset <= reset
    Muxn.io.in[0] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn.io.in[1] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNE[0] <= Muxn.io.out @[Interconnect.scala 479:45]
    node _T_4 = bits(ConfigMem.io.out[0], 0, 0) @[Interconnect.scala 483:39]
    Muxn.io.config <= _T_4 @[Interconnect.scala 483:23]
    inst Muxn_1 of Muxn_829 @[Interconnect.scala 473:25]
    Muxn_1.clock <= clock
    Muxn_1.reset <= reset
    Muxn_1.io.in[0] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[1] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNE[1] <= Muxn_1.io.out @[Interconnect.scala 479:45]
    node _T_5 = bits(ConfigMem.io.out[0], 1, 1) @[Interconnect.scala 483:39]
    Muxn_1.io.config <= _T_5 @[Interconnect.scala 483:23]
    inst Muxn_2 of Muxn_830 @[Interconnect.scala 473:25]
    Muxn_2.clock <= clock
    Muxn_2.reset <= reset
    Muxn_2.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[1] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    io.ipinSE[0] <= Muxn_2.io.out @[Interconnect.scala 479:45]
    node _T_6 = bits(ConfigMem.io.out[0], 3, 2) @[Interconnect.scala 483:39]
    Muxn_2.io.config <= _T_6 @[Interconnect.scala 483:23]
    inst Muxn_3 of Muxn_831 @[Interconnect.scala 473:25]
    Muxn_3.clock <= clock
    Muxn_3.reset <= reset
    Muxn_3.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[1] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    io.ipinSE[1] <= Muxn_3.io.out @[Interconnect.scala 479:45]
    node _T_7 = bits(ConfigMem.io.out[0], 5, 4) @[Interconnect.scala 483:39]
    Muxn_3.io.config <= _T_7 @[Interconnect.scala 483:23]
    inst Muxn_4 of Muxn_832 @[Interconnect.scala 473:25]
    Muxn_4.clock <= clock
    Muxn_4.reset <= reset
    Muxn_4.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[1] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    reg _T_8 : UInt, clock @[Interconnect.scala 477:55]
    _T_8 <= Muxn_4.io.out @[Interconnect.scala 477:55]
    io.otrackW[0] <= _T_8 @[Interconnect.scala 477:45]
    node _T_9 = bits(ConfigMem.io.out[0], 8, 6) @[Interconnect.scala 483:39]
    Muxn_4.io.config <= _T_9 @[Interconnect.scala 483:23]
    inst Muxn_5 of Muxn_833 @[Interconnect.scala 473:25]
    Muxn_5.clock <= clock
    Muxn_5.reset <= reset
    Muxn_5.io.in[0] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[1] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[2] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    reg _T_10 : UInt, clock @[Interconnect.scala 477:55]
    _T_10 <= Muxn_5.io.out @[Interconnect.scala 477:55]
    io.otrackN[0] <= _T_10 @[Interconnect.scala 477:45]
    node _T_11 = bits(ConfigMem.io.out[0], 10, 9) @[Interconnect.scala 483:39]
    Muxn_5.io.config <= _T_11 @[Interconnect.scala 483:23]
    inst Muxn_6 of Muxn_834 @[Interconnect.scala 473:25]
    Muxn_6.clock <= clock
    Muxn_6.reset <= reset
    Muxn_6.io.in[0] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[1] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[2] <= io.itrackS[0] @[Interconnect.scala 475:63]
    reg _T_12 : UInt, clock @[Interconnect.scala 477:55]
    _T_12 <= Muxn_6.io.out @[Interconnect.scala 477:55]
    io.otrackE[0] <= _T_12 @[Interconnect.scala 477:45]
    node _T_13 = bits(ConfigMem.io.out[0], 12, 11) @[Interconnect.scala 483:39]
    Muxn_6.io.config <= _T_13 @[Interconnect.scala 483:23]
    inst Muxn_7 of Muxn_835 @[Interconnect.scala 473:25]
    Muxn_7.clock <= clock
    Muxn_7.reset <= reset
    Muxn_7.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[1] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    reg _T_14 : UInt, clock @[Interconnect.scala 477:55]
    _T_14 <= Muxn_7.io.out @[Interconnect.scala 477:55]
    io.otrackS[0] <= _T_14 @[Interconnect.scala 477:45]
    node _T_15 = bits(ConfigMem.io.out[0], 14, 13) @[Interconnect.scala 483:39]
    Muxn_7.io.config <= _T_15 @[Interconnect.scala 483:23]
    
  module ConfigMem_144 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<0>, flip cfg_data : UInt<32>, out : UInt<28>[1]}
    
    wire _T : UInt<28>[1] @[ConfigMem.scala 27:29]
    _T[0] <= UInt<28>("h00") @[ConfigMem.scala 27:29]
    reg regs : UInt<28>[1], clock with : (reset => (reset, _T)) @[ConfigMem.scala 27:21]
    node _T_1 = eq(io.cfg_addr, UInt<1>("h00")) @[ConfigMem.scala 32:38]
    node _T_2 = and(io.cfg_en, _T_1) @[ConfigMem.scala 32:22]
    when _T_2 : @[ConfigMem.scala 32:54]
      node _T_3 = bits(io.cfg_data, 27, 0) @[ConfigMem.scala 33:31]
      regs[0] <= _T_3 @[ConfigMem.scala 33:17]
      skip @[ConfigMem.scala 32:54]
    io.out[0] <= regs[0] @[ConfigMem.scala 52:45]
    
  module Muxn_836 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_837 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_838 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_839 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_840 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_841 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_842 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_843 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_844 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_845 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_846 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_847 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module GIB_64 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<12>, flip cfg_data : UInt<32>, ipinNW : UInt<32>[2], flip opinNW : UInt<32>[1], ipinNE : UInt<32>[2], flip opinNE : UInt<32>[1], ipinSE : UInt<32>[2], flip opinSE : UInt<32>[1], ipinSW : UInt<32>[2], flip opinSW : UInt<32>[1], flip itrackW : UInt<32>[1], otrackW : UInt<32>[1], flip itrackN : UInt<32>[1], otrackN : UInt<32>[1], flip itrackE : UInt<32>[1], otrackE : UInt<32>[1], flip itrackS : UInt<32>[1], otrackS : UInt<32>[1]}
    
    io.ipinNW[0] <= UInt<1>("h00") @[Interconnect.scala 426:20]
    io.ipinNW[1] <= UInt<1>("h00") @[Interconnect.scala 426:20]
    io.ipinNE[0] <= UInt<1>("h00") @[Interconnect.scala 427:20]
    io.ipinNE[1] <= UInt<1>("h00") @[Interconnect.scala 427:20]
    io.ipinSW[0] <= UInt<1>("h00") @[Interconnect.scala 428:20]
    io.ipinSW[1] <= UInt<1>("h00") @[Interconnect.scala 428:20]
    io.ipinSE[0] <= UInt<1>("h00") @[Interconnect.scala 429:20]
    io.ipinSE[1] <= UInt<1>("h00") @[Interconnect.scala 429:20]
    io.otrackW[0] <= UInt<1>("h00") @[Interconnect.scala 430:21]
    io.otrackN[0] <= UInt<1>("h00") @[Interconnect.scala 431:21]
    io.otrackE[0] <= UInt<1>("h00") @[Interconnect.scala 432:21]
    io.otrackS[0] <= UInt<1>("h00") @[Interconnect.scala 433:21]
    inst ConfigMem of ConfigMem_144 @[Interconnect.scala 463:21]
    ConfigMem.clock <= clock
    ConfigMem.reset <= reset
    node _T = bits(io.cfg_addr, 11, 2) @[Interconnect.scala 464:65]
    node _T_1 = eq(UInt<8>("h092"), _T) @[Interconnect.scala 464:50]
    node _T_2 = and(io.cfg_en, _T_1) @[Interconnect.scala 464:32]
    ConfigMem.io.cfg_en <= _T_2 @[Interconnect.scala 464:19]
    node _T_3 = bits(io.cfg_addr, 1, 0) @[Interconnect.scala 465:35]
    ConfigMem.io.cfg_addr <= _T_3 @[Interconnect.scala 465:21]
    ConfigMem.io.cfg_data <= io.cfg_data @[Interconnect.scala 466:21]
    inst Muxn of Muxn_836 @[Interconnect.scala 473:25]
    Muxn.clock <= clock
    Muxn.reset <= reset
    Muxn.io.in[0] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn.io.in[2] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNW[0] <= Muxn.io.out @[Interconnect.scala 479:45]
    node _T_4 = bits(ConfigMem.io.out[0], 1, 0) @[Interconnect.scala 483:39]
    Muxn.io.config <= _T_4 @[Interconnect.scala 483:23]
    inst Muxn_1 of Muxn_837 @[Interconnect.scala 473:25]
    Muxn_1.clock <= clock
    Muxn_1.reset <= reset
    Muxn_1.io.in[0] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[2] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNW[1] <= Muxn_1.io.out @[Interconnect.scala 479:45]
    node _T_5 = bits(ConfigMem.io.out[0], 3, 2) @[Interconnect.scala 483:39]
    Muxn_1.io.config <= _T_5 @[Interconnect.scala 483:23]
    inst Muxn_2 of Muxn_838 @[Interconnect.scala 473:25]
    Muxn_2.clock <= clock
    Muxn_2.reset <= reset
    Muxn_2.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNE[0] <= Muxn_2.io.out @[Interconnect.scala 479:45]
    node _T_6 = bits(ConfigMem.io.out[0], 5, 4) @[Interconnect.scala 483:39]
    Muxn_2.io.config <= _T_6 @[Interconnect.scala 483:23]
    inst Muxn_3 of Muxn_839 @[Interconnect.scala 473:25]
    Muxn_3.clock <= clock
    Muxn_3.reset <= reset
    Muxn_3.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNE[1] <= Muxn_3.io.out @[Interconnect.scala 479:45]
    node _T_7 = bits(ConfigMem.io.out[0], 7, 6) @[Interconnect.scala 483:39]
    Muxn_3.io.config <= _T_7 @[Interconnect.scala 483:23]
    inst Muxn_4 of Muxn_840 @[Interconnect.scala 473:25]
    Muxn_4.clock <= clock
    Muxn_4.reset <= reset
    Muxn_4.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[1] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    io.ipinSE[0] <= Muxn_4.io.out @[Interconnect.scala 479:45]
    node _T_8 = bits(ConfigMem.io.out[0], 9, 8) @[Interconnect.scala 483:39]
    Muxn_4.io.config <= _T_8 @[Interconnect.scala 483:23]
    inst Muxn_5 of Muxn_841 @[Interconnect.scala 473:25]
    Muxn_5.clock <= clock
    Muxn_5.reset <= reset
    Muxn_5.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[1] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    io.ipinSE[1] <= Muxn_5.io.out @[Interconnect.scala 479:45]
    node _T_9 = bits(ConfigMem.io.out[0], 11, 10) @[Interconnect.scala 483:39]
    Muxn_5.io.config <= _T_9 @[Interconnect.scala 483:23]
    inst Muxn_6 of Muxn_842 @[Interconnect.scala 473:25]
    Muxn_6.clock <= clock
    Muxn_6.reset <= reset
    Muxn_6.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[1] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    io.ipinSW[0] <= Muxn_6.io.out @[Interconnect.scala 479:45]
    node _T_10 = bits(ConfigMem.io.out[0], 13, 12) @[Interconnect.scala 483:39]
    Muxn_6.io.config <= _T_10 @[Interconnect.scala 483:23]
    inst Muxn_7 of Muxn_843 @[Interconnect.scala 473:25]
    Muxn_7.clock <= clock
    Muxn_7.reset <= reset
    Muxn_7.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[1] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    io.ipinSW[1] <= Muxn_7.io.out @[Interconnect.scala 479:45]
    node _T_11 = bits(ConfigMem.io.out[0], 15, 14) @[Interconnect.scala 483:39]
    Muxn_7.io.config <= _T_11 @[Interconnect.scala 483:23]
    inst Muxn_8 of Muxn_844 @[Interconnect.scala 473:25]
    Muxn_8.clock <= clock
    Muxn_8.reset <= reset
    Muxn_8.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[1] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.otrackW[0] <= Muxn_8.io.out @[Interconnect.scala 479:45]
    node _T_12 = bits(ConfigMem.io.out[0], 18, 16) @[Interconnect.scala 483:39]
    Muxn_8.io.config <= _T_12 @[Interconnect.scala 483:23]
    inst Muxn_9 of Muxn_845 @[Interconnect.scala 473:25]
    Muxn_9.clock <= clock
    Muxn_9.reset <= reset
    Muxn_9.io.in[0] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.otrackN[0] <= Muxn_9.io.out @[Interconnect.scala 479:45]
    node _T_13 = bits(ConfigMem.io.out[0], 21, 19) @[Interconnect.scala 483:39]
    Muxn_9.io.config <= _T_13 @[Interconnect.scala 483:23]
    inst Muxn_10 of Muxn_846 @[Interconnect.scala 473:25]
    Muxn_10.clock <= clock
    Muxn_10.reset <= reset
    Muxn_10.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.otrackE[0] <= Muxn_10.io.out @[Interconnect.scala 479:45]
    node _T_14 = bits(ConfigMem.io.out[0], 24, 22) @[Interconnect.scala 483:39]
    Muxn_10.io.config <= _T_14 @[Interconnect.scala 483:23]
    inst Muxn_11 of Muxn_847 @[Interconnect.scala 473:25]
    Muxn_11.clock <= clock
    Muxn_11.reset <= reset
    Muxn_11.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[1] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[4] <= io.itrackE[0] @[Interconnect.scala 475:63]
    io.otrackS[0] <= Muxn_11.io.out @[Interconnect.scala 479:45]
    node _T_15 = bits(ConfigMem.io.out[0], 27, 25) @[Interconnect.scala 483:39]
    Muxn_11.io.config <= _T_15 @[Interconnect.scala 483:23]
    
  module ConfigMem_145 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<0>, flip cfg_data : UInt<32>, out : UInt<28>[1]}
    
    wire _T : UInt<28>[1] @[ConfigMem.scala 27:29]
    _T[0] <= UInt<28>("h00") @[ConfigMem.scala 27:29]
    reg regs : UInt<28>[1], clock with : (reset => (reset, _T)) @[ConfigMem.scala 27:21]
    node _T_1 = eq(io.cfg_addr, UInt<1>("h00")) @[ConfigMem.scala 32:38]
    node _T_2 = and(io.cfg_en, _T_1) @[ConfigMem.scala 32:22]
    when _T_2 : @[ConfigMem.scala 32:54]
      node _T_3 = bits(io.cfg_data, 27, 0) @[ConfigMem.scala 33:31]
      regs[0] <= _T_3 @[ConfigMem.scala 33:17]
      skip @[ConfigMem.scala 32:54]
    io.out[0] <= regs[0] @[ConfigMem.scala 52:45]
    
  module Muxn_848 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_849 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_850 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_851 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_852 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_853 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_854 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_855 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_856 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_857 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_858 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_859 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module GIB_65 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<12>, flip cfg_data : UInt<32>, ipinNW : UInt<32>[2], flip opinNW : UInt<32>[1], ipinNE : UInt<32>[2], flip opinNE : UInt<32>[1], ipinSE : UInt<32>[2], flip opinSE : UInt<32>[1], ipinSW : UInt<32>[2], flip opinSW : UInt<32>[1], flip itrackW : UInt<32>[1], otrackW : UInt<32>[1], flip itrackN : UInt<32>[1], otrackN : UInt<32>[1], flip itrackE : UInt<32>[1], otrackE : UInt<32>[1], flip itrackS : UInt<32>[1], otrackS : UInt<32>[1]}
    
    io.ipinNW[0] <= UInt<1>("h00") @[Interconnect.scala 426:20]
    io.ipinNW[1] <= UInt<1>("h00") @[Interconnect.scala 426:20]
    io.ipinNE[0] <= UInt<1>("h00") @[Interconnect.scala 427:20]
    io.ipinNE[1] <= UInt<1>("h00") @[Interconnect.scala 427:20]
    io.ipinSW[0] <= UInt<1>("h00") @[Interconnect.scala 428:20]
    io.ipinSW[1] <= UInt<1>("h00") @[Interconnect.scala 428:20]
    io.ipinSE[0] <= UInt<1>("h00") @[Interconnect.scala 429:20]
    io.ipinSE[1] <= UInt<1>("h00") @[Interconnect.scala 429:20]
    io.otrackW[0] <= UInt<1>("h00") @[Interconnect.scala 430:21]
    io.otrackN[0] <= UInt<1>("h00") @[Interconnect.scala 431:21]
    io.otrackE[0] <= UInt<1>("h00") @[Interconnect.scala 432:21]
    io.otrackS[0] <= UInt<1>("h00") @[Interconnect.scala 433:21]
    inst ConfigMem of ConfigMem_145 @[Interconnect.scala 463:21]
    ConfigMem.clock <= clock
    ConfigMem.reset <= reset
    node _T = bits(io.cfg_addr, 11, 2) @[Interconnect.scala 464:65]
    node _T_1 = eq(UInt<8>("h093"), _T) @[Interconnect.scala 464:50]
    node _T_2 = and(io.cfg_en, _T_1) @[Interconnect.scala 464:32]
    ConfigMem.io.cfg_en <= _T_2 @[Interconnect.scala 464:19]
    node _T_3 = bits(io.cfg_addr, 1, 0) @[Interconnect.scala 465:35]
    ConfigMem.io.cfg_addr <= _T_3 @[Interconnect.scala 465:21]
    ConfigMem.io.cfg_data <= io.cfg_data @[Interconnect.scala 466:21]
    inst Muxn of Muxn_848 @[Interconnect.scala 473:25]
    Muxn.clock <= clock
    Muxn.reset <= reset
    Muxn.io.in[0] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn.io.in[2] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNW[0] <= Muxn.io.out @[Interconnect.scala 479:45]
    node _T_4 = bits(ConfigMem.io.out[0], 1, 0) @[Interconnect.scala 483:39]
    Muxn.io.config <= _T_4 @[Interconnect.scala 483:23]
    inst Muxn_1 of Muxn_849 @[Interconnect.scala 473:25]
    Muxn_1.clock <= clock
    Muxn_1.reset <= reset
    Muxn_1.io.in[0] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[2] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNW[1] <= Muxn_1.io.out @[Interconnect.scala 479:45]
    node _T_5 = bits(ConfigMem.io.out[0], 3, 2) @[Interconnect.scala 483:39]
    Muxn_1.io.config <= _T_5 @[Interconnect.scala 483:23]
    inst Muxn_2 of Muxn_850 @[Interconnect.scala 473:25]
    Muxn_2.clock <= clock
    Muxn_2.reset <= reset
    Muxn_2.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNE[0] <= Muxn_2.io.out @[Interconnect.scala 479:45]
    node _T_6 = bits(ConfigMem.io.out[0], 5, 4) @[Interconnect.scala 483:39]
    Muxn_2.io.config <= _T_6 @[Interconnect.scala 483:23]
    inst Muxn_3 of Muxn_851 @[Interconnect.scala 473:25]
    Muxn_3.clock <= clock
    Muxn_3.reset <= reset
    Muxn_3.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNE[1] <= Muxn_3.io.out @[Interconnect.scala 479:45]
    node _T_7 = bits(ConfigMem.io.out[0], 7, 6) @[Interconnect.scala 483:39]
    Muxn_3.io.config <= _T_7 @[Interconnect.scala 483:23]
    inst Muxn_4 of Muxn_852 @[Interconnect.scala 473:25]
    Muxn_4.clock <= clock
    Muxn_4.reset <= reset
    Muxn_4.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[1] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    io.ipinSE[0] <= Muxn_4.io.out @[Interconnect.scala 479:45]
    node _T_8 = bits(ConfigMem.io.out[0], 9, 8) @[Interconnect.scala 483:39]
    Muxn_4.io.config <= _T_8 @[Interconnect.scala 483:23]
    inst Muxn_5 of Muxn_853 @[Interconnect.scala 473:25]
    Muxn_5.clock <= clock
    Muxn_5.reset <= reset
    Muxn_5.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[1] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    io.ipinSE[1] <= Muxn_5.io.out @[Interconnect.scala 479:45]
    node _T_9 = bits(ConfigMem.io.out[0], 11, 10) @[Interconnect.scala 483:39]
    Muxn_5.io.config <= _T_9 @[Interconnect.scala 483:23]
    inst Muxn_6 of Muxn_854 @[Interconnect.scala 473:25]
    Muxn_6.clock <= clock
    Muxn_6.reset <= reset
    Muxn_6.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[1] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    io.ipinSW[0] <= Muxn_6.io.out @[Interconnect.scala 479:45]
    node _T_10 = bits(ConfigMem.io.out[0], 13, 12) @[Interconnect.scala 483:39]
    Muxn_6.io.config <= _T_10 @[Interconnect.scala 483:23]
    inst Muxn_7 of Muxn_855 @[Interconnect.scala 473:25]
    Muxn_7.clock <= clock
    Muxn_7.reset <= reset
    Muxn_7.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[1] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    io.ipinSW[1] <= Muxn_7.io.out @[Interconnect.scala 479:45]
    node _T_11 = bits(ConfigMem.io.out[0], 15, 14) @[Interconnect.scala 483:39]
    Muxn_7.io.config <= _T_11 @[Interconnect.scala 483:23]
    inst Muxn_8 of Muxn_856 @[Interconnect.scala 473:25]
    Muxn_8.clock <= clock
    Muxn_8.reset <= reset
    Muxn_8.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[1] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    reg _T_12 : UInt, clock @[Interconnect.scala 477:55]
    _T_12 <= Muxn_8.io.out @[Interconnect.scala 477:55]
    io.otrackW[0] <= _T_12 @[Interconnect.scala 477:45]
    node _T_13 = bits(ConfigMem.io.out[0], 18, 16) @[Interconnect.scala 483:39]
    Muxn_8.io.config <= _T_13 @[Interconnect.scala 483:23]
    inst Muxn_9 of Muxn_857 @[Interconnect.scala 473:25]
    Muxn_9.clock <= clock
    Muxn_9.reset <= reset
    Muxn_9.io.in[0] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    reg _T_14 : UInt, clock @[Interconnect.scala 477:55]
    _T_14 <= Muxn_9.io.out @[Interconnect.scala 477:55]
    io.otrackN[0] <= _T_14 @[Interconnect.scala 477:45]
    node _T_15 = bits(ConfigMem.io.out[0], 21, 19) @[Interconnect.scala 483:39]
    Muxn_9.io.config <= _T_15 @[Interconnect.scala 483:23]
    inst Muxn_10 of Muxn_858 @[Interconnect.scala 473:25]
    Muxn_10.clock <= clock
    Muxn_10.reset <= reset
    Muxn_10.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    reg _T_16 : UInt, clock @[Interconnect.scala 477:55]
    _T_16 <= Muxn_10.io.out @[Interconnect.scala 477:55]
    io.otrackE[0] <= _T_16 @[Interconnect.scala 477:45]
    node _T_17 = bits(ConfigMem.io.out[0], 24, 22) @[Interconnect.scala 483:39]
    Muxn_10.io.config <= _T_17 @[Interconnect.scala 483:23]
    inst Muxn_11 of Muxn_859 @[Interconnect.scala 473:25]
    Muxn_11.clock <= clock
    Muxn_11.reset <= reset
    Muxn_11.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[1] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[4] <= io.itrackE[0] @[Interconnect.scala 475:63]
    reg _T_18 : UInt, clock @[Interconnect.scala 477:55]
    _T_18 <= Muxn_11.io.out @[Interconnect.scala 477:55]
    io.otrackS[0] <= _T_18 @[Interconnect.scala 477:45]
    node _T_19 = bits(ConfigMem.io.out[0], 27, 25) @[Interconnect.scala 483:39]
    Muxn_11.io.config <= _T_19 @[Interconnect.scala 483:23]
    
  module ConfigMem_146 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<0>, flip cfg_data : UInt<32>, out : UInt<28>[1]}
    
    wire _T : UInt<28>[1] @[ConfigMem.scala 27:29]
    _T[0] <= UInt<28>("h00") @[ConfigMem.scala 27:29]
    reg regs : UInt<28>[1], clock with : (reset => (reset, _T)) @[ConfigMem.scala 27:21]
    node _T_1 = eq(io.cfg_addr, UInt<1>("h00")) @[ConfigMem.scala 32:38]
    node _T_2 = and(io.cfg_en, _T_1) @[ConfigMem.scala 32:22]
    when _T_2 : @[ConfigMem.scala 32:54]
      node _T_3 = bits(io.cfg_data, 27, 0) @[ConfigMem.scala 33:31]
      regs[0] <= _T_3 @[ConfigMem.scala 33:17]
      skip @[ConfigMem.scala 32:54]
    io.out[0] <= regs[0] @[ConfigMem.scala 52:45]
    
  module Muxn_860 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_861 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_862 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_863 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_864 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_865 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_866 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_867 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_868 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_869 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_870 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_871 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module GIB_66 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<12>, flip cfg_data : UInt<32>, ipinNW : UInt<32>[2], flip opinNW : UInt<32>[1], ipinNE : UInt<32>[2], flip opinNE : UInt<32>[1], ipinSE : UInt<32>[2], flip opinSE : UInt<32>[1], ipinSW : UInt<32>[2], flip opinSW : UInt<32>[1], flip itrackW : UInt<32>[1], otrackW : UInt<32>[1], flip itrackN : UInt<32>[1], otrackN : UInt<32>[1], flip itrackE : UInt<32>[1], otrackE : UInt<32>[1], flip itrackS : UInt<32>[1], otrackS : UInt<32>[1]}
    
    io.ipinNW[0] <= UInt<1>("h00") @[Interconnect.scala 426:20]
    io.ipinNW[1] <= UInt<1>("h00") @[Interconnect.scala 426:20]
    io.ipinNE[0] <= UInt<1>("h00") @[Interconnect.scala 427:20]
    io.ipinNE[1] <= UInt<1>("h00") @[Interconnect.scala 427:20]
    io.ipinSW[0] <= UInt<1>("h00") @[Interconnect.scala 428:20]
    io.ipinSW[1] <= UInt<1>("h00") @[Interconnect.scala 428:20]
    io.ipinSE[0] <= UInt<1>("h00") @[Interconnect.scala 429:20]
    io.ipinSE[1] <= UInt<1>("h00") @[Interconnect.scala 429:20]
    io.otrackW[0] <= UInt<1>("h00") @[Interconnect.scala 430:21]
    io.otrackN[0] <= UInt<1>("h00") @[Interconnect.scala 431:21]
    io.otrackE[0] <= UInt<1>("h00") @[Interconnect.scala 432:21]
    io.otrackS[0] <= UInt<1>("h00") @[Interconnect.scala 433:21]
    inst ConfigMem of ConfigMem_146 @[Interconnect.scala 463:21]
    ConfigMem.clock <= clock
    ConfigMem.reset <= reset
    node _T = bits(io.cfg_addr, 11, 2) @[Interconnect.scala 464:65]
    node _T_1 = eq(UInt<8>("h094"), _T) @[Interconnect.scala 464:50]
    node _T_2 = and(io.cfg_en, _T_1) @[Interconnect.scala 464:32]
    ConfigMem.io.cfg_en <= _T_2 @[Interconnect.scala 464:19]
    node _T_3 = bits(io.cfg_addr, 1, 0) @[Interconnect.scala 465:35]
    ConfigMem.io.cfg_addr <= _T_3 @[Interconnect.scala 465:21]
    ConfigMem.io.cfg_data <= io.cfg_data @[Interconnect.scala 466:21]
    inst Muxn of Muxn_860 @[Interconnect.scala 473:25]
    Muxn.clock <= clock
    Muxn.reset <= reset
    Muxn.io.in[0] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn.io.in[2] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNW[0] <= Muxn.io.out @[Interconnect.scala 479:45]
    node _T_4 = bits(ConfigMem.io.out[0], 1, 0) @[Interconnect.scala 483:39]
    Muxn.io.config <= _T_4 @[Interconnect.scala 483:23]
    inst Muxn_1 of Muxn_861 @[Interconnect.scala 473:25]
    Muxn_1.clock <= clock
    Muxn_1.reset <= reset
    Muxn_1.io.in[0] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[2] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNW[1] <= Muxn_1.io.out @[Interconnect.scala 479:45]
    node _T_5 = bits(ConfigMem.io.out[0], 3, 2) @[Interconnect.scala 483:39]
    Muxn_1.io.config <= _T_5 @[Interconnect.scala 483:23]
    inst Muxn_2 of Muxn_862 @[Interconnect.scala 473:25]
    Muxn_2.clock <= clock
    Muxn_2.reset <= reset
    Muxn_2.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNE[0] <= Muxn_2.io.out @[Interconnect.scala 479:45]
    node _T_6 = bits(ConfigMem.io.out[0], 5, 4) @[Interconnect.scala 483:39]
    Muxn_2.io.config <= _T_6 @[Interconnect.scala 483:23]
    inst Muxn_3 of Muxn_863 @[Interconnect.scala 473:25]
    Muxn_3.clock <= clock
    Muxn_3.reset <= reset
    Muxn_3.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNE[1] <= Muxn_3.io.out @[Interconnect.scala 479:45]
    node _T_7 = bits(ConfigMem.io.out[0], 7, 6) @[Interconnect.scala 483:39]
    Muxn_3.io.config <= _T_7 @[Interconnect.scala 483:23]
    inst Muxn_4 of Muxn_864 @[Interconnect.scala 473:25]
    Muxn_4.clock <= clock
    Muxn_4.reset <= reset
    Muxn_4.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[1] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    io.ipinSE[0] <= Muxn_4.io.out @[Interconnect.scala 479:45]
    node _T_8 = bits(ConfigMem.io.out[0], 9, 8) @[Interconnect.scala 483:39]
    Muxn_4.io.config <= _T_8 @[Interconnect.scala 483:23]
    inst Muxn_5 of Muxn_865 @[Interconnect.scala 473:25]
    Muxn_5.clock <= clock
    Muxn_5.reset <= reset
    Muxn_5.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[1] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    io.ipinSE[1] <= Muxn_5.io.out @[Interconnect.scala 479:45]
    node _T_9 = bits(ConfigMem.io.out[0], 11, 10) @[Interconnect.scala 483:39]
    Muxn_5.io.config <= _T_9 @[Interconnect.scala 483:23]
    inst Muxn_6 of Muxn_866 @[Interconnect.scala 473:25]
    Muxn_6.clock <= clock
    Muxn_6.reset <= reset
    Muxn_6.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[1] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    io.ipinSW[0] <= Muxn_6.io.out @[Interconnect.scala 479:45]
    node _T_10 = bits(ConfigMem.io.out[0], 13, 12) @[Interconnect.scala 483:39]
    Muxn_6.io.config <= _T_10 @[Interconnect.scala 483:23]
    inst Muxn_7 of Muxn_867 @[Interconnect.scala 473:25]
    Muxn_7.clock <= clock
    Muxn_7.reset <= reset
    Muxn_7.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[1] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    io.ipinSW[1] <= Muxn_7.io.out @[Interconnect.scala 479:45]
    node _T_11 = bits(ConfigMem.io.out[0], 15, 14) @[Interconnect.scala 483:39]
    Muxn_7.io.config <= _T_11 @[Interconnect.scala 483:23]
    inst Muxn_8 of Muxn_868 @[Interconnect.scala 473:25]
    Muxn_8.clock <= clock
    Muxn_8.reset <= reset
    Muxn_8.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[1] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.otrackW[0] <= Muxn_8.io.out @[Interconnect.scala 479:45]
    node _T_12 = bits(ConfigMem.io.out[0], 18, 16) @[Interconnect.scala 483:39]
    Muxn_8.io.config <= _T_12 @[Interconnect.scala 483:23]
    inst Muxn_9 of Muxn_869 @[Interconnect.scala 473:25]
    Muxn_9.clock <= clock
    Muxn_9.reset <= reset
    Muxn_9.io.in[0] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.otrackN[0] <= Muxn_9.io.out @[Interconnect.scala 479:45]
    node _T_13 = bits(ConfigMem.io.out[0], 21, 19) @[Interconnect.scala 483:39]
    Muxn_9.io.config <= _T_13 @[Interconnect.scala 483:23]
    inst Muxn_10 of Muxn_870 @[Interconnect.scala 473:25]
    Muxn_10.clock <= clock
    Muxn_10.reset <= reset
    Muxn_10.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.otrackE[0] <= Muxn_10.io.out @[Interconnect.scala 479:45]
    node _T_14 = bits(ConfigMem.io.out[0], 24, 22) @[Interconnect.scala 483:39]
    Muxn_10.io.config <= _T_14 @[Interconnect.scala 483:23]
    inst Muxn_11 of Muxn_871 @[Interconnect.scala 473:25]
    Muxn_11.clock <= clock
    Muxn_11.reset <= reset
    Muxn_11.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[1] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[4] <= io.itrackE[0] @[Interconnect.scala 475:63]
    io.otrackS[0] <= Muxn_11.io.out @[Interconnect.scala 479:45]
    node _T_15 = bits(ConfigMem.io.out[0], 27, 25) @[Interconnect.scala 483:39]
    Muxn_11.io.config <= _T_15 @[Interconnect.scala 483:23]
    
  module ConfigMem_147 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<0>, flip cfg_data : UInt<32>, out : UInt<28>[1]}
    
    wire _T : UInt<28>[1] @[ConfigMem.scala 27:29]
    _T[0] <= UInt<28>("h00") @[ConfigMem.scala 27:29]
    reg regs : UInt<28>[1], clock with : (reset => (reset, _T)) @[ConfigMem.scala 27:21]
    node _T_1 = eq(io.cfg_addr, UInt<1>("h00")) @[ConfigMem.scala 32:38]
    node _T_2 = and(io.cfg_en, _T_1) @[ConfigMem.scala 32:22]
    when _T_2 : @[ConfigMem.scala 32:54]
      node _T_3 = bits(io.cfg_data, 27, 0) @[ConfigMem.scala 33:31]
      regs[0] <= _T_3 @[ConfigMem.scala 33:17]
      skip @[ConfigMem.scala 32:54]
    io.out[0] <= regs[0] @[ConfigMem.scala 52:45]
    
  module Muxn_872 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_873 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_874 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_875 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_876 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_877 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_878 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_879 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_880 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_881 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_882 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_883 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module GIB_67 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<12>, flip cfg_data : UInt<32>, ipinNW : UInt<32>[2], flip opinNW : UInt<32>[1], ipinNE : UInt<32>[2], flip opinNE : UInt<32>[1], ipinSE : UInt<32>[2], flip opinSE : UInt<32>[1], ipinSW : UInt<32>[2], flip opinSW : UInt<32>[1], flip itrackW : UInt<32>[1], otrackW : UInt<32>[1], flip itrackN : UInt<32>[1], otrackN : UInt<32>[1], flip itrackE : UInt<32>[1], otrackE : UInt<32>[1], flip itrackS : UInt<32>[1], otrackS : UInt<32>[1]}
    
    io.ipinNW[0] <= UInt<1>("h00") @[Interconnect.scala 426:20]
    io.ipinNW[1] <= UInt<1>("h00") @[Interconnect.scala 426:20]
    io.ipinNE[0] <= UInt<1>("h00") @[Interconnect.scala 427:20]
    io.ipinNE[1] <= UInt<1>("h00") @[Interconnect.scala 427:20]
    io.ipinSW[0] <= UInt<1>("h00") @[Interconnect.scala 428:20]
    io.ipinSW[1] <= UInt<1>("h00") @[Interconnect.scala 428:20]
    io.ipinSE[0] <= UInt<1>("h00") @[Interconnect.scala 429:20]
    io.ipinSE[1] <= UInt<1>("h00") @[Interconnect.scala 429:20]
    io.otrackW[0] <= UInt<1>("h00") @[Interconnect.scala 430:21]
    io.otrackN[0] <= UInt<1>("h00") @[Interconnect.scala 431:21]
    io.otrackE[0] <= UInt<1>("h00") @[Interconnect.scala 432:21]
    io.otrackS[0] <= UInt<1>("h00") @[Interconnect.scala 433:21]
    inst ConfigMem of ConfigMem_147 @[Interconnect.scala 463:21]
    ConfigMem.clock <= clock
    ConfigMem.reset <= reset
    node _T = bits(io.cfg_addr, 11, 2) @[Interconnect.scala 464:65]
    node _T_1 = eq(UInt<8>("h095"), _T) @[Interconnect.scala 464:50]
    node _T_2 = and(io.cfg_en, _T_1) @[Interconnect.scala 464:32]
    ConfigMem.io.cfg_en <= _T_2 @[Interconnect.scala 464:19]
    node _T_3 = bits(io.cfg_addr, 1, 0) @[Interconnect.scala 465:35]
    ConfigMem.io.cfg_addr <= _T_3 @[Interconnect.scala 465:21]
    ConfigMem.io.cfg_data <= io.cfg_data @[Interconnect.scala 466:21]
    inst Muxn of Muxn_872 @[Interconnect.scala 473:25]
    Muxn.clock <= clock
    Muxn.reset <= reset
    Muxn.io.in[0] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn.io.in[2] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNW[0] <= Muxn.io.out @[Interconnect.scala 479:45]
    node _T_4 = bits(ConfigMem.io.out[0], 1, 0) @[Interconnect.scala 483:39]
    Muxn.io.config <= _T_4 @[Interconnect.scala 483:23]
    inst Muxn_1 of Muxn_873 @[Interconnect.scala 473:25]
    Muxn_1.clock <= clock
    Muxn_1.reset <= reset
    Muxn_1.io.in[0] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[2] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNW[1] <= Muxn_1.io.out @[Interconnect.scala 479:45]
    node _T_5 = bits(ConfigMem.io.out[0], 3, 2) @[Interconnect.scala 483:39]
    Muxn_1.io.config <= _T_5 @[Interconnect.scala 483:23]
    inst Muxn_2 of Muxn_874 @[Interconnect.scala 473:25]
    Muxn_2.clock <= clock
    Muxn_2.reset <= reset
    Muxn_2.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNE[0] <= Muxn_2.io.out @[Interconnect.scala 479:45]
    node _T_6 = bits(ConfigMem.io.out[0], 5, 4) @[Interconnect.scala 483:39]
    Muxn_2.io.config <= _T_6 @[Interconnect.scala 483:23]
    inst Muxn_3 of Muxn_875 @[Interconnect.scala 473:25]
    Muxn_3.clock <= clock
    Muxn_3.reset <= reset
    Muxn_3.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNE[1] <= Muxn_3.io.out @[Interconnect.scala 479:45]
    node _T_7 = bits(ConfigMem.io.out[0], 7, 6) @[Interconnect.scala 483:39]
    Muxn_3.io.config <= _T_7 @[Interconnect.scala 483:23]
    inst Muxn_4 of Muxn_876 @[Interconnect.scala 473:25]
    Muxn_4.clock <= clock
    Muxn_4.reset <= reset
    Muxn_4.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[1] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    io.ipinSE[0] <= Muxn_4.io.out @[Interconnect.scala 479:45]
    node _T_8 = bits(ConfigMem.io.out[0], 9, 8) @[Interconnect.scala 483:39]
    Muxn_4.io.config <= _T_8 @[Interconnect.scala 483:23]
    inst Muxn_5 of Muxn_877 @[Interconnect.scala 473:25]
    Muxn_5.clock <= clock
    Muxn_5.reset <= reset
    Muxn_5.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[1] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    io.ipinSE[1] <= Muxn_5.io.out @[Interconnect.scala 479:45]
    node _T_9 = bits(ConfigMem.io.out[0], 11, 10) @[Interconnect.scala 483:39]
    Muxn_5.io.config <= _T_9 @[Interconnect.scala 483:23]
    inst Muxn_6 of Muxn_878 @[Interconnect.scala 473:25]
    Muxn_6.clock <= clock
    Muxn_6.reset <= reset
    Muxn_6.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[1] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    io.ipinSW[0] <= Muxn_6.io.out @[Interconnect.scala 479:45]
    node _T_10 = bits(ConfigMem.io.out[0], 13, 12) @[Interconnect.scala 483:39]
    Muxn_6.io.config <= _T_10 @[Interconnect.scala 483:23]
    inst Muxn_7 of Muxn_879 @[Interconnect.scala 473:25]
    Muxn_7.clock <= clock
    Muxn_7.reset <= reset
    Muxn_7.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[1] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    io.ipinSW[1] <= Muxn_7.io.out @[Interconnect.scala 479:45]
    node _T_11 = bits(ConfigMem.io.out[0], 15, 14) @[Interconnect.scala 483:39]
    Muxn_7.io.config <= _T_11 @[Interconnect.scala 483:23]
    inst Muxn_8 of Muxn_880 @[Interconnect.scala 473:25]
    Muxn_8.clock <= clock
    Muxn_8.reset <= reset
    Muxn_8.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[1] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    reg _T_12 : UInt, clock @[Interconnect.scala 477:55]
    _T_12 <= Muxn_8.io.out @[Interconnect.scala 477:55]
    io.otrackW[0] <= _T_12 @[Interconnect.scala 477:45]
    node _T_13 = bits(ConfigMem.io.out[0], 18, 16) @[Interconnect.scala 483:39]
    Muxn_8.io.config <= _T_13 @[Interconnect.scala 483:23]
    inst Muxn_9 of Muxn_881 @[Interconnect.scala 473:25]
    Muxn_9.clock <= clock
    Muxn_9.reset <= reset
    Muxn_9.io.in[0] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    reg _T_14 : UInt, clock @[Interconnect.scala 477:55]
    _T_14 <= Muxn_9.io.out @[Interconnect.scala 477:55]
    io.otrackN[0] <= _T_14 @[Interconnect.scala 477:45]
    node _T_15 = bits(ConfigMem.io.out[0], 21, 19) @[Interconnect.scala 483:39]
    Muxn_9.io.config <= _T_15 @[Interconnect.scala 483:23]
    inst Muxn_10 of Muxn_882 @[Interconnect.scala 473:25]
    Muxn_10.clock <= clock
    Muxn_10.reset <= reset
    Muxn_10.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    reg _T_16 : UInt, clock @[Interconnect.scala 477:55]
    _T_16 <= Muxn_10.io.out @[Interconnect.scala 477:55]
    io.otrackE[0] <= _T_16 @[Interconnect.scala 477:45]
    node _T_17 = bits(ConfigMem.io.out[0], 24, 22) @[Interconnect.scala 483:39]
    Muxn_10.io.config <= _T_17 @[Interconnect.scala 483:23]
    inst Muxn_11 of Muxn_883 @[Interconnect.scala 473:25]
    Muxn_11.clock <= clock
    Muxn_11.reset <= reset
    Muxn_11.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[1] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[4] <= io.itrackE[0] @[Interconnect.scala 475:63]
    reg _T_18 : UInt, clock @[Interconnect.scala 477:55]
    _T_18 <= Muxn_11.io.out @[Interconnect.scala 477:55]
    io.otrackS[0] <= _T_18 @[Interconnect.scala 477:45]
    node _T_19 = bits(ConfigMem.io.out[0], 27, 25) @[Interconnect.scala 483:39]
    Muxn_11.io.config <= _T_19 @[Interconnect.scala 483:23]
    
  module ConfigMem_148 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<0>, flip cfg_data : UInt<32>, out : UInt<28>[1]}
    
    wire _T : UInt<28>[1] @[ConfigMem.scala 27:29]
    _T[0] <= UInt<28>("h00") @[ConfigMem.scala 27:29]
    reg regs : UInt<28>[1], clock with : (reset => (reset, _T)) @[ConfigMem.scala 27:21]
    node _T_1 = eq(io.cfg_addr, UInt<1>("h00")) @[ConfigMem.scala 32:38]
    node _T_2 = and(io.cfg_en, _T_1) @[ConfigMem.scala 32:22]
    when _T_2 : @[ConfigMem.scala 32:54]
      node _T_3 = bits(io.cfg_data, 27, 0) @[ConfigMem.scala 33:31]
      regs[0] <= _T_3 @[ConfigMem.scala 33:17]
      skip @[ConfigMem.scala 32:54]
    io.out[0] <= regs[0] @[ConfigMem.scala 52:45]
    
  module Muxn_884 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_885 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_886 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_887 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_888 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_889 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_890 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_891 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_892 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_893 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_894 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_895 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module GIB_68 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<12>, flip cfg_data : UInt<32>, ipinNW : UInt<32>[2], flip opinNW : UInt<32>[1], ipinNE : UInt<32>[2], flip opinNE : UInt<32>[1], ipinSE : UInt<32>[2], flip opinSE : UInt<32>[1], ipinSW : UInt<32>[2], flip opinSW : UInt<32>[1], flip itrackW : UInt<32>[1], otrackW : UInt<32>[1], flip itrackN : UInt<32>[1], otrackN : UInt<32>[1], flip itrackE : UInt<32>[1], otrackE : UInt<32>[1], flip itrackS : UInt<32>[1], otrackS : UInt<32>[1]}
    
    io.ipinNW[0] <= UInt<1>("h00") @[Interconnect.scala 426:20]
    io.ipinNW[1] <= UInt<1>("h00") @[Interconnect.scala 426:20]
    io.ipinNE[0] <= UInt<1>("h00") @[Interconnect.scala 427:20]
    io.ipinNE[1] <= UInt<1>("h00") @[Interconnect.scala 427:20]
    io.ipinSW[0] <= UInt<1>("h00") @[Interconnect.scala 428:20]
    io.ipinSW[1] <= UInt<1>("h00") @[Interconnect.scala 428:20]
    io.ipinSE[0] <= UInt<1>("h00") @[Interconnect.scala 429:20]
    io.ipinSE[1] <= UInt<1>("h00") @[Interconnect.scala 429:20]
    io.otrackW[0] <= UInt<1>("h00") @[Interconnect.scala 430:21]
    io.otrackN[0] <= UInt<1>("h00") @[Interconnect.scala 431:21]
    io.otrackE[0] <= UInt<1>("h00") @[Interconnect.scala 432:21]
    io.otrackS[0] <= UInt<1>("h00") @[Interconnect.scala 433:21]
    inst ConfigMem of ConfigMem_148 @[Interconnect.scala 463:21]
    ConfigMem.clock <= clock
    ConfigMem.reset <= reset
    node _T = bits(io.cfg_addr, 11, 2) @[Interconnect.scala 464:65]
    node _T_1 = eq(UInt<8>("h096"), _T) @[Interconnect.scala 464:50]
    node _T_2 = and(io.cfg_en, _T_1) @[Interconnect.scala 464:32]
    ConfigMem.io.cfg_en <= _T_2 @[Interconnect.scala 464:19]
    node _T_3 = bits(io.cfg_addr, 1, 0) @[Interconnect.scala 465:35]
    ConfigMem.io.cfg_addr <= _T_3 @[Interconnect.scala 465:21]
    ConfigMem.io.cfg_data <= io.cfg_data @[Interconnect.scala 466:21]
    inst Muxn of Muxn_884 @[Interconnect.scala 473:25]
    Muxn.clock <= clock
    Muxn.reset <= reset
    Muxn.io.in[0] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn.io.in[2] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNW[0] <= Muxn.io.out @[Interconnect.scala 479:45]
    node _T_4 = bits(ConfigMem.io.out[0], 1, 0) @[Interconnect.scala 483:39]
    Muxn.io.config <= _T_4 @[Interconnect.scala 483:23]
    inst Muxn_1 of Muxn_885 @[Interconnect.scala 473:25]
    Muxn_1.clock <= clock
    Muxn_1.reset <= reset
    Muxn_1.io.in[0] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[2] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNW[1] <= Muxn_1.io.out @[Interconnect.scala 479:45]
    node _T_5 = bits(ConfigMem.io.out[0], 3, 2) @[Interconnect.scala 483:39]
    Muxn_1.io.config <= _T_5 @[Interconnect.scala 483:23]
    inst Muxn_2 of Muxn_886 @[Interconnect.scala 473:25]
    Muxn_2.clock <= clock
    Muxn_2.reset <= reset
    Muxn_2.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNE[0] <= Muxn_2.io.out @[Interconnect.scala 479:45]
    node _T_6 = bits(ConfigMem.io.out[0], 5, 4) @[Interconnect.scala 483:39]
    Muxn_2.io.config <= _T_6 @[Interconnect.scala 483:23]
    inst Muxn_3 of Muxn_887 @[Interconnect.scala 473:25]
    Muxn_3.clock <= clock
    Muxn_3.reset <= reset
    Muxn_3.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNE[1] <= Muxn_3.io.out @[Interconnect.scala 479:45]
    node _T_7 = bits(ConfigMem.io.out[0], 7, 6) @[Interconnect.scala 483:39]
    Muxn_3.io.config <= _T_7 @[Interconnect.scala 483:23]
    inst Muxn_4 of Muxn_888 @[Interconnect.scala 473:25]
    Muxn_4.clock <= clock
    Muxn_4.reset <= reset
    Muxn_4.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[1] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    io.ipinSE[0] <= Muxn_4.io.out @[Interconnect.scala 479:45]
    node _T_8 = bits(ConfigMem.io.out[0], 9, 8) @[Interconnect.scala 483:39]
    Muxn_4.io.config <= _T_8 @[Interconnect.scala 483:23]
    inst Muxn_5 of Muxn_889 @[Interconnect.scala 473:25]
    Muxn_5.clock <= clock
    Muxn_5.reset <= reset
    Muxn_5.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[1] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    io.ipinSE[1] <= Muxn_5.io.out @[Interconnect.scala 479:45]
    node _T_9 = bits(ConfigMem.io.out[0], 11, 10) @[Interconnect.scala 483:39]
    Muxn_5.io.config <= _T_9 @[Interconnect.scala 483:23]
    inst Muxn_6 of Muxn_890 @[Interconnect.scala 473:25]
    Muxn_6.clock <= clock
    Muxn_6.reset <= reset
    Muxn_6.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[1] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    io.ipinSW[0] <= Muxn_6.io.out @[Interconnect.scala 479:45]
    node _T_10 = bits(ConfigMem.io.out[0], 13, 12) @[Interconnect.scala 483:39]
    Muxn_6.io.config <= _T_10 @[Interconnect.scala 483:23]
    inst Muxn_7 of Muxn_891 @[Interconnect.scala 473:25]
    Muxn_7.clock <= clock
    Muxn_7.reset <= reset
    Muxn_7.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[1] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    io.ipinSW[1] <= Muxn_7.io.out @[Interconnect.scala 479:45]
    node _T_11 = bits(ConfigMem.io.out[0], 15, 14) @[Interconnect.scala 483:39]
    Muxn_7.io.config <= _T_11 @[Interconnect.scala 483:23]
    inst Muxn_8 of Muxn_892 @[Interconnect.scala 473:25]
    Muxn_8.clock <= clock
    Muxn_8.reset <= reset
    Muxn_8.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[1] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.otrackW[0] <= Muxn_8.io.out @[Interconnect.scala 479:45]
    node _T_12 = bits(ConfigMem.io.out[0], 18, 16) @[Interconnect.scala 483:39]
    Muxn_8.io.config <= _T_12 @[Interconnect.scala 483:23]
    inst Muxn_9 of Muxn_893 @[Interconnect.scala 473:25]
    Muxn_9.clock <= clock
    Muxn_9.reset <= reset
    Muxn_9.io.in[0] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.otrackN[0] <= Muxn_9.io.out @[Interconnect.scala 479:45]
    node _T_13 = bits(ConfigMem.io.out[0], 21, 19) @[Interconnect.scala 483:39]
    Muxn_9.io.config <= _T_13 @[Interconnect.scala 483:23]
    inst Muxn_10 of Muxn_894 @[Interconnect.scala 473:25]
    Muxn_10.clock <= clock
    Muxn_10.reset <= reset
    Muxn_10.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.otrackE[0] <= Muxn_10.io.out @[Interconnect.scala 479:45]
    node _T_14 = bits(ConfigMem.io.out[0], 24, 22) @[Interconnect.scala 483:39]
    Muxn_10.io.config <= _T_14 @[Interconnect.scala 483:23]
    inst Muxn_11 of Muxn_895 @[Interconnect.scala 473:25]
    Muxn_11.clock <= clock
    Muxn_11.reset <= reset
    Muxn_11.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[1] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[4] <= io.itrackE[0] @[Interconnect.scala 475:63]
    io.otrackS[0] <= Muxn_11.io.out @[Interconnect.scala 479:45]
    node _T_15 = bits(ConfigMem.io.out[0], 27, 25) @[Interconnect.scala 483:39]
    Muxn_11.io.config <= _T_15 @[Interconnect.scala 483:23]
    
  module ConfigMem_149 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<0>, flip cfg_data : UInt<32>, out : UInt<28>[1]}
    
    wire _T : UInt<28>[1] @[ConfigMem.scala 27:29]
    _T[0] <= UInt<28>("h00") @[ConfigMem.scala 27:29]
    reg regs : UInt<28>[1], clock with : (reset => (reset, _T)) @[ConfigMem.scala 27:21]
    node _T_1 = eq(io.cfg_addr, UInt<1>("h00")) @[ConfigMem.scala 32:38]
    node _T_2 = and(io.cfg_en, _T_1) @[ConfigMem.scala 32:22]
    when _T_2 : @[ConfigMem.scala 32:54]
      node _T_3 = bits(io.cfg_data, 27, 0) @[ConfigMem.scala 33:31]
      regs[0] <= _T_3 @[ConfigMem.scala 33:17]
      skip @[ConfigMem.scala 32:54]
    io.out[0] <= regs[0] @[ConfigMem.scala 52:45]
    
  module Muxn_896 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_897 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_898 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_899 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_900 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_901 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_902 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_903 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_904 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_905 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_906 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_907 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module GIB_69 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<12>, flip cfg_data : UInt<32>, ipinNW : UInt<32>[2], flip opinNW : UInt<32>[1], ipinNE : UInt<32>[2], flip opinNE : UInt<32>[1], ipinSE : UInt<32>[2], flip opinSE : UInt<32>[1], ipinSW : UInt<32>[2], flip opinSW : UInt<32>[1], flip itrackW : UInt<32>[1], otrackW : UInt<32>[1], flip itrackN : UInt<32>[1], otrackN : UInt<32>[1], flip itrackE : UInt<32>[1], otrackE : UInt<32>[1], flip itrackS : UInt<32>[1], otrackS : UInt<32>[1]}
    
    io.ipinNW[0] <= UInt<1>("h00") @[Interconnect.scala 426:20]
    io.ipinNW[1] <= UInt<1>("h00") @[Interconnect.scala 426:20]
    io.ipinNE[0] <= UInt<1>("h00") @[Interconnect.scala 427:20]
    io.ipinNE[1] <= UInt<1>("h00") @[Interconnect.scala 427:20]
    io.ipinSW[0] <= UInt<1>("h00") @[Interconnect.scala 428:20]
    io.ipinSW[1] <= UInt<1>("h00") @[Interconnect.scala 428:20]
    io.ipinSE[0] <= UInt<1>("h00") @[Interconnect.scala 429:20]
    io.ipinSE[1] <= UInt<1>("h00") @[Interconnect.scala 429:20]
    io.otrackW[0] <= UInt<1>("h00") @[Interconnect.scala 430:21]
    io.otrackN[0] <= UInt<1>("h00") @[Interconnect.scala 431:21]
    io.otrackE[0] <= UInt<1>("h00") @[Interconnect.scala 432:21]
    io.otrackS[0] <= UInt<1>("h00") @[Interconnect.scala 433:21]
    inst ConfigMem of ConfigMem_149 @[Interconnect.scala 463:21]
    ConfigMem.clock <= clock
    ConfigMem.reset <= reset
    node _T = bits(io.cfg_addr, 11, 2) @[Interconnect.scala 464:65]
    node _T_1 = eq(UInt<8>("h097"), _T) @[Interconnect.scala 464:50]
    node _T_2 = and(io.cfg_en, _T_1) @[Interconnect.scala 464:32]
    ConfigMem.io.cfg_en <= _T_2 @[Interconnect.scala 464:19]
    node _T_3 = bits(io.cfg_addr, 1, 0) @[Interconnect.scala 465:35]
    ConfigMem.io.cfg_addr <= _T_3 @[Interconnect.scala 465:21]
    ConfigMem.io.cfg_data <= io.cfg_data @[Interconnect.scala 466:21]
    inst Muxn of Muxn_896 @[Interconnect.scala 473:25]
    Muxn.clock <= clock
    Muxn.reset <= reset
    Muxn.io.in[0] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn.io.in[2] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNW[0] <= Muxn.io.out @[Interconnect.scala 479:45]
    node _T_4 = bits(ConfigMem.io.out[0], 1, 0) @[Interconnect.scala 483:39]
    Muxn.io.config <= _T_4 @[Interconnect.scala 483:23]
    inst Muxn_1 of Muxn_897 @[Interconnect.scala 473:25]
    Muxn_1.clock <= clock
    Muxn_1.reset <= reset
    Muxn_1.io.in[0] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[2] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNW[1] <= Muxn_1.io.out @[Interconnect.scala 479:45]
    node _T_5 = bits(ConfigMem.io.out[0], 3, 2) @[Interconnect.scala 483:39]
    Muxn_1.io.config <= _T_5 @[Interconnect.scala 483:23]
    inst Muxn_2 of Muxn_898 @[Interconnect.scala 473:25]
    Muxn_2.clock <= clock
    Muxn_2.reset <= reset
    Muxn_2.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNE[0] <= Muxn_2.io.out @[Interconnect.scala 479:45]
    node _T_6 = bits(ConfigMem.io.out[0], 5, 4) @[Interconnect.scala 483:39]
    Muxn_2.io.config <= _T_6 @[Interconnect.scala 483:23]
    inst Muxn_3 of Muxn_899 @[Interconnect.scala 473:25]
    Muxn_3.clock <= clock
    Muxn_3.reset <= reset
    Muxn_3.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNE[1] <= Muxn_3.io.out @[Interconnect.scala 479:45]
    node _T_7 = bits(ConfigMem.io.out[0], 7, 6) @[Interconnect.scala 483:39]
    Muxn_3.io.config <= _T_7 @[Interconnect.scala 483:23]
    inst Muxn_4 of Muxn_900 @[Interconnect.scala 473:25]
    Muxn_4.clock <= clock
    Muxn_4.reset <= reset
    Muxn_4.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[1] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    io.ipinSE[0] <= Muxn_4.io.out @[Interconnect.scala 479:45]
    node _T_8 = bits(ConfigMem.io.out[0], 9, 8) @[Interconnect.scala 483:39]
    Muxn_4.io.config <= _T_8 @[Interconnect.scala 483:23]
    inst Muxn_5 of Muxn_901 @[Interconnect.scala 473:25]
    Muxn_5.clock <= clock
    Muxn_5.reset <= reset
    Muxn_5.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[1] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    io.ipinSE[1] <= Muxn_5.io.out @[Interconnect.scala 479:45]
    node _T_9 = bits(ConfigMem.io.out[0], 11, 10) @[Interconnect.scala 483:39]
    Muxn_5.io.config <= _T_9 @[Interconnect.scala 483:23]
    inst Muxn_6 of Muxn_902 @[Interconnect.scala 473:25]
    Muxn_6.clock <= clock
    Muxn_6.reset <= reset
    Muxn_6.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[1] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    io.ipinSW[0] <= Muxn_6.io.out @[Interconnect.scala 479:45]
    node _T_10 = bits(ConfigMem.io.out[0], 13, 12) @[Interconnect.scala 483:39]
    Muxn_6.io.config <= _T_10 @[Interconnect.scala 483:23]
    inst Muxn_7 of Muxn_903 @[Interconnect.scala 473:25]
    Muxn_7.clock <= clock
    Muxn_7.reset <= reset
    Muxn_7.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[1] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    io.ipinSW[1] <= Muxn_7.io.out @[Interconnect.scala 479:45]
    node _T_11 = bits(ConfigMem.io.out[0], 15, 14) @[Interconnect.scala 483:39]
    Muxn_7.io.config <= _T_11 @[Interconnect.scala 483:23]
    inst Muxn_8 of Muxn_904 @[Interconnect.scala 473:25]
    Muxn_8.clock <= clock
    Muxn_8.reset <= reset
    Muxn_8.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[1] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    reg _T_12 : UInt, clock @[Interconnect.scala 477:55]
    _T_12 <= Muxn_8.io.out @[Interconnect.scala 477:55]
    io.otrackW[0] <= _T_12 @[Interconnect.scala 477:45]
    node _T_13 = bits(ConfigMem.io.out[0], 18, 16) @[Interconnect.scala 483:39]
    Muxn_8.io.config <= _T_13 @[Interconnect.scala 483:23]
    inst Muxn_9 of Muxn_905 @[Interconnect.scala 473:25]
    Muxn_9.clock <= clock
    Muxn_9.reset <= reset
    Muxn_9.io.in[0] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    reg _T_14 : UInt, clock @[Interconnect.scala 477:55]
    _T_14 <= Muxn_9.io.out @[Interconnect.scala 477:55]
    io.otrackN[0] <= _T_14 @[Interconnect.scala 477:45]
    node _T_15 = bits(ConfigMem.io.out[0], 21, 19) @[Interconnect.scala 483:39]
    Muxn_9.io.config <= _T_15 @[Interconnect.scala 483:23]
    inst Muxn_10 of Muxn_906 @[Interconnect.scala 473:25]
    Muxn_10.clock <= clock
    Muxn_10.reset <= reset
    Muxn_10.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    reg _T_16 : UInt, clock @[Interconnect.scala 477:55]
    _T_16 <= Muxn_10.io.out @[Interconnect.scala 477:55]
    io.otrackE[0] <= _T_16 @[Interconnect.scala 477:45]
    node _T_17 = bits(ConfigMem.io.out[0], 24, 22) @[Interconnect.scala 483:39]
    Muxn_10.io.config <= _T_17 @[Interconnect.scala 483:23]
    inst Muxn_11 of Muxn_907 @[Interconnect.scala 473:25]
    Muxn_11.clock <= clock
    Muxn_11.reset <= reset
    Muxn_11.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[1] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[4] <= io.itrackE[0] @[Interconnect.scala 475:63]
    reg _T_18 : UInt, clock @[Interconnect.scala 477:55]
    _T_18 <= Muxn_11.io.out @[Interconnect.scala 477:55]
    io.otrackS[0] <= _T_18 @[Interconnect.scala 477:45]
    node _T_19 = bits(ConfigMem.io.out[0], 27, 25) @[Interconnect.scala 483:39]
    Muxn_11.io.config <= _T_19 @[Interconnect.scala 483:23]
    
  module ConfigMem_150 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<0>, flip cfg_data : UInt<32>, out : UInt<28>[1]}
    
    wire _T : UInt<28>[1] @[ConfigMem.scala 27:29]
    _T[0] <= UInt<28>("h00") @[ConfigMem.scala 27:29]
    reg regs : UInt<28>[1], clock with : (reset => (reset, _T)) @[ConfigMem.scala 27:21]
    node _T_1 = eq(io.cfg_addr, UInt<1>("h00")) @[ConfigMem.scala 32:38]
    node _T_2 = and(io.cfg_en, _T_1) @[ConfigMem.scala 32:22]
    when _T_2 : @[ConfigMem.scala 32:54]
      node _T_3 = bits(io.cfg_data, 27, 0) @[ConfigMem.scala 33:31]
      regs[0] <= _T_3 @[ConfigMem.scala 33:17]
      skip @[ConfigMem.scala 32:54]
    io.out[0] <= regs[0] @[ConfigMem.scala 52:45]
    
  module Muxn_908 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_909 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_910 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_911 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_912 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_913 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_914 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_915 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_916 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_917 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_918 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_919 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module GIB_70 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<12>, flip cfg_data : UInt<32>, ipinNW : UInt<32>[2], flip opinNW : UInt<32>[1], ipinNE : UInt<32>[2], flip opinNE : UInt<32>[1], ipinSE : UInt<32>[2], flip opinSE : UInt<32>[1], ipinSW : UInt<32>[2], flip opinSW : UInt<32>[1], flip itrackW : UInt<32>[1], otrackW : UInt<32>[1], flip itrackN : UInt<32>[1], otrackN : UInt<32>[1], flip itrackE : UInt<32>[1], otrackE : UInt<32>[1], flip itrackS : UInt<32>[1], otrackS : UInt<32>[1]}
    
    io.ipinNW[0] <= UInt<1>("h00") @[Interconnect.scala 426:20]
    io.ipinNW[1] <= UInt<1>("h00") @[Interconnect.scala 426:20]
    io.ipinNE[0] <= UInt<1>("h00") @[Interconnect.scala 427:20]
    io.ipinNE[1] <= UInt<1>("h00") @[Interconnect.scala 427:20]
    io.ipinSW[0] <= UInt<1>("h00") @[Interconnect.scala 428:20]
    io.ipinSW[1] <= UInt<1>("h00") @[Interconnect.scala 428:20]
    io.ipinSE[0] <= UInt<1>("h00") @[Interconnect.scala 429:20]
    io.ipinSE[1] <= UInt<1>("h00") @[Interconnect.scala 429:20]
    io.otrackW[0] <= UInt<1>("h00") @[Interconnect.scala 430:21]
    io.otrackN[0] <= UInt<1>("h00") @[Interconnect.scala 431:21]
    io.otrackE[0] <= UInt<1>("h00") @[Interconnect.scala 432:21]
    io.otrackS[0] <= UInt<1>("h00") @[Interconnect.scala 433:21]
    inst ConfigMem of ConfigMem_150 @[Interconnect.scala 463:21]
    ConfigMem.clock <= clock
    ConfigMem.reset <= reset
    node _T = bits(io.cfg_addr, 11, 2) @[Interconnect.scala 464:65]
    node _T_1 = eq(UInt<8>("h098"), _T) @[Interconnect.scala 464:50]
    node _T_2 = and(io.cfg_en, _T_1) @[Interconnect.scala 464:32]
    ConfigMem.io.cfg_en <= _T_2 @[Interconnect.scala 464:19]
    node _T_3 = bits(io.cfg_addr, 1, 0) @[Interconnect.scala 465:35]
    ConfigMem.io.cfg_addr <= _T_3 @[Interconnect.scala 465:21]
    ConfigMem.io.cfg_data <= io.cfg_data @[Interconnect.scala 466:21]
    inst Muxn of Muxn_908 @[Interconnect.scala 473:25]
    Muxn.clock <= clock
    Muxn.reset <= reset
    Muxn.io.in[0] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn.io.in[2] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNW[0] <= Muxn.io.out @[Interconnect.scala 479:45]
    node _T_4 = bits(ConfigMem.io.out[0], 1, 0) @[Interconnect.scala 483:39]
    Muxn.io.config <= _T_4 @[Interconnect.scala 483:23]
    inst Muxn_1 of Muxn_909 @[Interconnect.scala 473:25]
    Muxn_1.clock <= clock
    Muxn_1.reset <= reset
    Muxn_1.io.in[0] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[2] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNW[1] <= Muxn_1.io.out @[Interconnect.scala 479:45]
    node _T_5 = bits(ConfigMem.io.out[0], 3, 2) @[Interconnect.scala 483:39]
    Muxn_1.io.config <= _T_5 @[Interconnect.scala 483:23]
    inst Muxn_2 of Muxn_910 @[Interconnect.scala 473:25]
    Muxn_2.clock <= clock
    Muxn_2.reset <= reset
    Muxn_2.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNE[0] <= Muxn_2.io.out @[Interconnect.scala 479:45]
    node _T_6 = bits(ConfigMem.io.out[0], 5, 4) @[Interconnect.scala 483:39]
    Muxn_2.io.config <= _T_6 @[Interconnect.scala 483:23]
    inst Muxn_3 of Muxn_911 @[Interconnect.scala 473:25]
    Muxn_3.clock <= clock
    Muxn_3.reset <= reset
    Muxn_3.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNE[1] <= Muxn_3.io.out @[Interconnect.scala 479:45]
    node _T_7 = bits(ConfigMem.io.out[0], 7, 6) @[Interconnect.scala 483:39]
    Muxn_3.io.config <= _T_7 @[Interconnect.scala 483:23]
    inst Muxn_4 of Muxn_912 @[Interconnect.scala 473:25]
    Muxn_4.clock <= clock
    Muxn_4.reset <= reset
    Muxn_4.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[1] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    io.ipinSE[0] <= Muxn_4.io.out @[Interconnect.scala 479:45]
    node _T_8 = bits(ConfigMem.io.out[0], 9, 8) @[Interconnect.scala 483:39]
    Muxn_4.io.config <= _T_8 @[Interconnect.scala 483:23]
    inst Muxn_5 of Muxn_913 @[Interconnect.scala 473:25]
    Muxn_5.clock <= clock
    Muxn_5.reset <= reset
    Muxn_5.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[1] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    io.ipinSE[1] <= Muxn_5.io.out @[Interconnect.scala 479:45]
    node _T_9 = bits(ConfigMem.io.out[0], 11, 10) @[Interconnect.scala 483:39]
    Muxn_5.io.config <= _T_9 @[Interconnect.scala 483:23]
    inst Muxn_6 of Muxn_914 @[Interconnect.scala 473:25]
    Muxn_6.clock <= clock
    Muxn_6.reset <= reset
    Muxn_6.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[1] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    io.ipinSW[0] <= Muxn_6.io.out @[Interconnect.scala 479:45]
    node _T_10 = bits(ConfigMem.io.out[0], 13, 12) @[Interconnect.scala 483:39]
    Muxn_6.io.config <= _T_10 @[Interconnect.scala 483:23]
    inst Muxn_7 of Muxn_915 @[Interconnect.scala 473:25]
    Muxn_7.clock <= clock
    Muxn_7.reset <= reset
    Muxn_7.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[1] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    io.ipinSW[1] <= Muxn_7.io.out @[Interconnect.scala 479:45]
    node _T_11 = bits(ConfigMem.io.out[0], 15, 14) @[Interconnect.scala 483:39]
    Muxn_7.io.config <= _T_11 @[Interconnect.scala 483:23]
    inst Muxn_8 of Muxn_916 @[Interconnect.scala 473:25]
    Muxn_8.clock <= clock
    Muxn_8.reset <= reset
    Muxn_8.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[1] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.otrackW[0] <= Muxn_8.io.out @[Interconnect.scala 479:45]
    node _T_12 = bits(ConfigMem.io.out[0], 18, 16) @[Interconnect.scala 483:39]
    Muxn_8.io.config <= _T_12 @[Interconnect.scala 483:23]
    inst Muxn_9 of Muxn_917 @[Interconnect.scala 473:25]
    Muxn_9.clock <= clock
    Muxn_9.reset <= reset
    Muxn_9.io.in[0] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.otrackN[0] <= Muxn_9.io.out @[Interconnect.scala 479:45]
    node _T_13 = bits(ConfigMem.io.out[0], 21, 19) @[Interconnect.scala 483:39]
    Muxn_9.io.config <= _T_13 @[Interconnect.scala 483:23]
    inst Muxn_10 of Muxn_918 @[Interconnect.scala 473:25]
    Muxn_10.clock <= clock
    Muxn_10.reset <= reset
    Muxn_10.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_10.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.otrackE[0] <= Muxn_10.io.out @[Interconnect.scala 479:45]
    node _T_14 = bits(ConfigMem.io.out[0], 24, 22) @[Interconnect.scala 483:39]
    Muxn_10.io.config <= _T_14 @[Interconnect.scala 483:23]
    inst Muxn_11 of Muxn_919 @[Interconnect.scala 473:25]
    Muxn_11.clock <= clock
    Muxn_11.reset <= reset
    Muxn_11.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[1] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_11.io.in[4] <= io.itrackE[0] @[Interconnect.scala 475:63]
    io.otrackS[0] <= Muxn_11.io.out @[Interconnect.scala 479:45]
    node _T_15 = bits(ConfigMem.io.out[0], 27, 25) @[Interconnect.scala 483:39]
    Muxn_11.io.config <= _T_15 @[Interconnect.scala 483:23]
    
  module ConfigMem_151 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<0>, flip cfg_data : UInt<32>, out : UInt<15>[1]}
    
    wire _T : UInt<15>[1] @[ConfigMem.scala 27:29]
    _T[0] <= UInt<15>("h00") @[ConfigMem.scala 27:29]
    reg regs : UInt<15>[1], clock with : (reset => (reset, _T)) @[ConfigMem.scala 27:21]
    node _T_1 = eq(io.cfg_addr, UInt<1>("h00")) @[ConfigMem.scala 32:38]
    node _T_2 = and(io.cfg_en, _T_1) @[ConfigMem.scala 32:22]
    when _T_2 : @[ConfigMem.scala 32:54]
      node _T_3 = bits(io.cfg_data, 14, 0) @[ConfigMem.scala 33:31]
      regs[0] <= _T_3 @[ConfigMem.scala 33:17]
      skip @[ConfigMem.scala 32:54]
    io.out[0] <= regs[0] @[ConfigMem.scala 52:45]
    
  module Muxn_920 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[3], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_921 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[3], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_922 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<1>, flip in : UInt<32>[2], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    io.out <= _T_1 @[Multiplexer.scala 20:10]
    
  module Muxn_923 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<1>, flip in : UInt<32>[2], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    io.out <= _T_1 @[Multiplexer.scala 20:10]
    
  module Muxn_924 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[3], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_925 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_926 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_927 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module GIB_71 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<12>, flip cfg_data : UInt<32>, ipinNW : UInt<32>[2], flip opinNW : UInt<32>[1], ipinNE : UInt<32>[0], flip opinNE : UInt<32>[0], ipinSE : UInt<32>[0], flip opinSE : UInt<32>[0], ipinSW : UInt<32>[2], flip opinSW : UInt<32>[1], flip itrackW : UInt<32>[1], otrackW : UInt<32>[1], flip itrackN : UInt<32>[1], otrackN : UInt<32>[1], flip itrackE : UInt<32>[1], otrackE : UInt<32>[1], flip itrackS : UInt<32>[1], otrackS : UInt<32>[1]}
    
    io.ipinNW[0] <= UInt<1>("h00") @[Interconnect.scala 426:20]
    io.ipinNW[1] <= UInt<1>("h00") @[Interconnect.scala 426:20]
    io.ipinSW[0] <= UInt<1>("h00") @[Interconnect.scala 428:20]
    io.ipinSW[1] <= UInt<1>("h00") @[Interconnect.scala 428:20]
    io.otrackW[0] <= UInt<1>("h00") @[Interconnect.scala 430:21]
    io.otrackN[0] <= UInt<1>("h00") @[Interconnect.scala 431:21]
    io.otrackE[0] <= UInt<1>("h00") @[Interconnect.scala 432:21]
    io.otrackS[0] <= UInt<1>("h00") @[Interconnect.scala 433:21]
    inst ConfigMem of ConfigMem_151 @[Interconnect.scala 463:21]
    ConfigMem.clock <= clock
    ConfigMem.reset <= reset
    node _T = bits(io.cfg_addr, 11, 2) @[Interconnect.scala 464:65]
    node _T_1 = eq(UInt<8>("h099"), _T) @[Interconnect.scala 464:50]
    node _T_2 = and(io.cfg_en, _T_1) @[Interconnect.scala 464:32]
    ConfigMem.io.cfg_en <= _T_2 @[Interconnect.scala 464:19]
    node _T_3 = bits(io.cfg_addr, 1, 0) @[Interconnect.scala 465:35]
    ConfigMem.io.cfg_addr <= _T_3 @[Interconnect.scala 465:21]
    ConfigMem.io.cfg_data <= io.cfg_data @[Interconnect.scala 466:21]
    inst Muxn of Muxn_920 @[Interconnect.scala 473:25]
    Muxn.clock <= clock
    Muxn.reset <= reset
    Muxn.io.in[0] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn.io.in[1] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn.io.in[2] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNW[0] <= Muxn.io.out @[Interconnect.scala 479:45]
    node _T_4 = bits(ConfigMem.io.out[0], 1, 0) @[Interconnect.scala 483:39]
    Muxn.io.config <= _T_4 @[Interconnect.scala 483:23]
    inst Muxn_1 of Muxn_921 @[Interconnect.scala 473:25]
    Muxn_1.clock <= clock
    Muxn_1.reset <= reset
    Muxn_1.io.in[0] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[1] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[2] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNW[1] <= Muxn_1.io.out @[Interconnect.scala 479:45]
    node _T_5 = bits(ConfigMem.io.out[0], 3, 2) @[Interconnect.scala 483:39]
    Muxn_1.io.config <= _T_5 @[Interconnect.scala 483:23]
    inst Muxn_2 of Muxn_922 @[Interconnect.scala 473:25]
    Muxn_2.clock <= clock
    Muxn_2.reset <= reset
    Muxn_2.io.in[0] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[1] <= io.itrackE[0] @[Interconnect.scala 475:63]
    io.ipinSW[0] <= Muxn_2.io.out @[Interconnect.scala 479:45]
    node _T_6 = bits(ConfigMem.io.out[0], 4, 4) @[Interconnect.scala 483:39]
    Muxn_2.io.config <= _T_6 @[Interconnect.scala 483:23]
    inst Muxn_3 of Muxn_923 @[Interconnect.scala 473:25]
    Muxn_3.clock <= clock
    Muxn_3.reset <= reset
    Muxn_3.io.in[0] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[1] <= io.itrackE[0] @[Interconnect.scala 475:63]
    io.ipinSW[1] <= Muxn_3.io.out @[Interconnect.scala 479:45]
    node _T_7 = bits(ConfigMem.io.out[0], 5, 5) @[Interconnect.scala 483:39]
    Muxn_3.io.config <= _T_7 @[Interconnect.scala 483:23]
    inst Muxn_4 of Muxn_924 @[Interconnect.scala 473:25]
    Muxn_4.clock <= clock
    Muxn_4.reset <= reset
    Muxn_4.io.in[0] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[1] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[2] <= io.itrackS[0] @[Interconnect.scala 475:63]
    reg _T_8 : UInt, clock @[Interconnect.scala 477:55]
    _T_8 <= Muxn_4.io.out @[Interconnect.scala 477:55]
    io.otrackW[0] <= _T_8 @[Interconnect.scala 477:45]
    node _T_9 = bits(ConfigMem.io.out[0], 7, 6) @[Interconnect.scala 483:39]
    Muxn_4.io.config <= _T_9 @[Interconnect.scala 483:23]
    inst Muxn_5 of Muxn_925 @[Interconnect.scala 473:25]
    Muxn_5.clock <= clock
    Muxn_5.reset <= reset
    Muxn_5.io.in[0] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[1] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[2] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    reg _T_10 : UInt, clock @[Interconnect.scala 477:55]
    _T_10 <= Muxn_5.io.out @[Interconnect.scala 477:55]
    io.otrackN[0] <= _T_10 @[Interconnect.scala 477:45]
    node _T_11 = bits(ConfigMem.io.out[0], 9, 8) @[Interconnect.scala 483:39]
    Muxn_5.io.config <= _T_11 @[Interconnect.scala 483:23]
    inst Muxn_6 of Muxn_926 @[Interconnect.scala 473:25]
    Muxn_6.clock <= clock
    Muxn_6.reset <= reset
    Muxn_6.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    reg _T_12 : UInt, clock @[Interconnect.scala 477:55]
    _T_12 <= Muxn_6.io.out @[Interconnect.scala 477:55]
    io.otrackE[0] <= _T_12 @[Interconnect.scala 477:45]
    node _T_13 = bits(ConfigMem.io.out[0], 12, 10) @[Interconnect.scala 483:39]
    Muxn_6.io.config <= _T_13 @[Interconnect.scala 483:23]
    inst Muxn_7 of Muxn_927 @[Interconnect.scala 473:25]
    Muxn_7.clock <= clock
    Muxn_7.reset <= reset
    Muxn_7.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[1] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    reg _T_14 : UInt, clock @[Interconnect.scala 477:55]
    _T_14 <= Muxn_7.io.out @[Interconnect.scala 477:55]
    io.otrackS[0] <= _T_14 @[Interconnect.scala 477:45]
    node _T_15 = bits(ConfigMem.io.out[0], 14, 13) @[Interconnect.scala 483:39]
    Muxn_7.io.config <= _T_15 @[Interconnect.scala 483:23]
    
  module ConfigMem_152 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<0>, flip cfg_data : UInt<32>, out : UInt<13>[1]}
    
    wire _T : UInt<13>[1] @[ConfigMem.scala 27:29]
    _T[0] <= UInt<13>("h00") @[ConfigMem.scala 27:29]
    reg regs : UInt<13>[1], clock with : (reset => (reset, _T)) @[ConfigMem.scala 27:21]
    node _T_1 = eq(io.cfg_addr, UInt<1>("h00")) @[ConfigMem.scala 32:38]
    node _T_2 = and(io.cfg_en, _T_1) @[ConfigMem.scala 32:22]
    when _T_2 : @[ConfigMem.scala 32:54]
      node _T_3 = bits(io.cfg_data, 12, 0) @[ConfigMem.scala 33:31]
      regs[0] <= _T_3 @[ConfigMem.scala 33:17]
      skip @[ConfigMem.scala 32:54]
    io.out[0] <= regs[0] @[ConfigMem.scala 52:45]
    
  module Muxn_928 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<1>, flip in : UInt<32>[2], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    io.out <= _T_1 @[Multiplexer.scala 20:10]
    
  module Muxn_929 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<1>, flip in : UInt<32>[2], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    io.out <= _T_1 @[Multiplexer.scala 20:10]
    
  module Muxn_930 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[3], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_931 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_932 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_933 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[3], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_934 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module GIB_72 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<12>, flip cfg_data : UInt<32>, ipinNW : UInt<32>[0], flip opinNW : UInt<32>[0], ipinNE : UInt<32>[2], flip opinNE : UInt<32>[1], ipinSE : UInt<32>[1], flip opinSE : UInt<32>[1], ipinSW : UInt<32>[0], flip opinSW : UInt<32>[0], flip itrackW : UInt<32>[1], otrackW : UInt<32>[1], flip itrackN : UInt<32>[1], otrackN : UInt<32>[1], flip itrackE : UInt<32>[1], otrackE : UInt<32>[1], flip itrackS : UInt<32>[1], otrackS : UInt<32>[1]}
    
    io.ipinNE[0] <= UInt<1>("h00") @[Interconnect.scala 427:20]
    io.ipinNE[1] <= UInt<1>("h00") @[Interconnect.scala 427:20]
    io.ipinSE[0] <= UInt<1>("h00") @[Interconnect.scala 429:20]
    io.otrackW[0] <= UInt<1>("h00") @[Interconnect.scala 430:21]
    io.otrackN[0] <= UInt<1>("h00") @[Interconnect.scala 431:21]
    io.otrackE[0] <= UInt<1>("h00") @[Interconnect.scala 432:21]
    io.otrackS[0] <= UInt<1>("h00") @[Interconnect.scala 433:21]
    inst ConfigMem of ConfigMem_152 @[Interconnect.scala 463:21]
    ConfigMem.clock <= clock
    ConfigMem.reset <= reset
    node _T = bits(io.cfg_addr, 11, 2) @[Interconnect.scala 464:65]
    node _T_1 = eq(UInt<8>("h0a3"), _T) @[Interconnect.scala 464:50]
    node _T_2 = and(io.cfg_en, _T_1) @[Interconnect.scala 464:32]
    ConfigMem.io.cfg_en <= _T_2 @[Interconnect.scala 464:19]
    node _T_3 = bits(io.cfg_addr, 1, 0) @[Interconnect.scala 465:35]
    ConfigMem.io.cfg_addr <= _T_3 @[Interconnect.scala 465:21]
    ConfigMem.io.cfg_data <= io.cfg_data @[Interconnect.scala 466:21]
    inst Muxn of Muxn_928 @[Interconnect.scala 473:25]
    Muxn.clock <= clock
    Muxn.reset <= reset
    Muxn.io.in[0] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn.io.in[1] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNE[0] <= Muxn.io.out @[Interconnect.scala 479:45]
    node _T_4 = bits(ConfigMem.io.out[0], 0, 0) @[Interconnect.scala 483:39]
    Muxn.io.config <= _T_4 @[Interconnect.scala 483:23]
    inst Muxn_1 of Muxn_929 @[Interconnect.scala 473:25]
    Muxn_1.clock <= clock
    Muxn_1.reset <= reset
    Muxn_1.io.in[0] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[1] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNE[1] <= Muxn_1.io.out @[Interconnect.scala 479:45]
    node _T_5 = bits(ConfigMem.io.out[0], 1, 1) @[Interconnect.scala 483:39]
    Muxn_1.io.config <= _T_5 @[Interconnect.scala 483:23]
    inst Muxn_2 of Muxn_930 @[Interconnect.scala 473:25]
    Muxn_2.clock <= clock
    Muxn_2.reset <= reset
    Muxn_2.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[1] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    io.ipinSE[0] <= Muxn_2.io.out @[Interconnect.scala 479:45]
    node _T_6 = bits(ConfigMem.io.out[0], 3, 2) @[Interconnect.scala 483:39]
    Muxn_2.io.config <= _T_6 @[Interconnect.scala 483:23]
    inst Muxn_3 of Muxn_931 @[Interconnect.scala 473:25]
    Muxn_3.clock <= clock
    Muxn_3.reset <= reset
    Muxn_3.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[1] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.otrackW[0] <= Muxn_3.io.out @[Interconnect.scala 479:45]
    node _T_7 = bits(ConfigMem.io.out[0], 6, 4) @[Interconnect.scala 483:39]
    Muxn_3.io.config <= _T_7 @[Interconnect.scala 483:23]
    inst Muxn_4 of Muxn_932 @[Interconnect.scala 473:25]
    Muxn_4.clock <= clock
    Muxn_4.reset <= reset
    Muxn_4.io.in[0] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[1] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[2] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.otrackN[0] <= Muxn_4.io.out @[Interconnect.scala 479:45]
    node _T_8 = bits(ConfigMem.io.out[0], 8, 7) @[Interconnect.scala 483:39]
    Muxn_4.io.config <= _T_8 @[Interconnect.scala 483:23]
    inst Muxn_5 of Muxn_933 @[Interconnect.scala 473:25]
    Muxn_5.clock <= clock
    Muxn_5.reset <= reset
    Muxn_5.io.in[0] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[1] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[2] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.otrackE[0] <= Muxn_5.io.out @[Interconnect.scala 479:45]
    node _T_9 = bits(ConfigMem.io.out[0], 10, 9) @[Interconnect.scala 483:39]
    Muxn_5.io.config <= _T_9 @[Interconnect.scala 483:23]
    inst Muxn_6 of Muxn_934 @[Interconnect.scala 473:25]
    Muxn_6.clock <= clock
    Muxn_6.reset <= reset
    Muxn_6.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[1] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    io.otrackS[0] <= Muxn_6.io.out @[Interconnect.scala 479:45]
    node _T_10 = bits(ConfigMem.io.out[0], 12, 11) @[Interconnect.scala 483:39]
    Muxn_6.io.config <= _T_10 @[Interconnect.scala 483:23]
    
  module ConfigMem_153 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<0>, flip cfg_data : UInt<32>, out : UInt<24>[1]}
    
    wire _T : UInt<24>[1] @[ConfigMem.scala 27:29]
    _T[0] <= UInt<24>("h00") @[ConfigMem.scala 27:29]
    reg regs : UInt<24>[1], clock with : (reset => (reset, _T)) @[ConfigMem.scala 27:21]
    node _T_1 = eq(io.cfg_addr, UInt<1>("h00")) @[ConfigMem.scala 32:38]
    node _T_2 = and(io.cfg_en, _T_1) @[ConfigMem.scala 32:22]
    when _T_2 : @[ConfigMem.scala 32:54]
      node _T_3 = bits(io.cfg_data, 23, 0) @[ConfigMem.scala 33:31]
      regs[0] <= _T_3 @[ConfigMem.scala 33:17]
      skip @[ConfigMem.scala 32:54]
    io.out[0] <= regs[0] @[ConfigMem.scala 52:45]
    
  module Muxn_935 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_936 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_937 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_938 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_939 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_940 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_941 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_942 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_943 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_944 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module GIB_73 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<12>, flip cfg_data : UInt<32>, ipinNW : UInt<32>[2], flip opinNW : UInt<32>[1], ipinNE : UInt<32>[2], flip opinNE : UInt<32>[1], ipinSE : UInt<32>[1], flip opinSE : UInt<32>[1], ipinSW : UInt<32>[1], flip opinSW : UInt<32>[1], flip itrackW : UInt<32>[1], otrackW : UInt<32>[1], flip itrackN : UInt<32>[1], otrackN : UInt<32>[1], flip itrackE : UInt<32>[1], otrackE : UInt<32>[1], flip itrackS : UInt<32>[1], otrackS : UInt<32>[1]}
    
    io.ipinNW[0] <= UInt<1>("h00") @[Interconnect.scala 426:20]
    io.ipinNW[1] <= UInt<1>("h00") @[Interconnect.scala 426:20]
    io.ipinNE[0] <= UInt<1>("h00") @[Interconnect.scala 427:20]
    io.ipinNE[1] <= UInt<1>("h00") @[Interconnect.scala 427:20]
    io.ipinSW[0] <= UInt<1>("h00") @[Interconnect.scala 428:20]
    io.ipinSE[0] <= UInt<1>("h00") @[Interconnect.scala 429:20]
    io.otrackW[0] <= UInt<1>("h00") @[Interconnect.scala 430:21]
    io.otrackN[0] <= UInt<1>("h00") @[Interconnect.scala 431:21]
    io.otrackE[0] <= UInt<1>("h00") @[Interconnect.scala 432:21]
    io.otrackS[0] <= UInt<1>("h00") @[Interconnect.scala 433:21]
    inst ConfigMem of ConfigMem_153 @[Interconnect.scala 463:21]
    ConfigMem.clock <= clock
    ConfigMem.reset <= reset
    node _T = bits(io.cfg_addr, 11, 2) @[Interconnect.scala 464:65]
    node _T_1 = eq(UInt<8>("h0a4"), _T) @[Interconnect.scala 464:50]
    node _T_2 = and(io.cfg_en, _T_1) @[Interconnect.scala 464:32]
    ConfigMem.io.cfg_en <= _T_2 @[Interconnect.scala 464:19]
    node _T_3 = bits(io.cfg_addr, 1, 0) @[Interconnect.scala 465:35]
    ConfigMem.io.cfg_addr <= _T_3 @[Interconnect.scala 465:21]
    ConfigMem.io.cfg_data <= io.cfg_data @[Interconnect.scala 466:21]
    inst Muxn of Muxn_935 @[Interconnect.scala 473:25]
    Muxn.clock <= clock
    Muxn.reset <= reset
    Muxn.io.in[0] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn.io.in[2] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNW[0] <= Muxn.io.out @[Interconnect.scala 479:45]
    node _T_4 = bits(ConfigMem.io.out[0], 1, 0) @[Interconnect.scala 483:39]
    Muxn.io.config <= _T_4 @[Interconnect.scala 483:23]
    inst Muxn_1 of Muxn_936 @[Interconnect.scala 473:25]
    Muxn_1.clock <= clock
    Muxn_1.reset <= reset
    Muxn_1.io.in[0] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[2] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNW[1] <= Muxn_1.io.out @[Interconnect.scala 479:45]
    node _T_5 = bits(ConfigMem.io.out[0], 3, 2) @[Interconnect.scala 483:39]
    Muxn_1.io.config <= _T_5 @[Interconnect.scala 483:23]
    inst Muxn_2 of Muxn_937 @[Interconnect.scala 473:25]
    Muxn_2.clock <= clock
    Muxn_2.reset <= reset
    Muxn_2.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNE[0] <= Muxn_2.io.out @[Interconnect.scala 479:45]
    node _T_6 = bits(ConfigMem.io.out[0], 5, 4) @[Interconnect.scala 483:39]
    Muxn_2.io.config <= _T_6 @[Interconnect.scala 483:23]
    inst Muxn_3 of Muxn_938 @[Interconnect.scala 473:25]
    Muxn_3.clock <= clock
    Muxn_3.reset <= reset
    Muxn_3.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNE[1] <= Muxn_3.io.out @[Interconnect.scala 479:45]
    node _T_7 = bits(ConfigMem.io.out[0], 7, 6) @[Interconnect.scala 483:39]
    Muxn_3.io.config <= _T_7 @[Interconnect.scala 483:23]
    inst Muxn_4 of Muxn_939 @[Interconnect.scala 473:25]
    Muxn_4.clock <= clock
    Muxn_4.reset <= reset
    Muxn_4.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[1] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    io.ipinSE[0] <= Muxn_4.io.out @[Interconnect.scala 479:45]
    node _T_8 = bits(ConfigMem.io.out[0], 9, 8) @[Interconnect.scala 483:39]
    Muxn_4.io.config <= _T_8 @[Interconnect.scala 483:23]
    inst Muxn_5 of Muxn_940 @[Interconnect.scala 473:25]
    Muxn_5.clock <= clock
    Muxn_5.reset <= reset
    Muxn_5.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[1] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    io.ipinSW[0] <= Muxn_5.io.out @[Interconnect.scala 479:45]
    node _T_9 = bits(ConfigMem.io.out[0], 11, 10) @[Interconnect.scala 483:39]
    Muxn_5.io.config <= _T_9 @[Interconnect.scala 483:23]
    inst Muxn_6 of Muxn_941 @[Interconnect.scala 473:25]
    Muxn_6.clock <= clock
    Muxn_6.reset <= reset
    Muxn_6.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[1] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    reg _T_10 : UInt, clock @[Interconnect.scala 477:55]
    _T_10 <= Muxn_6.io.out @[Interconnect.scala 477:55]
    io.otrackW[0] <= _T_10 @[Interconnect.scala 477:45]
    node _T_11 = bits(ConfigMem.io.out[0], 14, 12) @[Interconnect.scala 483:39]
    Muxn_6.io.config <= _T_11 @[Interconnect.scala 483:23]
    inst Muxn_7 of Muxn_942 @[Interconnect.scala 473:25]
    Muxn_7.clock <= clock
    Muxn_7.reset <= reset
    Muxn_7.io.in[0] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    reg _T_12 : UInt, clock @[Interconnect.scala 477:55]
    _T_12 <= Muxn_7.io.out @[Interconnect.scala 477:55]
    io.otrackN[0] <= _T_12 @[Interconnect.scala 477:45]
    node _T_13 = bits(ConfigMem.io.out[0], 17, 15) @[Interconnect.scala 483:39]
    Muxn_7.io.config <= _T_13 @[Interconnect.scala 483:23]
    inst Muxn_8 of Muxn_943 @[Interconnect.scala 473:25]
    Muxn_8.clock <= clock
    Muxn_8.reset <= reset
    Muxn_8.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    reg _T_14 : UInt, clock @[Interconnect.scala 477:55]
    _T_14 <= Muxn_8.io.out @[Interconnect.scala 477:55]
    io.otrackE[0] <= _T_14 @[Interconnect.scala 477:45]
    node _T_15 = bits(ConfigMem.io.out[0], 20, 18) @[Interconnect.scala 483:39]
    Muxn_8.io.config <= _T_15 @[Interconnect.scala 483:23]
    inst Muxn_9 of Muxn_944 @[Interconnect.scala 473:25]
    Muxn_9.clock <= clock
    Muxn_9.reset <= reset
    Muxn_9.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[1] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[4] <= io.itrackE[0] @[Interconnect.scala 475:63]
    reg _T_16 : UInt, clock @[Interconnect.scala 477:55]
    _T_16 <= Muxn_9.io.out @[Interconnect.scala 477:55]
    io.otrackS[0] <= _T_16 @[Interconnect.scala 477:45]
    node _T_17 = bits(ConfigMem.io.out[0], 23, 21) @[Interconnect.scala 483:39]
    Muxn_9.io.config <= _T_17 @[Interconnect.scala 483:23]
    
  module ConfigMem_154 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<0>, flip cfg_data : UInt<32>, out : UInt<24>[1]}
    
    wire _T : UInt<24>[1] @[ConfigMem.scala 27:29]
    _T[0] <= UInt<24>("h00") @[ConfigMem.scala 27:29]
    reg regs : UInt<24>[1], clock with : (reset => (reset, _T)) @[ConfigMem.scala 27:21]
    node _T_1 = eq(io.cfg_addr, UInt<1>("h00")) @[ConfigMem.scala 32:38]
    node _T_2 = and(io.cfg_en, _T_1) @[ConfigMem.scala 32:22]
    when _T_2 : @[ConfigMem.scala 32:54]
      node _T_3 = bits(io.cfg_data, 23, 0) @[ConfigMem.scala 33:31]
      regs[0] <= _T_3 @[ConfigMem.scala 33:17]
      skip @[ConfigMem.scala 32:54]
    io.out[0] <= regs[0] @[ConfigMem.scala 52:45]
    
  module Muxn_945 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_946 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_947 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_948 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_949 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_950 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_951 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_952 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_953 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_954 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module GIB_74 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<12>, flip cfg_data : UInt<32>, ipinNW : UInt<32>[2], flip opinNW : UInt<32>[1], ipinNE : UInt<32>[2], flip opinNE : UInt<32>[1], ipinSE : UInt<32>[1], flip opinSE : UInt<32>[1], ipinSW : UInt<32>[1], flip opinSW : UInt<32>[1], flip itrackW : UInt<32>[1], otrackW : UInt<32>[1], flip itrackN : UInt<32>[1], otrackN : UInt<32>[1], flip itrackE : UInt<32>[1], otrackE : UInt<32>[1], flip itrackS : UInt<32>[1], otrackS : UInt<32>[1]}
    
    io.ipinNW[0] <= UInt<1>("h00") @[Interconnect.scala 426:20]
    io.ipinNW[1] <= UInt<1>("h00") @[Interconnect.scala 426:20]
    io.ipinNE[0] <= UInt<1>("h00") @[Interconnect.scala 427:20]
    io.ipinNE[1] <= UInt<1>("h00") @[Interconnect.scala 427:20]
    io.ipinSW[0] <= UInt<1>("h00") @[Interconnect.scala 428:20]
    io.ipinSE[0] <= UInt<1>("h00") @[Interconnect.scala 429:20]
    io.otrackW[0] <= UInt<1>("h00") @[Interconnect.scala 430:21]
    io.otrackN[0] <= UInt<1>("h00") @[Interconnect.scala 431:21]
    io.otrackE[0] <= UInt<1>("h00") @[Interconnect.scala 432:21]
    io.otrackS[0] <= UInt<1>("h00") @[Interconnect.scala 433:21]
    inst ConfigMem of ConfigMem_154 @[Interconnect.scala 463:21]
    ConfigMem.clock <= clock
    ConfigMem.reset <= reset
    node _T = bits(io.cfg_addr, 11, 2) @[Interconnect.scala 464:65]
    node _T_1 = eq(UInt<8>("h0a5"), _T) @[Interconnect.scala 464:50]
    node _T_2 = and(io.cfg_en, _T_1) @[Interconnect.scala 464:32]
    ConfigMem.io.cfg_en <= _T_2 @[Interconnect.scala 464:19]
    node _T_3 = bits(io.cfg_addr, 1, 0) @[Interconnect.scala 465:35]
    ConfigMem.io.cfg_addr <= _T_3 @[Interconnect.scala 465:21]
    ConfigMem.io.cfg_data <= io.cfg_data @[Interconnect.scala 466:21]
    inst Muxn of Muxn_945 @[Interconnect.scala 473:25]
    Muxn.clock <= clock
    Muxn.reset <= reset
    Muxn.io.in[0] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn.io.in[2] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNW[0] <= Muxn.io.out @[Interconnect.scala 479:45]
    node _T_4 = bits(ConfigMem.io.out[0], 1, 0) @[Interconnect.scala 483:39]
    Muxn.io.config <= _T_4 @[Interconnect.scala 483:23]
    inst Muxn_1 of Muxn_946 @[Interconnect.scala 473:25]
    Muxn_1.clock <= clock
    Muxn_1.reset <= reset
    Muxn_1.io.in[0] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[2] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNW[1] <= Muxn_1.io.out @[Interconnect.scala 479:45]
    node _T_5 = bits(ConfigMem.io.out[0], 3, 2) @[Interconnect.scala 483:39]
    Muxn_1.io.config <= _T_5 @[Interconnect.scala 483:23]
    inst Muxn_2 of Muxn_947 @[Interconnect.scala 473:25]
    Muxn_2.clock <= clock
    Muxn_2.reset <= reset
    Muxn_2.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNE[0] <= Muxn_2.io.out @[Interconnect.scala 479:45]
    node _T_6 = bits(ConfigMem.io.out[0], 5, 4) @[Interconnect.scala 483:39]
    Muxn_2.io.config <= _T_6 @[Interconnect.scala 483:23]
    inst Muxn_3 of Muxn_948 @[Interconnect.scala 473:25]
    Muxn_3.clock <= clock
    Muxn_3.reset <= reset
    Muxn_3.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNE[1] <= Muxn_3.io.out @[Interconnect.scala 479:45]
    node _T_7 = bits(ConfigMem.io.out[0], 7, 6) @[Interconnect.scala 483:39]
    Muxn_3.io.config <= _T_7 @[Interconnect.scala 483:23]
    inst Muxn_4 of Muxn_949 @[Interconnect.scala 473:25]
    Muxn_4.clock <= clock
    Muxn_4.reset <= reset
    Muxn_4.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[1] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    io.ipinSE[0] <= Muxn_4.io.out @[Interconnect.scala 479:45]
    node _T_8 = bits(ConfigMem.io.out[0], 9, 8) @[Interconnect.scala 483:39]
    Muxn_4.io.config <= _T_8 @[Interconnect.scala 483:23]
    inst Muxn_5 of Muxn_950 @[Interconnect.scala 473:25]
    Muxn_5.clock <= clock
    Muxn_5.reset <= reset
    Muxn_5.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[1] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    io.ipinSW[0] <= Muxn_5.io.out @[Interconnect.scala 479:45]
    node _T_9 = bits(ConfigMem.io.out[0], 11, 10) @[Interconnect.scala 483:39]
    Muxn_5.io.config <= _T_9 @[Interconnect.scala 483:23]
    inst Muxn_6 of Muxn_951 @[Interconnect.scala 473:25]
    Muxn_6.clock <= clock
    Muxn_6.reset <= reset
    Muxn_6.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[1] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.otrackW[0] <= Muxn_6.io.out @[Interconnect.scala 479:45]
    node _T_10 = bits(ConfigMem.io.out[0], 14, 12) @[Interconnect.scala 483:39]
    Muxn_6.io.config <= _T_10 @[Interconnect.scala 483:23]
    inst Muxn_7 of Muxn_952 @[Interconnect.scala 473:25]
    Muxn_7.clock <= clock
    Muxn_7.reset <= reset
    Muxn_7.io.in[0] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.otrackN[0] <= Muxn_7.io.out @[Interconnect.scala 479:45]
    node _T_11 = bits(ConfigMem.io.out[0], 17, 15) @[Interconnect.scala 483:39]
    Muxn_7.io.config <= _T_11 @[Interconnect.scala 483:23]
    inst Muxn_8 of Muxn_953 @[Interconnect.scala 473:25]
    Muxn_8.clock <= clock
    Muxn_8.reset <= reset
    Muxn_8.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.otrackE[0] <= Muxn_8.io.out @[Interconnect.scala 479:45]
    node _T_12 = bits(ConfigMem.io.out[0], 20, 18) @[Interconnect.scala 483:39]
    Muxn_8.io.config <= _T_12 @[Interconnect.scala 483:23]
    inst Muxn_9 of Muxn_954 @[Interconnect.scala 473:25]
    Muxn_9.clock <= clock
    Muxn_9.reset <= reset
    Muxn_9.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[1] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[4] <= io.itrackE[0] @[Interconnect.scala 475:63]
    io.otrackS[0] <= Muxn_9.io.out @[Interconnect.scala 479:45]
    node _T_13 = bits(ConfigMem.io.out[0], 23, 21) @[Interconnect.scala 483:39]
    Muxn_9.io.config <= _T_13 @[Interconnect.scala 483:23]
    
  module ConfigMem_155 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<0>, flip cfg_data : UInt<32>, out : UInt<24>[1]}
    
    wire _T : UInt<24>[1] @[ConfigMem.scala 27:29]
    _T[0] <= UInt<24>("h00") @[ConfigMem.scala 27:29]
    reg regs : UInt<24>[1], clock with : (reset => (reset, _T)) @[ConfigMem.scala 27:21]
    node _T_1 = eq(io.cfg_addr, UInt<1>("h00")) @[ConfigMem.scala 32:38]
    node _T_2 = and(io.cfg_en, _T_1) @[ConfigMem.scala 32:22]
    when _T_2 : @[ConfigMem.scala 32:54]
      node _T_3 = bits(io.cfg_data, 23, 0) @[ConfigMem.scala 33:31]
      regs[0] <= _T_3 @[ConfigMem.scala 33:17]
      skip @[ConfigMem.scala 32:54]
    io.out[0] <= regs[0] @[ConfigMem.scala 52:45]
    
  module Muxn_955 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_956 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_957 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_958 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_959 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_960 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_961 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_962 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_963 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_964 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module GIB_75 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<12>, flip cfg_data : UInt<32>, ipinNW : UInt<32>[2], flip opinNW : UInt<32>[1], ipinNE : UInt<32>[2], flip opinNE : UInt<32>[1], ipinSE : UInt<32>[1], flip opinSE : UInt<32>[1], ipinSW : UInt<32>[1], flip opinSW : UInt<32>[1], flip itrackW : UInt<32>[1], otrackW : UInt<32>[1], flip itrackN : UInt<32>[1], otrackN : UInt<32>[1], flip itrackE : UInt<32>[1], otrackE : UInt<32>[1], flip itrackS : UInt<32>[1], otrackS : UInt<32>[1]}
    
    io.ipinNW[0] <= UInt<1>("h00") @[Interconnect.scala 426:20]
    io.ipinNW[1] <= UInt<1>("h00") @[Interconnect.scala 426:20]
    io.ipinNE[0] <= UInt<1>("h00") @[Interconnect.scala 427:20]
    io.ipinNE[1] <= UInt<1>("h00") @[Interconnect.scala 427:20]
    io.ipinSW[0] <= UInt<1>("h00") @[Interconnect.scala 428:20]
    io.ipinSE[0] <= UInt<1>("h00") @[Interconnect.scala 429:20]
    io.otrackW[0] <= UInt<1>("h00") @[Interconnect.scala 430:21]
    io.otrackN[0] <= UInt<1>("h00") @[Interconnect.scala 431:21]
    io.otrackE[0] <= UInt<1>("h00") @[Interconnect.scala 432:21]
    io.otrackS[0] <= UInt<1>("h00") @[Interconnect.scala 433:21]
    inst ConfigMem of ConfigMem_155 @[Interconnect.scala 463:21]
    ConfigMem.clock <= clock
    ConfigMem.reset <= reset
    node _T = bits(io.cfg_addr, 11, 2) @[Interconnect.scala 464:65]
    node _T_1 = eq(UInt<8>("h0a6"), _T) @[Interconnect.scala 464:50]
    node _T_2 = and(io.cfg_en, _T_1) @[Interconnect.scala 464:32]
    ConfigMem.io.cfg_en <= _T_2 @[Interconnect.scala 464:19]
    node _T_3 = bits(io.cfg_addr, 1, 0) @[Interconnect.scala 465:35]
    ConfigMem.io.cfg_addr <= _T_3 @[Interconnect.scala 465:21]
    ConfigMem.io.cfg_data <= io.cfg_data @[Interconnect.scala 466:21]
    inst Muxn of Muxn_955 @[Interconnect.scala 473:25]
    Muxn.clock <= clock
    Muxn.reset <= reset
    Muxn.io.in[0] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn.io.in[2] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNW[0] <= Muxn.io.out @[Interconnect.scala 479:45]
    node _T_4 = bits(ConfigMem.io.out[0], 1, 0) @[Interconnect.scala 483:39]
    Muxn.io.config <= _T_4 @[Interconnect.scala 483:23]
    inst Muxn_1 of Muxn_956 @[Interconnect.scala 473:25]
    Muxn_1.clock <= clock
    Muxn_1.reset <= reset
    Muxn_1.io.in[0] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[2] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNW[1] <= Muxn_1.io.out @[Interconnect.scala 479:45]
    node _T_5 = bits(ConfigMem.io.out[0], 3, 2) @[Interconnect.scala 483:39]
    Muxn_1.io.config <= _T_5 @[Interconnect.scala 483:23]
    inst Muxn_2 of Muxn_957 @[Interconnect.scala 473:25]
    Muxn_2.clock <= clock
    Muxn_2.reset <= reset
    Muxn_2.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNE[0] <= Muxn_2.io.out @[Interconnect.scala 479:45]
    node _T_6 = bits(ConfigMem.io.out[0], 5, 4) @[Interconnect.scala 483:39]
    Muxn_2.io.config <= _T_6 @[Interconnect.scala 483:23]
    inst Muxn_3 of Muxn_958 @[Interconnect.scala 473:25]
    Muxn_3.clock <= clock
    Muxn_3.reset <= reset
    Muxn_3.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNE[1] <= Muxn_3.io.out @[Interconnect.scala 479:45]
    node _T_7 = bits(ConfigMem.io.out[0], 7, 6) @[Interconnect.scala 483:39]
    Muxn_3.io.config <= _T_7 @[Interconnect.scala 483:23]
    inst Muxn_4 of Muxn_959 @[Interconnect.scala 473:25]
    Muxn_4.clock <= clock
    Muxn_4.reset <= reset
    Muxn_4.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[1] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    io.ipinSE[0] <= Muxn_4.io.out @[Interconnect.scala 479:45]
    node _T_8 = bits(ConfigMem.io.out[0], 9, 8) @[Interconnect.scala 483:39]
    Muxn_4.io.config <= _T_8 @[Interconnect.scala 483:23]
    inst Muxn_5 of Muxn_960 @[Interconnect.scala 473:25]
    Muxn_5.clock <= clock
    Muxn_5.reset <= reset
    Muxn_5.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[1] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    io.ipinSW[0] <= Muxn_5.io.out @[Interconnect.scala 479:45]
    node _T_9 = bits(ConfigMem.io.out[0], 11, 10) @[Interconnect.scala 483:39]
    Muxn_5.io.config <= _T_9 @[Interconnect.scala 483:23]
    inst Muxn_6 of Muxn_961 @[Interconnect.scala 473:25]
    Muxn_6.clock <= clock
    Muxn_6.reset <= reset
    Muxn_6.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[1] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    reg _T_10 : UInt, clock @[Interconnect.scala 477:55]
    _T_10 <= Muxn_6.io.out @[Interconnect.scala 477:55]
    io.otrackW[0] <= _T_10 @[Interconnect.scala 477:45]
    node _T_11 = bits(ConfigMem.io.out[0], 14, 12) @[Interconnect.scala 483:39]
    Muxn_6.io.config <= _T_11 @[Interconnect.scala 483:23]
    inst Muxn_7 of Muxn_962 @[Interconnect.scala 473:25]
    Muxn_7.clock <= clock
    Muxn_7.reset <= reset
    Muxn_7.io.in[0] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    reg _T_12 : UInt, clock @[Interconnect.scala 477:55]
    _T_12 <= Muxn_7.io.out @[Interconnect.scala 477:55]
    io.otrackN[0] <= _T_12 @[Interconnect.scala 477:45]
    node _T_13 = bits(ConfigMem.io.out[0], 17, 15) @[Interconnect.scala 483:39]
    Muxn_7.io.config <= _T_13 @[Interconnect.scala 483:23]
    inst Muxn_8 of Muxn_963 @[Interconnect.scala 473:25]
    Muxn_8.clock <= clock
    Muxn_8.reset <= reset
    Muxn_8.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    reg _T_14 : UInt, clock @[Interconnect.scala 477:55]
    _T_14 <= Muxn_8.io.out @[Interconnect.scala 477:55]
    io.otrackE[0] <= _T_14 @[Interconnect.scala 477:45]
    node _T_15 = bits(ConfigMem.io.out[0], 20, 18) @[Interconnect.scala 483:39]
    Muxn_8.io.config <= _T_15 @[Interconnect.scala 483:23]
    inst Muxn_9 of Muxn_964 @[Interconnect.scala 473:25]
    Muxn_9.clock <= clock
    Muxn_9.reset <= reset
    Muxn_9.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[1] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[4] <= io.itrackE[0] @[Interconnect.scala 475:63]
    reg _T_16 : UInt, clock @[Interconnect.scala 477:55]
    _T_16 <= Muxn_9.io.out @[Interconnect.scala 477:55]
    io.otrackS[0] <= _T_16 @[Interconnect.scala 477:45]
    node _T_17 = bits(ConfigMem.io.out[0], 23, 21) @[Interconnect.scala 483:39]
    Muxn_9.io.config <= _T_17 @[Interconnect.scala 483:23]
    
  module ConfigMem_156 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<0>, flip cfg_data : UInt<32>, out : UInt<24>[1]}
    
    wire _T : UInt<24>[1] @[ConfigMem.scala 27:29]
    _T[0] <= UInt<24>("h00") @[ConfigMem.scala 27:29]
    reg regs : UInt<24>[1], clock with : (reset => (reset, _T)) @[ConfigMem.scala 27:21]
    node _T_1 = eq(io.cfg_addr, UInt<1>("h00")) @[ConfigMem.scala 32:38]
    node _T_2 = and(io.cfg_en, _T_1) @[ConfigMem.scala 32:22]
    when _T_2 : @[ConfigMem.scala 32:54]
      node _T_3 = bits(io.cfg_data, 23, 0) @[ConfigMem.scala 33:31]
      regs[0] <= _T_3 @[ConfigMem.scala 33:17]
      skip @[ConfigMem.scala 32:54]
    io.out[0] <= regs[0] @[ConfigMem.scala 52:45]
    
  module Muxn_965 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_966 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_967 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_968 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_969 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_970 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_971 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_972 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_973 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_974 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module GIB_76 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<12>, flip cfg_data : UInt<32>, ipinNW : UInt<32>[2], flip opinNW : UInt<32>[1], ipinNE : UInt<32>[2], flip opinNE : UInt<32>[1], ipinSE : UInt<32>[1], flip opinSE : UInt<32>[1], ipinSW : UInt<32>[1], flip opinSW : UInt<32>[1], flip itrackW : UInt<32>[1], otrackW : UInt<32>[1], flip itrackN : UInt<32>[1], otrackN : UInt<32>[1], flip itrackE : UInt<32>[1], otrackE : UInt<32>[1], flip itrackS : UInt<32>[1], otrackS : UInt<32>[1]}
    
    io.ipinNW[0] <= UInt<1>("h00") @[Interconnect.scala 426:20]
    io.ipinNW[1] <= UInt<1>("h00") @[Interconnect.scala 426:20]
    io.ipinNE[0] <= UInt<1>("h00") @[Interconnect.scala 427:20]
    io.ipinNE[1] <= UInt<1>("h00") @[Interconnect.scala 427:20]
    io.ipinSW[0] <= UInt<1>("h00") @[Interconnect.scala 428:20]
    io.ipinSE[0] <= UInt<1>("h00") @[Interconnect.scala 429:20]
    io.otrackW[0] <= UInt<1>("h00") @[Interconnect.scala 430:21]
    io.otrackN[0] <= UInt<1>("h00") @[Interconnect.scala 431:21]
    io.otrackE[0] <= UInt<1>("h00") @[Interconnect.scala 432:21]
    io.otrackS[0] <= UInt<1>("h00") @[Interconnect.scala 433:21]
    inst ConfigMem of ConfigMem_156 @[Interconnect.scala 463:21]
    ConfigMem.clock <= clock
    ConfigMem.reset <= reset
    node _T = bits(io.cfg_addr, 11, 2) @[Interconnect.scala 464:65]
    node _T_1 = eq(UInt<8>("h0a7"), _T) @[Interconnect.scala 464:50]
    node _T_2 = and(io.cfg_en, _T_1) @[Interconnect.scala 464:32]
    ConfigMem.io.cfg_en <= _T_2 @[Interconnect.scala 464:19]
    node _T_3 = bits(io.cfg_addr, 1, 0) @[Interconnect.scala 465:35]
    ConfigMem.io.cfg_addr <= _T_3 @[Interconnect.scala 465:21]
    ConfigMem.io.cfg_data <= io.cfg_data @[Interconnect.scala 466:21]
    inst Muxn of Muxn_965 @[Interconnect.scala 473:25]
    Muxn.clock <= clock
    Muxn.reset <= reset
    Muxn.io.in[0] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn.io.in[2] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNW[0] <= Muxn.io.out @[Interconnect.scala 479:45]
    node _T_4 = bits(ConfigMem.io.out[0], 1, 0) @[Interconnect.scala 483:39]
    Muxn.io.config <= _T_4 @[Interconnect.scala 483:23]
    inst Muxn_1 of Muxn_966 @[Interconnect.scala 473:25]
    Muxn_1.clock <= clock
    Muxn_1.reset <= reset
    Muxn_1.io.in[0] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[2] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNW[1] <= Muxn_1.io.out @[Interconnect.scala 479:45]
    node _T_5 = bits(ConfigMem.io.out[0], 3, 2) @[Interconnect.scala 483:39]
    Muxn_1.io.config <= _T_5 @[Interconnect.scala 483:23]
    inst Muxn_2 of Muxn_967 @[Interconnect.scala 473:25]
    Muxn_2.clock <= clock
    Muxn_2.reset <= reset
    Muxn_2.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNE[0] <= Muxn_2.io.out @[Interconnect.scala 479:45]
    node _T_6 = bits(ConfigMem.io.out[0], 5, 4) @[Interconnect.scala 483:39]
    Muxn_2.io.config <= _T_6 @[Interconnect.scala 483:23]
    inst Muxn_3 of Muxn_968 @[Interconnect.scala 473:25]
    Muxn_3.clock <= clock
    Muxn_3.reset <= reset
    Muxn_3.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNE[1] <= Muxn_3.io.out @[Interconnect.scala 479:45]
    node _T_7 = bits(ConfigMem.io.out[0], 7, 6) @[Interconnect.scala 483:39]
    Muxn_3.io.config <= _T_7 @[Interconnect.scala 483:23]
    inst Muxn_4 of Muxn_969 @[Interconnect.scala 473:25]
    Muxn_4.clock <= clock
    Muxn_4.reset <= reset
    Muxn_4.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[1] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    io.ipinSE[0] <= Muxn_4.io.out @[Interconnect.scala 479:45]
    node _T_8 = bits(ConfigMem.io.out[0], 9, 8) @[Interconnect.scala 483:39]
    Muxn_4.io.config <= _T_8 @[Interconnect.scala 483:23]
    inst Muxn_5 of Muxn_970 @[Interconnect.scala 473:25]
    Muxn_5.clock <= clock
    Muxn_5.reset <= reset
    Muxn_5.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[1] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    io.ipinSW[0] <= Muxn_5.io.out @[Interconnect.scala 479:45]
    node _T_9 = bits(ConfigMem.io.out[0], 11, 10) @[Interconnect.scala 483:39]
    Muxn_5.io.config <= _T_9 @[Interconnect.scala 483:23]
    inst Muxn_6 of Muxn_971 @[Interconnect.scala 473:25]
    Muxn_6.clock <= clock
    Muxn_6.reset <= reset
    Muxn_6.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[1] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.otrackW[0] <= Muxn_6.io.out @[Interconnect.scala 479:45]
    node _T_10 = bits(ConfigMem.io.out[0], 14, 12) @[Interconnect.scala 483:39]
    Muxn_6.io.config <= _T_10 @[Interconnect.scala 483:23]
    inst Muxn_7 of Muxn_972 @[Interconnect.scala 473:25]
    Muxn_7.clock <= clock
    Muxn_7.reset <= reset
    Muxn_7.io.in[0] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.otrackN[0] <= Muxn_7.io.out @[Interconnect.scala 479:45]
    node _T_11 = bits(ConfigMem.io.out[0], 17, 15) @[Interconnect.scala 483:39]
    Muxn_7.io.config <= _T_11 @[Interconnect.scala 483:23]
    inst Muxn_8 of Muxn_973 @[Interconnect.scala 473:25]
    Muxn_8.clock <= clock
    Muxn_8.reset <= reset
    Muxn_8.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.otrackE[0] <= Muxn_8.io.out @[Interconnect.scala 479:45]
    node _T_12 = bits(ConfigMem.io.out[0], 20, 18) @[Interconnect.scala 483:39]
    Muxn_8.io.config <= _T_12 @[Interconnect.scala 483:23]
    inst Muxn_9 of Muxn_974 @[Interconnect.scala 473:25]
    Muxn_9.clock <= clock
    Muxn_9.reset <= reset
    Muxn_9.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[1] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[4] <= io.itrackE[0] @[Interconnect.scala 475:63]
    io.otrackS[0] <= Muxn_9.io.out @[Interconnect.scala 479:45]
    node _T_13 = bits(ConfigMem.io.out[0], 23, 21) @[Interconnect.scala 483:39]
    Muxn_9.io.config <= _T_13 @[Interconnect.scala 483:23]
    
  module ConfigMem_157 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<0>, flip cfg_data : UInt<32>, out : UInt<24>[1]}
    
    wire _T : UInt<24>[1] @[ConfigMem.scala 27:29]
    _T[0] <= UInt<24>("h00") @[ConfigMem.scala 27:29]
    reg regs : UInt<24>[1], clock with : (reset => (reset, _T)) @[ConfigMem.scala 27:21]
    node _T_1 = eq(io.cfg_addr, UInt<1>("h00")) @[ConfigMem.scala 32:38]
    node _T_2 = and(io.cfg_en, _T_1) @[ConfigMem.scala 32:22]
    when _T_2 : @[ConfigMem.scala 32:54]
      node _T_3 = bits(io.cfg_data, 23, 0) @[ConfigMem.scala 33:31]
      regs[0] <= _T_3 @[ConfigMem.scala 33:17]
      skip @[ConfigMem.scala 32:54]
    io.out[0] <= regs[0] @[ConfigMem.scala 52:45]
    
  module Muxn_975 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_976 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_977 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_978 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_979 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_980 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_981 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_982 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_983 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_984 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module GIB_77 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<12>, flip cfg_data : UInt<32>, ipinNW : UInt<32>[2], flip opinNW : UInt<32>[1], ipinNE : UInt<32>[2], flip opinNE : UInt<32>[1], ipinSE : UInt<32>[1], flip opinSE : UInt<32>[1], ipinSW : UInt<32>[1], flip opinSW : UInt<32>[1], flip itrackW : UInt<32>[1], otrackW : UInt<32>[1], flip itrackN : UInt<32>[1], otrackN : UInt<32>[1], flip itrackE : UInt<32>[1], otrackE : UInt<32>[1], flip itrackS : UInt<32>[1], otrackS : UInt<32>[1]}
    
    io.ipinNW[0] <= UInt<1>("h00") @[Interconnect.scala 426:20]
    io.ipinNW[1] <= UInt<1>("h00") @[Interconnect.scala 426:20]
    io.ipinNE[0] <= UInt<1>("h00") @[Interconnect.scala 427:20]
    io.ipinNE[1] <= UInt<1>("h00") @[Interconnect.scala 427:20]
    io.ipinSW[0] <= UInt<1>("h00") @[Interconnect.scala 428:20]
    io.ipinSE[0] <= UInt<1>("h00") @[Interconnect.scala 429:20]
    io.otrackW[0] <= UInt<1>("h00") @[Interconnect.scala 430:21]
    io.otrackN[0] <= UInt<1>("h00") @[Interconnect.scala 431:21]
    io.otrackE[0] <= UInt<1>("h00") @[Interconnect.scala 432:21]
    io.otrackS[0] <= UInt<1>("h00") @[Interconnect.scala 433:21]
    inst ConfigMem of ConfigMem_157 @[Interconnect.scala 463:21]
    ConfigMem.clock <= clock
    ConfigMem.reset <= reset
    node _T = bits(io.cfg_addr, 11, 2) @[Interconnect.scala 464:65]
    node _T_1 = eq(UInt<8>("h0a8"), _T) @[Interconnect.scala 464:50]
    node _T_2 = and(io.cfg_en, _T_1) @[Interconnect.scala 464:32]
    ConfigMem.io.cfg_en <= _T_2 @[Interconnect.scala 464:19]
    node _T_3 = bits(io.cfg_addr, 1, 0) @[Interconnect.scala 465:35]
    ConfigMem.io.cfg_addr <= _T_3 @[Interconnect.scala 465:21]
    ConfigMem.io.cfg_data <= io.cfg_data @[Interconnect.scala 466:21]
    inst Muxn of Muxn_975 @[Interconnect.scala 473:25]
    Muxn.clock <= clock
    Muxn.reset <= reset
    Muxn.io.in[0] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn.io.in[2] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNW[0] <= Muxn.io.out @[Interconnect.scala 479:45]
    node _T_4 = bits(ConfigMem.io.out[0], 1, 0) @[Interconnect.scala 483:39]
    Muxn.io.config <= _T_4 @[Interconnect.scala 483:23]
    inst Muxn_1 of Muxn_976 @[Interconnect.scala 473:25]
    Muxn_1.clock <= clock
    Muxn_1.reset <= reset
    Muxn_1.io.in[0] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[2] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNW[1] <= Muxn_1.io.out @[Interconnect.scala 479:45]
    node _T_5 = bits(ConfigMem.io.out[0], 3, 2) @[Interconnect.scala 483:39]
    Muxn_1.io.config <= _T_5 @[Interconnect.scala 483:23]
    inst Muxn_2 of Muxn_977 @[Interconnect.scala 473:25]
    Muxn_2.clock <= clock
    Muxn_2.reset <= reset
    Muxn_2.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNE[0] <= Muxn_2.io.out @[Interconnect.scala 479:45]
    node _T_6 = bits(ConfigMem.io.out[0], 5, 4) @[Interconnect.scala 483:39]
    Muxn_2.io.config <= _T_6 @[Interconnect.scala 483:23]
    inst Muxn_3 of Muxn_978 @[Interconnect.scala 473:25]
    Muxn_3.clock <= clock
    Muxn_3.reset <= reset
    Muxn_3.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNE[1] <= Muxn_3.io.out @[Interconnect.scala 479:45]
    node _T_7 = bits(ConfigMem.io.out[0], 7, 6) @[Interconnect.scala 483:39]
    Muxn_3.io.config <= _T_7 @[Interconnect.scala 483:23]
    inst Muxn_4 of Muxn_979 @[Interconnect.scala 473:25]
    Muxn_4.clock <= clock
    Muxn_4.reset <= reset
    Muxn_4.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[1] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    io.ipinSE[0] <= Muxn_4.io.out @[Interconnect.scala 479:45]
    node _T_8 = bits(ConfigMem.io.out[0], 9, 8) @[Interconnect.scala 483:39]
    Muxn_4.io.config <= _T_8 @[Interconnect.scala 483:23]
    inst Muxn_5 of Muxn_980 @[Interconnect.scala 473:25]
    Muxn_5.clock <= clock
    Muxn_5.reset <= reset
    Muxn_5.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[1] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    io.ipinSW[0] <= Muxn_5.io.out @[Interconnect.scala 479:45]
    node _T_9 = bits(ConfigMem.io.out[0], 11, 10) @[Interconnect.scala 483:39]
    Muxn_5.io.config <= _T_9 @[Interconnect.scala 483:23]
    inst Muxn_6 of Muxn_981 @[Interconnect.scala 473:25]
    Muxn_6.clock <= clock
    Muxn_6.reset <= reset
    Muxn_6.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[1] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    reg _T_10 : UInt, clock @[Interconnect.scala 477:55]
    _T_10 <= Muxn_6.io.out @[Interconnect.scala 477:55]
    io.otrackW[0] <= _T_10 @[Interconnect.scala 477:45]
    node _T_11 = bits(ConfigMem.io.out[0], 14, 12) @[Interconnect.scala 483:39]
    Muxn_6.io.config <= _T_11 @[Interconnect.scala 483:23]
    inst Muxn_7 of Muxn_982 @[Interconnect.scala 473:25]
    Muxn_7.clock <= clock
    Muxn_7.reset <= reset
    Muxn_7.io.in[0] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    reg _T_12 : UInt, clock @[Interconnect.scala 477:55]
    _T_12 <= Muxn_7.io.out @[Interconnect.scala 477:55]
    io.otrackN[0] <= _T_12 @[Interconnect.scala 477:45]
    node _T_13 = bits(ConfigMem.io.out[0], 17, 15) @[Interconnect.scala 483:39]
    Muxn_7.io.config <= _T_13 @[Interconnect.scala 483:23]
    inst Muxn_8 of Muxn_983 @[Interconnect.scala 473:25]
    Muxn_8.clock <= clock
    Muxn_8.reset <= reset
    Muxn_8.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    reg _T_14 : UInt, clock @[Interconnect.scala 477:55]
    _T_14 <= Muxn_8.io.out @[Interconnect.scala 477:55]
    io.otrackE[0] <= _T_14 @[Interconnect.scala 477:45]
    node _T_15 = bits(ConfigMem.io.out[0], 20, 18) @[Interconnect.scala 483:39]
    Muxn_8.io.config <= _T_15 @[Interconnect.scala 483:23]
    inst Muxn_9 of Muxn_984 @[Interconnect.scala 473:25]
    Muxn_9.clock <= clock
    Muxn_9.reset <= reset
    Muxn_9.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[1] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[4] <= io.itrackE[0] @[Interconnect.scala 475:63]
    reg _T_16 : UInt, clock @[Interconnect.scala 477:55]
    _T_16 <= Muxn_9.io.out @[Interconnect.scala 477:55]
    io.otrackS[0] <= _T_16 @[Interconnect.scala 477:45]
    node _T_17 = bits(ConfigMem.io.out[0], 23, 21) @[Interconnect.scala 483:39]
    Muxn_9.io.config <= _T_17 @[Interconnect.scala 483:23]
    
  module ConfigMem_158 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<0>, flip cfg_data : UInt<32>, out : UInt<24>[1]}
    
    wire _T : UInt<24>[1] @[ConfigMem.scala 27:29]
    _T[0] <= UInt<24>("h00") @[ConfigMem.scala 27:29]
    reg regs : UInt<24>[1], clock with : (reset => (reset, _T)) @[ConfigMem.scala 27:21]
    node _T_1 = eq(io.cfg_addr, UInt<1>("h00")) @[ConfigMem.scala 32:38]
    node _T_2 = and(io.cfg_en, _T_1) @[ConfigMem.scala 32:22]
    when _T_2 : @[ConfigMem.scala 32:54]
      node _T_3 = bits(io.cfg_data, 23, 0) @[ConfigMem.scala 33:31]
      regs[0] <= _T_3 @[ConfigMem.scala 33:17]
      skip @[ConfigMem.scala 32:54]
    io.out[0] <= regs[0] @[ConfigMem.scala 52:45]
    
  module Muxn_985 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_986 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_987 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_988 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_989 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_990 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_991 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_992 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_993 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_994 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module GIB_78 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<12>, flip cfg_data : UInt<32>, ipinNW : UInt<32>[2], flip opinNW : UInt<32>[1], ipinNE : UInt<32>[2], flip opinNE : UInt<32>[1], ipinSE : UInt<32>[1], flip opinSE : UInt<32>[1], ipinSW : UInt<32>[1], flip opinSW : UInt<32>[1], flip itrackW : UInt<32>[1], otrackW : UInt<32>[1], flip itrackN : UInt<32>[1], otrackN : UInt<32>[1], flip itrackE : UInt<32>[1], otrackE : UInt<32>[1], flip itrackS : UInt<32>[1], otrackS : UInt<32>[1]}
    
    io.ipinNW[0] <= UInt<1>("h00") @[Interconnect.scala 426:20]
    io.ipinNW[1] <= UInt<1>("h00") @[Interconnect.scala 426:20]
    io.ipinNE[0] <= UInt<1>("h00") @[Interconnect.scala 427:20]
    io.ipinNE[1] <= UInt<1>("h00") @[Interconnect.scala 427:20]
    io.ipinSW[0] <= UInt<1>("h00") @[Interconnect.scala 428:20]
    io.ipinSE[0] <= UInt<1>("h00") @[Interconnect.scala 429:20]
    io.otrackW[0] <= UInt<1>("h00") @[Interconnect.scala 430:21]
    io.otrackN[0] <= UInt<1>("h00") @[Interconnect.scala 431:21]
    io.otrackE[0] <= UInt<1>("h00") @[Interconnect.scala 432:21]
    io.otrackS[0] <= UInt<1>("h00") @[Interconnect.scala 433:21]
    inst ConfigMem of ConfigMem_158 @[Interconnect.scala 463:21]
    ConfigMem.clock <= clock
    ConfigMem.reset <= reset
    node _T = bits(io.cfg_addr, 11, 2) @[Interconnect.scala 464:65]
    node _T_1 = eq(UInt<8>("h0a9"), _T) @[Interconnect.scala 464:50]
    node _T_2 = and(io.cfg_en, _T_1) @[Interconnect.scala 464:32]
    ConfigMem.io.cfg_en <= _T_2 @[Interconnect.scala 464:19]
    node _T_3 = bits(io.cfg_addr, 1, 0) @[Interconnect.scala 465:35]
    ConfigMem.io.cfg_addr <= _T_3 @[Interconnect.scala 465:21]
    ConfigMem.io.cfg_data <= io.cfg_data @[Interconnect.scala 466:21]
    inst Muxn of Muxn_985 @[Interconnect.scala 473:25]
    Muxn.clock <= clock
    Muxn.reset <= reset
    Muxn.io.in[0] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn.io.in[2] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNW[0] <= Muxn.io.out @[Interconnect.scala 479:45]
    node _T_4 = bits(ConfigMem.io.out[0], 1, 0) @[Interconnect.scala 483:39]
    Muxn.io.config <= _T_4 @[Interconnect.scala 483:23]
    inst Muxn_1 of Muxn_986 @[Interconnect.scala 473:25]
    Muxn_1.clock <= clock
    Muxn_1.reset <= reset
    Muxn_1.io.in[0] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[2] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNW[1] <= Muxn_1.io.out @[Interconnect.scala 479:45]
    node _T_5 = bits(ConfigMem.io.out[0], 3, 2) @[Interconnect.scala 483:39]
    Muxn_1.io.config <= _T_5 @[Interconnect.scala 483:23]
    inst Muxn_2 of Muxn_987 @[Interconnect.scala 473:25]
    Muxn_2.clock <= clock
    Muxn_2.reset <= reset
    Muxn_2.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNE[0] <= Muxn_2.io.out @[Interconnect.scala 479:45]
    node _T_6 = bits(ConfigMem.io.out[0], 5, 4) @[Interconnect.scala 483:39]
    Muxn_2.io.config <= _T_6 @[Interconnect.scala 483:23]
    inst Muxn_3 of Muxn_988 @[Interconnect.scala 473:25]
    Muxn_3.clock <= clock
    Muxn_3.reset <= reset
    Muxn_3.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNE[1] <= Muxn_3.io.out @[Interconnect.scala 479:45]
    node _T_7 = bits(ConfigMem.io.out[0], 7, 6) @[Interconnect.scala 483:39]
    Muxn_3.io.config <= _T_7 @[Interconnect.scala 483:23]
    inst Muxn_4 of Muxn_989 @[Interconnect.scala 473:25]
    Muxn_4.clock <= clock
    Muxn_4.reset <= reset
    Muxn_4.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[1] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    io.ipinSE[0] <= Muxn_4.io.out @[Interconnect.scala 479:45]
    node _T_8 = bits(ConfigMem.io.out[0], 9, 8) @[Interconnect.scala 483:39]
    Muxn_4.io.config <= _T_8 @[Interconnect.scala 483:23]
    inst Muxn_5 of Muxn_990 @[Interconnect.scala 473:25]
    Muxn_5.clock <= clock
    Muxn_5.reset <= reset
    Muxn_5.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[1] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    io.ipinSW[0] <= Muxn_5.io.out @[Interconnect.scala 479:45]
    node _T_9 = bits(ConfigMem.io.out[0], 11, 10) @[Interconnect.scala 483:39]
    Muxn_5.io.config <= _T_9 @[Interconnect.scala 483:23]
    inst Muxn_6 of Muxn_991 @[Interconnect.scala 473:25]
    Muxn_6.clock <= clock
    Muxn_6.reset <= reset
    Muxn_6.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[1] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.otrackW[0] <= Muxn_6.io.out @[Interconnect.scala 479:45]
    node _T_10 = bits(ConfigMem.io.out[0], 14, 12) @[Interconnect.scala 483:39]
    Muxn_6.io.config <= _T_10 @[Interconnect.scala 483:23]
    inst Muxn_7 of Muxn_992 @[Interconnect.scala 473:25]
    Muxn_7.clock <= clock
    Muxn_7.reset <= reset
    Muxn_7.io.in[0] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.otrackN[0] <= Muxn_7.io.out @[Interconnect.scala 479:45]
    node _T_11 = bits(ConfigMem.io.out[0], 17, 15) @[Interconnect.scala 483:39]
    Muxn_7.io.config <= _T_11 @[Interconnect.scala 483:23]
    inst Muxn_8 of Muxn_993 @[Interconnect.scala 473:25]
    Muxn_8.clock <= clock
    Muxn_8.reset <= reset
    Muxn_8.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.otrackE[0] <= Muxn_8.io.out @[Interconnect.scala 479:45]
    node _T_12 = bits(ConfigMem.io.out[0], 20, 18) @[Interconnect.scala 483:39]
    Muxn_8.io.config <= _T_12 @[Interconnect.scala 483:23]
    inst Muxn_9 of Muxn_994 @[Interconnect.scala 473:25]
    Muxn_9.clock <= clock
    Muxn_9.reset <= reset
    Muxn_9.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[1] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[4] <= io.itrackE[0] @[Interconnect.scala 475:63]
    io.otrackS[0] <= Muxn_9.io.out @[Interconnect.scala 479:45]
    node _T_13 = bits(ConfigMem.io.out[0], 23, 21) @[Interconnect.scala 483:39]
    Muxn_9.io.config <= _T_13 @[Interconnect.scala 483:23]
    
  module ConfigMem_159 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<0>, flip cfg_data : UInt<32>, out : UInt<24>[1]}
    
    wire _T : UInt<24>[1] @[ConfigMem.scala 27:29]
    _T[0] <= UInt<24>("h00") @[ConfigMem.scala 27:29]
    reg regs : UInt<24>[1], clock with : (reset => (reset, _T)) @[ConfigMem.scala 27:21]
    node _T_1 = eq(io.cfg_addr, UInt<1>("h00")) @[ConfigMem.scala 32:38]
    node _T_2 = and(io.cfg_en, _T_1) @[ConfigMem.scala 32:22]
    when _T_2 : @[ConfigMem.scala 32:54]
      node _T_3 = bits(io.cfg_data, 23, 0) @[ConfigMem.scala 33:31]
      regs[0] <= _T_3 @[ConfigMem.scala 33:17]
      skip @[ConfigMem.scala 32:54]
    io.out[0] <= regs[0] @[ConfigMem.scala 52:45]
    
  module Muxn_995 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_996 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_997 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_998 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_999 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_1000 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_1001 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_1002 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_1003 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_1004 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module GIB_79 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<12>, flip cfg_data : UInt<32>, ipinNW : UInt<32>[2], flip opinNW : UInt<32>[1], ipinNE : UInt<32>[2], flip opinNE : UInt<32>[1], ipinSE : UInt<32>[1], flip opinSE : UInt<32>[1], ipinSW : UInt<32>[1], flip opinSW : UInt<32>[1], flip itrackW : UInt<32>[1], otrackW : UInt<32>[1], flip itrackN : UInt<32>[1], otrackN : UInt<32>[1], flip itrackE : UInt<32>[1], otrackE : UInt<32>[1], flip itrackS : UInt<32>[1], otrackS : UInt<32>[1]}
    
    io.ipinNW[0] <= UInt<1>("h00") @[Interconnect.scala 426:20]
    io.ipinNW[1] <= UInt<1>("h00") @[Interconnect.scala 426:20]
    io.ipinNE[0] <= UInt<1>("h00") @[Interconnect.scala 427:20]
    io.ipinNE[1] <= UInt<1>("h00") @[Interconnect.scala 427:20]
    io.ipinSW[0] <= UInt<1>("h00") @[Interconnect.scala 428:20]
    io.ipinSE[0] <= UInt<1>("h00") @[Interconnect.scala 429:20]
    io.otrackW[0] <= UInt<1>("h00") @[Interconnect.scala 430:21]
    io.otrackN[0] <= UInt<1>("h00") @[Interconnect.scala 431:21]
    io.otrackE[0] <= UInt<1>("h00") @[Interconnect.scala 432:21]
    io.otrackS[0] <= UInt<1>("h00") @[Interconnect.scala 433:21]
    inst ConfigMem of ConfigMem_159 @[Interconnect.scala 463:21]
    ConfigMem.clock <= clock
    ConfigMem.reset <= reset
    node _T = bits(io.cfg_addr, 11, 2) @[Interconnect.scala 464:65]
    node _T_1 = eq(UInt<8>("h0aa"), _T) @[Interconnect.scala 464:50]
    node _T_2 = and(io.cfg_en, _T_1) @[Interconnect.scala 464:32]
    ConfigMem.io.cfg_en <= _T_2 @[Interconnect.scala 464:19]
    node _T_3 = bits(io.cfg_addr, 1, 0) @[Interconnect.scala 465:35]
    ConfigMem.io.cfg_addr <= _T_3 @[Interconnect.scala 465:21]
    ConfigMem.io.cfg_data <= io.cfg_data @[Interconnect.scala 466:21]
    inst Muxn of Muxn_995 @[Interconnect.scala 473:25]
    Muxn.clock <= clock
    Muxn.reset <= reset
    Muxn.io.in[0] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn.io.in[2] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNW[0] <= Muxn.io.out @[Interconnect.scala 479:45]
    node _T_4 = bits(ConfigMem.io.out[0], 1, 0) @[Interconnect.scala 483:39]
    Muxn.io.config <= _T_4 @[Interconnect.scala 483:23]
    inst Muxn_1 of Muxn_996 @[Interconnect.scala 473:25]
    Muxn_1.clock <= clock
    Muxn_1.reset <= reset
    Muxn_1.io.in[0] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[2] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNW[1] <= Muxn_1.io.out @[Interconnect.scala 479:45]
    node _T_5 = bits(ConfigMem.io.out[0], 3, 2) @[Interconnect.scala 483:39]
    Muxn_1.io.config <= _T_5 @[Interconnect.scala 483:23]
    inst Muxn_2 of Muxn_997 @[Interconnect.scala 473:25]
    Muxn_2.clock <= clock
    Muxn_2.reset <= reset
    Muxn_2.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNE[0] <= Muxn_2.io.out @[Interconnect.scala 479:45]
    node _T_6 = bits(ConfigMem.io.out[0], 5, 4) @[Interconnect.scala 483:39]
    Muxn_2.io.config <= _T_6 @[Interconnect.scala 483:23]
    inst Muxn_3 of Muxn_998 @[Interconnect.scala 473:25]
    Muxn_3.clock <= clock
    Muxn_3.reset <= reset
    Muxn_3.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNE[1] <= Muxn_3.io.out @[Interconnect.scala 479:45]
    node _T_7 = bits(ConfigMem.io.out[0], 7, 6) @[Interconnect.scala 483:39]
    Muxn_3.io.config <= _T_7 @[Interconnect.scala 483:23]
    inst Muxn_4 of Muxn_999 @[Interconnect.scala 473:25]
    Muxn_4.clock <= clock
    Muxn_4.reset <= reset
    Muxn_4.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[1] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    io.ipinSE[0] <= Muxn_4.io.out @[Interconnect.scala 479:45]
    node _T_8 = bits(ConfigMem.io.out[0], 9, 8) @[Interconnect.scala 483:39]
    Muxn_4.io.config <= _T_8 @[Interconnect.scala 483:23]
    inst Muxn_5 of Muxn_1000 @[Interconnect.scala 473:25]
    Muxn_5.clock <= clock
    Muxn_5.reset <= reset
    Muxn_5.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[1] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    io.ipinSW[0] <= Muxn_5.io.out @[Interconnect.scala 479:45]
    node _T_9 = bits(ConfigMem.io.out[0], 11, 10) @[Interconnect.scala 483:39]
    Muxn_5.io.config <= _T_9 @[Interconnect.scala 483:23]
    inst Muxn_6 of Muxn_1001 @[Interconnect.scala 473:25]
    Muxn_6.clock <= clock
    Muxn_6.reset <= reset
    Muxn_6.io.in[0] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[1] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    reg _T_10 : UInt, clock @[Interconnect.scala 477:55]
    _T_10 <= Muxn_6.io.out @[Interconnect.scala 477:55]
    io.otrackW[0] <= _T_10 @[Interconnect.scala 477:45]
    node _T_11 = bits(ConfigMem.io.out[0], 14, 12) @[Interconnect.scala 483:39]
    Muxn_6.io.config <= _T_11 @[Interconnect.scala 483:23]
    inst Muxn_7 of Muxn_1002 @[Interconnect.scala 473:25]
    Muxn_7.clock <= clock
    Muxn_7.reset <= reset
    Muxn_7.io.in[0] <= io.opinSE[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_7.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    reg _T_12 : UInt, clock @[Interconnect.scala 477:55]
    _T_12 <= Muxn_7.io.out @[Interconnect.scala 477:55]
    io.otrackN[0] <= _T_12 @[Interconnect.scala 477:45]
    node _T_13 = bits(ConfigMem.io.out[0], 17, 15) @[Interconnect.scala 483:39]
    Muxn_7.io.config <= _T_13 @[Interconnect.scala 483:23]
    inst Muxn_8 of Muxn_1003 @[Interconnect.scala 473:25]
    Muxn_8.clock <= clock
    Muxn_8.reset <= reset
    Muxn_8.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_8.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    reg _T_14 : UInt, clock @[Interconnect.scala 477:55]
    _T_14 <= Muxn_8.io.out @[Interconnect.scala 477:55]
    io.otrackE[0] <= _T_14 @[Interconnect.scala 477:45]
    node _T_15 = bits(ConfigMem.io.out[0], 20, 18) @[Interconnect.scala 483:39]
    Muxn_8.io.config <= _T_15 @[Interconnect.scala 483:23]
    inst Muxn_9 of Muxn_1004 @[Interconnect.scala 473:25]
    Muxn_9.clock <= clock
    Muxn_9.reset <= reset
    Muxn_9.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[1] <= io.opinNE[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_9.io.in[4] <= io.itrackE[0] @[Interconnect.scala 475:63]
    reg _T_16 : UInt, clock @[Interconnect.scala 477:55]
    _T_16 <= Muxn_9.io.out @[Interconnect.scala 477:55]
    io.otrackS[0] <= _T_16 @[Interconnect.scala 477:45]
    node _T_17 = bits(ConfigMem.io.out[0], 23, 21) @[Interconnect.scala 483:39]
    Muxn_9.io.config <= _T_17 @[Interconnect.scala 483:23]
    
  module ConfigMem_160 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<0>, flip cfg_data : UInt<32>, out : UInt<14>[1]}
    
    wire _T : UInt<14>[1] @[ConfigMem.scala 27:29]
    _T[0] <= UInt<14>("h00") @[ConfigMem.scala 27:29]
    reg regs : UInt<14>[1], clock with : (reset => (reset, _T)) @[ConfigMem.scala 27:21]
    node _T_1 = eq(io.cfg_addr, UInt<1>("h00")) @[ConfigMem.scala 32:38]
    node _T_2 = and(io.cfg_en, _T_1) @[ConfigMem.scala 32:22]
    when _T_2 : @[ConfigMem.scala 32:54]
      node _T_3 = bits(io.cfg_data, 13, 0) @[ConfigMem.scala 33:31]
      regs[0] <= _T_3 @[ConfigMem.scala 33:17]
      skip @[ConfigMem.scala 32:54]
    io.out[0] <= regs[0] @[ConfigMem.scala 52:45]
    
  module Muxn_1005 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[3], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_1006 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[3], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_1007 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<1>, flip in : UInt<32>[2], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    io.out <= _T_1 @[Multiplexer.scala 20:10]
    
  module Muxn_1008 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[3], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_1009 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module Muxn_1010 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<3>, flip in : UInt<32>[5], out : UInt<32>}
    
    node _T = eq(UInt<1>("h00"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[0], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[1], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[2], _T_3) @[Mux.scala 80:57]
    node _T_6 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_7 = mux(_T_6, io.in[3], _T_5) @[Mux.scala 80:57]
    node _T_8 = eq(UInt<3>("h04"), io.config) @[Mux.scala 80:60]
    node _T_9 = mux(_T_8, io.in[4], _T_7) @[Mux.scala 80:57]
    io.out <= _T_9 @[Multiplexer.scala 20:10]
    
  module Muxn_1011 : 
    input clock : Clock
    input reset : Reset
    output io : {flip config : UInt<2>, flip in : UInt<32>[4], out : UInt<32>}
    
    node _T = eq(UInt<1>("h01"), io.config) @[Mux.scala 80:60]
    node _T_1 = mux(_T, io.in[1], io.in[0]) @[Mux.scala 80:57]
    node _T_2 = eq(UInt<2>("h02"), io.config) @[Mux.scala 80:60]
    node _T_3 = mux(_T_2, io.in[2], _T_1) @[Mux.scala 80:57]
    node _T_4 = eq(UInt<2>("h03"), io.config) @[Mux.scala 80:60]
    node _T_5 = mux(_T_4, io.in[3], _T_3) @[Mux.scala 80:57]
    io.out <= _T_5 @[Multiplexer.scala 20:10]
    
  module GIB_80 : 
    input clock : Clock
    input reset : Reset
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<12>, flip cfg_data : UInt<32>, ipinNW : UInt<32>[2], flip opinNW : UInt<32>[1], ipinNE : UInt<32>[0], flip opinNE : UInt<32>[0], ipinSE : UInt<32>[0], flip opinSE : UInt<32>[0], ipinSW : UInt<32>[1], flip opinSW : UInt<32>[1], flip itrackW : UInt<32>[1], otrackW : UInt<32>[1], flip itrackN : UInt<32>[1], otrackN : UInt<32>[1], flip itrackE : UInt<32>[1], otrackE : UInt<32>[1], flip itrackS : UInt<32>[1], otrackS : UInt<32>[1]}
    
    io.ipinNW[0] <= UInt<1>("h00") @[Interconnect.scala 426:20]
    io.ipinNW[1] <= UInt<1>("h00") @[Interconnect.scala 426:20]
    io.ipinSW[0] <= UInt<1>("h00") @[Interconnect.scala 428:20]
    io.otrackW[0] <= UInt<1>("h00") @[Interconnect.scala 430:21]
    io.otrackN[0] <= UInt<1>("h00") @[Interconnect.scala 431:21]
    io.otrackE[0] <= UInt<1>("h00") @[Interconnect.scala 432:21]
    io.otrackS[0] <= UInt<1>("h00") @[Interconnect.scala 433:21]
    inst ConfigMem of ConfigMem_160 @[Interconnect.scala 463:21]
    ConfigMem.clock <= clock
    ConfigMem.reset <= reset
    node _T = bits(io.cfg_addr, 11, 2) @[Interconnect.scala 464:65]
    node _T_1 = eq(UInt<8>("h0ab"), _T) @[Interconnect.scala 464:50]
    node _T_2 = and(io.cfg_en, _T_1) @[Interconnect.scala 464:32]
    ConfigMem.io.cfg_en <= _T_2 @[Interconnect.scala 464:19]
    node _T_3 = bits(io.cfg_addr, 1, 0) @[Interconnect.scala 465:35]
    ConfigMem.io.cfg_addr <= _T_3 @[Interconnect.scala 465:21]
    ConfigMem.io.cfg_data <= io.cfg_data @[Interconnect.scala 466:21]
    inst Muxn of Muxn_1005 @[Interconnect.scala 473:25]
    Muxn.clock <= clock
    Muxn.reset <= reset
    Muxn.io.in[0] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn.io.in[1] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn.io.in[2] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNW[0] <= Muxn.io.out @[Interconnect.scala 479:45]
    node _T_4 = bits(ConfigMem.io.out[0], 1, 0) @[Interconnect.scala 483:39]
    Muxn.io.config <= _T_4 @[Interconnect.scala 483:23]
    inst Muxn_1 of Muxn_1006 @[Interconnect.scala 473:25]
    Muxn_1.clock <= clock
    Muxn_1.reset <= reset
    Muxn_1.io.in[0] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[1] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_1.io.in[2] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.ipinNW[1] <= Muxn_1.io.out @[Interconnect.scala 479:45]
    node _T_5 = bits(ConfigMem.io.out[0], 3, 2) @[Interconnect.scala 483:39]
    Muxn_1.io.config <= _T_5 @[Interconnect.scala 483:23]
    inst Muxn_2 of Muxn_1007 @[Interconnect.scala 473:25]
    Muxn_2.clock <= clock
    Muxn_2.reset <= reset
    Muxn_2.io.in[0] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_2.io.in[1] <= io.itrackE[0] @[Interconnect.scala 475:63]
    io.ipinSW[0] <= Muxn_2.io.out @[Interconnect.scala 479:45]
    node _T_6 = bits(ConfigMem.io.out[0], 4, 4) @[Interconnect.scala 483:39]
    Muxn_2.io.config <= _T_6 @[Interconnect.scala 483:23]
    inst Muxn_3 of Muxn_1008 @[Interconnect.scala 473:25]
    Muxn_3.clock <= clock
    Muxn_3.reset <= reset
    Muxn_3.io.in[0] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[1] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_3.io.in[2] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.otrackW[0] <= Muxn_3.io.out @[Interconnect.scala 479:45]
    node _T_7 = bits(ConfigMem.io.out[0], 6, 5) @[Interconnect.scala 483:39]
    Muxn_3.io.config <= _T_7 @[Interconnect.scala 483:23]
    inst Muxn_4 of Muxn_1009 @[Interconnect.scala 473:25]
    Muxn_4.clock <= clock
    Muxn_4.reset <= reset
    Muxn_4.io.in[0] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[1] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[2] <= io.itrackE[0] @[Interconnect.scala 475:63]
    Muxn_4.io.in[3] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.otrackN[0] <= Muxn_4.io.out @[Interconnect.scala 479:45]
    node _T_8 = bits(ConfigMem.io.out[0], 8, 7) @[Interconnect.scala 483:39]
    Muxn_4.io.config <= _T_8 @[Interconnect.scala 483:23]
    inst Muxn_5 of Muxn_1010 @[Interconnect.scala 473:25]
    Muxn_5.clock <= clock
    Muxn_5.reset <= reset
    Muxn_5.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[1] <= io.opinSW[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[2] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[3] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_5.io.in[4] <= io.itrackS[0] @[Interconnect.scala 475:63]
    io.otrackE[0] <= Muxn_5.io.out @[Interconnect.scala 479:45]
    node _T_9 = bits(ConfigMem.io.out[0], 11, 9) @[Interconnect.scala 483:39]
    Muxn_5.io.config <= _T_9 @[Interconnect.scala 483:23]
    inst Muxn_6 of Muxn_1011 @[Interconnect.scala 473:25]
    Muxn_6.clock <= clock
    Muxn_6.reset <= reset
    Muxn_6.io.in[0] <= io.opinNW[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[1] <= io.itrackW[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[2] <= io.itrackN[0] @[Interconnect.scala 475:63]
    Muxn_6.io.in[3] <= io.itrackE[0] @[Interconnect.scala 475:63]
    io.otrackS[0] <= Muxn_6.io.out @[Interconnect.scala 479:45]
    node _T_10 = bits(ConfigMem.io.out[0], 13, 12) @[Interconnect.scala 483:39]
    Muxn_6.io.config <= _T_10 @[Interconnect.scala 483:23]
    
  module CGRA : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip cfg_en : UInt<1>, flip cfg_addr : UInt<12>, flip cfg_data : UInt<32>, flip en : UInt<1>[16], flip in : UInt<32>[16], out : UInt<32>[16]}
    
    inst ibs_0 of IOB @[CGRA.scala 149:20]
    ibs_0.clock <= clock
    ibs_0.reset <= reset
    inst ibs_1 of IOB_1 @[CGRA.scala 149:20]
    ibs_1.clock <= clock
    ibs_1.reset <= reset
    inst ibs_2 of IOB_2 @[CGRA.scala 149:20]
    ibs_2.clock <= clock
    ibs_2.reset <= reset
    inst ibs_3 of IOB_3 @[CGRA.scala 149:20]
    ibs_3.clock <= clock
    ibs_3.reset <= reset
    inst ibs_4 of IOB_4 @[CGRA.scala 149:20]
    ibs_4.clock <= clock
    ibs_4.reset <= reset
    inst ibs_5 of IOB_5 @[CGRA.scala 149:20]
    ibs_5.clock <= clock
    ibs_5.reset <= reset
    inst ibs_6 of IOB_6 @[CGRA.scala 149:20]
    ibs_6.clock <= clock
    ibs_6.reset <= reset
    inst ibs_7 of IOB_7 @[CGRA.scala 149:20]
    ibs_7.clock <= clock
    ibs_7.reset <= reset
    inst ibs_8 of IOB_8 @[CGRA.scala 149:20]
    ibs_8.clock <= clock
    ibs_8.reset <= reset
    inst ibs_9 of IOB_9 @[CGRA.scala 149:20]
    ibs_9.clock <= clock
    ibs_9.reset <= reset
    inst ibs_10 of IOB_10 @[CGRA.scala 149:20]
    ibs_10.clock <= clock
    ibs_10.reset <= reset
    inst ibs_11 of IOB_11 @[CGRA.scala 149:20]
    ibs_11.clock <= clock
    ibs_11.reset <= reset
    inst ibs_12 of IOB_12 @[CGRA.scala 149:20]
    ibs_12.clock <= clock
    ibs_12.reset <= reset
    inst ibs_13 of IOB_13 @[CGRA.scala 149:20]
    ibs_13.clock <= clock
    ibs_13.reset <= reset
    inst ibs_14 of IOB_14 @[CGRA.scala 149:20]
    ibs_14.clock <= clock
    ibs_14.reset <= reset
    inst ibs_15 of IOB_15 @[CGRA.scala 149:20]
    ibs_15.clock <= clock
    ibs_15.reset <= reset
    inst obs_0 of IOB_16 @[CGRA.scala 176:20]
    obs_0.clock <= clock
    obs_0.reset <= reset
    inst obs_1 of IOB_17 @[CGRA.scala 176:20]
    obs_1.clock <= clock
    obs_1.reset <= reset
    inst obs_2 of IOB_18 @[CGRA.scala 176:20]
    obs_2.clock <= clock
    obs_2.reset <= reset
    inst obs_3 of IOB_19 @[CGRA.scala 176:20]
    obs_3.clock <= clock
    obs_3.reset <= reset
    inst obs_4 of IOB_20 @[CGRA.scala 176:20]
    obs_4.clock <= clock
    obs_4.reset <= reset
    inst obs_5 of IOB_21 @[CGRA.scala 176:20]
    obs_5.clock <= clock
    obs_5.reset <= reset
    inst obs_6 of IOB_22 @[CGRA.scala 176:20]
    obs_6.clock <= clock
    obs_6.reset <= reset
    inst obs_7 of IOB_23 @[CGRA.scala 176:20]
    obs_7.clock <= clock
    obs_7.reset <= reset
    inst obs_8 of IOB_24 @[CGRA.scala 176:20]
    obs_8.clock <= clock
    obs_8.reset <= reset
    inst obs_9 of IOB_25 @[CGRA.scala 176:20]
    obs_9.clock <= clock
    obs_9.reset <= reset
    inst obs_10 of IOB_26 @[CGRA.scala 176:20]
    obs_10.clock <= clock
    obs_10.reset <= reset
    inst obs_11 of IOB_27 @[CGRA.scala 176:20]
    obs_11.clock <= clock
    obs_11.reset <= reset
    inst obs_12 of IOB_28 @[CGRA.scala 176:20]
    obs_12.clock <= clock
    obs_12.reset <= reset
    inst obs_13 of IOB_29 @[CGRA.scala 176:20]
    obs_13.clock <= clock
    obs_13.reset <= reset
    inst obs_14 of IOB_30 @[CGRA.scala 176:20]
    obs_14.clock <= clock
    obs_14.reset <= reset
    inst obs_15 of IOB_31 @[CGRA.scala 176:20]
    obs_15.clock <= clock
    obs_15.reset <= reset
    inst pes_0 of GPE @[CGRA.scala 200:20]
    pes_0.clock <= clock
    pes_0.reset <= reset
    inst pes_1 of GPE_1 @[CGRA.scala 200:20]
    pes_1.clock <= clock
    pes_1.reset <= reset
    inst pes_2 of GPE_2 @[CGRA.scala 200:20]
    pes_2.clock <= clock
    pes_2.reset <= reset
    inst pes_3 of GPE_3 @[CGRA.scala 200:20]
    pes_3.clock <= clock
    pes_3.reset <= reset
    inst pes_4 of GPE_4 @[CGRA.scala 200:20]
    pes_4.clock <= clock
    pes_4.reset <= reset
    inst pes_5 of GPE_5 @[CGRA.scala 200:20]
    pes_5.clock <= clock
    pes_5.reset <= reset
    inst pes_6 of GPE_6 @[CGRA.scala 200:20]
    pes_6.clock <= clock
    pes_6.reset <= reset
    inst pes_7 of GPE_7 @[CGRA.scala 200:20]
    pes_7.clock <= clock
    pes_7.reset <= reset
    inst pes_8 of GPE_8 @[CGRA.scala 200:20]
    pes_8.clock <= clock
    pes_8.reset <= reset
    inst pes_9 of GPE_9 @[CGRA.scala 200:20]
    pes_9.clock <= clock
    pes_9.reset <= reset
    inst pes_10 of GPE_10 @[CGRA.scala 200:20]
    pes_10.clock <= clock
    pes_10.reset <= reset
    inst pes_11 of GPE_11 @[CGRA.scala 200:20]
    pes_11.clock <= clock
    pes_11.reset <= reset
    inst pes_12 of GPE_12 @[CGRA.scala 200:20]
    pes_12.clock <= clock
    pes_12.reset <= reset
    inst pes_13 of GPE_13 @[CGRA.scala 200:20]
    pes_13.clock <= clock
    pes_13.reset <= reset
    inst pes_14 of GPE_14 @[CGRA.scala 200:20]
    pes_14.clock <= clock
    pes_14.reset <= reset
    inst pes_15 of GPE_15 @[CGRA.scala 200:20]
    pes_15.clock <= clock
    pes_15.reset <= reset
    inst pes_16 of GPE_16 @[CGRA.scala 200:20]
    pes_16.clock <= clock
    pes_16.reset <= reset
    inst pes_17 of GPE_17 @[CGRA.scala 200:20]
    pes_17.clock <= clock
    pes_17.reset <= reset
    inst pes_18 of GPE_18 @[CGRA.scala 200:20]
    pes_18.clock <= clock
    pes_18.reset <= reset
    inst pes_19 of GPE_19 @[CGRA.scala 200:20]
    pes_19.clock <= clock
    pes_19.reset <= reset
    inst pes_20 of GPE_20 @[CGRA.scala 200:20]
    pes_20.clock <= clock
    pes_20.reset <= reset
    inst pes_21 of GPE_21 @[CGRA.scala 200:20]
    pes_21.clock <= clock
    pes_21.reset <= reset
    inst pes_22 of GPE_22 @[CGRA.scala 200:20]
    pes_22.clock <= clock
    pes_22.reset <= reset
    inst pes_23 of GPE_23 @[CGRA.scala 200:20]
    pes_23.clock <= clock
    pes_23.reset <= reset
    inst pes_24 of GPE_24 @[CGRA.scala 200:20]
    pes_24.clock <= clock
    pes_24.reset <= reset
    inst pes_25 of GPE_25 @[CGRA.scala 200:20]
    pes_25.clock <= clock
    pes_25.reset <= reset
    inst pes_26 of GPE_26 @[CGRA.scala 200:20]
    pes_26.clock <= clock
    pes_26.reset <= reset
    inst pes_27 of GPE_27 @[CGRA.scala 200:20]
    pes_27.clock <= clock
    pes_27.reset <= reset
    inst pes_28 of GPE_28 @[CGRA.scala 200:20]
    pes_28.clock <= clock
    pes_28.reset <= reset
    inst pes_29 of GPE_29 @[CGRA.scala 200:20]
    pes_29.clock <= clock
    pes_29.reset <= reset
    inst pes_30 of GPE_30 @[CGRA.scala 200:20]
    pes_30.clock <= clock
    pes_30.reset <= reset
    inst pes_31 of GPE_31 @[CGRA.scala 200:20]
    pes_31.clock <= clock
    pes_31.reset <= reset
    inst pes_32 of GPE_32 @[CGRA.scala 200:20]
    pes_32.clock <= clock
    pes_32.reset <= reset
    inst pes_33 of GPE_33 @[CGRA.scala 200:20]
    pes_33.clock <= clock
    pes_33.reset <= reset
    inst pes_34 of GPE_34 @[CGRA.scala 200:20]
    pes_34.clock <= clock
    pes_34.reset <= reset
    inst pes_35 of GPE_35 @[CGRA.scala 200:20]
    pes_35.clock <= clock
    pes_35.reset <= reset
    inst pes_36 of GPE_36 @[CGRA.scala 200:20]
    pes_36.clock <= clock
    pes_36.reset <= reset
    inst pes_37 of GPE_37 @[CGRA.scala 200:20]
    pes_37.clock <= clock
    pes_37.reset <= reset
    inst pes_38 of GPE_38 @[CGRA.scala 200:20]
    pes_38.clock <= clock
    pes_38.reset <= reset
    inst pes_39 of GPE_39 @[CGRA.scala 200:20]
    pes_39.clock <= clock
    pes_39.reset <= reset
    inst pes_40 of GPE_40 @[CGRA.scala 200:20]
    pes_40.clock <= clock
    pes_40.reset <= reset
    inst pes_41 of GPE_41 @[CGRA.scala 200:20]
    pes_41.clock <= clock
    pes_41.reset <= reset
    inst pes_42 of GPE_42 @[CGRA.scala 200:20]
    pes_42.clock <= clock
    pes_42.reset <= reset
    inst pes_43 of GPE_43 @[CGRA.scala 200:20]
    pes_43.clock <= clock
    pes_43.reset <= reset
    inst pes_44 of GPE_44 @[CGRA.scala 200:20]
    pes_44.clock <= clock
    pes_44.reset <= reset
    inst pes_45 of GPE_45 @[CGRA.scala 200:20]
    pes_45.clock <= clock
    pes_45.reset <= reset
    inst pes_46 of GPE_46 @[CGRA.scala 200:20]
    pes_46.clock <= clock
    pes_46.reset <= reset
    inst pes_47 of GPE_47 @[CGRA.scala 200:20]
    pes_47.clock <= clock
    pes_47.reset <= reset
    inst pes_48 of GPE_48 @[CGRA.scala 200:20]
    pes_48.clock <= clock
    pes_48.reset <= reset
    inst pes_49 of GPE_49 @[CGRA.scala 200:20]
    pes_49.clock <= clock
    pes_49.reset <= reset
    inst pes_50 of GPE_50 @[CGRA.scala 200:20]
    pes_50.clock <= clock
    pes_50.reset <= reset
    inst pes_51 of GPE_51 @[CGRA.scala 200:20]
    pes_51.clock <= clock
    pes_51.reset <= reset
    inst pes_52 of GPE_52 @[CGRA.scala 200:20]
    pes_52.clock <= clock
    pes_52.reset <= reset
    inst pes_53 of GPE_53 @[CGRA.scala 200:20]
    pes_53.clock <= clock
    pes_53.reset <= reset
    inst pes_54 of GPE_54 @[CGRA.scala 200:20]
    pes_54.clock <= clock
    pes_54.reset <= reset
    inst pes_55 of GPE_55 @[CGRA.scala 200:20]
    pes_55.clock <= clock
    pes_55.reset <= reset
    inst pes_56 of GPE_56 @[CGRA.scala 200:20]
    pes_56.clock <= clock
    pes_56.reset <= reset
    inst pes_57 of GPE_57 @[CGRA.scala 200:20]
    pes_57.clock <= clock
    pes_57.reset <= reset
    inst pes_58 of GPE_58 @[CGRA.scala 200:20]
    pes_58.clock <= clock
    pes_58.reset <= reset
    inst pes_59 of GPE_59 @[CGRA.scala 200:20]
    pes_59.clock <= clock
    pes_59.reset <= reset
    inst pes_60 of GPE_60 @[CGRA.scala 200:20]
    pes_60.clock <= clock
    pes_60.reset <= reset
    inst pes_61 of GPE_61 @[CGRA.scala 200:20]
    pes_61.clock <= clock
    pes_61.reset <= reset
    inst pes_62 of GPE_62 @[CGRA.scala 200:20]
    pes_62.clock <= clock
    pes_62.reset <= reset
    inst pes_63 of GPE_63 @[CGRA.scala 200:20]
    pes_63.clock <= clock
    pes_63.reset <= reset
    inst gibs_0 of GIB @[CGRA.scala 273:21]
    gibs_0.clock <= clock
    gibs_0.reset <= reset
    inst gibs_1 of GIB_1 @[CGRA.scala 273:21]
    gibs_1.clock <= clock
    gibs_1.reset <= reset
    inst gibs_2 of GIB_2 @[CGRA.scala 273:21]
    gibs_2.clock <= clock
    gibs_2.reset <= reset
    inst gibs_3 of GIB_3 @[CGRA.scala 273:21]
    gibs_3.clock <= clock
    gibs_3.reset <= reset
    inst gibs_4 of GIB_4 @[CGRA.scala 273:21]
    gibs_4.clock <= clock
    gibs_4.reset <= reset
    inst gibs_5 of GIB_5 @[CGRA.scala 273:21]
    gibs_5.clock <= clock
    gibs_5.reset <= reset
    inst gibs_6 of GIB_6 @[CGRA.scala 273:21]
    gibs_6.clock <= clock
    gibs_6.reset <= reset
    inst gibs_7 of GIB_7 @[CGRA.scala 273:21]
    gibs_7.clock <= clock
    gibs_7.reset <= reset
    inst gibs_8 of GIB_8 @[CGRA.scala 273:21]
    gibs_8.clock <= clock
    gibs_8.reset <= reset
    inst gibs_9 of GIB_9 @[CGRA.scala 273:21]
    gibs_9.clock <= clock
    gibs_9.reset <= reset
    inst gibs_10 of GIB_10 @[CGRA.scala 273:21]
    gibs_10.clock <= clock
    gibs_10.reset <= reset
    inst gibs_11 of GIB_11 @[CGRA.scala 273:21]
    gibs_11.clock <= clock
    gibs_11.reset <= reset
    inst gibs_12 of GIB_12 @[CGRA.scala 273:21]
    gibs_12.clock <= clock
    gibs_12.reset <= reset
    inst gibs_13 of GIB_13 @[CGRA.scala 273:21]
    gibs_13.clock <= clock
    gibs_13.reset <= reset
    inst gibs_14 of GIB_14 @[CGRA.scala 273:21]
    gibs_14.clock <= clock
    gibs_14.reset <= reset
    inst gibs_15 of GIB_15 @[CGRA.scala 273:21]
    gibs_15.clock <= clock
    gibs_15.reset <= reset
    inst gibs_16 of GIB_16 @[CGRA.scala 273:21]
    gibs_16.clock <= clock
    gibs_16.reset <= reset
    inst gibs_17 of GIB_17 @[CGRA.scala 273:21]
    gibs_17.clock <= clock
    gibs_17.reset <= reset
    inst gibs_18 of GIB_18 @[CGRA.scala 273:21]
    gibs_18.clock <= clock
    gibs_18.reset <= reset
    inst gibs_19 of GIB_19 @[CGRA.scala 273:21]
    gibs_19.clock <= clock
    gibs_19.reset <= reset
    inst gibs_20 of GIB_20 @[CGRA.scala 273:21]
    gibs_20.clock <= clock
    gibs_20.reset <= reset
    inst gibs_21 of GIB_21 @[CGRA.scala 273:21]
    gibs_21.clock <= clock
    gibs_21.reset <= reset
    inst gibs_22 of GIB_22 @[CGRA.scala 273:21]
    gibs_22.clock <= clock
    gibs_22.reset <= reset
    inst gibs_23 of GIB_23 @[CGRA.scala 273:21]
    gibs_23.clock <= clock
    gibs_23.reset <= reset
    inst gibs_24 of GIB_24 @[CGRA.scala 273:21]
    gibs_24.clock <= clock
    gibs_24.reset <= reset
    inst gibs_25 of GIB_25 @[CGRA.scala 273:21]
    gibs_25.clock <= clock
    gibs_25.reset <= reset
    inst gibs_26 of GIB_26 @[CGRA.scala 273:21]
    gibs_26.clock <= clock
    gibs_26.reset <= reset
    inst gibs_27 of GIB_27 @[CGRA.scala 273:21]
    gibs_27.clock <= clock
    gibs_27.reset <= reset
    inst gibs_28 of GIB_28 @[CGRA.scala 273:21]
    gibs_28.clock <= clock
    gibs_28.reset <= reset
    inst gibs_29 of GIB_29 @[CGRA.scala 273:21]
    gibs_29.clock <= clock
    gibs_29.reset <= reset
    inst gibs_30 of GIB_30 @[CGRA.scala 273:21]
    gibs_30.clock <= clock
    gibs_30.reset <= reset
    inst gibs_31 of GIB_31 @[CGRA.scala 273:21]
    gibs_31.clock <= clock
    gibs_31.reset <= reset
    inst gibs_32 of GIB_32 @[CGRA.scala 273:21]
    gibs_32.clock <= clock
    gibs_32.reset <= reset
    inst gibs_33 of GIB_33 @[CGRA.scala 273:21]
    gibs_33.clock <= clock
    gibs_33.reset <= reset
    inst gibs_34 of GIB_34 @[CGRA.scala 273:21]
    gibs_34.clock <= clock
    gibs_34.reset <= reset
    inst gibs_35 of GIB_35 @[CGRA.scala 273:21]
    gibs_35.clock <= clock
    gibs_35.reset <= reset
    inst gibs_36 of GIB_36 @[CGRA.scala 273:21]
    gibs_36.clock <= clock
    gibs_36.reset <= reset
    inst gibs_37 of GIB_37 @[CGRA.scala 273:21]
    gibs_37.clock <= clock
    gibs_37.reset <= reset
    inst gibs_38 of GIB_38 @[CGRA.scala 273:21]
    gibs_38.clock <= clock
    gibs_38.reset <= reset
    inst gibs_39 of GIB_39 @[CGRA.scala 273:21]
    gibs_39.clock <= clock
    gibs_39.reset <= reset
    inst gibs_40 of GIB_40 @[CGRA.scala 273:21]
    gibs_40.clock <= clock
    gibs_40.reset <= reset
    inst gibs_41 of GIB_41 @[CGRA.scala 273:21]
    gibs_41.clock <= clock
    gibs_41.reset <= reset
    inst gibs_42 of GIB_42 @[CGRA.scala 273:21]
    gibs_42.clock <= clock
    gibs_42.reset <= reset
    inst gibs_43 of GIB_43 @[CGRA.scala 273:21]
    gibs_43.clock <= clock
    gibs_43.reset <= reset
    inst gibs_44 of GIB_44 @[CGRA.scala 273:21]
    gibs_44.clock <= clock
    gibs_44.reset <= reset
    inst gibs_45 of GIB_45 @[CGRA.scala 273:21]
    gibs_45.clock <= clock
    gibs_45.reset <= reset
    inst gibs_46 of GIB_46 @[CGRA.scala 273:21]
    gibs_46.clock <= clock
    gibs_46.reset <= reset
    inst gibs_47 of GIB_47 @[CGRA.scala 273:21]
    gibs_47.clock <= clock
    gibs_47.reset <= reset
    inst gibs_48 of GIB_48 @[CGRA.scala 273:21]
    gibs_48.clock <= clock
    gibs_48.reset <= reset
    inst gibs_49 of GIB_49 @[CGRA.scala 273:21]
    gibs_49.clock <= clock
    gibs_49.reset <= reset
    inst gibs_50 of GIB_50 @[CGRA.scala 273:21]
    gibs_50.clock <= clock
    gibs_50.reset <= reset
    inst gibs_51 of GIB_51 @[CGRA.scala 273:21]
    gibs_51.clock <= clock
    gibs_51.reset <= reset
    inst gibs_52 of GIB_52 @[CGRA.scala 273:21]
    gibs_52.clock <= clock
    gibs_52.reset <= reset
    inst gibs_53 of GIB_53 @[CGRA.scala 273:21]
    gibs_53.clock <= clock
    gibs_53.reset <= reset
    inst gibs_54 of GIB_54 @[CGRA.scala 273:21]
    gibs_54.clock <= clock
    gibs_54.reset <= reset
    inst gibs_55 of GIB_55 @[CGRA.scala 273:21]
    gibs_55.clock <= clock
    gibs_55.reset <= reset
    inst gibs_56 of GIB_56 @[CGRA.scala 273:21]
    gibs_56.clock <= clock
    gibs_56.reset <= reset
    inst gibs_57 of GIB_57 @[CGRA.scala 273:21]
    gibs_57.clock <= clock
    gibs_57.reset <= reset
    inst gibs_58 of GIB_58 @[CGRA.scala 273:21]
    gibs_58.clock <= clock
    gibs_58.reset <= reset
    inst gibs_59 of GIB_59 @[CGRA.scala 273:21]
    gibs_59.clock <= clock
    gibs_59.reset <= reset
    inst gibs_60 of GIB_60 @[CGRA.scala 273:21]
    gibs_60.clock <= clock
    gibs_60.reset <= reset
    inst gibs_61 of GIB_61 @[CGRA.scala 273:21]
    gibs_61.clock <= clock
    gibs_61.reset <= reset
    inst gibs_62 of GIB_62 @[CGRA.scala 273:21]
    gibs_62.clock <= clock
    gibs_62.reset <= reset
    inst gibs_63 of GIB_63 @[CGRA.scala 273:21]
    gibs_63.clock <= clock
    gibs_63.reset <= reset
    inst gibs_64 of GIB_64 @[CGRA.scala 273:21]
    gibs_64.clock <= clock
    gibs_64.reset <= reset
    inst gibs_65 of GIB_65 @[CGRA.scala 273:21]
    gibs_65.clock <= clock
    gibs_65.reset <= reset
    inst gibs_66 of GIB_66 @[CGRA.scala 273:21]
    gibs_66.clock <= clock
    gibs_66.reset <= reset
    inst gibs_67 of GIB_67 @[CGRA.scala 273:21]
    gibs_67.clock <= clock
    gibs_67.reset <= reset
    inst gibs_68 of GIB_68 @[CGRA.scala 273:21]
    gibs_68.clock <= clock
    gibs_68.reset <= reset
    inst gibs_69 of GIB_69 @[CGRA.scala 273:21]
    gibs_69.clock <= clock
    gibs_69.reset <= reset
    inst gibs_70 of GIB_70 @[CGRA.scala 273:21]
    gibs_70.clock <= clock
    gibs_70.reset <= reset
    inst gibs_71 of GIB_71 @[CGRA.scala 273:21]
    gibs_71.clock <= clock
    gibs_71.reset <= reset
    inst gibs_72 of GIB_72 @[CGRA.scala 273:21]
    gibs_72.clock <= clock
    gibs_72.reset <= reset
    inst gibs_73 of GIB_73 @[CGRA.scala 273:21]
    gibs_73.clock <= clock
    gibs_73.reset <= reset
    inst gibs_74 of GIB_74 @[CGRA.scala 273:21]
    gibs_74.clock <= clock
    gibs_74.reset <= reset
    inst gibs_75 of GIB_75 @[CGRA.scala 273:21]
    gibs_75.clock <= clock
    gibs_75.reset <= reset
    inst gibs_76 of GIB_76 @[CGRA.scala 273:21]
    gibs_76.clock <= clock
    gibs_76.reset <= reset
    inst gibs_77 of GIB_77 @[CGRA.scala 273:21]
    gibs_77.clock <= clock
    gibs_77.reset <= reset
    inst gibs_78 of GIB_78 @[CGRA.scala 273:21]
    gibs_78.clock <= clock
    gibs_78.reset <= reset
    inst gibs_79 of GIB_79 @[CGRA.scala 273:21]
    gibs_79.clock <= clock
    gibs_79.reset <= reset
    inst gibs_80 of GIB_80 @[CGRA.scala 273:21]
    gibs_80.clock <= clock
    gibs_80.reset <= reset
    ibs_0.io.in[0] <= io.in[0] @[CGRA.scala 321:17]
    gibs_0.io.opinNE[0] <= ibs_0.io.out[0] @[CGRA.scala 326:35]
    gibs_1.io.opinNW[0] <= ibs_0.io.out[0] @[CGRA.scala 327:37]
    ibs_1.io.in[0] <= io.in[1] @[CGRA.scala 321:17]
    gibs_1.io.opinNE[0] <= ibs_1.io.out[0] @[CGRA.scala 326:35]
    gibs_2.io.opinNW[0] <= ibs_1.io.out[0] @[CGRA.scala 327:37]
    ibs_2.io.in[0] <= io.in[2] @[CGRA.scala 321:17]
    gibs_2.io.opinNE[0] <= ibs_2.io.out[0] @[CGRA.scala 326:35]
    gibs_3.io.opinNW[0] <= ibs_2.io.out[0] @[CGRA.scala 327:37]
    ibs_3.io.in[0] <= io.in[3] @[CGRA.scala 321:17]
    gibs_3.io.opinNE[0] <= ibs_3.io.out[0] @[CGRA.scala 326:35]
    gibs_4.io.opinNW[0] <= ibs_3.io.out[0] @[CGRA.scala 327:37]
    ibs_4.io.in[0] <= io.in[4] @[CGRA.scala 321:17]
    gibs_4.io.opinNE[0] <= ibs_4.io.out[0] @[CGRA.scala 326:35]
    gibs_5.io.opinNW[0] <= ibs_4.io.out[0] @[CGRA.scala 327:37]
    ibs_5.io.in[0] <= io.in[5] @[CGRA.scala 321:17]
    gibs_5.io.opinNE[0] <= ibs_5.io.out[0] @[CGRA.scala 326:35]
    gibs_6.io.opinNW[0] <= ibs_5.io.out[0] @[CGRA.scala 327:37]
    ibs_6.io.in[0] <= io.in[6] @[CGRA.scala 321:17]
    gibs_6.io.opinNE[0] <= ibs_6.io.out[0] @[CGRA.scala 326:35]
    gibs_7.io.opinNW[0] <= ibs_6.io.out[0] @[CGRA.scala 327:37]
    ibs_7.io.in[0] <= io.in[7] @[CGRA.scala 321:17]
    gibs_7.io.opinNE[0] <= ibs_7.io.out[0] @[CGRA.scala 326:35]
    gibs_8.io.opinNW[0] <= ibs_7.io.out[0] @[CGRA.scala 327:37]
    ibs_8.io.in[0] <= io.in[8] @[CGRA.scala 321:17]
    gibs_72.io.opinSE[0] <= ibs_8.io.out[0] @[CGRA.scala 334:35]
    gibs_73.io.opinSW[0] <= ibs_8.io.out[0] @[CGRA.scala 335:37]
    ibs_9.io.in[0] <= io.in[9] @[CGRA.scala 321:17]
    gibs_73.io.opinSE[0] <= ibs_9.io.out[0] @[CGRA.scala 334:35]
    gibs_74.io.opinSW[0] <= ibs_9.io.out[0] @[CGRA.scala 335:37]
    ibs_10.io.in[0] <= io.in[10] @[CGRA.scala 321:17]
    gibs_74.io.opinSE[0] <= ibs_10.io.out[0] @[CGRA.scala 334:35]
    gibs_75.io.opinSW[0] <= ibs_10.io.out[0] @[CGRA.scala 335:37]
    ibs_11.io.in[0] <= io.in[11] @[CGRA.scala 321:17]
    gibs_75.io.opinSE[0] <= ibs_11.io.out[0] @[CGRA.scala 334:35]
    gibs_76.io.opinSW[0] <= ibs_11.io.out[0] @[CGRA.scala 335:37]
    ibs_12.io.in[0] <= io.in[12] @[CGRA.scala 321:17]
    gibs_76.io.opinSE[0] <= ibs_12.io.out[0] @[CGRA.scala 334:35]
    gibs_77.io.opinSW[0] <= ibs_12.io.out[0] @[CGRA.scala 335:37]
    ibs_13.io.in[0] <= io.in[13] @[CGRA.scala 321:17]
    gibs_77.io.opinSE[0] <= ibs_13.io.out[0] @[CGRA.scala 334:35]
    gibs_78.io.opinSW[0] <= ibs_13.io.out[0] @[CGRA.scala 335:37]
    ibs_14.io.in[0] <= io.in[14] @[CGRA.scala 321:17]
    gibs_78.io.opinSE[0] <= ibs_14.io.out[0] @[CGRA.scala 334:35]
    gibs_79.io.opinSW[0] <= ibs_14.io.out[0] @[CGRA.scala 335:37]
    ibs_15.io.in[0] <= io.in[15] @[CGRA.scala 321:17]
    gibs_79.io.opinSE[0] <= ibs_15.io.out[0] @[CGRA.scala 334:35]
    gibs_80.io.opinSW[0] <= ibs_15.io.out[0] @[CGRA.scala 335:37]
    io.out[0] <= obs_0.io.out[0] @[CGRA.scala 345:15]
    obs_0.io.in[0] <= gibs_0.io.ipinNE[0] @[CGRA.scala 351:14]
    obs_0.io.in[1] <= gibs_1.io.ipinNW[0] @[CGRA.scala 355:14]
    io.out[1] <= obs_1.io.out[0] @[CGRA.scala 345:15]
    obs_1.io.in[0] <= gibs_1.io.ipinNE[0] @[CGRA.scala 351:14]
    obs_1.io.in[1] <= gibs_2.io.ipinNW[0] @[CGRA.scala 355:14]
    io.out[2] <= obs_2.io.out[0] @[CGRA.scala 345:15]
    obs_2.io.in[0] <= gibs_2.io.ipinNE[0] @[CGRA.scala 351:14]
    obs_2.io.in[1] <= gibs_3.io.ipinNW[0] @[CGRA.scala 355:14]
    io.out[3] <= obs_3.io.out[0] @[CGRA.scala 345:15]
    obs_3.io.in[0] <= gibs_3.io.ipinNE[0] @[CGRA.scala 351:14]
    obs_3.io.in[1] <= gibs_4.io.ipinNW[0] @[CGRA.scala 355:14]
    io.out[4] <= obs_4.io.out[0] @[CGRA.scala 345:15]
    obs_4.io.in[0] <= gibs_4.io.ipinNE[0] @[CGRA.scala 351:14]
    obs_4.io.in[1] <= gibs_5.io.ipinNW[0] @[CGRA.scala 355:14]
    io.out[5] <= obs_5.io.out[0] @[CGRA.scala 345:15]
    obs_5.io.in[0] <= gibs_5.io.ipinNE[0] @[CGRA.scala 351:14]
    obs_5.io.in[1] <= gibs_6.io.ipinNW[0] @[CGRA.scala 355:14]
    io.out[6] <= obs_6.io.out[0] @[CGRA.scala 345:15]
    obs_6.io.in[0] <= gibs_6.io.ipinNE[0] @[CGRA.scala 351:14]
    obs_6.io.in[1] <= gibs_7.io.ipinNW[0] @[CGRA.scala 355:14]
    io.out[7] <= obs_7.io.out[0] @[CGRA.scala 345:15]
    obs_7.io.in[0] <= gibs_7.io.ipinNE[0] @[CGRA.scala 351:14]
    obs_7.io.in[1] <= gibs_8.io.ipinNW[0] @[CGRA.scala 355:14]
    io.out[8] <= obs_8.io.out[0] @[CGRA.scala 345:15]
    obs_8.io.in[0] <= gibs_72.io.ipinSE[0] @[CGRA.scala 362:14]
    obs_8.io.in[1] <= gibs_73.io.ipinSW[0] @[CGRA.scala 366:14]
    io.out[9] <= obs_9.io.out[0] @[CGRA.scala 345:15]
    obs_9.io.in[0] <= gibs_73.io.ipinSE[0] @[CGRA.scala 362:14]
    obs_9.io.in[1] <= gibs_74.io.ipinSW[0] @[CGRA.scala 366:14]
    io.out[10] <= obs_10.io.out[0] @[CGRA.scala 345:15]
    obs_10.io.in[0] <= gibs_74.io.ipinSE[0] @[CGRA.scala 362:14]
    obs_10.io.in[1] <= gibs_75.io.ipinSW[0] @[CGRA.scala 366:14]
    io.out[11] <= obs_11.io.out[0] @[CGRA.scala 345:15]
    obs_11.io.in[0] <= gibs_75.io.ipinSE[0] @[CGRA.scala 362:14]
    obs_11.io.in[1] <= gibs_76.io.ipinSW[0] @[CGRA.scala 366:14]
    io.out[12] <= obs_12.io.out[0] @[CGRA.scala 345:15]
    obs_12.io.in[0] <= gibs_76.io.ipinSE[0] @[CGRA.scala 362:14]
    obs_12.io.in[1] <= gibs_77.io.ipinSW[0] @[CGRA.scala 366:14]
    io.out[13] <= obs_13.io.out[0] @[CGRA.scala 345:15]
    obs_13.io.in[0] <= gibs_77.io.ipinSE[0] @[CGRA.scala 362:14]
    obs_13.io.in[1] <= gibs_78.io.ipinSW[0] @[CGRA.scala 366:14]
    io.out[14] <= obs_14.io.out[0] @[CGRA.scala 345:15]
    obs_14.io.in[0] <= gibs_78.io.ipinSE[0] @[CGRA.scala 362:14]
    obs_14.io.in[1] <= gibs_79.io.ipinSW[0] @[CGRA.scala 366:14]
    io.out[15] <= obs_15.io.out[0] @[CGRA.scala 345:15]
    obs_15.io.in[0] <= gibs_79.io.ipinSE[0] @[CGRA.scala 362:14]
    obs_15.io.in[1] <= gibs_80.io.ipinSW[0] @[CGRA.scala 366:14]
    pes_0.io.en <= io.en[0] @[CGRA.scala 377:27]
    pes_0.io.in[0] <= gibs_0.io.ipinSE[0] @[CGRA.scala 380:14]
    pes_0.io.in[1] <= gibs_1.io.ipinSW[0] @[CGRA.scala 384:14]
    pes_0.io.in[2] <= gibs_9.io.ipinNE[0] @[CGRA.scala 388:14]
    pes_0.io.in[3] <= gibs_10.io.ipinNW[0] @[CGRA.scala 392:14]
    pes_0.io.in[4] <= gibs_0.io.ipinSE[1] @[CGRA.scala 380:14]
    pes_0.io.in[5] <= gibs_1.io.ipinSW[1] @[CGRA.scala 384:14]
    pes_0.io.in[6] <= gibs_9.io.ipinNE[1] @[CGRA.scala 388:14]
    pes_0.io.in[7] <= gibs_10.io.ipinNW[1] @[CGRA.scala 392:14]
    gibs_0.io.opinSE[0] <= pes_0.io.out[0] @[CGRA.scala 398:41]
    gibs_1.io.opinSW[0] <= pes_0.io.out[0] @[CGRA.scala 399:43]
    gibs_9.io.opinNE[0] <= pes_0.io.out[0] @[CGRA.scala 400:45]
    gibs_10.io.opinNW[0] <= pes_0.io.out[0] @[CGRA.scala 401:47]
    pes_1.io.en <= io.en[1] @[CGRA.scala 377:27]
    pes_1.io.in[0] <= gibs_1.io.ipinSE[0] @[CGRA.scala 380:14]
    pes_1.io.in[1] <= gibs_2.io.ipinSW[0] @[CGRA.scala 384:14]
    pes_1.io.in[2] <= gibs_10.io.ipinNE[0] @[CGRA.scala 388:14]
    pes_1.io.in[3] <= gibs_11.io.ipinNW[0] @[CGRA.scala 392:14]
    pes_1.io.in[4] <= gibs_1.io.ipinSE[1] @[CGRA.scala 380:14]
    pes_1.io.in[5] <= gibs_2.io.ipinSW[1] @[CGRA.scala 384:14]
    pes_1.io.in[6] <= gibs_10.io.ipinNE[1] @[CGRA.scala 388:14]
    pes_1.io.in[7] <= gibs_11.io.ipinNW[1] @[CGRA.scala 392:14]
    gibs_1.io.opinSE[0] <= pes_1.io.out[0] @[CGRA.scala 398:41]
    gibs_2.io.opinSW[0] <= pes_1.io.out[0] @[CGRA.scala 399:43]
    gibs_10.io.opinNE[0] <= pes_1.io.out[0] @[CGRA.scala 400:45]
    gibs_11.io.opinNW[0] <= pes_1.io.out[0] @[CGRA.scala 401:47]
    pes_2.io.en <= io.en[2] @[CGRA.scala 377:27]
    pes_2.io.in[0] <= gibs_2.io.ipinSE[0] @[CGRA.scala 380:14]
    pes_2.io.in[1] <= gibs_3.io.ipinSW[0] @[CGRA.scala 384:14]
    pes_2.io.in[2] <= gibs_11.io.ipinNE[0] @[CGRA.scala 388:14]
    pes_2.io.in[3] <= gibs_12.io.ipinNW[0] @[CGRA.scala 392:14]
    pes_2.io.in[4] <= gibs_2.io.ipinSE[1] @[CGRA.scala 380:14]
    pes_2.io.in[5] <= gibs_3.io.ipinSW[1] @[CGRA.scala 384:14]
    pes_2.io.in[6] <= gibs_11.io.ipinNE[1] @[CGRA.scala 388:14]
    pes_2.io.in[7] <= gibs_12.io.ipinNW[1] @[CGRA.scala 392:14]
    gibs_2.io.opinSE[0] <= pes_2.io.out[0] @[CGRA.scala 398:41]
    gibs_3.io.opinSW[0] <= pes_2.io.out[0] @[CGRA.scala 399:43]
    gibs_11.io.opinNE[0] <= pes_2.io.out[0] @[CGRA.scala 400:45]
    gibs_12.io.opinNW[0] <= pes_2.io.out[0] @[CGRA.scala 401:47]
    pes_3.io.en <= io.en[3] @[CGRA.scala 377:27]
    pes_3.io.in[0] <= gibs_3.io.ipinSE[0] @[CGRA.scala 380:14]
    pes_3.io.in[1] <= gibs_4.io.ipinSW[0] @[CGRA.scala 384:14]
    pes_3.io.in[2] <= gibs_12.io.ipinNE[0] @[CGRA.scala 388:14]
    pes_3.io.in[3] <= gibs_13.io.ipinNW[0] @[CGRA.scala 392:14]
    pes_3.io.in[4] <= gibs_3.io.ipinSE[1] @[CGRA.scala 380:14]
    pes_3.io.in[5] <= gibs_4.io.ipinSW[1] @[CGRA.scala 384:14]
    pes_3.io.in[6] <= gibs_12.io.ipinNE[1] @[CGRA.scala 388:14]
    pes_3.io.in[7] <= gibs_13.io.ipinNW[1] @[CGRA.scala 392:14]
    gibs_3.io.opinSE[0] <= pes_3.io.out[0] @[CGRA.scala 398:41]
    gibs_4.io.opinSW[0] <= pes_3.io.out[0] @[CGRA.scala 399:43]
    gibs_12.io.opinNE[0] <= pes_3.io.out[0] @[CGRA.scala 400:45]
    gibs_13.io.opinNW[0] <= pes_3.io.out[0] @[CGRA.scala 401:47]
    pes_4.io.en <= io.en[4] @[CGRA.scala 377:27]
    pes_4.io.in[0] <= gibs_4.io.ipinSE[0] @[CGRA.scala 380:14]
    pes_4.io.in[1] <= gibs_5.io.ipinSW[0] @[CGRA.scala 384:14]
    pes_4.io.in[2] <= gibs_13.io.ipinNE[0] @[CGRA.scala 388:14]
    pes_4.io.in[3] <= gibs_14.io.ipinNW[0] @[CGRA.scala 392:14]
    pes_4.io.in[4] <= gibs_4.io.ipinSE[1] @[CGRA.scala 380:14]
    pes_4.io.in[5] <= gibs_5.io.ipinSW[1] @[CGRA.scala 384:14]
    pes_4.io.in[6] <= gibs_13.io.ipinNE[1] @[CGRA.scala 388:14]
    pes_4.io.in[7] <= gibs_14.io.ipinNW[1] @[CGRA.scala 392:14]
    gibs_4.io.opinSE[0] <= pes_4.io.out[0] @[CGRA.scala 398:41]
    gibs_5.io.opinSW[0] <= pes_4.io.out[0] @[CGRA.scala 399:43]
    gibs_13.io.opinNE[0] <= pes_4.io.out[0] @[CGRA.scala 400:45]
    gibs_14.io.opinNW[0] <= pes_4.io.out[0] @[CGRA.scala 401:47]
    pes_5.io.en <= io.en[5] @[CGRA.scala 377:27]
    pes_5.io.in[0] <= gibs_5.io.ipinSE[0] @[CGRA.scala 380:14]
    pes_5.io.in[1] <= gibs_6.io.ipinSW[0] @[CGRA.scala 384:14]
    pes_5.io.in[2] <= gibs_14.io.ipinNE[0] @[CGRA.scala 388:14]
    pes_5.io.in[3] <= gibs_15.io.ipinNW[0] @[CGRA.scala 392:14]
    pes_5.io.in[4] <= gibs_5.io.ipinSE[1] @[CGRA.scala 380:14]
    pes_5.io.in[5] <= gibs_6.io.ipinSW[1] @[CGRA.scala 384:14]
    pes_5.io.in[6] <= gibs_14.io.ipinNE[1] @[CGRA.scala 388:14]
    pes_5.io.in[7] <= gibs_15.io.ipinNW[1] @[CGRA.scala 392:14]
    gibs_5.io.opinSE[0] <= pes_5.io.out[0] @[CGRA.scala 398:41]
    gibs_6.io.opinSW[0] <= pes_5.io.out[0] @[CGRA.scala 399:43]
    gibs_14.io.opinNE[0] <= pes_5.io.out[0] @[CGRA.scala 400:45]
    gibs_15.io.opinNW[0] <= pes_5.io.out[0] @[CGRA.scala 401:47]
    pes_6.io.en <= io.en[6] @[CGRA.scala 377:27]
    pes_6.io.in[0] <= gibs_6.io.ipinSE[0] @[CGRA.scala 380:14]
    pes_6.io.in[1] <= gibs_7.io.ipinSW[0] @[CGRA.scala 384:14]
    pes_6.io.in[2] <= gibs_15.io.ipinNE[0] @[CGRA.scala 388:14]
    pes_6.io.in[3] <= gibs_16.io.ipinNW[0] @[CGRA.scala 392:14]
    pes_6.io.in[4] <= gibs_6.io.ipinSE[1] @[CGRA.scala 380:14]
    pes_6.io.in[5] <= gibs_7.io.ipinSW[1] @[CGRA.scala 384:14]
    pes_6.io.in[6] <= gibs_15.io.ipinNE[1] @[CGRA.scala 388:14]
    pes_6.io.in[7] <= gibs_16.io.ipinNW[1] @[CGRA.scala 392:14]
    gibs_6.io.opinSE[0] <= pes_6.io.out[0] @[CGRA.scala 398:41]
    gibs_7.io.opinSW[0] <= pes_6.io.out[0] @[CGRA.scala 399:43]
    gibs_15.io.opinNE[0] <= pes_6.io.out[0] @[CGRA.scala 400:45]
    gibs_16.io.opinNW[0] <= pes_6.io.out[0] @[CGRA.scala 401:47]
    pes_7.io.en <= io.en[7] @[CGRA.scala 377:27]
    pes_7.io.in[0] <= gibs_7.io.ipinSE[0] @[CGRA.scala 380:14]
    pes_7.io.in[1] <= gibs_8.io.ipinSW[0] @[CGRA.scala 384:14]
    pes_7.io.in[2] <= gibs_16.io.ipinNE[0] @[CGRA.scala 388:14]
    pes_7.io.in[3] <= gibs_17.io.ipinNW[0] @[CGRA.scala 392:14]
    pes_7.io.in[4] <= gibs_7.io.ipinSE[1] @[CGRA.scala 380:14]
    pes_7.io.in[5] <= gibs_8.io.ipinSW[1] @[CGRA.scala 384:14]
    pes_7.io.in[6] <= gibs_16.io.ipinNE[1] @[CGRA.scala 388:14]
    pes_7.io.in[7] <= gibs_17.io.ipinNW[1] @[CGRA.scala 392:14]
    gibs_7.io.opinSE[0] <= pes_7.io.out[0] @[CGRA.scala 398:41]
    gibs_8.io.opinSW[0] <= pes_7.io.out[0] @[CGRA.scala 399:43]
    gibs_16.io.opinNE[0] <= pes_7.io.out[0] @[CGRA.scala 400:45]
    gibs_17.io.opinNW[0] <= pes_7.io.out[0] @[CGRA.scala 401:47]
    pes_8.io.en <= io.en[0] @[CGRA.scala 377:27]
    pes_8.io.in[0] <= gibs_9.io.ipinSE[0] @[CGRA.scala 380:14]
    pes_8.io.in[1] <= gibs_10.io.ipinSW[0] @[CGRA.scala 384:14]
    pes_8.io.in[2] <= gibs_18.io.ipinNE[0] @[CGRA.scala 388:14]
    pes_8.io.in[3] <= gibs_19.io.ipinNW[0] @[CGRA.scala 392:14]
    pes_8.io.in[4] <= gibs_9.io.ipinSE[1] @[CGRA.scala 380:14]
    pes_8.io.in[5] <= gibs_10.io.ipinSW[1] @[CGRA.scala 384:14]
    pes_8.io.in[6] <= gibs_18.io.ipinNE[1] @[CGRA.scala 388:14]
    pes_8.io.in[7] <= gibs_19.io.ipinNW[1] @[CGRA.scala 392:14]
    gibs_9.io.opinSE[0] <= pes_8.io.out[0] @[CGRA.scala 398:41]
    gibs_10.io.opinSW[0] <= pes_8.io.out[0] @[CGRA.scala 399:43]
    gibs_18.io.opinNE[0] <= pes_8.io.out[0] @[CGRA.scala 400:45]
    gibs_19.io.opinNW[0] <= pes_8.io.out[0] @[CGRA.scala 401:47]
    pes_9.io.en <= io.en[1] @[CGRA.scala 377:27]
    pes_9.io.in[0] <= gibs_10.io.ipinSE[0] @[CGRA.scala 380:14]
    pes_9.io.in[1] <= gibs_11.io.ipinSW[0] @[CGRA.scala 384:14]
    pes_9.io.in[2] <= gibs_19.io.ipinNE[0] @[CGRA.scala 388:14]
    pes_9.io.in[3] <= gibs_20.io.ipinNW[0] @[CGRA.scala 392:14]
    pes_9.io.in[4] <= gibs_10.io.ipinSE[1] @[CGRA.scala 380:14]
    pes_9.io.in[5] <= gibs_11.io.ipinSW[1] @[CGRA.scala 384:14]
    pes_9.io.in[6] <= gibs_19.io.ipinNE[1] @[CGRA.scala 388:14]
    pes_9.io.in[7] <= gibs_20.io.ipinNW[1] @[CGRA.scala 392:14]
    gibs_10.io.opinSE[0] <= pes_9.io.out[0] @[CGRA.scala 398:41]
    gibs_11.io.opinSW[0] <= pes_9.io.out[0] @[CGRA.scala 399:43]
    gibs_19.io.opinNE[0] <= pes_9.io.out[0] @[CGRA.scala 400:45]
    gibs_20.io.opinNW[0] <= pes_9.io.out[0] @[CGRA.scala 401:47]
    pes_10.io.en <= io.en[2] @[CGRA.scala 377:27]
    pes_10.io.in[0] <= gibs_11.io.ipinSE[0] @[CGRA.scala 380:14]
    pes_10.io.in[1] <= gibs_12.io.ipinSW[0] @[CGRA.scala 384:14]
    pes_10.io.in[2] <= gibs_20.io.ipinNE[0] @[CGRA.scala 388:14]
    pes_10.io.in[3] <= gibs_21.io.ipinNW[0] @[CGRA.scala 392:14]
    pes_10.io.in[4] <= gibs_11.io.ipinSE[1] @[CGRA.scala 380:14]
    pes_10.io.in[5] <= gibs_12.io.ipinSW[1] @[CGRA.scala 384:14]
    pes_10.io.in[6] <= gibs_20.io.ipinNE[1] @[CGRA.scala 388:14]
    pes_10.io.in[7] <= gibs_21.io.ipinNW[1] @[CGRA.scala 392:14]
    gibs_11.io.opinSE[0] <= pes_10.io.out[0] @[CGRA.scala 398:41]
    gibs_12.io.opinSW[0] <= pes_10.io.out[0] @[CGRA.scala 399:43]
    gibs_20.io.opinNE[0] <= pes_10.io.out[0] @[CGRA.scala 400:45]
    gibs_21.io.opinNW[0] <= pes_10.io.out[0] @[CGRA.scala 401:47]
    pes_11.io.en <= io.en[3] @[CGRA.scala 377:27]
    pes_11.io.in[0] <= gibs_12.io.ipinSE[0] @[CGRA.scala 380:14]
    pes_11.io.in[1] <= gibs_13.io.ipinSW[0] @[CGRA.scala 384:14]
    pes_11.io.in[2] <= gibs_21.io.ipinNE[0] @[CGRA.scala 388:14]
    pes_11.io.in[3] <= gibs_22.io.ipinNW[0] @[CGRA.scala 392:14]
    pes_11.io.in[4] <= gibs_12.io.ipinSE[1] @[CGRA.scala 380:14]
    pes_11.io.in[5] <= gibs_13.io.ipinSW[1] @[CGRA.scala 384:14]
    pes_11.io.in[6] <= gibs_21.io.ipinNE[1] @[CGRA.scala 388:14]
    pes_11.io.in[7] <= gibs_22.io.ipinNW[1] @[CGRA.scala 392:14]
    gibs_12.io.opinSE[0] <= pes_11.io.out[0] @[CGRA.scala 398:41]
    gibs_13.io.opinSW[0] <= pes_11.io.out[0] @[CGRA.scala 399:43]
    gibs_21.io.opinNE[0] <= pes_11.io.out[0] @[CGRA.scala 400:45]
    gibs_22.io.opinNW[0] <= pes_11.io.out[0] @[CGRA.scala 401:47]
    pes_12.io.en <= io.en[4] @[CGRA.scala 377:27]
    pes_12.io.in[0] <= gibs_13.io.ipinSE[0] @[CGRA.scala 380:14]
    pes_12.io.in[1] <= gibs_14.io.ipinSW[0] @[CGRA.scala 384:14]
    pes_12.io.in[2] <= gibs_22.io.ipinNE[0] @[CGRA.scala 388:14]
    pes_12.io.in[3] <= gibs_23.io.ipinNW[0] @[CGRA.scala 392:14]
    pes_12.io.in[4] <= gibs_13.io.ipinSE[1] @[CGRA.scala 380:14]
    pes_12.io.in[5] <= gibs_14.io.ipinSW[1] @[CGRA.scala 384:14]
    pes_12.io.in[6] <= gibs_22.io.ipinNE[1] @[CGRA.scala 388:14]
    pes_12.io.in[7] <= gibs_23.io.ipinNW[1] @[CGRA.scala 392:14]
    gibs_13.io.opinSE[0] <= pes_12.io.out[0] @[CGRA.scala 398:41]
    gibs_14.io.opinSW[0] <= pes_12.io.out[0] @[CGRA.scala 399:43]
    gibs_22.io.opinNE[0] <= pes_12.io.out[0] @[CGRA.scala 400:45]
    gibs_23.io.opinNW[0] <= pes_12.io.out[0] @[CGRA.scala 401:47]
    pes_13.io.en <= io.en[5] @[CGRA.scala 377:27]
    pes_13.io.in[0] <= gibs_14.io.ipinSE[0] @[CGRA.scala 380:14]
    pes_13.io.in[1] <= gibs_15.io.ipinSW[0] @[CGRA.scala 384:14]
    pes_13.io.in[2] <= gibs_23.io.ipinNE[0] @[CGRA.scala 388:14]
    pes_13.io.in[3] <= gibs_24.io.ipinNW[0] @[CGRA.scala 392:14]
    pes_13.io.in[4] <= gibs_14.io.ipinSE[1] @[CGRA.scala 380:14]
    pes_13.io.in[5] <= gibs_15.io.ipinSW[1] @[CGRA.scala 384:14]
    pes_13.io.in[6] <= gibs_23.io.ipinNE[1] @[CGRA.scala 388:14]
    pes_13.io.in[7] <= gibs_24.io.ipinNW[1] @[CGRA.scala 392:14]
    gibs_14.io.opinSE[0] <= pes_13.io.out[0] @[CGRA.scala 398:41]
    gibs_15.io.opinSW[0] <= pes_13.io.out[0] @[CGRA.scala 399:43]
    gibs_23.io.opinNE[0] <= pes_13.io.out[0] @[CGRA.scala 400:45]
    gibs_24.io.opinNW[0] <= pes_13.io.out[0] @[CGRA.scala 401:47]
    pes_14.io.en <= io.en[6] @[CGRA.scala 377:27]
    pes_14.io.in[0] <= gibs_15.io.ipinSE[0] @[CGRA.scala 380:14]
    pes_14.io.in[1] <= gibs_16.io.ipinSW[0] @[CGRA.scala 384:14]
    pes_14.io.in[2] <= gibs_24.io.ipinNE[0] @[CGRA.scala 388:14]
    pes_14.io.in[3] <= gibs_25.io.ipinNW[0] @[CGRA.scala 392:14]
    pes_14.io.in[4] <= gibs_15.io.ipinSE[1] @[CGRA.scala 380:14]
    pes_14.io.in[5] <= gibs_16.io.ipinSW[1] @[CGRA.scala 384:14]
    pes_14.io.in[6] <= gibs_24.io.ipinNE[1] @[CGRA.scala 388:14]
    pes_14.io.in[7] <= gibs_25.io.ipinNW[1] @[CGRA.scala 392:14]
    gibs_15.io.opinSE[0] <= pes_14.io.out[0] @[CGRA.scala 398:41]
    gibs_16.io.opinSW[0] <= pes_14.io.out[0] @[CGRA.scala 399:43]
    gibs_24.io.opinNE[0] <= pes_14.io.out[0] @[CGRA.scala 400:45]
    gibs_25.io.opinNW[0] <= pes_14.io.out[0] @[CGRA.scala 401:47]
    pes_15.io.en <= io.en[7] @[CGRA.scala 377:27]
    pes_15.io.in[0] <= gibs_16.io.ipinSE[0] @[CGRA.scala 380:14]
    pes_15.io.in[1] <= gibs_17.io.ipinSW[0] @[CGRA.scala 384:14]
    pes_15.io.in[2] <= gibs_25.io.ipinNE[0] @[CGRA.scala 388:14]
    pes_15.io.in[3] <= gibs_26.io.ipinNW[0] @[CGRA.scala 392:14]
    pes_15.io.in[4] <= gibs_16.io.ipinSE[1] @[CGRA.scala 380:14]
    pes_15.io.in[5] <= gibs_17.io.ipinSW[1] @[CGRA.scala 384:14]
    pes_15.io.in[6] <= gibs_25.io.ipinNE[1] @[CGRA.scala 388:14]
    pes_15.io.in[7] <= gibs_26.io.ipinNW[1] @[CGRA.scala 392:14]
    gibs_16.io.opinSE[0] <= pes_15.io.out[0] @[CGRA.scala 398:41]
    gibs_17.io.opinSW[0] <= pes_15.io.out[0] @[CGRA.scala 399:43]
    gibs_25.io.opinNE[0] <= pes_15.io.out[0] @[CGRA.scala 400:45]
    gibs_26.io.opinNW[0] <= pes_15.io.out[0] @[CGRA.scala 401:47]
    pes_16.io.en <= io.en[0] @[CGRA.scala 377:27]
    pes_16.io.in[0] <= gibs_18.io.ipinSE[0] @[CGRA.scala 380:14]
    pes_16.io.in[1] <= gibs_19.io.ipinSW[0] @[CGRA.scala 384:14]
    pes_16.io.in[2] <= gibs_27.io.ipinNE[0] @[CGRA.scala 388:14]
    pes_16.io.in[3] <= gibs_28.io.ipinNW[0] @[CGRA.scala 392:14]
    pes_16.io.in[4] <= gibs_18.io.ipinSE[1] @[CGRA.scala 380:14]
    pes_16.io.in[5] <= gibs_19.io.ipinSW[1] @[CGRA.scala 384:14]
    pes_16.io.in[6] <= gibs_27.io.ipinNE[1] @[CGRA.scala 388:14]
    pes_16.io.in[7] <= gibs_28.io.ipinNW[1] @[CGRA.scala 392:14]
    gibs_18.io.opinSE[0] <= pes_16.io.out[0] @[CGRA.scala 398:41]
    gibs_19.io.opinSW[0] <= pes_16.io.out[0] @[CGRA.scala 399:43]
    gibs_27.io.opinNE[0] <= pes_16.io.out[0] @[CGRA.scala 400:45]
    gibs_28.io.opinNW[0] <= pes_16.io.out[0] @[CGRA.scala 401:47]
    pes_17.io.en <= io.en[1] @[CGRA.scala 377:27]
    pes_17.io.in[0] <= gibs_19.io.ipinSE[0] @[CGRA.scala 380:14]
    pes_17.io.in[1] <= gibs_20.io.ipinSW[0] @[CGRA.scala 384:14]
    pes_17.io.in[2] <= gibs_28.io.ipinNE[0] @[CGRA.scala 388:14]
    pes_17.io.in[3] <= gibs_29.io.ipinNW[0] @[CGRA.scala 392:14]
    pes_17.io.in[4] <= gibs_19.io.ipinSE[1] @[CGRA.scala 380:14]
    pes_17.io.in[5] <= gibs_20.io.ipinSW[1] @[CGRA.scala 384:14]
    pes_17.io.in[6] <= gibs_28.io.ipinNE[1] @[CGRA.scala 388:14]
    pes_17.io.in[7] <= gibs_29.io.ipinNW[1] @[CGRA.scala 392:14]
    gibs_19.io.opinSE[0] <= pes_17.io.out[0] @[CGRA.scala 398:41]
    gibs_20.io.opinSW[0] <= pes_17.io.out[0] @[CGRA.scala 399:43]
    gibs_28.io.opinNE[0] <= pes_17.io.out[0] @[CGRA.scala 400:45]
    gibs_29.io.opinNW[0] <= pes_17.io.out[0] @[CGRA.scala 401:47]
    pes_18.io.en <= io.en[2] @[CGRA.scala 377:27]
    pes_18.io.in[0] <= gibs_20.io.ipinSE[0] @[CGRA.scala 380:14]
    pes_18.io.in[1] <= gibs_21.io.ipinSW[0] @[CGRA.scala 384:14]
    pes_18.io.in[2] <= gibs_29.io.ipinNE[0] @[CGRA.scala 388:14]
    pes_18.io.in[3] <= gibs_30.io.ipinNW[0] @[CGRA.scala 392:14]
    pes_18.io.in[4] <= gibs_20.io.ipinSE[1] @[CGRA.scala 380:14]
    pes_18.io.in[5] <= gibs_21.io.ipinSW[1] @[CGRA.scala 384:14]
    pes_18.io.in[6] <= gibs_29.io.ipinNE[1] @[CGRA.scala 388:14]
    pes_18.io.in[7] <= gibs_30.io.ipinNW[1] @[CGRA.scala 392:14]
    gibs_20.io.opinSE[0] <= pes_18.io.out[0] @[CGRA.scala 398:41]
    gibs_21.io.opinSW[0] <= pes_18.io.out[0] @[CGRA.scala 399:43]
    gibs_29.io.opinNE[0] <= pes_18.io.out[0] @[CGRA.scala 400:45]
    gibs_30.io.opinNW[0] <= pes_18.io.out[0] @[CGRA.scala 401:47]
    pes_19.io.en <= io.en[3] @[CGRA.scala 377:27]
    pes_19.io.in[0] <= gibs_21.io.ipinSE[0] @[CGRA.scala 380:14]
    pes_19.io.in[1] <= gibs_22.io.ipinSW[0] @[CGRA.scala 384:14]
    pes_19.io.in[2] <= gibs_30.io.ipinNE[0] @[CGRA.scala 388:14]
    pes_19.io.in[3] <= gibs_31.io.ipinNW[0] @[CGRA.scala 392:14]
    pes_19.io.in[4] <= gibs_21.io.ipinSE[1] @[CGRA.scala 380:14]
    pes_19.io.in[5] <= gibs_22.io.ipinSW[1] @[CGRA.scala 384:14]
    pes_19.io.in[6] <= gibs_30.io.ipinNE[1] @[CGRA.scala 388:14]
    pes_19.io.in[7] <= gibs_31.io.ipinNW[1] @[CGRA.scala 392:14]
    gibs_21.io.opinSE[0] <= pes_19.io.out[0] @[CGRA.scala 398:41]
    gibs_22.io.opinSW[0] <= pes_19.io.out[0] @[CGRA.scala 399:43]
    gibs_30.io.opinNE[0] <= pes_19.io.out[0] @[CGRA.scala 400:45]
    gibs_31.io.opinNW[0] <= pes_19.io.out[0] @[CGRA.scala 401:47]
    pes_20.io.en <= io.en[4] @[CGRA.scala 377:27]
    pes_20.io.in[0] <= gibs_22.io.ipinSE[0] @[CGRA.scala 380:14]
    pes_20.io.in[1] <= gibs_23.io.ipinSW[0] @[CGRA.scala 384:14]
    pes_20.io.in[2] <= gibs_31.io.ipinNE[0] @[CGRA.scala 388:14]
    pes_20.io.in[3] <= gibs_32.io.ipinNW[0] @[CGRA.scala 392:14]
    pes_20.io.in[4] <= gibs_22.io.ipinSE[1] @[CGRA.scala 380:14]
    pes_20.io.in[5] <= gibs_23.io.ipinSW[1] @[CGRA.scala 384:14]
    pes_20.io.in[6] <= gibs_31.io.ipinNE[1] @[CGRA.scala 388:14]
    pes_20.io.in[7] <= gibs_32.io.ipinNW[1] @[CGRA.scala 392:14]
    gibs_22.io.opinSE[0] <= pes_20.io.out[0] @[CGRA.scala 398:41]
    gibs_23.io.opinSW[0] <= pes_20.io.out[0] @[CGRA.scala 399:43]
    gibs_31.io.opinNE[0] <= pes_20.io.out[0] @[CGRA.scala 400:45]
    gibs_32.io.opinNW[0] <= pes_20.io.out[0] @[CGRA.scala 401:47]
    pes_21.io.en <= io.en[5] @[CGRA.scala 377:27]
    pes_21.io.in[0] <= gibs_23.io.ipinSE[0] @[CGRA.scala 380:14]
    pes_21.io.in[1] <= gibs_24.io.ipinSW[0] @[CGRA.scala 384:14]
    pes_21.io.in[2] <= gibs_32.io.ipinNE[0] @[CGRA.scala 388:14]
    pes_21.io.in[3] <= gibs_33.io.ipinNW[0] @[CGRA.scala 392:14]
    pes_21.io.in[4] <= gibs_23.io.ipinSE[1] @[CGRA.scala 380:14]
    pes_21.io.in[5] <= gibs_24.io.ipinSW[1] @[CGRA.scala 384:14]
    pes_21.io.in[6] <= gibs_32.io.ipinNE[1] @[CGRA.scala 388:14]
    pes_21.io.in[7] <= gibs_33.io.ipinNW[1] @[CGRA.scala 392:14]
    gibs_23.io.opinSE[0] <= pes_21.io.out[0] @[CGRA.scala 398:41]
    gibs_24.io.opinSW[0] <= pes_21.io.out[0] @[CGRA.scala 399:43]
    gibs_32.io.opinNE[0] <= pes_21.io.out[0] @[CGRA.scala 400:45]
    gibs_33.io.opinNW[0] <= pes_21.io.out[0] @[CGRA.scala 401:47]
    pes_22.io.en <= io.en[6] @[CGRA.scala 377:27]
    pes_22.io.in[0] <= gibs_24.io.ipinSE[0] @[CGRA.scala 380:14]
    pes_22.io.in[1] <= gibs_25.io.ipinSW[0] @[CGRA.scala 384:14]
    pes_22.io.in[2] <= gibs_33.io.ipinNE[0] @[CGRA.scala 388:14]
    pes_22.io.in[3] <= gibs_34.io.ipinNW[0] @[CGRA.scala 392:14]
    pes_22.io.in[4] <= gibs_24.io.ipinSE[1] @[CGRA.scala 380:14]
    pes_22.io.in[5] <= gibs_25.io.ipinSW[1] @[CGRA.scala 384:14]
    pes_22.io.in[6] <= gibs_33.io.ipinNE[1] @[CGRA.scala 388:14]
    pes_22.io.in[7] <= gibs_34.io.ipinNW[1] @[CGRA.scala 392:14]
    gibs_24.io.opinSE[0] <= pes_22.io.out[0] @[CGRA.scala 398:41]
    gibs_25.io.opinSW[0] <= pes_22.io.out[0] @[CGRA.scala 399:43]
    gibs_33.io.opinNE[0] <= pes_22.io.out[0] @[CGRA.scala 400:45]
    gibs_34.io.opinNW[0] <= pes_22.io.out[0] @[CGRA.scala 401:47]
    pes_23.io.en <= io.en[7] @[CGRA.scala 377:27]
    pes_23.io.in[0] <= gibs_25.io.ipinSE[0] @[CGRA.scala 380:14]
    pes_23.io.in[1] <= gibs_26.io.ipinSW[0] @[CGRA.scala 384:14]
    pes_23.io.in[2] <= gibs_34.io.ipinNE[0] @[CGRA.scala 388:14]
    pes_23.io.in[3] <= gibs_35.io.ipinNW[0] @[CGRA.scala 392:14]
    pes_23.io.in[4] <= gibs_25.io.ipinSE[1] @[CGRA.scala 380:14]
    pes_23.io.in[5] <= gibs_26.io.ipinSW[1] @[CGRA.scala 384:14]
    pes_23.io.in[6] <= gibs_34.io.ipinNE[1] @[CGRA.scala 388:14]
    pes_23.io.in[7] <= gibs_35.io.ipinNW[1] @[CGRA.scala 392:14]
    gibs_25.io.opinSE[0] <= pes_23.io.out[0] @[CGRA.scala 398:41]
    gibs_26.io.opinSW[0] <= pes_23.io.out[0] @[CGRA.scala 399:43]
    gibs_34.io.opinNE[0] <= pes_23.io.out[0] @[CGRA.scala 400:45]
    gibs_35.io.opinNW[0] <= pes_23.io.out[0] @[CGRA.scala 401:47]
    pes_24.io.en <= io.en[0] @[CGRA.scala 377:27]
    pes_24.io.in[0] <= gibs_27.io.ipinSE[0] @[CGRA.scala 380:14]
    pes_24.io.in[1] <= gibs_28.io.ipinSW[0] @[CGRA.scala 384:14]
    pes_24.io.in[2] <= gibs_36.io.ipinNE[0] @[CGRA.scala 388:14]
    pes_24.io.in[3] <= gibs_37.io.ipinNW[0] @[CGRA.scala 392:14]
    pes_24.io.in[4] <= gibs_27.io.ipinSE[1] @[CGRA.scala 380:14]
    pes_24.io.in[5] <= gibs_28.io.ipinSW[1] @[CGRA.scala 384:14]
    pes_24.io.in[6] <= gibs_36.io.ipinNE[1] @[CGRA.scala 388:14]
    pes_24.io.in[7] <= gibs_37.io.ipinNW[1] @[CGRA.scala 392:14]
    gibs_27.io.opinSE[0] <= pes_24.io.out[0] @[CGRA.scala 398:41]
    gibs_28.io.opinSW[0] <= pes_24.io.out[0] @[CGRA.scala 399:43]
    gibs_36.io.opinNE[0] <= pes_24.io.out[0] @[CGRA.scala 400:45]
    gibs_37.io.opinNW[0] <= pes_24.io.out[0] @[CGRA.scala 401:47]
    pes_25.io.en <= io.en[1] @[CGRA.scala 377:27]
    pes_25.io.in[0] <= gibs_28.io.ipinSE[0] @[CGRA.scala 380:14]
    pes_25.io.in[1] <= gibs_29.io.ipinSW[0] @[CGRA.scala 384:14]
    pes_25.io.in[2] <= gibs_37.io.ipinNE[0] @[CGRA.scala 388:14]
    pes_25.io.in[3] <= gibs_38.io.ipinNW[0] @[CGRA.scala 392:14]
    pes_25.io.in[4] <= gibs_28.io.ipinSE[1] @[CGRA.scala 380:14]
    pes_25.io.in[5] <= gibs_29.io.ipinSW[1] @[CGRA.scala 384:14]
    pes_25.io.in[6] <= gibs_37.io.ipinNE[1] @[CGRA.scala 388:14]
    pes_25.io.in[7] <= gibs_38.io.ipinNW[1] @[CGRA.scala 392:14]
    gibs_28.io.opinSE[0] <= pes_25.io.out[0] @[CGRA.scala 398:41]
    gibs_29.io.opinSW[0] <= pes_25.io.out[0] @[CGRA.scala 399:43]
    gibs_37.io.opinNE[0] <= pes_25.io.out[0] @[CGRA.scala 400:45]
    gibs_38.io.opinNW[0] <= pes_25.io.out[0] @[CGRA.scala 401:47]
    pes_26.io.en <= io.en[2] @[CGRA.scala 377:27]
    pes_26.io.in[0] <= gibs_29.io.ipinSE[0] @[CGRA.scala 380:14]
    pes_26.io.in[1] <= gibs_30.io.ipinSW[0] @[CGRA.scala 384:14]
    pes_26.io.in[2] <= gibs_38.io.ipinNE[0] @[CGRA.scala 388:14]
    pes_26.io.in[3] <= gibs_39.io.ipinNW[0] @[CGRA.scala 392:14]
    pes_26.io.in[4] <= gibs_29.io.ipinSE[1] @[CGRA.scala 380:14]
    pes_26.io.in[5] <= gibs_30.io.ipinSW[1] @[CGRA.scala 384:14]
    pes_26.io.in[6] <= gibs_38.io.ipinNE[1] @[CGRA.scala 388:14]
    pes_26.io.in[7] <= gibs_39.io.ipinNW[1] @[CGRA.scala 392:14]
    gibs_29.io.opinSE[0] <= pes_26.io.out[0] @[CGRA.scala 398:41]
    gibs_30.io.opinSW[0] <= pes_26.io.out[0] @[CGRA.scala 399:43]
    gibs_38.io.opinNE[0] <= pes_26.io.out[0] @[CGRA.scala 400:45]
    gibs_39.io.opinNW[0] <= pes_26.io.out[0] @[CGRA.scala 401:47]
    pes_27.io.en <= io.en[3] @[CGRA.scala 377:27]
    pes_27.io.in[0] <= gibs_30.io.ipinSE[0] @[CGRA.scala 380:14]
    pes_27.io.in[1] <= gibs_31.io.ipinSW[0] @[CGRA.scala 384:14]
    pes_27.io.in[2] <= gibs_39.io.ipinNE[0] @[CGRA.scala 388:14]
    pes_27.io.in[3] <= gibs_40.io.ipinNW[0] @[CGRA.scala 392:14]
    pes_27.io.in[4] <= gibs_30.io.ipinSE[1] @[CGRA.scala 380:14]
    pes_27.io.in[5] <= gibs_31.io.ipinSW[1] @[CGRA.scala 384:14]
    pes_27.io.in[6] <= gibs_39.io.ipinNE[1] @[CGRA.scala 388:14]
    pes_27.io.in[7] <= gibs_40.io.ipinNW[1] @[CGRA.scala 392:14]
    gibs_30.io.opinSE[0] <= pes_27.io.out[0] @[CGRA.scala 398:41]
    gibs_31.io.opinSW[0] <= pes_27.io.out[0] @[CGRA.scala 399:43]
    gibs_39.io.opinNE[0] <= pes_27.io.out[0] @[CGRA.scala 400:45]
    gibs_40.io.opinNW[0] <= pes_27.io.out[0] @[CGRA.scala 401:47]
    pes_28.io.en <= io.en[4] @[CGRA.scala 377:27]
    pes_28.io.in[0] <= gibs_31.io.ipinSE[0] @[CGRA.scala 380:14]
    pes_28.io.in[1] <= gibs_32.io.ipinSW[0] @[CGRA.scala 384:14]
    pes_28.io.in[2] <= gibs_40.io.ipinNE[0] @[CGRA.scala 388:14]
    pes_28.io.in[3] <= gibs_41.io.ipinNW[0] @[CGRA.scala 392:14]
    pes_28.io.in[4] <= gibs_31.io.ipinSE[1] @[CGRA.scala 380:14]
    pes_28.io.in[5] <= gibs_32.io.ipinSW[1] @[CGRA.scala 384:14]
    pes_28.io.in[6] <= gibs_40.io.ipinNE[1] @[CGRA.scala 388:14]
    pes_28.io.in[7] <= gibs_41.io.ipinNW[1] @[CGRA.scala 392:14]
    gibs_31.io.opinSE[0] <= pes_28.io.out[0] @[CGRA.scala 398:41]
    gibs_32.io.opinSW[0] <= pes_28.io.out[0] @[CGRA.scala 399:43]
    gibs_40.io.opinNE[0] <= pes_28.io.out[0] @[CGRA.scala 400:45]
    gibs_41.io.opinNW[0] <= pes_28.io.out[0] @[CGRA.scala 401:47]
    pes_29.io.en <= io.en[5] @[CGRA.scala 377:27]
    pes_29.io.in[0] <= gibs_32.io.ipinSE[0] @[CGRA.scala 380:14]
    pes_29.io.in[1] <= gibs_33.io.ipinSW[0] @[CGRA.scala 384:14]
    pes_29.io.in[2] <= gibs_41.io.ipinNE[0] @[CGRA.scala 388:14]
    pes_29.io.in[3] <= gibs_42.io.ipinNW[0] @[CGRA.scala 392:14]
    pes_29.io.in[4] <= gibs_32.io.ipinSE[1] @[CGRA.scala 380:14]
    pes_29.io.in[5] <= gibs_33.io.ipinSW[1] @[CGRA.scala 384:14]
    pes_29.io.in[6] <= gibs_41.io.ipinNE[1] @[CGRA.scala 388:14]
    pes_29.io.in[7] <= gibs_42.io.ipinNW[1] @[CGRA.scala 392:14]
    gibs_32.io.opinSE[0] <= pes_29.io.out[0] @[CGRA.scala 398:41]
    gibs_33.io.opinSW[0] <= pes_29.io.out[0] @[CGRA.scala 399:43]
    gibs_41.io.opinNE[0] <= pes_29.io.out[0] @[CGRA.scala 400:45]
    gibs_42.io.opinNW[0] <= pes_29.io.out[0] @[CGRA.scala 401:47]
    pes_30.io.en <= io.en[6] @[CGRA.scala 377:27]
    pes_30.io.in[0] <= gibs_33.io.ipinSE[0] @[CGRA.scala 380:14]
    pes_30.io.in[1] <= gibs_34.io.ipinSW[0] @[CGRA.scala 384:14]
    pes_30.io.in[2] <= gibs_42.io.ipinNE[0] @[CGRA.scala 388:14]
    pes_30.io.in[3] <= gibs_43.io.ipinNW[0] @[CGRA.scala 392:14]
    pes_30.io.in[4] <= gibs_33.io.ipinSE[1] @[CGRA.scala 380:14]
    pes_30.io.in[5] <= gibs_34.io.ipinSW[1] @[CGRA.scala 384:14]
    pes_30.io.in[6] <= gibs_42.io.ipinNE[1] @[CGRA.scala 388:14]
    pes_30.io.in[7] <= gibs_43.io.ipinNW[1] @[CGRA.scala 392:14]
    gibs_33.io.opinSE[0] <= pes_30.io.out[0] @[CGRA.scala 398:41]
    gibs_34.io.opinSW[0] <= pes_30.io.out[0] @[CGRA.scala 399:43]
    gibs_42.io.opinNE[0] <= pes_30.io.out[0] @[CGRA.scala 400:45]
    gibs_43.io.opinNW[0] <= pes_30.io.out[0] @[CGRA.scala 401:47]
    pes_31.io.en <= io.en[7] @[CGRA.scala 377:27]
    pes_31.io.in[0] <= gibs_34.io.ipinSE[0] @[CGRA.scala 380:14]
    pes_31.io.in[1] <= gibs_35.io.ipinSW[0] @[CGRA.scala 384:14]
    pes_31.io.in[2] <= gibs_43.io.ipinNE[0] @[CGRA.scala 388:14]
    pes_31.io.in[3] <= gibs_44.io.ipinNW[0] @[CGRA.scala 392:14]
    pes_31.io.in[4] <= gibs_34.io.ipinSE[1] @[CGRA.scala 380:14]
    pes_31.io.in[5] <= gibs_35.io.ipinSW[1] @[CGRA.scala 384:14]
    pes_31.io.in[6] <= gibs_43.io.ipinNE[1] @[CGRA.scala 388:14]
    pes_31.io.in[7] <= gibs_44.io.ipinNW[1] @[CGRA.scala 392:14]
    gibs_34.io.opinSE[0] <= pes_31.io.out[0] @[CGRA.scala 398:41]
    gibs_35.io.opinSW[0] <= pes_31.io.out[0] @[CGRA.scala 399:43]
    gibs_43.io.opinNE[0] <= pes_31.io.out[0] @[CGRA.scala 400:45]
    gibs_44.io.opinNW[0] <= pes_31.io.out[0] @[CGRA.scala 401:47]
    pes_32.io.en <= io.en[0] @[CGRA.scala 377:27]
    pes_32.io.in[0] <= gibs_36.io.ipinSE[0] @[CGRA.scala 380:14]
    pes_32.io.in[1] <= gibs_37.io.ipinSW[0] @[CGRA.scala 384:14]
    pes_32.io.in[2] <= gibs_45.io.ipinNE[0] @[CGRA.scala 388:14]
    pes_32.io.in[3] <= gibs_46.io.ipinNW[0] @[CGRA.scala 392:14]
    pes_32.io.in[4] <= gibs_36.io.ipinSE[1] @[CGRA.scala 380:14]
    pes_32.io.in[5] <= gibs_37.io.ipinSW[1] @[CGRA.scala 384:14]
    pes_32.io.in[6] <= gibs_45.io.ipinNE[1] @[CGRA.scala 388:14]
    pes_32.io.in[7] <= gibs_46.io.ipinNW[1] @[CGRA.scala 392:14]
    gibs_36.io.opinSE[0] <= pes_32.io.out[0] @[CGRA.scala 398:41]
    gibs_37.io.opinSW[0] <= pes_32.io.out[0] @[CGRA.scala 399:43]
    gibs_45.io.opinNE[0] <= pes_32.io.out[0] @[CGRA.scala 400:45]
    gibs_46.io.opinNW[0] <= pes_32.io.out[0] @[CGRA.scala 401:47]
    pes_33.io.en <= io.en[1] @[CGRA.scala 377:27]
    pes_33.io.in[0] <= gibs_37.io.ipinSE[0] @[CGRA.scala 380:14]
    pes_33.io.in[1] <= gibs_38.io.ipinSW[0] @[CGRA.scala 384:14]
    pes_33.io.in[2] <= gibs_46.io.ipinNE[0] @[CGRA.scala 388:14]
    pes_33.io.in[3] <= gibs_47.io.ipinNW[0] @[CGRA.scala 392:14]
    pes_33.io.in[4] <= gibs_37.io.ipinSE[1] @[CGRA.scala 380:14]
    pes_33.io.in[5] <= gibs_38.io.ipinSW[1] @[CGRA.scala 384:14]
    pes_33.io.in[6] <= gibs_46.io.ipinNE[1] @[CGRA.scala 388:14]
    pes_33.io.in[7] <= gibs_47.io.ipinNW[1] @[CGRA.scala 392:14]
    gibs_37.io.opinSE[0] <= pes_33.io.out[0] @[CGRA.scala 398:41]
    gibs_38.io.opinSW[0] <= pes_33.io.out[0] @[CGRA.scala 399:43]
    gibs_46.io.opinNE[0] <= pes_33.io.out[0] @[CGRA.scala 400:45]
    gibs_47.io.opinNW[0] <= pes_33.io.out[0] @[CGRA.scala 401:47]
    pes_34.io.en <= io.en[2] @[CGRA.scala 377:27]
    pes_34.io.in[0] <= gibs_38.io.ipinSE[0] @[CGRA.scala 380:14]
    pes_34.io.in[1] <= gibs_39.io.ipinSW[0] @[CGRA.scala 384:14]
    pes_34.io.in[2] <= gibs_47.io.ipinNE[0] @[CGRA.scala 388:14]
    pes_34.io.in[3] <= gibs_48.io.ipinNW[0] @[CGRA.scala 392:14]
    pes_34.io.in[4] <= gibs_38.io.ipinSE[1] @[CGRA.scala 380:14]
    pes_34.io.in[5] <= gibs_39.io.ipinSW[1] @[CGRA.scala 384:14]
    pes_34.io.in[6] <= gibs_47.io.ipinNE[1] @[CGRA.scala 388:14]
    pes_34.io.in[7] <= gibs_48.io.ipinNW[1] @[CGRA.scala 392:14]
    gibs_38.io.opinSE[0] <= pes_34.io.out[0] @[CGRA.scala 398:41]
    gibs_39.io.opinSW[0] <= pes_34.io.out[0] @[CGRA.scala 399:43]
    gibs_47.io.opinNE[0] <= pes_34.io.out[0] @[CGRA.scala 400:45]
    gibs_48.io.opinNW[0] <= pes_34.io.out[0] @[CGRA.scala 401:47]
    pes_35.io.en <= io.en[3] @[CGRA.scala 377:27]
    pes_35.io.in[0] <= gibs_39.io.ipinSE[0] @[CGRA.scala 380:14]
    pes_35.io.in[1] <= gibs_40.io.ipinSW[0] @[CGRA.scala 384:14]
    pes_35.io.in[2] <= gibs_48.io.ipinNE[0] @[CGRA.scala 388:14]
    pes_35.io.in[3] <= gibs_49.io.ipinNW[0] @[CGRA.scala 392:14]
    pes_35.io.in[4] <= gibs_39.io.ipinSE[1] @[CGRA.scala 380:14]
    pes_35.io.in[5] <= gibs_40.io.ipinSW[1] @[CGRA.scala 384:14]
    pes_35.io.in[6] <= gibs_48.io.ipinNE[1] @[CGRA.scala 388:14]
    pes_35.io.in[7] <= gibs_49.io.ipinNW[1] @[CGRA.scala 392:14]
    gibs_39.io.opinSE[0] <= pes_35.io.out[0] @[CGRA.scala 398:41]
    gibs_40.io.opinSW[0] <= pes_35.io.out[0] @[CGRA.scala 399:43]
    gibs_48.io.opinNE[0] <= pes_35.io.out[0] @[CGRA.scala 400:45]
    gibs_49.io.opinNW[0] <= pes_35.io.out[0] @[CGRA.scala 401:47]
    pes_36.io.en <= io.en[4] @[CGRA.scala 377:27]
    pes_36.io.in[0] <= gibs_40.io.ipinSE[0] @[CGRA.scala 380:14]
    pes_36.io.in[1] <= gibs_41.io.ipinSW[0] @[CGRA.scala 384:14]
    pes_36.io.in[2] <= gibs_49.io.ipinNE[0] @[CGRA.scala 388:14]
    pes_36.io.in[3] <= gibs_50.io.ipinNW[0] @[CGRA.scala 392:14]
    pes_36.io.in[4] <= gibs_40.io.ipinSE[1] @[CGRA.scala 380:14]
    pes_36.io.in[5] <= gibs_41.io.ipinSW[1] @[CGRA.scala 384:14]
    pes_36.io.in[6] <= gibs_49.io.ipinNE[1] @[CGRA.scala 388:14]
    pes_36.io.in[7] <= gibs_50.io.ipinNW[1] @[CGRA.scala 392:14]
    gibs_40.io.opinSE[0] <= pes_36.io.out[0] @[CGRA.scala 398:41]
    gibs_41.io.opinSW[0] <= pes_36.io.out[0] @[CGRA.scala 399:43]
    gibs_49.io.opinNE[0] <= pes_36.io.out[0] @[CGRA.scala 400:45]
    gibs_50.io.opinNW[0] <= pes_36.io.out[0] @[CGRA.scala 401:47]
    pes_37.io.en <= io.en[5] @[CGRA.scala 377:27]
    pes_37.io.in[0] <= gibs_41.io.ipinSE[0] @[CGRA.scala 380:14]
    pes_37.io.in[1] <= gibs_42.io.ipinSW[0] @[CGRA.scala 384:14]
    pes_37.io.in[2] <= gibs_50.io.ipinNE[0] @[CGRA.scala 388:14]
    pes_37.io.in[3] <= gibs_51.io.ipinNW[0] @[CGRA.scala 392:14]
    pes_37.io.in[4] <= gibs_41.io.ipinSE[1] @[CGRA.scala 380:14]
    pes_37.io.in[5] <= gibs_42.io.ipinSW[1] @[CGRA.scala 384:14]
    pes_37.io.in[6] <= gibs_50.io.ipinNE[1] @[CGRA.scala 388:14]
    pes_37.io.in[7] <= gibs_51.io.ipinNW[1] @[CGRA.scala 392:14]
    gibs_41.io.opinSE[0] <= pes_37.io.out[0] @[CGRA.scala 398:41]
    gibs_42.io.opinSW[0] <= pes_37.io.out[0] @[CGRA.scala 399:43]
    gibs_50.io.opinNE[0] <= pes_37.io.out[0] @[CGRA.scala 400:45]
    gibs_51.io.opinNW[0] <= pes_37.io.out[0] @[CGRA.scala 401:47]
    pes_38.io.en <= io.en[6] @[CGRA.scala 377:27]
    pes_38.io.in[0] <= gibs_42.io.ipinSE[0] @[CGRA.scala 380:14]
    pes_38.io.in[1] <= gibs_43.io.ipinSW[0] @[CGRA.scala 384:14]
    pes_38.io.in[2] <= gibs_51.io.ipinNE[0] @[CGRA.scala 388:14]
    pes_38.io.in[3] <= gibs_52.io.ipinNW[0] @[CGRA.scala 392:14]
    pes_38.io.in[4] <= gibs_42.io.ipinSE[1] @[CGRA.scala 380:14]
    pes_38.io.in[5] <= gibs_43.io.ipinSW[1] @[CGRA.scala 384:14]
    pes_38.io.in[6] <= gibs_51.io.ipinNE[1] @[CGRA.scala 388:14]
    pes_38.io.in[7] <= gibs_52.io.ipinNW[1] @[CGRA.scala 392:14]
    gibs_42.io.opinSE[0] <= pes_38.io.out[0] @[CGRA.scala 398:41]
    gibs_43.io.opinSW[0] <= pes_38.io.out[0] @[CGRA.scala 399:43]
    gibs_51.io.opinNE[0] <= pes_38.io.out[0] @[CGRA.scala 400:45]
    gibs_52.io.opinNW[0] <= pes_38.io.out[0] @[CGRA.scala 401:47]
    pes_39.io.en <= io.en[7] @[CGRA.scala 377:27]
    pes_39.io.in[0] <= gibs_43.io.ipinSE[0] @[CGRA.scala 380:14]
    pes_39.io.in[1] <= gibs_44.io.ipinSW[0] @[CGRA.scala 384:14]
    pes_39.io.in[2] <= gibs_52.io.ipinNE[0] @[CGRA.scala 388:14]
    pes_39.io.in[3] <= gibs_53.io.ipinNW[0] @[CGRA.scala 392:14]
    pes_39.io.in[4] <= gibs_43.io.ipinSE[1] @[CGRA.scala 380:14]
    pes_39.io.in[5] <= gibs_44.io.ipinSW[1] @[CGRA.scala 384:14]
    pes_39.io.in[6] <= gibs_52.io.ipinNE[1] @[CGRA.scala 388:14]
    pes_39.io.in[7] <= gibs_53.io.ipinNW[1] @[CGRA.scala 392:14]
    gibs_43.io.opinSE[0] <= pes_39.io.out[0] @[CGRA.scala 398:41]
    gibs_44.io.opinSW[0] <= pes_39.io.out[0] @[CGRA.scala 399:43]
    gibs_52.io.opinNE[0] <= pes_39.io.out[0] @[CGRA.scala 400:45]
    gibs_53.io.opinNW[0] <= pes_39.io.out[0] @[CGRA.scala 401:47]
    pes_40.io.en <= io.en[0] @[CGRA.scala 377:27]
    pes_40.io.in[0] <= gibs_45.io.ipinSE[0] @[CGRA.scala 380:14]
    pes_40.io.in[1] <= gibs_46.io.ipinSW[0] @[CGRA.scala 384:14]
    pes_40.io.in[2] <= gibs_54.io.ipinNE[0] @[CGRA.scala 388:14]
    pes_40.io.in[3] <= gibs_55.io.ipinNW[0] @[CGRA.scala 392:14]
    pes_40.io.in[4] <= gibs_45.io.ipinSE[1] @[CGRA.scala 380:14]
    pes_40.io.in[5] <= gibs_46.io.ipinSW[1] @[CGRA.scala 384:14]
    pes_40.io.in[6] <= gibs_54.io.ipinNE[1] @[CGRA.scala 388:14]
    pes_40.io.in[7] <= gibs_55.io.ipinNW[1] @[CGRA.scala 392:14]
    gibs_45.io.opinSE[0] <= pes_40.io.out[0] @[CGRA.scala 398:41]
    gibs_46.io.opinSW[0] <= pes_40.io.out[0] @[CGRA.scala 399:43]
    gibs_54.io.opinNE[0] <= pes_40.io.out[0] @[CGRA.scala 400:45]
    gibs_55.io.opinNW[0] <= pes_40.io.out[0] @[CGRA.scala 401:47]
    pes_41.io.en <= io.en[1] @[CGRA.scala 377:27]
    pes_41.io.in[0] <= gibs_46.io.ipinSE[0] @[CGRA.scala 380:14]
    pes_41.io.in[1] <= gibs_47.io.ipinSW[0] @[CGRA.scala 384:14]
    pes_41.io.in[2] <= gibs_55.io.ipinNE[0] @[CGRA.scala 388:14]
    pes_41.io.in[3] <= gibs_56.io.ipinNW[0] @[CGRA.scala 392:14]
    pes_41.io.in[4] <= gibs_46.io.ipinSE[1] @[CGRA.scala 380:14]
    pes_41.io.in[5] <= gibs_47.io.ipinSW[1] @[CGRA.scala 384:14]
    pes_41.io.in[6] <= gibs_55.io.ipinNE[1] @[CGRA.scala 388:14]
    pes_41.io.in[7] <= gibs_56.io.ipinNW[1] @[CGRA.scala 392:14]
    gibs_46.io.opinSE[0] <= pes_41.io.out[0] @[CGRA.scala 398:41]
    gibs_47.io.opinSW[0] <= pes_41.io.out[0] @[CGRA.scala 399:43]
    gibs_55.io.opinNE[0] <= pes_41.io.out[0] @[CGRA.scala 400:45]
    gibs_56.io.opinNW[0] <= pes_41.io.out[0] @[CGRA.scala 401:47]
    pes_42.io.en <= io.en[2] @[CGRA.scala 377:27]
    pes_42.io.in[0] <= gibs_47.io.ipinSE[0] @[CGRA.scala 380:14]
    pes_42.io.in[1] <= gibs_48.io.ipinSW[0] @[CGRA.scala 384:14]
    pes_42.io.in[2] <= gibs_56.io.ipinNE[0] @[CGRA.scala 388:14]
    pes_42.io.in[3] <= gibs_57.io.ipinNW[0] @[CGRA.scala 392:14]
    pes_42.io.in[4] <= gibs_47.io.ipinSE[1] @[CGRA.scala 380:14]
    pes_42.io.in[5] <= gibs_48.io.ipinSW[1] @[CGRA.scala 384:14]
    pes_42.io.in[6] <= gibs_56.io.ipinNE[1] @[CGRA.scala 388:14]
    pes_42.io.in[7] <= gibs_57.io.ipinNW[1] @[CGRA.scala 392:14]
    gibs_47.io.opinSE[0] <= pes_42.io.out[0] @[CGRA.scala 398:41]
    gibs_48.io.opinSW[0] <= pes_42.io.out[0] @[CGRA.scala 399:43]
    gibs_56.io.opinNE[0] <= pes_42.io.out[0] @[CGRA.scala 400:45]
    gibs_57.io.opinNW[0] <= pes_42.io.out[0] @[CGRA.scala 401:47]
    pes_43.io.en <= io.en[3] @[CGRA.scala 377:27]
    pes_43.io.in[0] <= gibs_48.io.ipinSE[0] @[CGRA.scala 380:14]
    pes_43.io.in[1] <= gibs_49.io.ipinSW[0] @[CGRA.scala 384:14]
    pes_43.io.in[2] <= gibs_57.io.ipinNE[0] @[CGRA.scala 388:14]
    pes_43.io.in[3] <= gibs_58.io.ipinNW[0] @[CGRA.scala 392:14]
    pes_43.io.in[4] <= gibs_48.io.ipinSE[1] @[CGRA.scala 380:14]
    pes_43.io.in[5] <= gibs_49.io.ipinSW[1] @[CGRA.scala 384:14]
    pes_43.io.in[6] <= gibs_57.io.ipinNE[1] @[CGRA.scala 388:14]
    pes_43.io.in[7] <= gibs_58.io.ipinNW[1] @[CGRA.scala 392:14]
    gibs_48.io.opinSE[0] <= pes_43.io.out[0] @[CGRA.scala 398:41]
    gibs_49.io.opinSW[0] <= pes_43.io.out[0] @[CGRA.scala 399:43]
    gibs_57.io.opinNE[0] <= pes_43.io.out[0] @[CGRA.scala 400:45]
    gibs_58.io.opinNW[0] <= pes_43.io.out[0] @[CGRA.scala 401:47]
    pes_44.io.en <= io.en[4] @[CGRA.scala 377:27]
    pes_44.io.in[0] <= gibs_49.io.ipinSE[0] @[CGRA.scala 380:14]
    pes_44.io.in[1] <= gibs_50.io.ipinSW[0] @[CGRA.scala 384:14]
    pes_44.io.in[2] <= gibs_58.io.ipinNE[0] @[CGRA.scala 388:14]
    pes_44.io.in[3] <= gibs_59.io.ipinNW[0] @[CGRA.scala 392:14]
    pes_44.io.in[4] <= gibs_49.io.ipinSE[1] @[CGRA.scala 380:14]
    pes_44.io.in[5] <= gibs_50.io.ipinSW[1] @[CGRA.scala 384:14]
    pes_44.io.in[6] <= gibs_58.io.ipinNE[1] @[CGRA.scala 388:14]
    pes_44.io.in[7] <= gibs_59.io.ipinNW[1] @[CGRA.scala 392:14]
    gibs_49.io.opinSE[0] <= pes_44.io.out[0] @[CGRA.scala 398:41]
    gibs_50.io.opinSW[0] <= pes_44.io.out[0] @[CGRA.scala 399:43]
    gibs_58.io.opinNE[0] <= pes_44.io.out[0] @[CGRA.scala 400:45]
    gibs_59.io.opinNW[0] <= pes_44.io.out[0] @[CGRA.scala 401:47]
    pes_45.io.en <= io.en[5] @[CGRA.scala 377:27]
    pes_45.io.in[0] <= gibs_50.io.ipinSE[0] @[CGRA.scala 380:14]
    pes_45.io.in[1] <= gibs_51.io.ipinSW[0] @[CGRA.scala 384:14]
    pes_45.io.in[2] <= gibs_59.io.ipinNE[0] @[CGRA.scala 388:14]
    pes_45.io.in[3] <= gibs_60.io.ipinNW[0] @[CGRA.scala 392:14]
    pes_45.io.in[4] <= gibs_50.io.ipinSE[1] @[CGRA.scala 380:14]
    pes_45.io.in[5] <= gibs_51.io.ipinSW[1] @[CGRA.scala 384:14]
    pes_45.io.in[6] <= gibs_59.io.ipinNE[1] @[CGRA.scala 388:14]
    pes_45.io.in[7] <= gibs_60.io.ipinNW[1] @[CGRA.scala 392:14]
    gibs_50.io.opinSE[0] <= pes_45.io.out[0] @[CGRA.scala 398:41]
    gibs_51.io.opinSW[0] <= pes_45.io.out[0] @[CGRA.scala 399:43]
    gibs_59.io.opinNE[0] <= pes_45.io.out[0] @[CGRA.scala 400:45]
    gibs_60.io.opinNW[0] <= pes_45.io.out[0] @[CGRA.scala 401:47]
    pes_46.io.en <= io.en[6] @[CGRA.scala 377:27]
    pes_46.io.in[0] <= gibs_51.io.ipinSE[0] @[CGRA.scala 380:14]
    pes_46.io.in[1] <= gibs_52.io.ipinSW[0] @[CGRA.scala 384:14]
    pes_46.io.in[2] <= gibs_60.io.ipinNE[0] @[CGRA.scala 388:14]
    pes_46.io.in[3] <= gibs_61.io.ipinNW[0] @[CGRA.scala 392:14]
    pes_46.io.in[4] <= gibs_51.io.ipinSE[1] @[CGRA.scala 380:14]
    pes_46.io.in[5] <= gibs_52.io.ipinSW[1] @[CGRA.scala 384:14]
    pes_46.io.in[6] <= gibs_60.io.ipinNE[1] @[CGRA.scala 388:14]
    pes_46.io.in[7] <= gibs_61.io.ipinNW[1] @[CGRA.scala 392:14]
    gibs_51.io.opinSE[0] <= pes_46.io.out[0] @[CGRA.scala 398:41]
    gibs_52.io.opinSW[0] <= pes_46.io.out[0] @[CGRA.scala 399:43]
    gibs_60.io.opinNE[0] <= pes_46.io.out[0] @[CGRA.scala 400:45]
    gibs_61.io.opinNW[0] <= pes_46.io.out[0] @[CGRA.scala 401:47]
    pes_47.io.en <= io.en[7] @[CGRA.scala 377:27]
    pes_47.io.in[0] <= gibs_52.io.ipinSE[0] @[CGRA.scala 380:14]
    pes_47.io.in[1] <= gibs_53.io.ipinSW[0] @[CGRA.scala 384:14]
    pes_47.io.in[2] <= gibs_61.io.ipinNE[0] @[CGRA.scala 388:14]
    pes_47.io.in[3] <= gibs_62.io.ipinNW[0] @[CGRA.scala 392:14]
    pes_47.io.in[4] <= gibs_52.io.ipinSE[1] @[CGRA.scala 380:14]
    pes_47.io.in[5] <= gibs_53.io.ipinSW[1] @[CGRA.scala 384:14]
    pes_47.io.in[6] <= gibs_61.io.ipinNE[1] @[CGRA.scala 388:14]
    pes_47.io.in[7] <= gibs_62.io.ipinNW[1] @[CGRA.scala 392:14]
    gibs_52.io.opinSE[0] <= pes_47.io.out[0] @[CGRA.scala 398:41]
    gibs_53.io.opinSW[0] <= pes_47.io.out[0] @[CGRA.scala 399:43]
    gibs_61.io.opinNE[0] <= pes_47.io.out[0] @[CGRA.scala 400:45]
    gibs_62.io.opinNW[0] <= pes_47.io.out[0] @[CGRA.scala 401:47]
    pes_48.io.en <= io.en[0] @[CGRA.scala 377:27]
    pes_48.io.in[0] <= gibs_54.io.ipinSE[0] @[CGRA.scala 380:14]
    pes_48.io.in[1] <= gibs_55.io.ipinSW[0] @[CGRA.scala 384:14]
    pes_48.io.in[2] <= gibs_63.io.ipinNE[0] @[CGRA.scala 388:14]
    pes_48.io.in[3] <= gibs_64.io.ipinNW[0] @[CGRA.scala 392:14]
    pes_48.io.in[4] <= gibs_54.io.ipinSE[1] @[CGRA.scala 380:14]
    pes_48.io.in[5] <= gibs_55.io.ipinSW[1] @[CGRA.scala 384:14]
    pes_48.io.in[6] <= gibs_63.io.ipinNE[1] @[CGRA.scala 388:14]
    pes_48.io.in[7] <= gibs_64.io.ipinNW[1] @[CGRA.scala 392:14]
    gibs_54.io.opinSE[0] <= pes_48.io.out[0] @[CGRA.scala 398:41]
    gibs_55.io.opinSW[0] <= pes_48.io.out[0] @[CGRA.scala 399:43]
    gibs_63.io.opinNE[0] <= pes_48.io.out[0] @[CGRA.scala 400:45]
    gibs_64.io.opinNW[0] <= pes_48.io.out[0] @[CGRA.scala 401:47]
    pes_49.io.en <= io.en[1] @[CGRA.scala 377:27]
    pes_49.io.in[0] <= gibs_55.io.ipinSE[0] @[CGRA.scala 380:14]
    pes_49.io.in[1] <= gibs_56.io.ipinSW[0] @[CGRA.scala 384:14]
    pes_49.io.in[2] <= gibs_64.io.ipinNE[0] @[CGRA.scala 388:14]
    pes_49.io.in[3] <= gibs_65.io.ipinNW[0] @[CGRA.scala 392:14]
    pes_49.io.in[4] <= gibs_55.io.ipinSE[1] @[CGRA.scala 380:14]
    pes_49.io.in[5] <= gibs_56.io.ipinSW[1] @[CGRA.scala 384:14]
    pes_49.io.in[6] <= gibs_64.io.ipinNE[1] @[CGRA.scala 388:14]
    pes_49.io.in[7] <= gibs_65.io.ipinNW[1] @[CGRA.scala 392:14]
    gibs_55.io.opinSE[0] <= pes_49.io.out[0] @[CGRA.scala 398:41]
    gibs_56.io.opinSW[0] <= pes_49.io.out[0] @[CGRA.scala 399:43]
    gibs_64.io.opinNE[0] <= pes_49.io.out[0] @[CGRA.scala 400:45]
    gibs_65.io.opinNW[0] <= pes_49.io.out[0] @[CGRA.scala 401:47]
    pes_50.io.en <= io.en[2] @[CGRA.scala 377:27]
    pes_50.io.in[0] <= gibs_56.io.ipinSE[0] @[CGRA.scala 380:14]
    pes_50.io.in[1] <= gibs_57.io.ipinSW[0] @[CGRA.scala 384:14]
    pes_50.io.in[2] <= gibs_65.io.ipinNE[0] @[CGRA.scala 388:14]
    pes_50.io.in[3] <= gibs_66.io.ipinNW[0] @[CGRA.scala 392:14]
    pes_50.io.in[4] <= gibs_56.io.ipinSE[1] @[CGRA.scala 380:14]
    pes_50.io.in[5] <= gibs_57.io.ipinSW[1] @[CGRA.scala 384:14]
    pes_50.io.in[6] <= gibs_65.io.ipinNE[1] @[CGRA.scala 388:14]
    pes_50.io.in[7] <= gibs_66.io.ipinNW[1] @[CGRA.scala 392:14]
    gibs_56.io.opinSE[0] <= pes_50.io.out[0] @[CGRA.scala 398:41]
    gibs_57.io.opinSW[0] <= pes_50.io.out[0] @[CGRA.scala 399:43]
    gibs_65.io.opinNE[0] <= pes_50.io.out[0] @[CGRA.scala 400:45]
    gibs_66.io.opinNW[0] <= pes_50.io.out[0] @[CGRA.scala 401:47]
    pes_51.io.en <= io.en[3] @[CGRA.scala 377:27]
    pes_51.io.in[0] <= gibs_57.io.ipinSE[0] @[CGRA.scala 380:14]
    pes_51.io.in[1] <= gibs_58.io.ipinSW[0] @[CGRA.scala 384:14]
    pes_51.io.in[2] <= gibs_66.io.ipinNE[0] @[CGRA.scala 388:14]
    pes_51.io.in[3] <= gibs_67.io.ipinNW[0] @[CGRA.scala 392:14]
    pes_51.io.in[4] <= gibs_57.io.ipinSE[1] @[CGRA.scala 380:14]
    pes_51.io.in[5] <= gibs_58.io.ipinSW[1] @[CGRA.scala 384:14]
    pes_51.io.in[6] <= gibs_66.io.ipinNE[1] @[CGRA.scala 388:14]
    pes_51.io.in[7] <= gibs_67.io.ipinNW[1] @[CGRA.scala 392:14]
    gibs_57.io.opinSE[0] <= pes_51.io.out[0] @[CGRA.scala 398:41]
    gibs_58.io.opinSW[0] <= pes_51.io.out[0] @[CGRA.scala 399:43]
    gibs_66.io.opinNE[0] <= pes_51.io.out[0] @[CGRA.scala 400:45]
    gibs_67.io.opinNW[0] <= pes_51.io.out[0] @[CGRA.scala 401:47]
    pes_52.io.en <= io.en[4] @[CGRA.scala 377:27]
    pes_52.io.in[0] <= gibs_58.io.ipinSE[0] @[CGRA.scala 380:14]
    pes_52.io.in[1] <= gibs_59.io.ipinSW[0] @[CGRA.scala 384:14]
    pes_52.io.in[2] <= gibs_67.io.ipinNE[0] @[CGRA.scala 388:14]
    pes_52.io.in[3] <= gibs_68.io.ipinNW[0] @[CGRA.scala 392:14]
    pes_52.io.in[4] <= gibs_58.io.ipinSE[1] @[CGRA.scala 380:14]
    pes_52.io.in[5] <= gibs_59.io.ipinSW[1] @[CGRA.scala 384:14]
    pes_52.io.in[6] <= gibs_67.io.ipinNE[1] @[CGRA.scala 388:14]
    pes_52.io.in[7] <= gibs_68.io.ipinNW[1] @[CGRA.scala 392:14]
    gibs_58.io.opinSE[0] <= pes_52.io.out[0] @[CGRA.scala 398:41]
    gibs_59.io.opinSW[0] <= pes_52.io.out[0] @[CGRA.scala 399:43]
    gibs_67.io.opinNE[0] <= pes_52.io.out[0] @[CGRA.scala 400:45]
    gibs_68.io.opinNW[0] <= pes_52.io.out[0] @[CGRA.scala 401:47]
    pes_53.io.en <= io.en[5] @[CGRA.scala 377:27]
    pes_53.io.in[0] <= gibs_59.io.ipinSE[0] @[CGRA.scala 380:14]
    pes_53.io.in[1] <= gibs_60.io.ipinSW[0] @[CGRA.scala 384:14]
    pes_53.io.in[2] <= gibs_68.io.ipinNE[0] @[CGRA.scala 388:14]
    pes_53.io.in[3] <= gibs_69.io.ipinNW[0] @[CGRA.scala 392:14]
    pes_53.io.in[4] <= gibs_59.io.ipinSE[1] @[CGRA.scala 380:14]
    pes_53.io.in[5] <= gibs_60.io.ipinSW[1] @[CGRA.scala 384:14]
    pes_53.io.in[6] <= gibs_68.io.ipinNE[1] @[CGRA.scala 388:14]
    pes_53.io.in[7] <= gibs_69.io.ipinNW[1] @[CGRA.scala 392:14]
    gibs_59.io.opinSE[0] <= pes_53.io.out[0] @[CGRA.scala 398:41]
    gibs_60.io.opinSW[0] <= pes_53.io.out[0] @[CGRA.scala 399:43]
    gibs_68.io.opinNE[0] <= pes_53.io.out[0] @[CGRA.scala 400:45]
    gibs_69.io.opinNW[0] <= pes_53.io.out[0] @[CGRA.scala 401:47]
    pes_54.io.en <= io.en[6] @[CGRA.scala 377:27]
    pes_54.io.in[0] <= gibs_60.io.ipinSE[0] @[CGRA.scala 380:14]
    pes_54.io.in[1] <= gibs_61.io.ipinSW[0] @[CGRA.scala 384:14]
    pes_54.io.in[2] <= gibs_69.io.ipinNE[0] @[CGRA.scala 388:14]
    pes_54.io.in[3] <= gibs_70.io.ipinNW[0] @[CGRA.scala 392:14]
    pes_54.io.in[4] <= gibs_60.io.ipinSE[1] @[CGRA.scala 380:14]
    pes_54.io.in[5] <= gibs_61.io.ipinSW[1] @[CGRA.scala 384:14]
    pes_54.io.in[6] <= gibs_69.io.ipinNE[1] @[CGRA.scala 388:14]
    pes_54.io.in[7] <= gibs_70.io.ipinNW[1] @[CGRA.scala 392:14]
    gibs_60.io.opinSE[0] <= pes_54.io.out[0] @[CGRA.scala 398:41]
    gibs_61.io.opinSW[0] <= pes_54.io.out[0] @[CGRA.scala 399:43]
    gibs_69.io.opinNE[0] <= pes_54.io.out[0] @[CGRA.scala 400:45]
    gibs_70.io.opinNW[0] <= pes_54.io.out[0] @[CGRA.scala 401:47]
    pes_55.io.en <= io.en[7] @[CGRA.scala 377:27]
    pes_55.io.in[0] <= gibs_61.io.ipinSE[0] @[CGRA.scala 380:14]
    pes_55.io.in[1] <= gibs_62.io.ipinSW[0] @[CGRA.scala 384:14]
    pes_55.io.in[2] <= gibs_70.io.ipinNE[0] @[CGRA.scala 388:14]
    pes_55.io.in[3] <= gibs_71.io.ipinNW[0] @[CGRA.scala 392:14]
    pes_55.io.in[4] <= gibs_61.io.ipinSE[1] @[CGRA.scala 380:14]
    pes_55.io.in[5] <= gibs_62.io.ipinSW[1] @[CGRA.scala 384:14]
    pes_55.io.in[6] <= gibs_70.io.ipinNE[1] @[CGRA.scala 388:14]
    pes_55.io.in[7] <= gibs_71.io.ipinNW[1] @[CGRA.scala 392:14]
    gibs_61.io.opinSE[0] <= pes_55.io.out[0] @[CGRA.scala 398:41]
    gibs_62.io.opinSW[0] <= pes_55.io.out[0] @[CGRA.scala 399:43]
    gibs_70.io.opinNE[0] <= pes_55.io.out[0] @[CGRA.scala 400:45]
    gibs_71.io.opinNW[0] <= pes_55.io.out[0] @[CGRA.scala 401:47]
    pes_56.io.en <= io.en[0] @[CGRA.scala 377:27]
    pes_56.io.in[0] <= gibs_63.io.ipinSE[0] @[CGRA.scala 380:14]
    pes_56.io.in[1] <= gibs_64.io.ipinSW[0] @[CGRA.scala 384:14]
    pes_56.io.in[2] <= gibs_72.io.ipinNE[0] @[CGRA.scala 388:14]
    pes_56.io.in[3] <= gibs_73.io.ipinNW[0] @[CGRA.scala 392:14]
    pes_56.io.in[4] <= gibs_63.io.ipinSE[1] @[CGRA.scala 380:14]
    pes_56.io.in[5] <= gibs_64.io.ipinSW[1] @[CGRA.scala 384:14]
    pes_56.io.in[6] <= gibs_72.io.ipinNE[1] @[CGRA.scala 388:14]
    pes_56.io.in[7] <= gibs_73.io.ipinNW[1] @[CGRA.scala 392:14]
    gibs_63.io.opinSE[0] <= pes_56.io.out[0] @[CGRA.scala 398:41]
    gibs_64.io.opinSW[0] <= pes_56.io.out[0] @[CGRA.scala 399:43]
    gibs_72.io.opinNE[0] <= pes_56.io.out[0] @[CGRA.scala 400:45]
    gibs_73.io.opinNW[0] <= pes_56.io.out[0] @[CGRA.scala 401:47]
    pes_57.io.en <= io.en[1] @[CGRA.scala 377:27]
    pes_57.io.in[0] <= gibs_64.io.ipinSE[0] @[CGRA.scala 380:14]
    pes_57.io.in[1] <= gibs_65.io.ipinSW[0] @[CGRA.scala 384:14]
    pes_57.io.in[2] <= gibs_73.io.ipinNE[0] @[CGRA.scala 388:14]
    pes_57.io.in[3] <= gibs_74.io.ipinNW[0] @[CGRA.scala 392:14]
    pes_57.io.in[4] <= gibs_64.io.ipinSE[1] @[CGRA.scala 380:14]
    pes_57.io.in[5] <= gibs_65.io.ipinSW[1] @[CGRA.scala 384:14]
    pes_57.io.in[6] <= gibs_73.io.ipinNE[1] @[CGRA.scala 388:14]
    pes_57.io.in[7] <= gibs_74.io.ipinNW[1] @[CGRA.scala 392:14]
    gibs_64.io.opinSE[0] <= pes_57.io.out[0] @[CGRA.scala 398:41]
    gibs_65.io.opinSW[0] <= pes_57.io.out[0] @[CGRA.scala 399:43]
    gibs_73.io.opinNE[0] <= pes_57.io.out[0] @[CGRA.scala 400:45]
    gibs_74.io.opinNW[0] <= pes_57.io.out[0] @[CGRA.scala 401:47]
    pes_58.io.en <= io.en[2] @[CGRA.scala 377:27]
    pes_58.io.in[0] <= gibs_65.io.ipinSE[0] @[CGRA.scala 380:14]
    pes_58.io.in[1] <= gibs_66.io.ipinSW[0] @[CGRA.scala 384:14]
    pes_58.io.in[2] <= gibs_74.io.ipinNE[0] @[CGRA.scala 388:14]
    pes_58.io.in[3] <= gibs_75.io.ipinNW[0] @[CGRA.scala 392:14]
    pes_58.io.in[4] <= gibs_65.io.ipinSE[1] @[CGRA.scala 380:14]
    pes_58.io.in[5] <= gibs_66.io.ipinSW[1] @[CGRA.scala 384:14]
    pes_58.io.in[6] <= gibs_74.io.ipinNE[1] @[CGRA.scala 388:14]
    pes_58.io.in[7] <= gibs_75.io.ipinNW[1] @[CGRA.scala 392:14]
    gibs_65.io.opinSE[0] <= pes_58.io.out[0] @[CGRA.scala 398:41]
    gibs_66.io.opinSW[0] <= pes_58.io.out[0] @[CGRA.scala 399:43]
    gibs_74.io.opinNE[0] <= pes_58.io.out[0] @[CGRA.scala 400:45]
    gibs_75.io.opinNW[0] <= pes_58.io.out[0] @[CGRA.scala 401:47]
    pes_59.io.en <= io.en[3] @[CGRA.scala 377:27]
    pes_59.io.in[0] <= gibs_66.io.ipinSE[0] @[CGRA.scala 380:14]
    pes_59.io.in[1] <= gibs_67.io.ipinSW[0] @[CGRA.scala 384:14]
    pes_59.io.in[2] <= gibs_75.io.ipinNE[0] @[CGRA.scala 388:14]
    pes_59.io.in[3] <= gibs_76.io.ipinNW[0] @[CGRA.scala 392:14]
    pes_59.io.in[4] <= gibs_66.io.ipinSE[1] @[CGRA.scala 380:14]
    pes_59.io.in[5] <= gibs_67.io.ipinSW[1] @[CGRA.scala 384:14]
    pes_59.io.in[6] <= gibs_75.io.ipinNE[1] @[CGRA.scala 388:14]
    pes_59.io.in[7] <= gibs_76.io.ipinNW[1] @[CGRA.scala 392:14]
    gibs_66.io.opinSE[0] <= pes_59.io.out[0] @[CGRA.scala 398:41]
    gibs_67.io.opinSW[0] <= pes_59.io.out[0] @[CGRA.scala 399:43]
    gibs_75.io.opinNE[0] <= pes_59.io.out[0] @[CGRA.scala 400:45]
    gibs_76.io.opinNW[0] <= pes_59.io.out[0] @[CGRA.scala 401:47]
    pes_60.io.en <= io.en[4] @[CGRA.scala 377:27]
    pes_60.io.in[0] <= gibs_67.io.ipinSE[0] @[CGRA.scala 380:14]
    pes_60.io.in[1] <= gibs_68.io.ipinSW[0] @[CGRA.scala 384:14]
    pes_60.io.in[2] <= gibs_76.io.ipinNE[0] @[CGRA.scala 388:14]
    pes_60.io.in[3] <= gibs_77.io.ipinNW[0] @[CGRA.scala 392:14]
    pes_60.io.in[4] <= gibs_67.io.ipinSE[1] @[CGRA.scala 380:14]
    pes_60.io.in[5] <= gibs_68.io.ipinSW[1] @[CGRA.scala 384:14]
    pes_60.io.in[6] <= gibs_76.io.ipinNE[1] @[CGRA.scala 388:14]
    pes_60.io.in[7] <= gibs_77.io.ipinNW[1] @[CGRA.scala 392:14]
    gibs_67.io.opinSE[0] <= pes_60.io.out[0] @[CGRA.scala 398:41]
    gibs_68.io.opinSW[0] <= pes_60.io.out[0] @[CGRA.scala 399:43]
    gibs_76.io.opinNE[0] <= pes_60.io.out[0] @[CGRA.scala 400:45]
    gibs_77.io.opinNW[0] <= pes_60.io.out[0] @[CGRA.scala 401:47]
    pes_61.io.en <= io.en[5] @[CGRA.scala 377:27]
    pes_61.io.in[0] <= gibs_68.io.ipinSE[0] @[CGRA.scala 380:14]
    pes_61.io.in[1] <= gibs_69.io.ipinSW[0] @[CGRA.scala 384:14]
    pes_61.io.in[2] <= gibs_77.io.ipinNE[0] @[CGRA.scala 388:14]
    pes_61.io.in[3] <= gibs_78.io.ipinNW[0] @[CGRA.scala 392:14]
    pes_61.io.in[4] <= gibs_68.io.ipinSE[1] @[CGRA.scala 380:14]
    pes_61.io.in[5] <= gibs_69.io.ipinSW[1] @[CGRA.scala 384:14]
    pes_61.io.in[6] <= gibs_77.io.ipinNE[1] @[CGRA.scala 388:14]
    pes_61.io.in[7] <= gibs_78.io.ipinNW[1] @[CGRA.scala 392:14]
    gibs_68.io.opinSE[0] <= pes_61.io.out[0] @[CGRA.scala 398:41]
    gibs_69.io.opinSW[0] <= pes_61.io.out[0] @[CGRA.scala 399:43]
    gibs_77.io.opinNE[0] <= pes_61.io.out[0] @[CGRA.scala 400:45]
    gibs_78.io.opinNW[0] <= pes_61.io.out[0] @[CGRA.scala 401:47]
    pes_62.io.en <= io.en[6] @[CGRA.scala 377:27]
    pes_62.io.in[0] <= gibs_69.io.ipinSE[0] @[CGRA.scala 380:14]
    pes_62.io.in[1] <= gibs_70.io.ipinSW[0] @[CGRA.scala 384:14]
    pes_62.io.in[2] <= gibs_78.io.ipinNE[0] @[CGRA.scala 388:14]
    pes_62.io.in[3] <= gibs_79.io.ipinNW[0] @[CGRA.scala 392:14]
    pes_62.io.in[4] <= gibs_69.io.ipinSE[1] @[CGRA.scala 380:14]
    pes_62.io.in[5] <= gibs_70.io.ipinSW[1] @[CGRA.scala 384:14]
    pes_62.io.in[6] <= gibs_78.io.ipinNE[1] @[CGRA.scala 388:14]
    pes_62.io.in[7] <= gibs_79.io.ipinNW[1] @[CGRA.scala 392:14]
    gibs_69.io.opinSE[0] <= pes_62.io.out[0] @[CGRA.scala 398:41]
    gibs_70.io.opinSW[0] <= pes_62.io.out[0] @[CGRA.scala 399:43]
    gibs_78.io.opinNE[0] <= pes_62.io.out[0] @[CGRA.scala 400:45]
    gibs_79.io.opinNW[0] <= pes_62.io.out[0] @[CGRA.scala 401:47]
    pes_63.io.en <= io.en[7] @[CGRA.scala 377:27]
    pes_63.io.in[0] <= gibs_70.io.ipinSE[0] @[CGRA.scala 380:14]
    pes_63.io.in[1] <= gibs_71.io.ipinSW[0] @[CGRA.scala 384:14]
    pes_63.io.in[2] <= gibs_79.io.ipinNE[0] @[CGRA.scala 388:14]
    pes_63.io.in[3] <= gibs_80.io.ipinNW[0] @[CGRA.scala 392:14]
    pes_63.io.in[4] <= gibs_70.io.ipinSE[1] @[CGRA.scala 380:14]
    pes_63.io.in[5] <= gibs_71.io.ipinSW[1] @[CGRA.scala 384:14]
    pes_63.io.in[6] <= gibs_79.io.ipinNE[1] @[CGRA.scala 388:14]
    pes_63.io.in[7] <= gibs_80.io.ipinNW[1] @[CGRA.scala 392:14]
    gibs_70.io.opinSE[0] <= pes_63.io.out[0] @[CGRA.scala 398:41]
    gibs_71.io.opinSW[0] <= pes_63.io.out[0] @[CGRA.scala 399:43]
    gibs_79.io.opinNE[0] <= pes_63.io.out[0] @[CGRA.scala 400:45]
    gibs_80.io.opinNW[0] <= pes_63.io.out[0] @[CGRA.scala 401:47]
    gibs_0.io.itrackN[0] <= UInt<1>("h00") @[CGRA.scala 419:45]
    gibs_0.io.itrackS[0] <= gibs_9.io.otrackN[0] @[CGRA.scala 421:16]
    gibs_0.io.itrackW[0] <= UInt<1>("h00") @[CGRA.scala 449:62]
    gibs_0.io.itrackE[0] <= gibs_1.io.otrackW[0] @[CGRA.scala 451:16]
    gibs_1.io.itrackN[0] <= UInt<1>("h00") @[CGRA.scala 419:45]
    gibs_1.io.itrackS[0] <= gibs_10.io.otrackN[0] @[CGRA.scala 421:16]
    gibs_1.io.itrackW[0] <= gibs_0.io.otrackE[0] @[CGRA.scala 466:16]
    gibs_1.io.itrackE[0] <= gibs_2.io.otrackW[0] @[CGRA.scala 472:16]
    gibs_2.io.itrackN[0] <= UInt<1>("h00") @[CGRA.scala 419:45]
    gibs_2.io.itrackS[0] <= gibs_11.io.otrackN[0] @[CGRA.scala 421:16]
    gibs_2.io.itrackW[0] <= gibs_1.io.otrackE[0] @[CGRA.scala 466:16]
    gibs_2.io.itrackE[0] <= gibs_3.io.otrackW[0] @[CGRA.scala 472:16]
    gibs_3.io.itrackN[0] <= UInt<1>("h00") @[CGRA.scala 419:45]
    gibs_3.io.itrackS[0] <= gibs_12.io.otrackN[0] @[CGRA.scala 421:16]
    gibs_3.io.itrackW[0] <= gibs_2.io.otrackE[0] @[CGRA.scala 466:16]
    gibs_3.io.itrackE[0] <= gibs_4.io.otrackW[0] @[CGRA.scala 472:16]
    gibs_4.io.itrackN[0] <= UInt<1>("h00") @[CGRA.scala 419:45]
    gibs_4.io.itrackS[0] <= gibs_13.io.otrackN[0] @[CGRA.scala 421:16]
    gibs_4.io.itrackW[0] <= gibs_3.io.otrackE[0] @[CGRA.scala 466:16]
    gibs_4.io.itrackE[0] <= gibs_5.io.otrackW[0] @[CGRA.scala 472:16]
    gibs_5.io.itrackN[0] <= UInt<1>("h00") @[CGRA.scala 419:45]
    gibs_5.io.itrackS[0] <= gibs_14.io.otrackN[0] @[CGRA.scala 421:16]
    gibs_5.io.itrackW[0] <= gibs_4.io.otrackE[0] @[CGRA.scala 466:16]
    gibs_5.io.itrackE[0] <= gibs_6.io.otrackW[0] @[CGRA.scala 472:16]
    gibs_6.io.itrackN[0] <= UInt<1>("h00") @[CGRA.scala 419:45]
    gibs_6.io.itrackS[0] <= gibs_15.io.otrackN[0] @[CGRA.scala 421:16]
    gibs_6.io.itrackW[0] <= gibs_5.io.otrackE[0] @[CGRA.scala 466:16]
    gibs_6.io.itrackE[0] <= gibs_7.io.otrackW[0] @[CGRA.scala 472:16]
    gibs_7.io.itrackN[0] <= UInt<1>("h00") @[CGRA.scala 419:45]
    gibs_7.io.itrackS[0] <= gibs_16.io.otrackN[0] @[CGRA.scala 421:16]
    gibs_7.io.itrackW[0] <= gibs_6.io.otrackE[0] @[CGRA.scala 466:16]
    gibs_7.io.itrackE[0] <= gibs_8.io.otrackW[0] @[CGRA.scala 472:16]
    gibs_8.io.itrackN[0] <= UInt<1>("h00") @[CGRA.scala 419:45]
    gibs_8.io.itrackS[0] <= gibs_17.io.otrackN[0] @[CGRA.scala 421:16]
    gibs_8.io.itrackE[0] <= UInt<1>("h00") @[CGRA.scala 457:62]
    gibs_8.io.itrackW[0] <= gibs_7.io.otrackE[0] @[CGRA.scala 459:16]
    gibs_9.io.itrackN[0] <= gibs_0.io.otrackS[0] @[CGRA.scala 436:16]
    gibs_9.io.itrackS[0] <= gibs_18.io.otrackN[0] @[CGRA.scala 442:16]
    gibs_9.io.itrackW[0] <= UInt<1>("h00") @[CGRA.scala 449:62]
    gibs_9.io.itrackE[0] <= gibs_10.io.otrackW[0] @[CGRA.scala 451:16]
    gibs_10.io.itrackN[0] <= gibs_1.io.otrackS[0] @[CGRA.scala 436:16]
    gibs_10.io.itrackS[0] <= gibs_19.io.otrackN[0] @[CGRA.scala 442:16]
    gibs_10.io.itrackW[0] <= gibs_9.io.otrackE[0] @[CGRA.scala 466:16]
    gibs_10.io.itrackE[0] <= gibs_11.io.otrackW[0] @[CGRA.scala 472:16]
    gibs_11.io.itrackN[0] <= gibs_2.io.otrackS[0] @[CGRA.scala 436:16]
    gibs_11.io.itrackS[0] <= gibs_20.io.otrackN[0] @[CGRA.scala 442:16]
    gibs_11.io.itrackW[0] <= gibs_10.io.otrackE[0] @[CGRA.scala 466:16]
    gibs_11.io.itrackE[0] <= gibs_12.io.otrackW[0] @[CGRA.scala 472:16]
    gibs_12.io.itrackN[0] <= gibs_3.io.otrackS[0] @[CGRA.scala 436:16]
    gibs_12.io.itrackS[0] <= gibs_21.io.otrackN[0] @[CGRA.scala 442:16]
    gibs_12.io.itrackW[0] <= gibs_11.io.otrackE[0] @[CGRA.scala 466:16]
    gibs_12.io.itrackE[0] <= gibs_13.io.otrackW[0] @[CGRA.scala 472:16]
    gibs_13.io.itrackN[0] <= gibs_4.io.otrackS[0] @[CGRA.scala 436:16]
    gibs_13.io.itrackS[0] <= gibs_22.io.otrackN[0] @[CGRA.scala 442:16]
    gibs_13.io.itrackW[0] <= gibs_12.io.otrackE[0] @[CGRA.scala 466:16]
    gibs_13.io.itrackE[0] <= gibs_14.io.otrackW[0] @[CGRA.scala 472:16]
    gibs_14.io.itrackN[0] <= gibs_5.io.otrackS[0] @[CGRA.scala 436:16]
    gibs_14.io.itrackS[0] <= gibs_23.io.otrackN[0] @[CGRA.scala 442:16]
    gibs_14.io.itrackW[0] <= gibs_13.io.otrackE[0] @[CGRA.scala 466:16]
    gibs_14.io.itrackE[0] <= gibs_15.io.otrackW[0] @[CGRA.scala 472:16]
    gibs_15.io.itrackN[0] <= gibs_6.io.otrackS[0] @[CGRA.scala 436:16]
    gibs_15.io.itrackS[0] <= gibs_24.io.otrackN[0] @[CGRA.scala 442:16]
    gibs_15.io.itrackW[0] <= gibs_14.io.otrackE[0] @[CGRA.scala 466:16]
    gibs_15.io.itrackE[0] <= gibs_16.io.otrackW[0] @[CGRA.scala 472:16]
    gibs_16.io.itrackN[0] <= gibs_7.io.otrackS[0] @[CGRA.scala 436:16]
    gibs_16.io.itrackS[0] <= gibs_25.io.otrackN[0] @[CGRA.scala 442:16]
    gibs_16.io.itrackW[0] <= gibs_15.io.otrackE[0] @[CGRA.scala 466:16]
    gibs_16.io.itrackE[0] <= gibs_17.io.otrackW[0] @[CGRA.scala 472:16]
    gibs_17.io.itrackN[0] <= gibs_8.io.otrackS[0] @[CGRA.scala 436:16]
    gibs_17.io.itrackS[0] <= gibs_26.io.otrackN[0] @[CGRA.scala 442:16]
    gibs_17.io.itrackE[0] <= UInt<1>("h00") @[CGRA.scala 457:62]
    gibs_17.io.itrackW[0] <= gibs_16.io.otrackE[0] @[CGRA.scala 459:16]
    gibs_18.io.itrackN[0] <= gibs_9.io.otrackS[0] @[CGRA.scala 436:16]
    gibs_18.io.itrackS[0] <= gibs_27.io.otrackN[0] @[CGRA.scala 442:16]
    gibs_18.io.itrackW[0] <= UInt<1>("h00") @[CGRA.scala 449:62]
    gibs_18.io.itrackE[0] <= gibs_19.io.otrackW[0] @[CGRA.scala 451:16]
    gibs_19.io.itrackN[0] <= gibs_10.io.otrackS[0] @[CGRA.scala 436:16]
    gibs_19.io.itrackS[0] <= gibs_28.io.otrackN[0] @[CGRA.scala 442:16]
    gibs_19.io.itrackW[0] <= gibs_18.io.otrackE[0] @[CGRA.scala 466:16]
    gibs_19.io.itrackE[0] <= gibs_20.io.otrackW[0] @[CGRA.scala 472:16]
    gibs_20.io.itrackN[0] <= gibs_11.io.otrackS[0] @[CGRA.scala 436:16]
    gibs_20.io.itrackS[0] <= gibs_29.io.otrackN[0] @[CGRA.scala 442:16]
    gibs_20.io.itrackW[0] <= gibs_19.io.otrackE[0] @[CGRA.scala 466:16]
    gibs_20.io.itrackE[0] <= gibs_21.io.otrackW[0] @[CGRA.scala 472:16]
    gibs_21.io.itrackN[0] <= gibs_12.io.otrackS[0] @[CGRA.scala 436:16]
    gibs_21.io.itrackS[0] <= gibs_30.io.otrackN[0] @[CGRA.scala 442:16]
    gibs_21.io.itrackW[0] <= gibs_20.io.otrackE[0] @[CGRA.scala 466:16]
    gibs_21.io.itrackE[0] <= gibs_22.io.otrackW[0] @[CGRA.scala 472:16]
    gibs_22.io.itrackN[0] <= gibs_13.io.otrackS[0] @[CGRA.scala 436:16]
    gibs_22.io.itrackS[0] <= gibs_31.io.otrackN[0] @[CGRA.scala 442:16]
    gibs_22.io.itrackW[0] <= gibs_21.io.otrackE[0] @[CGRA.scala 466:16]
    gibs_22.io.itrackE[0] <= gibs_23.io.otrackW[0] @[CGRA.scala 472:16]
    gibs_23.io.itrackN[0] <= gibs_14.io.otrackS[0] @[CGRA.scala 436:16]
    gibs_23.io.itrackS[0] <= gibs_32.io.otrackN[0] @[CGRA.scala 442:16]
    gibs_23.io.itrackW[0] <= gibs_22.io.otrackE[0] @[CGRA.scala 466:16]
    gibs_23.io.itrackE[0] <= gibs_24.io.otrackW[0] @[CGRA.scala 472:16]
    gibs_24.io.itrackN[0] <= gibs_15.io.otrackS[0] @[CGRA.scala 436:16]
    gibs_24.io.itrackS[0] <= gibs_33.io.otrackN[0] @[CGRA.scala 442:16]
    gibs_24.io.itrackW[0] <= gibs_23.io.otrackE[0] @[CGRA.scala 466:16]
    gibs_24.io.itrackE[0] <= gibs_25.io.otrackW[0] @[CGRA.scala 472:16]
    gibs_25.io.itrackN[0] <= gibs_16.io.otrackS[0] @[CGRA.scala 436:16]
    gibs_25.io.itrackS[0] <= gibs_34.io.otrackN[0] @[CGRA.scala 442:16]
    gibs_25.io.itrackW[0] <= gibs_24.io.otrackE[0] @[CGRA.scala 466:16]
    gibs_25.io.itrackE[0] <= gibs_26.io.otrackW[0] @[CGRA.scala 472:16]
    gibs_26.io.itrackN[0] <= gibs_17.io.otrackS[0] @[CGRA.scala 436:16]
    gibs_26.io.itrackS[0] <= gibs_35.io.otrackN[0] @[CGRA.scala 442:16]
    gibs_26.io.itrackE[0] <= UInt<1>("h00") @[CGRA.scala 457:62]
    gibs_26.io.itrackW[0] <= gibs_25.io.otrackE[0] @[CGRA.scala 459:16]
    gibs_27.io.itrackN[0] <= gibs_18.io.otrackS[0] @[CGRA.scala 436:16]
    gibs_27.io.itrackS[0] <= gibs_36.io.otrackN[0] @[CGRA.scala 442:16]
    gibs_27.io.itrackW[0] <= UInt<1>("h00") @[CGRA.scala 449:62]
    gibs_27.io.itrackE[0] <= gibs_28.io.otrackW[0] @[CGRA.scala 451:16]
    gibs_28.io.itrackN[0] <= gibs_19.io.otrackS[0] @[CGRA.scala 436:16]
    gibs_28.io.itrackS[0] <= gibs_37.io.otrackN[0] @[CGRA.scala 442:16]
    gibs_28.io.itrackW[0] <= gibs_27.io.otrackE[0] @[CGRA.scala 466:16]
    gibs_28.io.itrackE[0] <= gibs_29.io.otrackW[0] @[CGRA.scala 472:16]
    gibs_29.io.itrackN[0] <= gibs_20.io.otrackS[0] @[CGRA.scala 436:16]
    gibs_29.io.itrackS[0] <= gibs_38.io.otrackN[0] @[CGRA.scala 442:16]
    gibs_29.io.itrackW[0] <= gibs_28.io.otrackE[0] @[CGRA.scala 466:16]
    gibs_29.io.itrackE[0] <= gibs_30.io.otrackW[0] @[CGRA.scala 472:16]
    gibs_30.io.itrackN[0] <= gibs_21.io.otrackS[0] @[CGRA.scala 436:16]
    gibs_30.io.itrackS[0] <= gibs_39.io.otrackN[0] @[CGRA.scala 442:16]
    gibs_30.io.itrackW[0] <= gibs_29.io.otrackE[0] @[CGRA.scala 466:16]
    gibs_30.io.itrackE[0] <= gibs_31.io.otrackW[0] @[CGRA.scala 472:16]
    gibs_31.io.itrackN[0] <= gibs_22.io.otrackS[0] @[CGRA.scala 436:16]
    gibs_31.io.itrackS[0] <= gibs_40.io.otrackN[0] @[CGRA.scala 442:16]
    gibs_31.io.itrackW[0] <= gibs_30.io.otrackE[0] @[CGRA.scala 466:16]
    gibs_31.io.itrackE[0] <= gibs_32.io.otrackW[0] @[CGRA.scala 472:16]
    gibs_32.io.itrackN[0] <= gibs_23.io.otrackS[0] @[CGRA.scala 436:16]
    gibs_32.io.itrackS[0] <= gibs_41.io.otrackN[0] @[CGRA.scala 442:16]
    gibs_32.io.itrackW[0] <= gibs_31.io.otrackE[0] @[CGRA.scala 466:16]
    gibs_32.io.itrackE[0] <= gibs_33.io.otrackW[0] @[CGRA.scala 472:16]
    gibs_33.io.itrackN[0] <= gibs_24.io.otrackS[0] @[CGRA.scala 436:16]
    gibs_33.io.itrackS[0] <= gibs_42.io.otrackN[0] @[CGRA.scala 442:16]
    gibs_33.io.itrackW[0] <= gibs_32.io.otrackE[0] @[CGRA.scala 466:16]
    gibs_33.io.itrackE[0] <= gibs_34.io.otrackW[0] @[CGRA.scala 472:16]
    gibs_34.io.itrackN[0] <= gibs_25.io.otrackS[0] @[CGRA.scala 436:16]
    gibs_34.io.itrackS[0] <= gibs_43.io.otrackN[0] @[CGRA.scala 442:16]
    gibs_34.io.itrackW[0] <= gibs_33.io.otrackE[0] @[CGRA.scala 466:16]
    gibs_34.io.itrackE[0] <= gibs_35.io.otrackW[0] @[CGRA.scala 472:16]
    gibs_35.io.itrackN[0] <= gibs_26.io.otrackS[0] @[CGRA.scala 436:16]
    gibs_35.io.itrackS[0] <= gibs_44.io.otrackN[0] @[CGRA.scala 442:16]
    gibs_35.io.itrackE[0] <= UInt<1>("h00") @[CGRA.scala 457:62]
    gibs_35.io.itrackW[0] <= gibs_34.io.otrackE[0] @[CGRA.scala 459:16]
    gibs_36.io.itrackN[0] <= gibs_27.io.otrackS[0] @[CGRA.scala 436:16]
    gibs_36.io.itrackS[0] <= gibs_45.io.otrackN[0] @[CGRA.scala 442:16]
    gibs_36.io.itrackW[0] <= UInt<1>("h00") @[CGRA.scala 449:62]
    gibs_36.io.itrackE[0] <= gibs_37.io.otrackW[0] @[CGRA.scala 451:16]
    gibs_37.io.itrackN[0] <= gibs_28.io.otrackS[0] @[CGRA.scala 436:16]
    gibs_37.io.itrackS[0] <= gibs_46.io.otrackN[0] @[CGRA.scala 442:16]
    gibs_37.io.itrackW[0] <= gibs_36.io.otrackE[0] @[CGRA.scala 466:16]
    gibs_37.io.itrackE[0] <= gibs_38.io.otrackW[0] @[CGRA.scala 472:16]
    gibs_38.io.itrackN[0] <= gibs_29.io.otrackS[0] @[CGRA.scala 436:16]
    gibs_38.io.itrackS[0] <= gibs_47.io.otrackN[0] @[CGRA.scala 442:16]
    gibs_38.io.itrackW[0] <= gibs_37.io.otrackE[0] @[CGRA.scala 466:16]
    gibs_38.io.itrackE[0] <= gibs_39.io.otrackW[0] @[CGRA.scala 472:16]
    gibs_39.io.itrackN[0] <= gibs_30.io.otrackS[0] @[CGRA.scala 436:16]
    gibs_39.io.itrackS[0] <= gibs_48.io.otrackN[0] @[CGRA.scala 442:16]
    gibs_39.io.itrackW[0] <= gibs_38.io.otrackE[0] @[CGRA.scala 466:16]
    gibs_39.io.itrackE[0] <= gibs_40.io.otrackW[0] @[CGRA.scala 472:16]
    gibs_40.io.itrackN[0] <= gibs_31.io.otrackS[0] @[CGRA.scala 436:16]
    gibs_40.io.itrackS[0] <= gibs_49.io.otrackN[0] @[CGRA.scala 442:16]
    gibs_40.io.itrackW[0] <= gibs_39.io.otrackE[0] @[CGRA.scala 466:16]
    gibs_40.io.itrackE[0] <= gibs_41.io.otrackW[0] @[CGRA.scala 472:16]
    gibs_41.io.itrackN[0] <= gibs_32.io.otrackS[0] @[CGRA.scala 436:16]
    gibs_41.io.itrackS[0] <= gibs_50.io.otrackN[0] @[CGRA.scala 442:16]
    gibs_41.io.itrackW[0] <= gibs_40.io.otrackE[0] @[CGRA.scala 466:16]
    gibs_41.io.itrackE[0] <= gibs_42.io.otrackW[0] @[CGRA.scala 472:16]
    gibs_42.io.itrackN[0] <= gibs_33.io.otrackS[0] @[CGRA.scala 436:16]
    gibs_42.io.itrackS[0] <= gibs_51.io.otrackN[0] @[CGRA.scala 442:16]
    gibs_42.io.itrackW[0] <= gibs_41.io.otrackE[0] @[CGRA.scala 466:16]
    gibs_42.io.itrackE[0] <= gibs_43.io.otrackW[0] @[CGRA.scala 472:16]
    gibs_43.io.itrackN[0] <= gibs_34.io.otrackS[0] @[CGRA.scala 436:16]
    gibs_43.io.itrackS[0] <= gibs_52.io.otrackN[0] @[CGRA.scala 442:16]
    gibs_43.io.itrackW[0] <= gibs_42.io.otrackE[0] @[CGRA.scala 466:16]
    gibs_43.io.itrackE[0] <= gibs_44.io.otrackW[0] @[CGRA.scala 472:16]
    gibs_44.io.itrackN[0] <= gibs_35.io.otrackS[0] @[CGRA.scala 436:16]
    gibs_44.io.itrackS[0] <= gibs_53.io.otrackN[0] @[CGRA.scala 442:16]
    gibs_44.io.itrackE[0] <= UInt<1>("h00") @[CGRA.scala 457:62]
    gibs_44.io.itrackW[0] <= gibs_43.io.otrackE[0] @[CGRA.scala 459:16]
    gibs_45.io.itrackN[0] <= gibs_36.io.otrackS[0] @[CGRA.scala 436:16]
    gibs_45.io.itrackS[0] <= gibs_54.io.otrackN[0] @[CGRA.scala 442:16]
    gibs_45.io.itrackW[0] <= UInt<1>("h00") @[CGRA.scala 449:62]
    gibs_45.io.itrackE[0] <= gibs_46.io.otrackW[0] @[CGRA.scala 451:16]
    gibs_46.io.itrackN[0] <= gibs_37.io.otrackS[0] @[CGRA.scala 436:16]
    gibs_46.io.itrackS[0] <= gibs_55.io.otrackN[0] @[CGRA.scala 442:16]
    gibs_46.io.itrackW[0] <= gibs_45.io.otrackE[0] @[CGRA.scala 466:16]
    gibs_46.io.itrackE[0] <= gibs_47.io.otrackW[0] @[CGRA.scala 472:16]
    gibs_47.io.itrackN[0] <= gibs_38.io.otrackS[0] @[CGRA.scala 436:16]
    gibs_47.io.itrackS[0] <= gibs_56.io.otrackN[0] @[CGRA.scala 442:16]
    gibs_47.io.itrackW[0] <= gibs_46.io.otrackE[0] @[CGRA.scala 466:16]
    gibs_47.io.itrackE[0] <= gibs_48.io.otrackW[0] @[CGRA.scala 472:16]
    gibs_48.io.itrackN[0] <= gibs_39.io.otrackS[0] @[CGRA.scala 436:16]
    gibs_48.io.itrackS[0] <= gibs_57.io.otrackN[0] @[CGRA.scala 442:16]
    gibs_48.io.itrackW[0] <= gibs_47.io.otrackE[0] @[CGRA.scala 466:16]
    gibs_48.io.itrackE[0] <= gibs_49.io.otrackW[0] @[CGRA.scala 472:16]
    gibs_49.io.itrackN[0] <= gibs_40.io.otrackS[0] @[CGRA.scala 436:16]
    gibs_49.io.itrackS[0] <= gibs_58.io.otrackN[0] @[CGRA.scala 442:16]
    gibs_49.io.itrackW[0] <= gibs_48.io.otrackE[0] @[CGRA.scala 466:16]
    gibs_49.io.itrackE[0] <= gibs_50.io.otrackW[0] @[CGRA.scala 472:16]
    gibs_50.io.itrackN[0] <= gibs_41.io.otrackS[0] @[CGRA.scala 436:16]
    gibs_50.io.itrackS[0] <= gibs_59.io.otrackN[0] @[CGRA.scala 442:16]
    gibs_50.io.itrackW[0] <= gibs_49.io.otrackE[0] @[CGRA.scala 466:16]
    gibs_50.io.itrackE[0] <= gibs_51.io.otrackW[0] @[CGRA.scala 472:16]
    gibs_51.io.itrackN[0] <= gibs_42.io.otrackS[0] @[CGRA.scala 436:16]
    gibs_51.io.itrackS[0] <= gibs_60.io.otrackN[0] @[CGRA.scala 442:16]
    gibs_51.io.itrackW[0] <= gibs_50.io.otrackE[0] @[CGRA.scala 466:16]
    gibs_51.io.itrackE[0] <= gibs_52.io.otrackW[0] @[CGRA.scala 472:16]
    gibs_52.io.itrackN[0] <= gibs_43.io.otrackS[0] @[CGRA.scala 436:16]
    gibs_52.io.itrackS[0] <= gibs_61.io.otrackN[0] @[CGRA.scala 442:16]
    gibs_52.io.itrackW[0] <= gibs_51.io.otrackE[0] @[CGRA.scala 466:16]
    gibs_52.io.itrackE[0] <= gibs_53.io.otrackW[0] @[CGRA.scala 472:16]
    gibs_53.io.itrackN[0] <= gibs_44.io.otrackS[0] @[CGRA.scala 436:16]
    gibs_53.io.itrackS[0] <= gibs_62.io.otrackN[0] @[CGRA.scala 442:16]
    gibs_53.io.itrackE[0] <= UInt<1>("h00") @[CGRA.scala 457:62]
    gibs_53.io.itrackW[0] <= gibs_52.io.otrackE[0] @[CGRA.scala 459:16]
    gibs_54.io.itrackN[0] <= gibs_45.io.otrackS[0] @[CGRA.scala 436:16]
    gibs_54.io.itrackS[0] <= gibs_63.io.otrackN[0] @[CGRA.scala 442:16]
    gibs_54.io.itrackW[0] <= UInt<1>("h00") @[CGRA.scala 449:62]
    gibs_54.io.itrackE[0] <= gibs_55.io.otrackW[0] @[CGRA.scala 451:16]
    gibs_55.io.itrackN[0] <= gibs_46.io.otrackS[0] @[CGRA.scala 436:16]
    gibs_55.io.itrackS[0] <= gibs_64.io.otrackN[0] @[CGRA.scala 442:16]
    gibs_55.io.itrackW[0] <= gibs_54.io.otrackE[0] @[CGRA.scala 466:16]
    gibs_55.io.itrackE[0] <= gibs_56.io.otrackW[0] @[CGRA.scala 472:16]
    gibs_56.io.itrackN[0] <= gibs_47.io.otrackS[0] @[CGRA.scala 436:16]
    gibs_56.io.itrackS[0] <= gibs_65.io.otrackN[0] @[CGRA.scala 442:16]
    gibs_56.io.itrackW[0] <= gibs_55.io.otrackE[0] @[CGRA.scala 466:16]
    gibs_56.io.itrackE[0] <= gibs_57.io.otrackW[0] @[CGRA.scala 472:16]
    gibs_57.io.itrackN[0] <= gibs_48.io.otrackS[0] @[CGRA.scala 436:16]
    gibs_57.io.itrackS[0] <= gibs_66.io.otrackN[0] @[CGRA.scala 442:16]
    gibs_57.io.itrackW[0] <= gibs_56.io.otrackE[0] @[CGRA.scala 466:16]
    gibs_57.io.itrackE[0] <= gibs_58.io.otrackW[0] @[CGRA.scala 472:16]
    gibs_58.io.itrackN[0] <= gibs_49.io.otrackS[0] @[CGRA.scala 436:16]
    gibs_58.io.itrackS[0] <= gibs_67.io.otrackN[0] @[CGRA.scala 442:16]
    gibs_58.io.itrackW[0] <= gibs_57.io.otrackE[0] @[CGRA.scala 466:16]
    gibs_58.io.itrackE[0] <= gibs_59.io.otrackW[0] @[CGRA.scala 472:16]
    gibs_59.io.itrackN[0] <= gibs_50.io.otrackS[0] @[CGRA.scala 436:16]
    gibs_59.io.itrackS[0] <= gibs_68.io.otrackN[0] @[CGRA.scala 442:16]
    gibs_59.io.itrackW[0] <= gibs_58.io.otrackE[0] @[CGRA.scala 466:16]
    gibs_59.io.itrackE[0] <= gibs_60.io.otrackW[0] @[CGRA.scala 472:16]
    gibs_60.io.itrackN[0] <= gibs_51.io.otrackS[0] @[CGRA.scala 436:16]
    gibs_60.io.itrackS[0] <= gibs_69.io.otrackN[0] @[CGRA.scala 442:16]
    gibs_60.io.itrackW[0] <= gibs_59.io.otrackE[0] @[CGRA.scala 466:16]
    gibs_60.io.itrackE[0] <= gibs_61.io.otrackW[0] @[CGRA.scala 472:16]
    gibs_61.io.itrackN[0] <= gibs_52.io.otrackS[0] @[CGRA.scala 436:16]
    gibs_61.io.itrackS[0] <= gibs_70.io.otrackN[0] @[CGRA.scala 442:16]
    gibs_61.io.itrackW[0] <= gibs_60.io.otrackE[0] @[CGRA.scala 466:16]
    gibs_61.io.itrackE[0] <= gibs_62.io.otrackW[0] @[CGRA.scala 472:16]
    gibs_62.io.itrackN[0] <= gibs_53.io.otrackS[0] @[CGRA.scala 436:16]
    gibs_62.io.itrackS[0] <= gibs_71.io.otrackN[0] @[CGRA.scala 442:16]
    gibs_62.io.itrackE[0] <= UInt<1>("h00") @[CGRA.scala 457:62]
    gibs_62.io.itrackW[0] <= gibs_61.io.otrackE[0] @[CGRA.scala 459:16]
    gibs_63.io.itrackN[0] <= gibs_54.io.otrackS[0] @[CGRA.scala 436:16]
    gibs_63.io.itrackS[0] <= gibs_72.io.otrackN[0] @[CGRA.scala 442:16]
    gibs_63.io.itrackW[0] <= UInt<1>("h00") @[CGRA.scala 449:62]
    gibs_63.io.itrackE[0] <= gibs_64.io.otrackW[0] @[CGRA.scala 451:16]
    gibs_64.io.itrackN[0] <= gibs_55.io.otrackS[0] @[CGRA.scala 436:16]
    gibs_64.io.itrackS[0] <= gibs_73.io.otrackN[0] @[CGRA.scala 442:16]
    gibs_64.io.itrackW[0] <= gibs_63.io.otrackE[0] @[CGRA.scala 466:16]
    gibs_64.io.itrackE[0] <= gibs_65.io.otrackW[0] @[CGRA.scala 472:16]
    gibs_65.io.itrackN[0] <= gibs_56.io.otrackS[0] @[CGRA.scala 436:16]
    gibs_65.io.itrackS[0] <= gibs_74.io.otrackN[0] @[CGRA.scala 442:16]
    gibs_65.io.itrackW[0] <= gibs_64.io.otrackE[0] @[CGRA.scala 466:16]
    gibs_65.io.itrackE[0] <= gibs_66.io.otrackW[0] @[CGRA.scala 472:16]
    gibs_66.io.itrackN[0] <= gibs_57.io.otrackS[0] @[CGRA.scala 436:16]
    gibs_66.io.itrackS[0] <= gibs_75.io.otrackN[0] @[CGRA.scala 442:16]
    gibs_66.io.itrackW[0] <= gibs_65.io.otrackE[0] @[CGRA.scala 466:16]
    gibs_66.io.itrackE[0] <= gibs_67.io.otrackW[0] @[CGRA.scala 472:16]
    gibs_67.io.itrackN[0] <= gibs_58.io.otrackS[0] @[CGRA.scala 436:16]
    gibs_67.io.itrackS[0] <= gibs_76.io.otrackN[0] @[CGRA.scala 442:16]
    gibs_67.io.itrackW[0] <= gibs_66.io.otrackE[0] @[CGRA.scala 466:16]
    gibs_67.io.itrackE[0] <= gibs_68.io.otrackW[0] @[CGRA.scala 472:16]
    gibs_68.io.itrackN[0] <= gibs_59.io.otrackS[0] @[CGRA.scala 436:16]
    gibs_68.io.itrackS[0] <= gibs_77.io.otrackN[0] @[CGRA.scala 442:16]
    gibs_68.io.itrackW[0] <= gibs_67.io.otrackE[0] @[CGRA.scala 466:16]
    gibs_68.io.itrackE[0] <= gibs_69.io.otrackW[0] @[CGRA.scala 472:16]
    gibs_69.io.itrackN[0] <= gibs_60.io.otrackS[0] @[CGRA.scala 436:16]
    gibs_69.io.itrackS[0] <= gibs_78.io.otrackN[0] @[CGRA.scala 442:16]
    gibs_69.io.itrackW[0] <= gibs_68.io.otrackE[0] @[CGRA.scala 466:16]
    gibs_69.io.itrackE[0] <= gibs_70.io.otrackW[0] @[CGRA.scala 472:16]
    gibs_70.io.itrackN[0] <= gibs_61.io.otrackS[0] @[CGRA.scala 436:16]
    gibs_70.io.itrackS[0] <= gibs_79.io.otrackN[0] @[CGRA.scala 442:16]
    gibs_70.io.itrackW[0] <= gibs_69.io.otrackE[0] @[CGRA.scala 466:16]
    gibs_70.io.itrackE[0] <= gibs_71.io.otrackW[0] @[CGRA.scala 472:16]
    gibs_71.io.itrackN[0] <= gibs_62.io.otrackS[0] @[CGRA.scala 436:16]
    gibs_71.io.itrackS[0] <= gibs_80.io.otrackN[0] @[CGRA.scala 442:16]
    gibs_71.io.itrackE[0] <= UInt<1>("h00") @[CGRA.scala 457:62]
    gibs_71.io.itrackW[0] <= gibs_70.io.otrackE[0] @[CGRA.scala 459:16]
    gibs_72.io.itrackS[0] <= UInt<1>("h00") @[CGRA.scala 427:62]
    gibs_72.io.itrackN[0] <= gibs_63.io.otrackS[0] @[CGRA.scala 429:16]
    gibs_72.io.itrackW[0] <= UInt<1>("h00") @[CGRA.scala 449:62]
    gibs_72.io.itrackE[0] <= gibs_73.io.otrackW[0] @[CGRA.scala 451:16]
    gibs_73.io.itrackS[0] <= UInt<1>("h00") @[CGRA.scala 427:62]
    gibs_73.io.itrackN[0] <= gibs_64.io.otrackS[0] @[CGRA.scala 429:16]
    gibs_73.io.itrackW[0] <= gibs_72.io.otrackE[0] @[CGRA.scala 466:16]
    gibs_73.io.itrackE[0] <= gibs_74.io.otrackW[0] @[CGRA.scala 472:16]
    gibs_74.io.itrackS[0] <= UInt<1>("h00") @[CGRA.scala 427:62]
    gibs_74.io.itrackN[0] <= gibs_65.io.otrackS[0] @[CGRA.scala 429:16]
    gibs_74.io.itrackW[0] <= gibs_73.io.otrackE[0] @[CGRA.scala 466:16]
    gibs_74.io.itrackE[0] <= gibs_75.io.otrackW[0] @[CGRA.scala 472:16]
    gibs_75.io.itrackS[0] <= UInt<1>("h00") @[CGRA.scala 427:62]
    gibs_75.io.itrackN[0] <= gibs_66.io.otrackS[0] @[CGRA.scala 429:16]
    gibs_75.io.itrackW[0] <= gibs_74.io.otrackE[0] @[CGRA.scala 466:16]
    gibs_75.io.itrackE[0] <= gibs_76.io.otrackW[0] @[CGRA.scala 472:16]
    gibs_76.io.itrackS[0] <= UInt<1>("h00") @[CGRA.scala 427:62]
    gibs_76.io.itrackN[0] <= gibs_67.io.otrackS[0] @[CGRA.scala 429:16]
    gibs_76.io.itrackW[0] <= gibs_75.io.otrackE[0] @[CGRA.scala 466:16]
    gibs_76.io.itrackE[0] <= gibs_77.io.otrackW[0] @[CGRA.scala 472:16]
    gibs_77.io.itrackS[0] <= UInt<1>("h00") @[CGRA.scala 427:62]
    gibs_77.io.itrackN[0] <= gibs_68.io.otrackS[0] @[CGRA.scala 429:16]
    gibs_77.io.itrackW[0] <= gibs_76.io.otrackE[0] @[CGRA.scala 466:16]
    gibs_77.io.itrackE[0] <= gibs_78.io.otrackW[0] @[CGRA.scala 472:16]
    gibs_78.io.itrackS[0] <= UInt<1>("h00") @[CGRA.scala 427:62]
    gibs_78.io.itrackN[0] <= gibs_69.io.otrackS[0] @[CGRA.scala 429:16]
    gibs_78.io.itrackW[0] <= gibs_77.io.otrackE[0] @[CGRA.scala 466:16]
    gibs_78.io.itrackE[0] <= gibs_79.io.otrackW[0] @[CGRA.scala 472:16]
    gibs_79.io.itrackS[0] <= UInt<1>("h00") @[CGRA.scala 427:62]
    gibs_79.io.itrackN[0] <= gibs_70.io.otrackS[0] @[CGRA.scala 429:16]
    gibs_79.io.itrackW[0] <= gibs_78.io.otrackE[0] @[CGRA.scala 466:16]
    gibs_79.io.itrackE[0] <= gibs_80.io.otrackW[0] @[CGRA.scala 472:16]
    gibs_80.io.itrackS[0] <= UInt<1>("h00") @[CGRA.scala 427:62]
    gibs_80.io.itrackN[0] <= gibs_71.io.otrackS[0] @[CGRA.scala 429:16]
    gibs_80.io.itrackE[0] <= UInt<1>("h00") @[CGRA.scala 457:62]
    gibs_80.io.itrackW[0] <= gibs_79.io.otrackE[0] @[CGRA.scala 459:16]
    wire _T : UInt<45>[20] @[CGRA.scala 487:32]
    _T[0] <= UInt<45>("h00") @[CGRA.scala 487:32]
    _T[1] <= UInt<45>("h00") @[CGRA.scala 487:32]
    _T[2] <= UInt<45>("h00") @[CGRA.scala 487:32]
    _T[3] <= UInt<45>("h00") @[CGRA.scala 487:32]
    _T[4] <= UInt<45>("h00") @[CGRA.scala 487:32]
    _T[5] <= UInt<45>("h00") @[CGRA.scala 487:32]
    _T[6] <= UInt<45>("h00") @[CGRA.scala 487:32]
    _T[7] <= UInt<45>("h00") @[CGRA.scala 487:32]
    _T[8] <= UInt<45>("h00") @[CGRA.scala 487:32]
    _T[9] <= UInt<45>("h00") @[CGRA.scala 487:32]
    _T[10] <= UInt<45>("h00") @[CGRA.scala 487:32]
    _T[11] <= UInt<45>("h00") @[CGRA.scala 487:32]
    _T[12] <= UInt<45>("h00") @[CGRA.scala 487:32]
    _T[13] <= UInt<45>("h00") @[CGRA.scala 487:32]
    _T[14] <= UInt<45>("h00") @[CGRA.scala 487:32]
    _T[15] <= UInt<45>("h00") @[CGRA.scala 487:32]
    _T[16] <= UInt<45>("h00") @[CGRA.scala 487:32]
    _T[17] <= UInt<45>("h00") @[CGRA.scala 487:32]
    _T[18] <= UInt<45>("h00") @[CGRA.scala 487:32]
    _T[19] <= UInt<45>("h00") @[CGRA.scala 487:32]
    reg cfgRegs : UInt<45>[20], clock with : (reset => (reset, _T)) @[CGRA.scala 487:24]
    node _T_1 = cat(io.cfg_en, io.cfg_addr) @[Cat.scala 29:58]
    node _T_2 = cat(_T_1, io.cfg_data) @[Cat.scala 29:58]
    cfgRegs[0] <= _T_2 @[CGRA.scala 488:14]
    cfgRegs[1] <= cfgRegs[0] @[CGRA.scala 489:44]
    cfgRegs[2] <= cfgRegs[1] @[CGRA.scala 489:44]
    cfgRegs[3] <= cfgRegs[2] @[CGRA.scala 489:44]
    cfgRegs[4] <= cfgRegs[3] @[CGRA.scala 489:44]
    cfgRegs[5] <= cfgRegs[4] @[CGRA.scala 489:44]
    cfgRegs[6] <= cfgRegs[5] @[CGRA.scala 489:44]
    cfgRegs[7] <= cfgRegs[6] @[CGRA.scala 489:44]
    cfgRegs[8] <= cfgRegs[7] @[CGRA.scala 489:44]
    cfgRegs[9] <= cfgRegs[8] @[CGRA.scala 489:44]
    cfgRegs[10] <= cfgRegs[9] @[CGRA.scala 489:44]
    cfgRegs[11] <= cfgRegs[10] @[CGRA.scala 489:44]
    cfgRegs[12] <= cfgRegs[11] @[CGRA.scala 489:44]
    cfgRegs[13] <= cfgRegs[12] @[CGRA.scala 489:44]
    cfgRegs[14] <= cfgRegs[13] @[CGRA.scala 489:44]
    cfgRegs[15] <= cfgRegs[14] @[CGRA.scala 489:44]
    cfgRegs[16] <= cfgRegs[15] @[CGRA.scala 489:44]
    cfgRegs[17] <= cfgRegs[16] @[CGRA.scala 489:44]
    cfgRegs[18] <= cfgRegs[17] @[CGRA.scala 489:44]
    cfgRegs[19] <= cfgRegs[18] @[CGRA.scala 489:44]
    ibs_0.io.cfg_en <= io.cfg_en @[CGRA.scala 491:24]
    ibs_0.io.cfg_addr <= io.cfg_addr @[CGRA.scala 492:24]
    ibs_0.io.cfg_data <= io.cfg_data @[CGRA.scala 493:24]
    node _T_3 = bits(cfgRegs[0], 44, 44) @[CGRA.scala 494:37]
    obs_0.io.cfg_en <= _T_3 @[CGRA.scala 494:24]
    node _T_4 = bits(cfgRegs[0], 43, 32) @[CGRA.scala 495:37]
    obs_0.io.cfg_addr <= _T_4 @[CGRA.scala 495:24]
    node _T_5 = bits(cfgRegs[0], 31, 0) @[CGRA.scala 496:37]
    obs_0.io.cfg_data <= _T_5 @[CGRA.scala 496:24]
    ibs_1.io.cfg_en <= io.cfg_en @[CGRA.scala 491:24]
    ibs_1.io.cfg_addr <= io.cfg_addr @[CGRA.scala 492:24]
    ibs_1.io.cfg_data <= io.cfg_data @[CGRA.scala 493:24]
    node _T_6 = bits(cfgRegs[0], 44, 44) @[CGRA.scala 494:37]
    obs_1.io.cfg_en <= _T_6 @[CGRA.scala 494:24]
    node _T_7 = bits(cfgRegs[0], 43, 32) @[CGRA.scala 495:37]
    obs_1.io.cfg_addr <= _T_7 @[CGRA.scala 495:24]
    node _T_8 = bits(cfgRegs[0], 31, 0) @[CGRA.scala 496:37]
    obs_1.io.cfg_data <= _T_8 @[CGRA.scala 496:24]
    ibs_2.io.cfg_en <= io.cfg_en @[CGRA.scala 491:24]
    ibs_2.io.cfg_addr <= io.cfg_addr @[CGRA.scala 492:24]
    ibs_2.io.cfg_data <= io.cfg_data @[CGRA.scala 493:24]
    node _T_9 = bits(cfgRegs[0], 44, 44) @[CGRA.scala 494:37]
    obs_2.io.cfg_en <= _T_9 @[CGRA.scala 494:24]
    node _T_10 = bits(cfgRegs[0], 43, 32) @[CGRA.scala 495:37]
    obs_2.io.cfg_addr <= _T_10 @[CGRA.scala 495:24]
    node _T_11 = bits(cfgRegs[0], 31, 0) @[CGRA.scala 496:37]
    obs_2.io.cfg_data <= _T_11 @[CGRA.scala 496:24]
    ibs_3.io.cfg_en <= io.cfg_en @[CGRA.scala 491:24]
    ibs_3.io.cfg_addr <= io.cfg_addr @[CGRA.scala 492:24]
    ibs_3.io.cfg_data <= io.cfg_data @[CGRA.scala 493:24]
    node _T_12 = bits(cfgRegs[0], 44, 44) @[CGRA.scala 494:37]
    obs_3.io.cfg_en <= _T_12 @[CGRA.scala 494:24]
    node _T_13 = bits(cfgRegs[0], 43, 32) @[CGRA.scala 495:37]
    obs_3.io.cfg_addr <= _T_13 @[CGRA.scala 495:24]
    node _T_14 = bits(cfgRegs[0], 31, 0) @[CGRA.scala 496:37]
    obs_3.io.cfg_data <= _T_14 @[CGRA.scala 496:24]
    ibs_4.io.cfg_en <= io.cfg_en @[CGRA.scala 491:24]
    ibs_4.io.cfg_addr <= io.cfg_addr @[CGRA.scala 492:24]
    ibs_4.io.cfg_data <= io.cfg_data @[CGRA.scala 493:24]
    node _T_15 = bits(cfgRegs[0], 44, 44) @[CGRA.scala 494:37]
    obs_4.io.cfg_en <= _T_15 @[CGRA.scala 494:24]
    node _T_16 = bits(cfgRegs[0], 43, 32) @[CGRA.scala 495:37]
    obs_4.io.cfg_addr <= _T_16 @[CGRA.scala 495:24]
    node _T_17 = bits(cfgRegs[0], 31, 0) @[CGRA.scala 496:37]
    obs_4.io.cfg_data <= _T_17 @[CGRA.scala 496:24]
    ibs_5.io.cfg_en <= io.cfg_en @[CGRA.scala 491:24]
    ibs_5.io.cfg_addr <= io.cfg_addr @[CGRA.scala 492:24]
    ibs_5.io.cfg_data <= io.cfg_data @[CGRA.scala 493:24]
    node _T_18 = bits(cfgRegs[0], 44, 44) @[CGRA.scala 494:37]
    obs_5.io.cfg_en <= _T_18 @[CGRA.scala 494:24]
    node _T_19 = bits(cfgRegs[0], 43, 32) @[CGRA.scala 495:37]
    obs_5.io.cfg_addr <= _T_19 @[CGRA.scala 495:24]
    node _T_20 = bits(cfgRegs[0], 31, 0) @[CGRA.scala 496:37]
    obs_5.io.cfg_data <= _T_20 @[CGRA.scala 496:24]
    ibs_6.io.cfg_en <= io.cfg_en @[CGRA.scala 491:24]
    ibs_6.io.cfg_addr <= io.cfg_addr @[CGRA.scala 492:24]
    ibs_6.io.cfg_data <= io.cfg_data @[CGRA.scala 493:24]
    node _T_21 = bits(cfgRegs[0], 44, 44) @[CGRA.scala 494:37]
    obs_6.io.cfg_en <= _T_21 @[CGRA.scala 494:24]
    node _T_22 = bits(cfgRegs[0], 43, 32) @[CGRA.scala 495:37]
    obs_6.io.cfg_addr <= _T_22 @[CGRA.scala 495:24]
    node _T_23 = bits(cfgRegs[0], 31, 0) @[CGRA.scala 496:37]
    obs_6.io.cfg_data <= _T_23 @[CGRA.scala 496:24]
    ibs_7.io.cfg_en <= io.cfg_en @[CGRA.scala 491:24]
    ibs_7.io.cfg_addr <= io.cfg_addr @[CGRA.scala 492:24]
    ibs_7.io.cfg_data <= io.cfg_data @[CGRA.scala 493:24]
    node _T_24 = bits(cfgRegs[0], 44, 44) @[CGRA.scala 494:37]
    obs_7.io.cfg_en <= _T_24 @[CGRA.scala 494:24]
    node _T_25 = bits(cfgRegs[0], 43, 32) @[CGRA.scala 495:37]
    obs_7.io.cfg_addr <= _T_25 @[CGRA.scala 495:24]
    node _T_26 = bits(cfgRegs[0], 31, 0) @[CGRA.scala 496:37]
    obs_7.io.cfg_data <= _T_26 @[CGRA.scala 496:24]
    node _T_27 = bits(cfgRegs[18], 44, 44) @[CGRA.scala 500:49]
    ibs_8.io.cfg_en <= _T_27 @[CGRA.scala 500:26]
    node _T_28 = bits(cfgRegs[18], 43, 32) @[CGRA.scala 501:49]
    ibs_8.io.cfg_addr <= _T_28 @[CGRA.scala 501:26]
    node _T_29 = bits(cfgRegs[18], 31, 0) @[CGRA.scala 502:49]
    ibs_8.io.cfg_data <= _T_29 @[CGRA.scala 502:26]
    node _T_30 = bits(cfgRegs[19], 44, 44) @[CGRA.scala 503:49]
    obs_8.io.cfg_en <= _T_30 @[CGRA.scala 503:26]
    node _T_31 = bits(cfgRegs[19], 43, 32) @[CGRA.scala 504:49]
    obs_8.io.cfg_addr <= _T_31 @[CGRA.scala 504:26]
    node _T_32 = bits(cfgRegs[19], 31, 0) @[CGRA.scala 505:49]
    obs_8.io.cfg_data <= _T_32 @[CGRA.scala 505:26]
    node _T_33 = bits(cfgRegs[18], 44, 44) @[CGRA.scala 500:49]
    ibs_9.io.cfg_en <= _T_33 @[CGRA.scala 500:26]
    node _T_34 = bits(cfgRegs[18], 43, 32) @[CGRA.scala 501:49]
    ibs_9.io.cfg_addr <= _T_34 @[CGRA.scala 501:26]
    node _T_35 = bits(cfgRegs[18], 31, 0) @[CGRA.scala 502:49]
    ibs_9.io.cfg_data <= _T_35 @[CGRA.scala 502:26]
    node _T_36 = bits(cfgRegs[19], 44, 44) @[CGRA.scala 503:49]
    obs_9.io.cfg_en <= _T_36 @[CGRA.scala 503:26]
    node _T_37 = bits(cfgRegs[19], 43, 32) @[CGRA.scala 504:49]
    obs_9.io.cfg_addr <= _T_37 @[CGRA.scala 504:26]
    node _T_38 = bits(cfgRegs[19], 31, 0) @[CGRA.scala 505:49]
    obs_9.io.cfg_data <= _T_38 @[CGRA.scala 505:26]
    node _T_39 = bits(cfgRegs[18], 44, 44) @[CGRA.scala 500:49]
    ibs_10.io.cfg_en <= _T_39 @[CGRA.scala 500:26]
    node _T_40 = bits(cfgRegs[18], 43, 32) @[CGRA.scala 501:49]
    ibs_10.io.cfg_addr <= _T_40 @[CGRA.scala 501:26]
    node _T_41 = bits(cfgRegs[18], 31, 0) @[CGRA.scala 502:49]
    ibs_10.io.cfg_data <= _T_41 @[CGRA.scala 502:26]
    node _T_42 = bits(cfgRegs[19], 44, 44) @[CGRA.scala 503:49]
    obs_10.io.cfg_en <= _T_42 @[CGRA.scala 503:26]
    node _T_43 = bits(cfgRegs[19], 43, 32) @[CGRA.scala 504:49]
    obs_10.io.cfg_addr <= _T_43 @[CGRA.scala 504:26]
    node _T_44 = bits(cfgRegs[19], 31, 0) @[CGRA.scala 505:49]
    obs_10.io.cfg_data <= _T_44 @[CGRA.scala 505:26]
    node _T_45 = bits(cfgRegs[18], 44, 44) @[CGRA.scala 500:49]
    ibs_11.io.cfg_en <= _T_45 @[CGRA.scala 500:26]
    node _T_46 = bits(cfgRegs[18], 43, 32) @[CGRA.scala 501:49]
    ibs_11.io.cfg_addr <= _T_46 @[CGRA.scala 501:26]
    node _T_47 = bits(cfgRegs[18], 31, 0) @[CGRA.scala 502:49]
    ibs_11.io.cfg_data <= _T_47 @[CGRA.scala 502:26]
    node _T_48 = bits(cfgRegs[19], 44, 44) @[CGRA.scala 503:49]
    obs_11.io.cfg_en <= _T_48 @[CGRA.scala 503:26]
    node _T_49 = bits(cfgRegs[19], 43, 32) @[CGRA.scala 504:49]
    obs_11.io.cfg_addr <= _T_49 @[CGRA.scala 504:26]
    node _T_50 = bits(cfgRegs[19], 31, 0) @[CGRA.scala 505:49]
    obs_11.io.cfg_data <= _T_50 @[CGRA.scala 505:26]
    node _T_51 = bits(cfgRegs[18], 44, 44) @[CGRA.scala 500:49]
    ibs_12.io.cfg_en <= _T_51 @[CGRA.scala 500:26]
    node _T_52 = bits(cfgRegs[18], 43, 32) @[CGRA.scala 501:49]
    ibs_12.io.cfg_addr <= _T_52 @[CGRA.scala 501:26]
    node _T_53 = bits(cfgRegs[18], 31, 0) @[CGRA.scala 502:49]
    ibs_12.io.cfg_data <= _T_53 @[CGRA.scala 502:26]
    node _T_54 = bits(cfgRegs[19], 44, 44) @[CGRA.scala 503:49]
    obs_12.io.cfg_en <= _T_54 @[CGRA.scala 503:26]
    node _T_55 = bits(cfgRegs[19], 43, 32) @[CGRA.scala 504:49]
    obs_12.io.cfg_addr <= _T_55 @[CGRA.scala 504:26]
    node _T_56 = bits(cfgRegs[19], 31, 0) @[CGRA.scala 505:49]
    obs_12.io.cfg_data <= _T_56 @[CGRA.scala 505:26]
    node _T_57 = bits(cfgRegs[18], 44, 44) @[CGRA.scala 500:49]
    ibs_13.io.cfg_en <= _T_57 @[CGRA.scala 500:26]
    node _T_58 = bits(cfgRegs[18], 43, 32) @[CGRA.scala 501:49]
    ibs_13.io.cfg_addr <= _T_58 @[CGRA.scala 501:26]
    node _T_59 = bits(cfgRegs[18], 31, 0) @[CGRA.scala 502:49]
    ibs_13.io.cfg_data <= _T_59 @[CGRA.scala 502:26]
    node _T_60 = bits(cfgRegs[19], 44, 44) @[CGRA.scala 503:49]
    obs_13.io.cfg_en <= _T_60 @[CGRA.scala 503:26]
    node _T_61 = bits(cfgRegs[19], 43, 32) @[CGRA.scala 504:49]
    obs_13.io.cfg_addr <= _T_61 @[CGRA.scala 504:26]
    node _T_62 = bits(cfgRegs[19], 31, 0) @[CGRA.scala 505:49]
    obs_13.io.cfg_data <= _T_62 @[CGRA.scala 505:26]
    node _T_63 = bits(cfgRegs[18], 44, 44) @[CGRA.scala 500:49]
    ibs_14.io.cfg_en <= _T_63 @[CGRA.scala 500:26]
    node _T_64 = bits(cfgRegs[18], 43, 32) @[CGRA.scala 501:49]
    ibs_14.io.cfg_addr <= _T_64 @[CGRA.scala 501:26]
    node _T_65 = bits(cfgRegs[18], 31, 0) @[CGRA.scala 502:49]
    ibs_14.io.cfg_data <= _T_65 @[CGRA.scala 502:26]
    node _T_66 = bits(cfgRegs[19], 44, 44) @[CGRA.scala 503:49]
    obs_14.io.cfg_en <= _T_66 @[CGRA.scala 503:26]
    node _T_67 = bits(cfgRegs[19], 43, 32) @[CGRA.scala 504:49]
    obs_14.io.cfg_addr <= _T_67 @[CGRA.scala 504:26]
    node _T_68 = bits(cfgRegs[19], 31, 0) @[CGRA.scala 505:49]
    obs_14.io.cfg_data <= _T_68 @[CGRA.scala 505:26]
    node _T_69 = bits(cfgRegs[18], 44, 44) @[CGRA.scala 500:49]
    ibs_15.io.cfg_en <= _T_69 @[CGRA.scala 500:26]
    node _T_70 = bits(cfgRegs[18], 43, 32) @[CGRA.scala 501:49]
    ibs_15.io.cfg_addr <= _T_70 @[CGRA.scala 501:26]
    node _T_71 = bits(cfgRegs[18], 31, 0) @[CGRA.scala 502:49]
    ibs_15.io.cfg_data <= _T_71 @[CGRA.scala 502:26]
    node _T_72 = bits(cfgRegs[19], 44, 44) @[CGRA.scala 503:49]
    obs_15.io.cfg_en <= _T_72 @[CGRA.scala 503:26]
    node _T_73 = bits(cfgRegs[19], 43, 32) @[CGRA.scala 504:49]
    obs_15.io.cfg_addr <= _T_73 @[CGRA.scala 504:26]
    node _T_74 = bits(cfgRegs[19], 31, 0) @[CGRA.scala 505:49]
    obs_15.io.cfg_data <= _T_74 @[CGRA.scala 505:26]
    node _T_75 = bits(cfgRegs[1], 44, 44) @[CGRA.scala 509:55]
    gibs_0.io.cfg_en <= _T_75 @[CGRA.scala 509:38]
    node _T_76 = bits(cfgRegs[1], 43, 32) @[CGRA.scala 510:55]
    gibs_0.io.cfg_addr <= _T_76 @[CGRA.scala 510:38]
    node _T_77 = bits(cfgRegs[1], 31, 0) @[CGRA.scala 511:55]
    gibs_0.io.cfg_data <= _T_77 @[CGRA.scala 511:38]
    node _T_78 = bits(cfgRegs[2], 44, 44) @[CGRA.scala 513:52]
    pes_0.io.cfg_en <= _T_78 @[CGRA.scala 513:35]
    node _T_79 = bits(cfgRegs[2], 43, 32) @[CGRA.scala 514:52]
    pes_0.io.cfg_addr <= _T_79 @[CGRA.scala 514:35]
    node _T_80 = bits(cfgRegs[2], 31, 0) @[CGRA.scala 515:52]
    pes_0.io.cfg_data <= _T_80 @[CGRA.scala 515:35]
    node _T_81 = bits(cfgRegs[1], 44, 44) @[CGRA.scala 509:55]
    gibs_1.io.cfg_en <= _T_81 @[CGRA.scala 509:38]
    node _T_82 = bits(cfgRegs[1], 43, 32) @[CGRA.scala 510:55]
    gibs_1.io.cfg_addr <= _T_82 @[CGRA.scala 510:38]
    node _T_83 = bits(cfgRegs[1], 31, 0) @[CGRA.scala 511:55]
    gibs_1.io.cfg_data <= _T_83 @[CGRA.scala 511:38]
    node _T_84 = bits(cfgRegs[2], 44, 44) @[CGRA.scala 513:52]
    pes_1.io.cfg_en <= _T_84 @[CGRA.scala 513:35]
    node _T_85 = bits(cfgRegs[2], 43, 32) @[CGRA.scala 514:52]
    pes_1.io.cfg_addr <= _T_85 @[CGRA.scala 514:35]
    node _T_86 = bits(cfgRegs[2], 31, 0) @[CGRA.scala 515:52]
    pes_1.io.cfg_data <= _T_86 @[CGRA.scala 515:35]
    node _T_87 = bits(cfgRegs[1], 44, 44) @[CGRA.scala 509:55]
    gibs_2.io.cfg_en <= _T_87 @[CGRA.scala 509:38]
    node _T_88 = bits(cfgRegs[1], 43, 32) @[CGRA.scala 510:55]
    gibs_2.io.cfg_addr <= _T_88 @[CGRA.scala 510:38]
    node _T_89 = bits(cfgRegs[1], 31, 0) @[CGRA.scala 511:55]
    gibs_2.io.cfg_data <= _T_89 @[CGRA.scala 511:38]
    node _T_90 = bits(cfgRegs[2], 44, 44) @[CGRA.scala 513:52]
    pes_2.io.cfg_en <= _T_90 @[CGRA.scala 513:35]
    node _T_91 = bits(cfgRegs[2], 43, 32) @[CGRA.scala 514:52]
    pes_2.io.cfg_addr <= _T_91 @[CGRA.scala 514:35]
    node _T_92 = bits(cfgRegs[2], 31, 0) @[CGRA.scala 515:52]
    pes_2.io.cfg_data <= _T_92 @[CGRA.scala 515:35]
    node _T_93 = bits(cfgRegs[1], 44, 44) @[CGRA.scala 509:55]
    gibs_3.io.cfg_en <= _T_93 @[CGRA.scala 509:38]
    node _T_94 = bits(cfgRegs[1], 43, 32) @[CGRA.scala 510:55]
    gibs_3.io.cfg_addr <= _T_94 @[CGRA.scala 510:38]
    node _T_95 = bits(cfgRegs[1], 31, 0) @[CGRA.scala 511:55]
    gibs_3.io.cfg_data <= _T_95 @[CGRA.scala 511:38]
    node _T_96 = bits(cfgRegs[2], 44, 44) @[CGRA.scala 513:52]
    pes_3.io.cfg_en <= _T_96 @[CGRA.scala 513:35]
    node _T_97 = bits(cfgRegs[2], 43, 32) @[CGRA.scala 514:52]
    pes_3.io.cfg_addr <= _T_97 @[CGRA.scala 514:35]
    node _T_98 = bits(cfgRegs[2], 31, 0) @[CGRA.scala 515:52]
    pes_3.io.cfg_data <= _T_98 @[CGRA.scala 515:35]
    node _T_99 = bits(cfgRegs[1], 44, 44) @[CGRA.scala 509:55]
    gibs_4.io.cfg_en <= _T_99 @[CGRA.scala 509:38]
    node _T_100 = bits(cfgRegs[1], 43, 32) @[CGRA.scala 510:55]
    gibs_4.io.cfg_addr <= _T_100 @[CGRA.scala 510:38]
    node _T_101 = bits(cfgRegs[1], 31, 0) @[CGRA.scala 511:55]
    gibs_4.io.cfg_data <= _T_101 @[CGRA.scala 511:38]
    node _T_102 = bits(cfgRegs[2], 44, 44) @[CGRA.scala 513:52]
    pes_4.io.cfg_en <= _T_102 @[CGRA.scala 513:35]
    node _T_103 = bits(cfgRegs[2], 43, 32) @[CGRA.scala 514:52]
    pes_4.io.cfg_addr <= _T_103 @[CGRA.scala 514:35]
    node _T_104 = bits(cfgRegs[2], 31, 0) @[CGRA.scala 515:52]
    pes_4.io.cfg_data <= _T_104 @[CGRA.scala 515:35]
    node _T_105 = bits(cfgRegs[1], 44, 44) @[CGRA.scala 509:55]
    gibs_5.io.cfg_en <= _T_105 @[CGRA.scala 509:38]
    node _T_106 = bits(cfgRegs[1], 43, 32) @[CGRA.scala 510:55]
    gibs_5.io.cfg_addr <= _T_106 @[CGRA.scala 510:38]
    node _T_107 = bits(cfgRegs[1], 31, 0) @[CGRA.scala 511:55]
    gibs_5.io.cfg_data <= _T_107 @[CGRA.scala 511:38]
    node _T_108 = bits(cfgRegs[2], 44, 44) @[CGRA.scala 513:52]
    pes_5.io.cfg_en <= _T_108 @[CGRA.scala 513:35]
    node _T_109 = bits(cfgRegs[2], 43, 32) @[CGRA.scala 514:52]
    pes_5.io.cfg_addr <= _T_109 @[CGRA.scala 514:35]
    node _T_110 = bits(cfgRegs[2], 31, 0) @[CGRA.scala 515:52]
    pes_5.io.cfg_data <= _T_110 @[CGRA.scala 515:35]
    node _T_111 = bits(cfgRegs[1], 44, 44) @[CGRA.scala 509:55]
    gibs_6.io.cfg_en <= _T_111 @[CGRA.scala 509:38]
    node _T_112 = bits(cfgRegs[1], 43, 32) @[CGRA.scala 510:55]
    gibs_6.io.cfg_addr <= _T_112 @[CGRA.scala 510:38]
    node _T_113 = bits(cfgRegs[1], 31, 0) @[CGRA.scala 511:55]
    gibs_6.io.cfg_data <= _T_113 @[CGRA.scala 511:38]
    node _T_114 = bits(cfgRegs[2], 44, 44) @[CGRA.scala 513:52]
    pes_6.io.cfg_en <= _T_114 @[CGRA.scala 513:35]
    node _T_115 = bits(cfgRegs[2], 43, 32) @[CGRA.scala 514:52]
    pes_6.io.cfg_addr <= _T_115 @[CGRA.scala 514:35]
    node _T_116 = bits(cfgRegs[2], 31, 0) @[CGRA.scala 515:52]
    pes_6.io.cfg_data <= _T_116 @[CGRA.scala 515:35]
    node _T_117 = bits(cfgRegs[1], 44, 44) @[CGRA.scala 509:55]
    gibs_7.io.cfg_en <= _T_117 @[CGRA.scala 509:38]
    node _T_118 = bits(cfgRegs[1], 43, 32) @[CGRA.scala 510:55]
    gibs_7.io.cfg_addr <= _T_118 @[CGRA.scala 510:38]
    node _T_119 = bits(cfgRegs[1], 31, 0) @[CGRA.scala 511:55]
    gibs_7.io.cfg_data <= _T_119 @[CGRA.scala 511:38]
    node _T_120 = bits(cfgRegs[2], 44, 44) @[CGRA.scala 513:52]
    pes_7.io.cfg_en <= _T_120 @[CGRA.scala 513:35]
    node _T_121 = bits(cfgRegs[2], 43, 32) @[CGRA.scala 514:52]
    pes_7.io.cfg_addr <= _T_121 @[CGRA.scala 514:35]
    node _T_122 = bits(cfgRegs[2], 31, 0) @[CGRA.scala 515:52]
    pes_7.io.cfg_data <= _T_122 @[CGRA.scala 515:35]
    node _T_123 = bits(cfgRegs[1], 44, 44) @[CGRA.scala 509:55]
    gibs_8.io.cfg_en <= _T_123 @[CGRA.scala 509:38]
    node _T_124 = bits(cfgRegs[1], 43, 32) @[CGRA.scala 510:55]
    gibs_8.io.cfg_addr <= _T_124 @[CGRA.scala 510:38]
    node _T_125 = bits(cfgRegs[1], 31, 0) @[CGRA.scala 511:55]
    gibs_8.io.cfg_data <= _T_125 @[CGRA.scala 511:38]
    node _T_126 = bits(cfgRegs[3], 44, 44) @[CGRA.scala 509:55]
    gibs_9.io.cfg_en <= _T_126 @[CGRA.scala 509:38]
    node _T_127 = bits(cfgRegs[3], 43, 32) @[CGRA.scala 510:55]
    gibs_9.io.cfg_addr <= _T_127 @[CGRA.scala 510:38]
    node _T_128 = bits(cfgRegs[3], 31, 0) @[CGRA.scala 511:55]
    gibs_9.io.cfg_data <= _T_128 @[CGRA.scala 511:38]
    node _T_129 = bits(cfgRegs[4], 44, 44) @[CGRA.scala 513:52]
    pes_8.io.cfg_en <= _T_129 @[CGRA.scala 513:35]
    node _T_130 = bits(cfgRegs[4], 43, 32) @[CGRA.scala 514:52]
    pes_8.io.cfg_addr <= _T_130 @[CGRA.scala 514:35]
    node _T_131 = bits(cfgRegs[4], 31, 0) @[CGRA.scala 515:52]
    pes_8.io.cfg_data <= _T_131 @[CGRA.scala 515:35]
    node _T_132 = bits(cfgRegs[3], 44, 44) @[CGRA.scala 509:55]
    gibs_10.io.cfg_en <= _T_132 @[CGRA.scala 509:38]
    node _T_133 = bits(cfgRegs[3], 43, 32) @[CGRA.scala 510:55]
    gibs_10.io.cfg_addr <= _T_133 @[CGRA.scala 510:38]
    node _T_134 = bits(cfgRegs[3], 31, 0) @[CGRA.scala 511:55]
    gibs_10.io.cfg_data <= _T_134 @[CGRA.scala 511:38]
    node _T_135 = bits(cfgRegs[4], 44, 44) @[CGRA.scala 513:52]
    pes_9.io.cfg_en <= _T_135 @[CGRA.scala 513:35]
    node _T_136 = bits(cfgRegs[4], 43, 32) @[CGRA.scala 514:52]
    pes_9.io.cfg_addr <= _T_136 @[CGRA.scala 514:35]
    node _T_137 = bits(cfgRegs[4], 31, 0) @[CGRA.scala 515:52]
    pes_9.io.cfg_data <= _T_137 @[CGRA.scala 515:35]
    node _T_138 = bits(cfgRegs[3], 44, 44) @[CGRA.scala 509:55]
    gibs_11.io.cfg_en <= _T_138 @[CGRA.scala 509:38]
    node _T_139 = bits(cfgRegs[3], 43, 32) @[CGRA.scala 510:55]
    gibs_11.io.cfg_addr <= _T_139 @[CGRA.scala 510:38]
    node _T_140 = bits(cfgRegs[3], 31, 0) @[CGRA.scala 511:55]
    gibs_11.io.cfg_data <= _T_140 @[CGRA.scala 511:38]
    node _T_141 = bits(cfgRegs[4], 44, 44) @[CGRA.scala 513:52]
    pes_10.io.cfg_en <= _T_141 @[CGRA.scala 513:35]
    node _T_142 = bits(cfgRegs[4], 43, 32) @[CGRA.scala 514:52]
    pes_10.io.cfg_addr <= _T_142 @[CGRA.scala 514:35]
    node _T_143 = bits(cfgRegs[4], 31, 0) @[CGRA.scala 515:52]
    pes_10.io.cfg_data <= _T_143 @[CGRA.scala 515:35]
    node _T_144 = bits(cfgRegs[3], 44, 44) @[CGRA.scala 509:55]
    gibs_12.io.cfg_en <= _T_144 @[CGRA.scala 509:38]
    node _T_145 = bits(cfgRegs[3], 43, 32) @[CGRA.scala 510:55]
    gibs_12.io.cfg_addr <= _T_145 @[CGRA.scala 510:38]
    node _T_146 = bits(cfgRegs[3], 31, 0) @[CGRA.scala 511:55]
    gibs_12.io.cfg_data <= _T_146 @[CGRA.scala 511:38]
    node _T_147 = bits(cfgRegs[4], 44, 44) @[CGRA.scala 513:52]
    pes_11.io.cfg_en <= _T_147 @[CGRA.scala 513:35]
    node _T_148 = bits(cfgRegs[4], 43, 32) @[CGRA.scala 514:52]
    pes_11.io.cfg_addr <= _T_148 @[CGRA.scala 514:35]
    node _T_149 = bits(cfgRegs[4], 31, 0) @[CGRA.scala 515:52]
    pes_11.io.cfg_data <= _T_149 @[CGRA.scala 515:35]
    node _T_150 = bits(cfgRegs[3], 44, 44) @[CGRA.scala 509:55]
    gibs_13.io.cfg_en <= _T_150 @[CGRA.scala 509:38]
    node _T_151 = bits(cfgRegs[3], 43, 32) @[CGRA.scala 510:55]
    gibs_13.io.cfg_addr <= _T_151 @[CGRA.scala 510:38]
    node _T_152 = bits(cfgRegs[3], 31, 0) @[CGRA.scala 511:55]
    gibs_13.io.cfg_data <= _T_152 @[CGRA.scala 511:38]
    node _T_153 = bits(cfgRegs[4], 44, 44) @[CGRA.scala 513:52]
    pes_12.io.cfg_en <= _T_153 @[CGRA.scala 513:35]
    node _T_154 = bits(cfgRegs[4], 43, 32) @[CGRA.scala 514:52]
    pes_12.io.cfg_addr <= _T_154 @[CGRA.scala 514:35]
    node _T_155 = bits(cfgRegs[4], 31, 0) @[CGRA.scala 515:52]
    pes_12.io.cfg_data <= _T_155 @[CGRA.scala 515:35]
    node _T_156 = bits(cfgRegs[3], 44, 44) @[CGRA.scala 509:55]
    gibs_14.io.cfg_en <= _T_156 @[CGRA.scala 509:38]
    node _T_157 = bits(cfgRegs[3], 43, 32) @[CGRA.scala 510:55]
    gibs_14.io.cfg_addr <= _T_157 @[CGRA.scala 510:38]
    node _T_158 = bits(cfgRegs[3], 31, 0) @[CGRA.scala 511:55]
    gibs_14.io.cfg_data <= _T_158 @[CGRA.scala 511:38]
    node _T_159 = bits(cfgRegs[4], 44, 44) @[CGRA.scala 513:52]
    pes_13.io.cfg_en <= _T_159 @[CGRA.scala 513:35]
    node _T_160 = bits(cfgRegs[4], 43, 32) @[CGRA.scala 514:52]
    pes_13.io.cfg_addr <= _T_160 @[CGRA.scala 514:35]
    node _T_161 = bits(cfgRegs[4], 31, 0) @[CGRA.scala 515:52]
    pes_13.io.cfg_data <= _T_161 @[CGRA.scala 515:35]
    node _T_162 = bits(cfgRegs[3], 44, 44) @[CGRA.scala 509:55]
    gibs_15.io.cfg_en <= _T_162 @[CGRA.scala 509:38]
    node _T_163 = bits(cfgRegs[3], 43, 32) @[CGRA.scala 510:55]
    gibs_15.io.cfg_addr <= _T_163 @[CGRA.scala 510:38]
    node _T_164 = bits(cfgRegs[3], 31, 0) @[CGRA.scala 511:55]
    gibs_15.io.cfg_data <= _T_164 @[CGRA.scala 511:38]
    node _T_165 = bits(cfgRegs[4], 44, 44) @[CGRA.scala 513:52]
    pes_14.io.cfg_en <= _T_165 @[CGRA.scala 513:35]
    node _T_166 = bits(cfgRegs[4], 43, 32) @[CGRA.scala 514:52]
    pes_14.io.cfg_addr <= _T_166 @[CGRA.scala 514:35]
    node _T_167 = bits(cfgRegs[4], 31, 0) @[CGRA.scala 515:52]
    pes_14.io.cfg_data <= _T_167 @[CGRA.scala 515:35]
    node _T_168 = bits(cfgRegs[3], 44, 44) @[CGRA.scala 509:55]
    gibs_16.io.cfg_en <= _T_168 @[CGRA.scala 509:38]
    node _T_169 = bits(cfgRegs[3], 43, 32) @[CGRA.scala 510:55]
    gibs_16.io.cfg_addr <= _T_169 @[CGRA.scala 510:38]
    node _T_170 = bits(cfgRegs[3], 31, 0) @[CGRA.scala 511:55]
    gibs_16.io.cfg_data <= _T_170 @[CGRA.scala 511:38]
    node _T_171 = bits(cfgRegs[4], 44, 44) @[CGRA.scala 513:52]
    pes_15.io.cfg_en <= _T_171 @[CGRA.scala 513:35]
    node _T_172 = bits(cfgRegs[4], 43, 32) @[CGRA.scala 514:52]
    pes_15.io.cfg_addr <= _T_172 @[CGRA.scala 514:35]
    node _T_173 = bits(cfgRegs[4], 31, 0) @[CGRA.scala 515:52]
    pes_15.io.cfg_data <= _T_173 @[CGRA.scala 515:35]
    node _T_174 = bits(cfgRegs[3], 44, 44) @[CGRA.scala 509:55]
    gibs_17.io.cfg_en <= _T_174 @[CGRA.scala 509:38]
    node _T_175 = bits(cfgRegs[3], 43, 32) @[CGRA.scala 510:55]
    gibs_17.io.cfg_addr <= _T_175 @[CGRA.scala 510:38]
    node _T_176 = bits(cfgRegs[3], 31, 0) @[CGRA.scala 511:55]
    gibs_17.io.cfg_data <= _T_176 @[CGRA.scala 511:38]
    node _T_177 = bits(cfgRegs[5], 44, 44) @[CGRA.scala 509:55]
    gibs_18.io.cfg_en <= _T_177 @[CGRA.scala 509:38]
    node _T_178 = bits(cfgRegs[5], 43, 32) @[CGRA.scala 510:55]
    gibs_18.io.cfg_addr <= _T_178 @[CGRA.scala 510:38]
    node _T_179 = bits(cfgRegs[5], 31, 0) @[CGRA.scala 511:55]
    gibs_18.io.cfg_data <= _T_179 @[CGRA.scala 511:38]
    node _T_180 = bits(cfgRegs[6], 44, 44) @[CGRA.scala 513:52]
    pes_16.io.cfg_en <= _T_180 @[CGRA.scala 513:35]
    node _T_181 = bits(cfgRegs[6], 43, 32) @[CGRA.scala 514:52]
    pes_16.io.cfg_addr <= _T_181 @[CGRA.scala 514:35]
    node _T_182 = bits(cfgRegs[6], 31, 0) @[CGRA.scala 515:52]
    pes_16.io.cfg_data <= _T_182 @[CGRA.scala 515:35]
    node _T_183 = bits(cfgRegs[5], 44, 44) @[CGRA.scala 509:55]
    gibs_19.io.cfg_en <= _T_183 @[CGRA.scala 509:38]
    node _T_184 = bits(cfgRegs[5], 43, 32) @[CGRA.scala 510:55]
    gibs_19.io.cfg_addr <= _T_184 @[CGRA.scala 510:38]
    node _T_185 = bits(cfgRegs[5], 31, 0) @[CGRA.scala 511:55]
    gibs_19.io.cfg_data <= _T_185 @[CGRA.scala 511:38]
    node _T_186 = bits(cfgRegs[6], 44, 44) @[CGRA.scala 513:52]
    pes_17.io.cfg_en <= _T_186 @[CGRA.scala 513:35]
    node _T_187 = bits(cfgRegs[6], 43, 32) @[CGRA.scala 514:52]
    pes_17.io.cfg_addr <= _T_187 @[CGRA.scala 514:35]
    node _T_188 = bits(cfgRegs[6], 31, 0) @[CGRA.scala 515:52]
    pes_17.io.cfg_data <= _T_188 @[CGRA.scala 515:35]
    node _T_189 = bits(cfgRegs[5], 44, 44) @[CGRA.scala 509:55]
    gibs_20.io.cfg_en <= _T_189 @[CGRA.scala 509:38]
    node _T_190 = bits(cfgRegs[5], 43, 32) @[CGRA.scala 510:55]
    gibs_20.io.cfg_addr <= _T_190 @[CGRA.scala 510:38]
    node _T_191 = bits(cfgRegs[5], 31, 0) @[CGRA.scala 511:55]
    gibs_20.io.cfg_data <= _T_191 @[CGRA.scala 511:38]
    node _T_192 = bits(cfgRegs[6], 44, 44) @[CGRA.scala 513:52]
    pes_18.io.cfg_en <= _T_192 @[CGRA.scala 513:35]
    node _T_193 = bits(cfgRegs[6], 43, 32) @[CGRA.scala 514:52]
    pes_18.io.cfg_addr <= _T_193 @[CGRA.scala 514:35]
    node _T_194 = bits(cfgRegs[6], 31, 0) @[CGRA.scala 515:52]
    pes_18.io.cfg_data <= _T_194 @[CGRA.scala 515:35]
    node _T_195 = bits(cfgRegs[5], 44, 44) @[CGRA.scala 509:55]
    gibs_21.io.cfg_en <= _T_195 @[CGRA.scala 509:38]
    node _T_196 = bits(cfgRegs[5], 43, 32) @[CGRA.scala 510:55]
    gibs_21.io.cfg_addr <= _T_196 @[CGRA.scala 510:38]
    node _T_197 = bits(cfgRegs[5], 31, 0) @[CGRA.scala 511:55]
    gibs_21.io.cfg_data <= _T_197 @[CGRA.scala 511:38]
    node _T_198 = bits(cfgRegs[6], 44, 44) @[CGRA.scala 513:52]
    pes_19.io.cfg_en <= _T_198 @[CGRA.scala 513:35]
    node _T_199 = bits(cfgRegs[6], 43, 32) @[CGRA.scala 514:52]
    pes_19.io.cfg_addr <= _T_199 @[CGRA.scala 514:35]
    node _T_200 = bits(cfgRegs[6], 31, 0) @[CGRA.scala 515:52]
    pes_19.io.cfg_data <= _T_200 @[CGRA.scala 515:35]
    node _T_201 = bits(cfgRegs[5], 44, 44) @[CGRA.scala 509:55]
    gibs_22.io.cfg_en <= _T_201 @[CGRA.scala 509:38]
    node _T_202 = bits(cfgRegs[5], 43, 32) @[CGRA.scala 510:55]
    gibs_22.io.cfg_addr <= _T_202 @[CGRA.scala 510:38]
    node _T_203 = bits(cfgRegs[5], 31, 0) @[CGRA.scala 511:55]
    gibs_22.io.cfg_data <= _T_203 @[CGRA.scala 511:38]
    node _T_204 = bits(cfgRegs[6], 44, 44) @[CGRA.scala 513:52]
    pes_20.io.cfg_en <= _T_204 @[CGRA.scala 513:35]
    node _T_205 = bits(cfgRegs[6], 43, 32) @[CGRA.scala 514:52]
    pes_20.io.cfg_addr <= _T_205 @[CGRA.scala 514:35]
    node _T_206 = bits(cfgRegs[6], 31, 0) @[CGRA.scala 515:52]
    pes_20.io.cfg_data <= _T_206 @[CGRA.scala 515:35]
    node _T_207 = bits(cfgRegs[5], 44, 44) @[CGRA.scala 509:55]
    gibs_23.io.cfg_en <= _T_207 @[CGRA.scala 509:38]
    node _T_208 = bits(cfgRegs[5], 43, 32) @[CGRA.scala 510:55]
    gibs_23.io.cfg_addr <= _T_208 @[CGRA.scala 510:38]
    node _T_209 = bits(cfgRegs[5], 31, 0) @[CGRA.scala 511:55]
    gibs_23.io.cfg_data <= _T_209 @[CGRA.scala 511:38]
    node _T_210 = bits(cfgRegs[6], 44, 44) @[CGRA.scala 513:52]
    pes_21.io.cfg_en <= _T_210 @[CGRA.scala 513:35]
    node _T_211 = bits(cfgRegs[6], 43, 32) @[CGRA.scala 514:52]
    pes_21.io.cfg_addr <= _T_211 @[CGRA.scala 514:35]
    node _T_212 = bits(cfgRegs[6], 31, 0) @[CGRA.scala 515:52]
    pes_21.io.cfg_data <= _T_212 @[CGRA.scala 515:35]
    node _T_213 = bits(cfgRegs[5], 44, 44) @[CGRA.scala 509:55]
    gibs_24.io.cfg_en <= _T_213 @[CGRA.scala 509:38]
    node _T_214 = bits(cfgRegs[5], 43, 32) @[CGRA.scala 510:55]
    gibs_24.io.cfg_addr <= _T_214 @[CGRA.scala 510:38]
    node _T_215 = bits(cfgRegs[5], 31, 0) @[CGRA.scala 511:55]
    gibs_24.io.cfg_data <= _T_215 @[CGRA.scala 511:38]
    node _T_216 = bits(cfgRegs[6], 44, 44) @[CGRA.scala 513:52]
    pes_22.io.cfg_en <= _T_216 @[CGRA.scala 513:35]
    node _T_217 = bits(cfgRegs[6], 43, 32) @[CGRA.scala 514:52]
    pes_22.io.cfg_addr <= _T_217 @[CGRA.scala 514:35]
    node _T_218 = bits(cfgRegs[6], 31, 0) @[CGRA.scala 515:52]
    pes_22.io.cfg_data <= _T_218 @[CGRA.scala 515:35]
    node _T_219 = bits(cfgRegs[5], 44, 44) @[CGRA.scala 509:55]
    gibs_25.io.cfg_en <= _T_219 @[CGRA.scala 509:38]
    node _T_220 = bits(cfgRegs[5], 43, 32) @[CGRA.scala 510:55]
    gibs_25.io.cfg_addr <= _T_220 @[CGRA.scala 510:38]
    node _T_221 = bits(cfgRegs[5], 31, 0) @[CGRA.scala 511:55]
    gibs_25.io.cfg_data <= _T_221 @[CGRA.scala 511:38]
    node _T_222 = bits(cfgRegs[6], 44, 44) @[CGRA.scala 513:52]
    pes_23.io.cfg_en <= _T_222 @[CGRA.scala 513:35]
    node _T_223 = bits(cfgRegs[6], 43, 32) @[CGRA.scala 514:52]
    pes_23.io.cfg_addr <= _T_223 @[CGRA.scala 514:35]
    node _T_224 = bits(cfgRegs[6], 31, 0) @[CGRA.scala 515:52]
    pes_23.io.cfg_data <= _T_224 @[CGRA.scala 515:35]
    node _T_225 = bits(cfgRegs[5], 44, 44) @[CGRA.scala 509:55]
    gibs_26.io.cfg_en <= _T_225 @[CGRA.scala 509:38]
    node _T_226 = bits(cfgRegs[5], 43, 32) @[CGRA.scala 510:55]
    gibs_26.io.cfg_addr <= _T_226 @[CGRA.scala 510:38]
    node _T_227 = bits(cfgRegs[5], 31, 0) @[CGRA.scala 511:55]
    gibs_26.io.cfg_data <= _T_227 @[CGRA.scala 511:38]
    node _T_228 = bits(cfgRegs[7], 44, 44) @[CGRA.scala 509:55]
    gibs_27.io.cfg_en <= _T_228 @[CGRA.scala 509:38]
    node _T_229 = bits(cfgRegs[7], 43, 32) @[CGRA.scala 510:55]
    gibs_27.io.cfg_addr <= _T_229 @[CGRA.scala 510:38]
    node _T_230 = bits(cfgRegs[7], 31, 0) @[CGRA.scala 511:55]
    gibs_27.io.cfg_data <= _T_230 @[CGRA.scala 511:38]
    node _T_231 = bits(cfgRegs[8], 44, 44) @[CGRA.scala 513:52]
    pes_24.io.cfg_en <= _T_231 @[CGRA.scala 513:35]
    node _T_232 = bits(cfgRegs[8], 43, 32) @[CGRA.scala 514:52]
    pes_24.io.cfg_addr <= _T_232 @[CGRA.scala 514:35]
    node _T_233 = bits(cfgRegs[8], 31, 0) @[CGRA.scala 515:52]
    pes_24.io.cfg_data <= _T_233 @[CGRA.scala 515:35]
    node _T_234 = bits(cfgRegs[7], 44, 44) @[CGRA.scala 509:55]
    gibs_28.io.cfg_en <= _T_234 @[CGRA.scala 509:38]
    node _T_235 = bits(cfgRegs[7], 43, 32) @[CGRA.scala 510:55]
    gibs_28.io.cfg_addr <= _T_235 @[CGRA.scala 510:38]
    node _T_236 = bits(cfgRegs[7], 31, 0) @[CGRA.scala 511:55]
    gibs_28.io.cfg_data <= _T_236 @[CGRA.scala 511:38]
    node _T_237 = bits(cfgRegs[8], 44, 44) @[CGRA.scala 513:52]
    pes_25.io.cfg_en <= _T_237 @[CGRA.scala 513:35]
    node _T_238 = bits(cfgRegs[8], 43, 32) @[CGRA.scala 514:52]
    pes_25.io.cfg_addr <= _T_238 @[CGRA.scala 514:35]
    node _T_239 = bits(cfgRegs[8], 31, 0) @[CGRA.scala 515:52]
    pes_25.io.cfg_data <= _T_239 @[CGRA.scala 515:35]
    node _T_240 = bits(cfgRegs[7], 44, 44) @[CGRA.scala 509:55]
    gibs_29.io.cfg_en <= _T_240 @[CGRA.scala 509:38]
    node _T_241 = bits(cfgRegs[7], 43, 32) @[CGRA.scala 510:55]
    gibs_29.io.cfg_addr <= _T_241 @[CGRA.scala 510:38]
    node _T_242 = bits(cfgRegs[7], 31, 0) @[CGRA.scala 511:55]
    gibs_29.io.cfg_data <= _T_242 @[CGRA.scala 511:38]
    node _T_243 = bits(cfgRegs[8], 44, 44) @[CGRA.scala 513:52]
    pes_26.io.cfg_en <= _T_243 @[CGRA.scala 513:35]
    node _T_244 = bits(cfgRegs[8], 43, 32) @[CGRA.scala 514:52]
    pes_26.io.cfg_addr <= _T_244 @[CGRA.scala 514:35]
    node _T_245 = bits(cfgRegs[8], 31, 0) @[CGRA.scala 515:52]
    pes_26.io.cfg_data <= _T_245 @[CGRA.scala 515:35]
    node _T_246 = bits(cfgRegs[7], 44, 44) @[CGRA.scala 509:55]
    gibs_30.io.cfg_en <= _T_246 @[CGRA.scala 509:38]
    node _T_247 = bits(cfgRegs[7], 43, 32) @[CGRA.scala 510:55]
    gibs_30.io.cfg_addr <= _T_247 @[CGRA.scala 510:38]
    node _T_248 = bits(cfgRegs[7], 31, 0) @[CGRA.scala 511:55]
    gibs_30.io.cfg_data <= _T_248 @[CGRA.scala 511:38]
    node _T_249 = bits(cfgRegs[8], 44, 44) @[CGRA.scala 513:52]
    pes_27.io.cfg_en <= _T_249 @[CGRA.scala 513:35]
    node _T_250 = bits(cfgRegs[8], 43, 32) @[CGRA.scala 514:52]
    pes_27.io.cfg_addr <= _T_250 @[CGRA.scala 514:35]
    node _T_251 = bits(cfgRegs[8], 31, 0) @[CGRA.scala 515:52]
    pes_27.io.cfg_data <= _T_251 @[CGRA.scala 515:35]
    node _T_252 = bits(cfgRegs[7], 44, 44) @[CGRA.scala 509:55]
    gibs_31.io.cfg_en <= _T_252 @[CGRA.scala 509:38]
    node _T_253 = bits(cfgRegs[7], 43, 32) @[CGRA.scala 510:55]
    gibs_31.io.cfg_addr <= _T_253 @[CGRA.scala 510:38]
    node _T_254 = bits(cfgRegs[7], 31, 0) @[CGRA.scala 511:55]
    gibs_31.io.cfg_data <= _T_254 @[CGRA.scala 511:38]
    node _T_255 = bits(cfgRegs[8], 44, 44) @[CGRA.scala 513:52]
    pes_28.io.cfg_en <= _T_255 @[CGRA.scala 513:35]
    node _T_256 = bits(cfgRegs[8], 43, 32) @[CGRA.scala 514:52]
    pes_28.io.cfg_addr <= _T_256 @[CGRA.scala 514:35]
    node _T_257 = bits(cfgRegs[8], 31, 0) @[CGRA.scala 515:52]
    pes_28.io.cfg_data <= _T_257 @[CGRA.scala 515:35]
    node _T_258 = bits(cfgRegs[7], 44, 44) @[CGRA.scala 509:55]
    gibs_32.io.cfg_en <= _T_258 @[CGRA.scala 509:38]
    node _T_259 = bits(cfgRegs[7], 43, 32) @[CGRA.scala 510:55]
    gibs_32.io.cfg_addr <= _T_259 @[CGRA.scala 510:38]
    node _T_260 = bits(cfgRegs[7], 31, 0) @[CGRA.scala 511:55]
    gibs_32.io.cfg_data <= _T_260 @[CGRA.scala 511:38]
    node _T_261 = bits(cfgRegs[8], 44, 44) @[CGRA.scala 513:52]
    pes_29.io.cfg_en <= _T_261 @[CGRA.scala 513:35]
    node _T_262 = bits(cfgRegs[8], 43, 32) @[CGRA.scala 514:52]
    pes_29.io.cfg_addr <= _T_262 @[CGRA.scala 514:35]
    node _T_263 = bits(cfgRegs[8], 31, 0) @[CGRA.scala 515:52]
    pes_29.io.cfg_data <= _T_263 @[CGRA.scala 515:35]
    node _T_264 = bits(cfgRegs[7], 44, 44) @[CGRA.scala 509:55]
    gibs_33.io.cfg_en <= _T_264 @[CGRA.scala 509:38]
    node _T_265 = bits(cfgRegs[7], 43, 32) @[CGRA.scala 510:55]
    gibs_33.io.cfg_addr <= _T_265 @[CGRA.scala 510:38]
    node _T_266 = bits(cfgRegs[7], 31, 0) @[CGRA.scala 511:55]
    gibs_33.io.cfg_data <= _T_266 @[CGRA.scala 511:38]
    node _T_267 = bits(cfgRegs[8], 44, 44) @[CGRA.scala 513:52]
    pes_30.io.cfg_en <= _T_267 @[CGRA.scala 513:35]
    node _T_268 = bits(cfgRegs[8], 43, 32) @[CGRA.scala 514:52]
    pes_30.io.cfg_addr <= _T_268 @[CGRA.scala 514:35]
    node _T_269 = bits(cfgRegs[8], 31, 0) @[CGRA.scala 515:52]
    pes_30.io.cfg_data <= _T_269 @[CGRA.scala 515:35]
    node _T_270 = bits(cfgRegs[7], 44, 44) @[CGRA.scala 509:55]
    gibs_34.io.cfg_en <= _T_270 @[CGRA.scala 509:38]
    node _T_271 = bits(cfgRegs[7], 43, 32) @[CGRA.scala 510:55]
    gibs_34.io.cfg_addr <= _T_271 @[CGRA.scala 510:38]
    node _T_272 = bits(cfgRegs[7], 31, 0) @[CGRA.scala 511:55]
    gibs_34.io.cfg_data <= _T_272 @[CGRA.scala 511:38]
    node _T_273 = bits(cfgRegs[8], 44, 44) @[CGRA.scala 513:52]
    pes_31.io.cfg_en <= _T_273 @[CGRA.scala 513:35]
    node _T_274 = bits(cfgRegs[8], 43, 32) @[CGRA.scala 514:52]
    pes_31.io.cfg_addr <= _T_274 @[CGRA.scala 514:35]
    node _T_275 = bits(cfgRegs[8], 31, 0) @[CGRA.scala 515:52]
    pes_31.io.cfg_data <= _T_275 @[CGRA.scala 515:35]
    node _T_276 = bits(cfgRegs[7], 44, 44) @[CGRA.scala 509:55]
    gibs_35.io.cfg_en <= _T_276 @[CGRA.scala 509:38]
    node _T_277 = bits(cfgRegs[7], 43, 32) @[CGRA.scala 510:55]
    gibs_35.io.cfg_addr <= _T_277 @[CGRA.scala 510:38]
    node _T_278 = bits(cfgRegs[7], 31, 0) @[CGRA.scala 511:55]
    gibs_35.io.cfg_data <= _T_278 @[CGRA.scala 511:38]
    node _T_279 = bits(cfgRegs[9], 44, 44) @[CGRA.scala 509:55]
    gibs_36.io.cfg_en <= _T_279 @[CGRA.scala 509:38]
    node _T_280 = bits(cfgRegs[9], 43, 32) @[CGRA.scala 510:55]
    gibs_36.io.cfg_addr <= _T_280 @[CGRA.scala 510:38]
    node _T_281 = bits(cfgRegs[9], 31, 0) @[CGRA.scala 511:55]
    gibs_36.io.cfg_data <= _T_281 @[CGRA.scala 511:38]
    node _T_282 = bits(cfgRegs[10], 44, 44) @[CGRA.scala 513:52]
    pes_32.io.cfg_en <= _T_282 @[CGRA.scala 513:35]
    node _T_283 = bits(cfgRegs[10], 43, 32) @[CGRA.scala 514:52]
    pes_32.io.cfg_addr <= _T_283 @[CGRA.scala 514:35]
    node _T_284 = bits(cfgRegs[10], 31, 0) @[CGRA.scala 515:52]
    pes_32.io.cfg_data <= _T_284 @[CGRA.scala 515:35]
    node _T_285 = bits(cfgRegs[9], 44, 44) @[CGRA.scala 509:55]
    gibs_37.io.cfg_en <= _T_285 @[CGRA.scala 509:38]
    node _T_286 = bits(cfgRegs[9], 43, 32) @[CGRA.scala 510:55]
    gibs_37.io.cfg_addr <= _T_286 @[CGRA.scala 510:38]
    node _T_287 = bits(cfgRegs[9], 31, 0) @[CGRA.scala 511:55]
    gibs_37.io.cfg_data <= _T_287 @[CGRA.scala 511:38]
    node _T_288 = bits(cfgRegs[10], 44, 44) @[CGRA.scala 513:52]
    pes_33.io.cfg_en <= _T_288 @[CGRA.scala 513:35]
    node _T_289 = bits(cfgRegs[10], 43, 32) @[CGRA.scala 514:52]
    pes_33.io.cfg_addr <= _T_289 @[CGRA.scala 514:35]
    node _T_290 = bits(cfgRegs[10], 31, 0) @[CGRA.scala 515:52]
    pes_33.io.cfg_data <= _T_290 @[CGRA.scala 515:35]
    node _T_291 = bits(cfgRegs[9], 44, 44) @[CGRA.scala 509:55]
    gibs_38.io.cfg_en <= _T_291 @[CGRA.scala 509:38]
    node _T_292 = bits(cfgRegs[9], 43, 32) @[CGRA.scala 510:55]
    gibs_38.io.cfg_addr <= _T_292 @[CGRA.scala 510:38]
    node _T_293 = bits(cfgRegs[9], 31, 0) @[CGRA.scala 511:55]
    gibs_38.io.cfg_data <= _T_293 @[CGRA.scala 511:38]
    node _T_294 = bits(cfgRegs[10], 44, 44) @[CGRA.scala 513:52]
    pes_34.io.cfg_en <= _T_294 @[CGRA.scala 513:35]
    node _T_295 = bits(cfgRegs[10], 43, 32) @[CGRA.scala 514:52]
    pes_34.io.cfg_addr <= _T_295 @[CGRA.scala 514:35]
    node _T_296 = bits(cfgRegs[10], 31, 0) @[CGRA.scala 515:52]
    pes_34.io.cfg_data <= _T_296 @[CGRA.scala 515:35]
    node _T_297 = bits(cfgRegs[9], 44, 44) @[CGRA.scala 509:55]
    gibs_39.io.cfg_en <= _T_297 @[CGRA.scala 509:38]
    node _T_298 = bits(cfgRegs[9], 43, 32) @[CGRA.scala 510:55]
    gibs_39.io.cfg_addr <= _T_298 @[CGRA.scala 510:38]
    node _T_299 = bits(cfgRegs[9], 31, 0) @[CGRA.scala 511:55]
    gibs_39.io.cfg_data <= _T_299 @[CGRA.scala 511:38]
    node _T_300 = bits(cfgRegs[10], 44, 44) @[CGRA.scala 513:52]
    pes_35.io.cfg_en <= _T_300 @[CGRA.scala 513:35]
    node _T_301 = bits(cfgRegs[10], 43, 32) @[CGRA.scala 514:52]
    pes_35.io.cfg_addr <= _T_301 @[CGRA.scala 514:35]
    node _T_302 = bits(cfgRegs[10], 31, 0) @[CGRA.scala 515:52]
    pes_35.io.cfg_data <= _T_302 @[CGRA.scala 515:35]
    node _T_303 = bits(cfgRegs[9], 44, 44) @[CGRA.scala 509:55]
    gibs_40.io.cfg_en <= _T_303 @[CGRA.scala 509:38]
    node _T_304 = bits(cfgRegs[9], 43, 32) @[CGRA.scala 510:55]
    gibs_40.io.cfg_addr <= _T_304 @[CGRA.scala 510:38]
    node _T_305 = bits(cfgRegs[9], 31, 0) @[CGRA.scala 511:55]
    gibs_40.io.cfg_data <= _T_305 @[CGRA.scala 511:38]
    node _T_306 = bits(cfgRegs[10], 44, 44) @[CGRA.scala 513:52]
    pes_36.io.cfg_en <= _T_306 @[CGRA.scala 513:35]
    node _T_307 = bits(cfgRegs[10], 43, 32) @[CGRA.scala 514:52]
    pes_36.io.cfg_addr <= _T_307 @[CGRA.scala 514:35]
    node _T_308 = bits(cfgRegs[10], 31, 0) @[CGRA.scala 515:52]
    pes_36.io.cfg_data <= _T_308 @[CGRA.scala 515:35]
    node _T_309 = bits(cfgRegs[9], 44, 44) @[CGRA.scala 509:55]
    gibs_41.io.cfg_en <= _T_309 @[CGRA.scala 509:38]
    node _T_310 = bits(cfgRegs[9], 43, 32) @[CGRA.scala 510:55]
    gibs_41.io.cfg_addr <= _T_310 @[CGRA.scala 510:38]
    node _T_311 = bits(cfgRegs[9], 31, 0) @[CGRA.scala 511:55]
    gibs_41.io.cfg_data <= _T_311 @[CGRA.scala 511:38]
    node _T_312 = bits(cfgRegs[10], 44, 44) @[CGRA.scala 513:52]
    pes_37.io.cfg_en <= _T_312 @[CGRA.scala 513:35]
    node _T_313 = bits(cfgRegs[10], 43, 32) @[CGRA.scala 514:52]
    pes_37.io.cfg_addr <= _T_313 @[CGRA.scala 514:35]
    node _T_314 = bits(cfgRegs[10], 31, 0) @[CGRA.scala 515:52]
    pes_37.io.cfg_data <= _T_314 @[CGRA.scala 515:35]
    node _T_315 = bits(cfgRegs[9], 44, 44) @[CGRA.scala 509:55]
    gibs_42.io.cfg_en <= _T_315 @[CGRA.scala 509:38]
    node _T_316 = bits(cfgRegs[9], 43, 32) @[CGRA.scala 510:55]
    gibs_42.io.cfg_addr <= _T_316 @[CGRA.scala 510:38]
    node _T_317 = bits(cfgRegs[9], 31, 0) @[CGRA.scala 511:55]
    gibs_42.io.cfg_data <= _T_317 @[CGRA.scala 511:38]
    node _T_318 = bits(cfgRegs[10], 44, 44) @[CGRA.scala 513:52]
    pes_38.io.cfg_en <= _T_318 @[CGRA.scala 513:35]
    node _T_319 = bits(cfgRegs[10], 43, 32) @[CGRA.scala 514:52]
    pes_38.io.cfg_addr <= _T_319 @[CGRA.scala 514:35]
    node _T_320 = bits(cfgRegs[10], 31, 0) @[CGRA.scala 515:52]
    pes_38.io.cfg_data <= _T_320 @[CGRA.scala 515:35]
    node _T_321 = bits(cfgRegs[9], 44, 44) @[CGRA.scala 509:55]
    gibs_43.io.cfg_en <= _T_321 @[CGRA.scala 509:38]
    node _T_322 = bits(cfgRegs[9], 43, 32) @[CGRA.scala 510:55]
    gibs_43.io.cfg_addr <= _T_322 @[CGRA.scala 510:38]
    node _T_323 = bits(cfgRegs[9], 31, 0) @[CGRA.scala 511:55]
    gibs_43.io.cfg_data <= _T_323 @[CGRA.scala 511:38]
    node _T_324 = bits(cfgRegs[10], 44, 44) @[CGRA.scala 513:52]
    pes_39.io.cfg_en <= _T_324 @[CGRA.scala 513:35]
    node _T_325 = bits(cfgRegs[10], 43, 32) @[CGRA.scala 514:52]
    pes_39.io.cfg_addr <= _T_325 @[CGRA.scala 514:35]
    node _T_326 = bits(cfgRegs[10], 31, 0) @[CGRA.scala 515:52]
    pes_39.io.cfg_data <= _T_326 @[CGRA.scala 515:35]
    node _T_327 = bits(cfgRegs[9], 44, 44) @[CGRA.scala 509:55]
    gibs_44.io.cfg_en <= _T_327 @[CGRA.scala 509:38]
    node _T_328 = bits(cfgRegs[9], 43, 32) @[CGRA.scala 510:55]
    gibs_44.io.cfg_addr <= _T_328 @[CGRA.scala 510:38]
    node _T_329 = bits(cfgRegs[9], 31, 0) @[CGRA.scala 511:55]
    gibs_44.io.cfg_data <= _T_329 @[CGRA.scala 511:38]
    node _T_330 = bits(cfgRegs[11], 44, 44) @[CGRA.scala 509:55]
    gibs_45.io.cfg_en <= _T_330 @[CGRA.scala 509:38]
    node _T_331 = bits(cfgRegs[11], 43, 32) @[CGRA.scala 510:55]
    gibs_45.io.cfg_addr <= _T_331 @[CGRA.scala 510:38]
    node _T_332 = bits(cfgRegs[11], 31, 0) @[CGRA.scala 511:55]
    gibs_45.io.cfg_data <= _T_332 @[CGRA.scala 511:38]
    node _T_333 = bits(cfgRegs[12], 44, 44) @[CGRA.scala 513:52]
    pes_40.io.cfg_en <= _T_333 @[CGRA.scala 513:35]
    node _T_334 = bits(cfgRegs[12], 43, 32) @[CGRA.scala 514:52]
    pes_40.io.cfg_addr <= _T_334 @[CGRA.scala 514:35]
    node _T_335 = bits(cfgRegs[12], 31, 0) @[CGRA.scala 515:52]
    pes_40.io.cfg_data <= _T_335 @[CGRA.scala 515:35]
    node _T_336 = bits(cfgRegs[11], 44, 44) @[CGRA.scala 509:55]
    gibs_46.io.cfg_en <= _T_336 @[CGRA.scala 509:38]
    node _T_337 = bits(cfgRegs[11], 43, 32) @[CGRA.scala 510:55]
    gibs_46.io.cfg_addr <= _T_337 @[CGRA.scala 510:38]
    node _T_338 = bits(cfgRegs[11], 31, 0) @[CGRA.scala 511:55]
    gibs_46.io.cfg_data <= _T_338 @[CGRA.scala 511:38]
    node _T_339 = bits(cfgRegs[12], 44, 44) @[CGRA.scala 513:52]
    pes_41.io.cfg_en <= _T_339 @[CGRA.scala 513:35]
    node _T_340 = bits(cfgRegs[12], 43, 32) @[CGRA.scala 514:52]
    pes_41.io.cfg_addr <= _T_340 @[CGRA.scala 514:35]
    node _T_341 = bits(cfgRegs[12], 31, 0) @[CGRA.scala 515:52]
    pes_41.io.cfg_data <= _T_341 @[CGRA.scala 515:35]
    node _T_342 = bits(cfgRegs[11], 44, 44) @[CGRA.scala 509:55]
    gibs_47.io.cfg_en <= _T_342 @[CGRA.scala 509:38]
    node _T_343 = bits(cfgRegs[11], 43, 32) @[CGRA.scala 510:55]
    gibs_47.io.cfg_addr <= _T_343 @[CGRA.scala 510:38]
    node _T_344 = bits(cfgRegs[11], 31, 0) @[CGRA.scala 511:55]
    gibs_47.io.cfg_data <= _T_344 @[CGRA.scala 511:38]
    node _T_345 = bits(cfgRegs[12], 44, 44) @[CGRA.scala 513:52]
    pes_42.io.cfg_en <= _T_345 @[CGRA.scala 513:35]
    node _T_346 = bits(cfgRegs[12], 43, 32) @[CGRA.scala 514:52]
    pes_42.io.cfg_addr <= _T_346 @[CGRA.scala 514:35]
    node _T_347 = bits(cfgRegs[12], 31, 0) @[CGRA.scala 515:52]
    pes_42.io.cfg_data <= _T_347 @[CGRA.scala 515:35]
    node _T_348 = bits(cfgRegs[11], 44, 44) @[CGRA.scala 509:55]
    gibs_48.io.cfg_en <= _T_348 @[CGRA.scala 509:38]
    node _T_349 = bits(cfgRegs[11], 43, 32) @[CGRA.scala 510:55]
    gibs_48.io.cfg_addr <= _T_349 @[CGRA.scala 510:38]
    node _T_350 = bits(cfgRegs[11], 31, 0) @[CGRA.scala 511:55]
    gibs_48.io.cfg_data <= _T_350 @[CGRA.scala 511:38]
    node _T_351 = bits(cfgRegs[12], 44, 44) @[CGRA.scala 513:52]
    pes_43.io.cfg_en <= _T_351 @[CGRA.scala 513:35]
    node _T_352 = bits(cfgRegs[12], 43, 32) @[CGRA.scala 514:52]
    pes_43.io.cfg_addr <= _T_352 @[CGRA.scala 514:35]
    node _T_353 = bits(cfgRegs[12], 31, 0) @[CGRA.scala 515:52]
    pes_43.io.cfg_data <= _T_353 @[CGRA.scala 515:35]
    node _T_354 = bits(cfgRegs[11], 44, 44) @[CGRA.scala 509:55]
    gibs_49.io.cfg_en <= _T_354 @[CGRA.scala 509:38]
    node _T_355 = bits(cfgRegs[11], 43, 32) @[CGRA.scala 510:55]
    gibs_49.io.cfg_addr <= _T_355 @[CGRA.scala 510:38]
    node _T_356 = bits(cfgRegs[11], 31, 0) @[CGRA.scala 511:55]
    gibs_49.io.cfg_data <= _T_356 @[CGRA.scala 511:38]
    node _T_357 = bits(cfgRegs[12], 44, 44) @[CGRA.scala 513:52]
    pes_44.io.cfg_en <= _T_357 @[CGRA.scala 513:35]
    node _T_358 = bits(cfgRegs[12], 43, 32) @[CGRA.scala 514:52]
    pes_44.io.cfg_addr <= _T_358 @[CGRA.scala 514:35]
    node _T_359 = bits(cfgRegs[12], 31, 0) @[CGRA.scala 515:52]
    pes_44.io.cfg_data <= _T_359 @[CGRA.scala 515:35]
    node _T_360 = bits(cfgRegs[11], 44, 44) @[CGRA.scala 509:55]
    gibs_50.io.cfg_en <= _T_360 @[CGRA.scala 509:38]
    node _T_361 = bits(cfgRegs[11], 43, 32) @[CGRA.scala 510:55]
    gibs_50.io.cfg_addr <= _T_361 @[CGRA.scala 510:38]
    node _T_362 = bits(cfgRegs[11], 31, 0) @[CGRA.scala 511:55]
    gibs_50.io.cfg_data <= _T_362 @[CGRA.scala 511:38]
    node _T_363 = bits(cfgRegs[12], 44, 44) @[CGRA.scala 513:52]
    pes_45.io.cfg_en <= _T_363 @[CGRA.scala 513:35]
    node _T_364 = bits(cfgRegs[12], 43, 32) @[CGRA.scala 514:52]
    pes_45.io.cfg_addr <= _T_364 @[CGRA.scala 514:35]
    node _T_365 = bits(cfgRegs[12], 31, 0) @[CGRA.scala 515:52]
    pes_45.io.cfg_data <= _T_365 @[CGRA.scala 515:35]
    node _T_366 = bits(cfgRegs[11], 44, 44) @[CGRA.scala 509:55]
    gibs_51.io.cfg_en <= _T_366 @[CGRA.scala 509:38]
    node _T_367 = bits(cfgRegs[11], 43, 32) @[CGRA.scala 510:55]
    gibs_51.io.cfg_addr <= _T_367 @[CGRA.scala 510:38]
    node _T_368 = bits(cfgRegs[11], 31, 0) @[CGRA.scala 511:55]
    gibs_51.io.cfg_data <= _T_368 @[CGRA.scala 511:38]
    node _T_369 = bits(cfgRegs[12], 44, 44) @[CGRA.scala 513:52]
    pes_46.io.cfg_en <= _T_369 @[CGRA.scala 513:35]
    node _T_370 = bits(cfgRegs[12], 43, 32) @[CGRA.scala 514:52]
    pes_46.io.cfg_addr <= _T_370 @[CGRA.scala 514:35]
    node _T_371 = bits(cfgRegs[12], 31, 0) @[CGRA.scala 515:52]
    pes_46.io.cfg_data <= _T_371 @[CGRA.scala 515:35]
    node _T_372 = bits(cfgRegs[11], 44, 44) @[CGRA.scala 509:55]
    gibs_52.io.cfg_en <= _T_372 @[CGRA.scala 509:38]
    node _T_373 = bits(cfgRegs[11], 43, 32) @[CGRA.scala 510:55]
    gibs_52.io.cfg_addr <= _T_373 @[CGRA.scala 510:38]
    node _T_374 = bits(cfgRegs[11], 31, 0) @[CGRA.scala 511:55]
    gibs_52.io.cfg_data <= _T_374 @[CGRA.scala 511:38]
    node _T_375 = bits(cfgRegs[12], 44, 44) @[CGRA.scala 513:52]
    pes_47.io.cfg_en <= _T_375 @[CGRA.scala 513:35]
    node _T_376 = bits(cfgRegs[12], 43, 32) @[CGRA.scala 514:52]
    pes_47.io.cfg_addr <= _T_376 @[CGRA.scala 514:35]
    node _T_377 = bits(cfgRegs[12], 31, 0) @[CGRA.scala 515:52]
    pes_47.io.cfg_data <= _T_377 @[CGRA.scala 515:35]
    node _T_378 = bits(cfgRegs[11], 44, 44) @[CGRA.scala 509:55]
    gibs_53.io.cfg_en <= _T_378 @[CGRA.scala 509:38]
    node _T_379 = bits(cfgRegs[11], 43, 32) @[CGRA.scala 510:55]
    gibs_53.io.cfg_addr <= _T_379 @[CGRA.scala 510:38]
    node _T_380 = bits(cfgRegs[11], 31, 0) @[CGRA.scala 511:55]
    gibs_53.io.cfg_data <= _T_380 @[CGRA.scala 511:38]
    node _T_381 = bits(cfgRegs[13], 44, 44) @[CGRA.scala 509:55]
    gibs_54.io.cfg_en <= _T_381 @[CGRA.scala 509:38]
    node _T_382 = bits(cfgRegs[13], 43, 32) @[CGRA.scala 510:55]
    gibs_54.io.cfg_addr <= _T_382 @[CGRA.scala 510:38]
    node _T_383 = bits(cfgRegs[13], 31, 0) @[CGRA.scala 511:55]
    gibs_54.io.cfg_data <= _T_383 @[CGRA.scala 511:38]
    node _T_384 = bits(cfgRegs[14], 44, 44) @[CGRA.scala 513:52]
    pes_48.io.cfg_en <= _T_384 @[CGRA.scala 513:35]
    node _T_385 = bits(cfgRegs[14], 43, 32) @[CGRA.scala 514:52]
    pes_48.io.cfg_addr <= _T_385 @[CGRA.scala 514:35]
    node _T_386 = bits(cfgRegs[14], 31, 0) @[CGRA.scala 515:52]
    pes_48.io.cfg_data <= _T_386 @[CGRA.scala 515:35]
    node _T_387 = bits(cfgRegs[13], 44, 44) @[CGRA.scala 509:55]
    gibs_55.io.cfg_en <= _T_387 @[CGRA.scala 509:38]
    node _T_388 = bits(cfgRegs[13], 43, 32) @[CGRA.scala 510:55]
    gibs_55.io.cfg_addr <= _T_388 @[CGRA.scala 510:38]
    node _T_389 = bits(cfgRegs[13], 31, 0) @[CGRA.scala 511:55]
    gibs_55.io.cfg_data <= _T_389 @[CGRA.scala 511:38]
    node _T_390 = bits(cfgRegs[14], 44, 44) @[CGRA.scala 513:52]
    pes_49.io.cfg_en <= _T_390 @[CGRA.scala 513:35]
    node _T_391 = bits(cfgRegs[14], 43, 32) @[CGRA.scala 514:52]
    pes_49.io.cfg_addr <= _T_391 @[CGRA.scala 514:35]
    node _T_392 = bits(cfgRegs[14], 31, 0) @[CGRA.scala 515:52]
    pes_49.io.cfg_data <= _T_392 @[CGRA.scala 515:35]
    node _T_393 = bits(cfgRegs[13], 44, 44) @[CGRA.scala 509:55]
    gibs_56.io.cfg_en <= _T_393 @[CGRA.scala 509:38]
    node _T_394 = bits(cfgRegs[13], 43, 32) @[CGRA.scala 510:55]
    gibs_56.io.cfg_addr <= _T_394 @[CGRA.scala 510:38]
    node _T_395 = bits(cfgRegs[13], 31, 0) @[CGRA.scala 511:55]
    gibs_56.io.cfg_data <= _T_395 @[CGRA.scala 511:38]
    node _T_396 = bits(cfgRegs[14], 44, 44) @[CGRA.scala 513:52]
    pes_50.io.cfg_en <= _T_396 @[CGRA.scala 513:35]
    node _T_397 = bits(cfgRegs[14], 43, 32) @[CGRA.scala 514:52]
    pes_50.io.cfg_addr <= _T_397 @[CGRA.scala 514:35]
    node _T_398 = bits(cfgRegs[14], 31, 0) @[CGRA.scala 515:52]
    pes_50.io.cfg_data <= _T_398 @[CGRA.scala 515:35]
    node _T_399 = bits(cfgRegs[13], 44, 44) @[CGRA.scala 509:55]
    gibs_57.io.cfg_en <= _T_399 @[CGRA.scala 509:38]
    node _T_400 = bits(cfgRegs[13], 43, 32) @[CGRA.scala 510:55]
    gibs_57.io.cfg_addr <= _T_400 @[CGRA.scala 510:38]
    node _T_401 = bits(cfgRegs[13], 31, 0) @[CGRA.scala 511:55]
    gibs_57.io.cfg_data <= _T_401 @[CGRA.scala 511:38]
    node _T_402 = bits(cfgRegs[14], 44, 44) @[CGRA.scala 513:52]
    pes_51.io.cfg_en <= _T_402 @[CGRA.scala 513:35]
    node _T_403 = bits(cfgRegs[14], 43, 32) @[CGRA.scala 514:52]
    pes_51.io.cfg_addr <= _T_403 @[CGRA.scala 514:35]
    node _T_404 = bits(cfgRegs[14], 31, 0) @[CGRA.scala 515:52]
    pes_51.io.cfg_data <= _T_404 @[CGRA.scala 515:35]
    node _T_405 = bits(cfgRegs[13], 44, 44) @[CGRA.scala 509:55]
    gibs_58.io.cfg_en <= _T_405 @[CGRA.scala 509:38]
    node _T_406 = bits(cfgRegs[13], 43, 32) @[CGRA.scala 510:55]
    gibs_58.io.cfg_addr <= _T_406 @[CGRA.scala 510:38]
    node _T_407 = bits(cfgRegs[13], 31, 0) @[CGRA.scala 511:55]
    gibs_58.io.cfg_data <= _T_407 @[CGRA.scala 511:38]
    node _T_408 = bits(cfgRegs[14], 44, 44) @[CGRA.scala 513:52]
    pes_52.io.cfg_en <= _T_408 @[CGRA.scala 513:35]
    node _T_409 = bits(cfgRegs[14], 43, 32) @[CGRA.scala 514:52]
    pes_52.io.cfg_addr <= _T_409 @[CGRA.scala 514:35]
    node _T_410 = bits(cfgRegs[14], 31, 0) @[CGRA.scala 515:52]
    pes_52.io.cfg_data <= _T_410 @[CGRA.scala 515:35]
    node _T_411 = bits(cfgRegs[13], 44, 44) @[CGRA.scala 509:55]
    gibs_59.io.cfg_en <= _T_411 @[CGRA.scala 509:38]
    node _T_412 = bits(cfgRegs[13], 43, 32) @[CGRA.scala 510:55]
    gibs_59.io.cfg_addr <= _T_412 @[CGRA.scala 510:38]
    node _T_413 = bits(cfgRegs[13], 31, 0) @[CGRA.scala 511:55]
    gibs_59.io.cfg_data <= _T_413 @[CGRA.scala 511:38]
    node _T_414 = bits(cfgRegs[14], 44, 44) @[CGRA.scala 513:52]
    pes_53.io.cfg_en <= _T_414 @[CGRA.scala 513:35]
    node _T_415 = bits(cfgRegs[14], 43, 32) @[CGRA.scala 514:52]
    pes_53.io.cfg_addr <= _T_415 @[CGRA.scala 514:35]
    node _T_416 = bits(cfgRegs[14], 31, 0) @[CGRA.scala 515:52]
    pes_53.io.cfg_data <= _T_416 @[CGRA.scala 515:35]
    node _T_417 = bits(cfgRegs[13], 44, 44) @[CGRA.scala 509:55]
    gibs_60.io.cfg_en <= _T_417 @[CGRA.scala 509:38]
    node _T_418 = bits(cfgRegs[13], 43, 32) @[CGRA.scala 510:55]
    gibs_60.io.cfg_addr <= _T_418 @[CGRA.scala 510:38]
    node _T_419 = bits(cfgRegs[13], 31, 0) @[CGRA.scala 511:55]
    gibs_60.io.cfg_data <= _T_419 @[CGRA.scala 511:38]
    node _T_420 = bits(cfgRegs[14], 44, 44) @[CGRA.scala 513:52]
    pes_54.io.cfg_en <= _T_420 @[CGRA.scala 513:35]
    node _T_421 = bits(cfgRegs[14], 43, 32) @[CGRA.scala 514:52]
    pes_54.io.cfg_addr <= _T_421 @[CGRA.scala 514:35]
    node _T_422 = bits(cfgRegs[14], 31, 0) @[CGRA.scala 515:52]
    pes_54.io.cfg_data <= _T_422 @[CGRA.scala 515:35]
    node _T_423 = bits(cfgRegs[13], 44, 44) @[CGRA.scala 509:55]
    gibs_61.io.cfg_en <= _T_423 @[CGRA.scala 509:38]
    node _T_424 = bits(cfgRegs[13], 43, 32) @[CGRA.scala 510:55]
    gibs_61.io.cfg_addr <= _T_424 @[CGRA.scala 510:38]
    node _T_425 = bits(cfgRegs[13], 31, 0) @[CGRA.scala 511:55]
    gibs_61.io.cfg_data <= _T_425 @[CGRA.scala 511:38]
    node _T_426 = bits(cfgRegs[14], 44, 44) @[CGRA.scala 513:52]
    pes_55.io.cfg_en <= _T_426 @[CGRA.scala 513:35]
    node _T_427 = bits(cfgRegs[14], 43, 32) @[CGRA.scala 514:52]
    pes_55.io.cfg_addr <= _T_427 @[CGRA.scala 514:35]
    node _T_428 = bits(cfgRegs[14], 31, 0) @[CGRA.scala 515:52]
    pes_55.io.cfg_data <= _T_428 @[CGRA.scala 515:35]
    node _T_429 = bits(cfgRegs[13], 44, 44) @[CGRA.scala 509:55]
    gibs_62.io.cfg_en <= _T_429 @[CGRA.scala 509:38]
    node _T_430 = bits(cfgRegs[13], 43, 32) @[CGRA.scala 510:55]
    gibs_62.io.cfg_addr <= _T_430 @[CGRA.scala 510:38]
    node _T_431 = bits(cfgRegs[13], 31, 0) @[CGRA.scala 511:55]
    gibs_62.io.cfg_data <= _T_431 @[CGRA.scala 511:38]
    node _T_432 = bits(cfgRegs[15], 44, 44) @[CGRA.scala 509:55]
    gibs_63.io.cfg_en <= _T_432 @[CGRA.scala 509:38]
    node _T_433 = bits(cfgRegs[15], 43, 32) @[CGRA.scala 510:55]
    gibs_63.io.cfg_addr <= _T_433 @[CGRA.scala 510:38]
    node _T_434 = bits(cfgRegs[15], 31, 0) @[CGRA.scala 511:55]
    gibs_63.io.cfg_data <= _T_434 @[CGRA.scala 511:38]
    node _T_435 = bits(cfgRegs[16], 44, 44) @[CGRA.scala 513:52]
    pes_56.io.cfg_en <= _T_435 @[CGRA.scala 513:35]
    node _T_436 = bits(cfgRegs[16], 43, 32) @[CGRA.scala 514:52]
    pes_56.io.cfg_addr <= _T_436 @[CGRA.scala 514:35]
    node _T_437 = bits(cfgRegs[16], 31, 0) @[CGRA.scala 515:52]
    pes_56.io.cfg_data <= _T_437 @[CGRA.scala 515:35]
    node _T_438 = bits(cfgRegs[15], 44, 44) @[CGRA.scala 509:55]
    gibs_64.io.cfg_en <= _T_438 @[CGRA.scala 509:38]
    node _T_439 = bits(cfgRegs[15], 43, 32) @[CGRA.scala 510:55]
    gibs_64.io.cfg_addr <= _T_439 @[CGRA.scala 510:38]
    node _T_440 = bits(cfgRegs[15], 31, 0) @[CGRA.scala 511:55]
    gibs_64.io.cfg_data <= _T_440 @[CGRA.scala 511:38]
    node _T_441 = bits(cfgRegs[16], 44, 44) @[CGRA.scala 513:52]
    pes_57.io.cfg_en <= _T_441 @[CGRA.scala 513:35]
    node _T_442 = bits(cfgRegs[16], 43, 32) @[CGRA.scala 514:52]
    pes_57.io.cfg_addr <= _T_442 @[CGRA.scala 514:35]
    node _T_443 = bits(cfgRegs[16], 31, 0) @[CGRA.scala 515:52]
    pes_57.io.cfg_data <= _T_443 @[CGRA.scala 515:35]
    node _T_444 = bits(cfgRegs[15], 44, 44) @[CGRA.scala 509:55]
    gibs_65.io.cfg_en <= _T_444 @[CGRA.scala 509:38]
    node _T_445 = bits(cfgRegs[15], 43, 32) @[CGRA.scala 510:55]
    gibs_65.io.cfg_addr <= _T_445 @[CGRA.scala 510:38]
    node _T_446 = bits(cfgRegs[15], 31, 0) @[CGRA.scala 511:55]
    gibs_65.io.cfg_data <= _T_446 @[CGRA.scala 511:38]
    node _T_447 = bits(cfgRegs[16], 44, 44) @[CGRA.scala 513:52]
    pes_58.io.cfg_en <= _T_447 @[CGRA.scala 513:35]
    node _T_448 = bits(cfgRegs[16], 43, 32) @[CGRA.scala 514:52]
    pes_58.io.cfg_addr <= _T_448 @[CGRA.scala 514:35]
    node _T_449 = bits(cfgRegs[16], 31, 0) @[CGRA.scala 515:52]
    pes_58.io.cfg_data <= _T_449 @[CGRA.scala 515:35]
    node _T_450 = bits(cfgRegs[15], 44, 44) @[CGRA.scala 509:55]
    gibs_66.io.cfg_en <= _T_450 @[CGRA.scala 509:38]
    node _T_451 = bits(cfgRegs[15], 43, 32) @[CGRA.scala 510:55]
    gibs_66.io.cfg_addr <= _T_451 @[CGRA.scala 510:38]
    node _T_452 = bits(cfgRegs[15], 31, 0) @[CGRA.scala 511:55]
    gibs_66.io.cfg_data <= _T_452 @[CGRA.scala 511:38]
    node _T_453 = bits(cfgRegs[16], 44, 44) @[CGRA.scala 513:52]
    pes_59.io.cfg_en <= _T_453 @[CGRA.scala 513:35]
    node _T_454 = bits(cfgRegs[16], 43, 32) @[CGRA.scala 514:52]
    pes_59.io.cfg_addr <= _T_454 @[CGRA.scala 514:35]
    node _T_455 = bits(cfgRegs[16], 31, 0) @[CGRA.scala 515:52]
    pes_59.io.cfg_data <= _T_455 @[CGRA.scala 515:35]
    node _T_456 = bits(cfgRegs[15], 44, 44) @[CGRA.scala 509:55]
    gibs_67.io.cfg_en <= _T_456 @[CGRA.scala 509:38]
    node _T_457 = bits(cfgRegs[15], 43, 32) @[CGRA.scala 510:55]
    gibs_67.io.cfg_addr <= _T_457 @[CGRA.scala 510:38]
    node _T_458 = bits(cfgRegs[15], 31, 0) @[CGRA.scala 511:55]
    gibs_67.io.cfg_data <= _T_458 @[CGRA.scala 511:38]
    node _T_459 = bits(cfgRegs[16], 44, 44) @[CGRA.scala 513:52]
    pes_60.io.cfg_en <= _T_459 @[CGRA.scala 513:35]
    node _T_460 = bits(cfgRegs[16], 43, 32) @[CGRA.scala 514:52]
    pes_60.io.cfg_addr <= _T_460 @[CGRA.scala 514:35]
    node _T_461 = bits(cfgRegs[16], 31, 0) @[CGRA.scala 515:52]
    pes_60.io.cfg_data <= _T_461 @[CGRA.scala 515:35]
    node _T_462 = bits(cfgRegs[15], 44, 44) @[CGRA.scala 509:55]
    gibs_68.io.cfg_en <= _T_462 @[CGRA.scala 509:38]
    node _T_463 = bits(cfgRegs[15], 43, 32) @[CGRA.scala 510:55]
    gibs_68.io.cfg_addr <= _T_463 @[CGRA.scala 510:38]
    node _T_464 = bits(cfgRegs[15], 31, 0) @[CGRA.scala 511:55]
    gibs_68.io.cfg_data <= _T_464 @[CGRA.scala 511:38]
    node _T_465 = bits(cfgRegs[16], 44, 44) @[CGRA.scala 513:52]
    pes_61.io.cfg_en <= _T_465 @[CGRA.scala 513:35]
    node _T_466 = bits(cfgRegs[16], 43, 32) @[CGRA.scala 514:52]
    pes_61.io.cfg_addr <= _T_466 @[CGRA.scala 514:35]
    node _T_467 = bits(cfgRegs[16], 31, 0) @[CGRA.scala 515:52]
    pes_61.io.cfg_data <= _T_467 @[CGRA.scala 515:35]
    node _T_468 = bits(cfgRegs[15], 44, 44) @[CGRA.scala 509:55]
    gibs_69.io.cfg_en <= _T_468 @[CGRA.scala 509:38]
    node _T_469 = bits(cfgRegs[15], 43, 32) @[CGRA.scala 510:55]
    gibs_69.io.cfg_addr <= _T_469 @[CGRA.scala 510:38]
    node _T_470 = bits(cfgRegs[15], 31, 0) @[CGRA.scala 511:55]
    gibs_69.io.cfg_data <= _T_470 @[CGRA.scala 511:38]
    node _T_471 = bits(cfgRegs[16], 44, 44) @[CGRA.scala 513:52]
    pes_62.io.cfg_en <= _T_471 @[CGRA.scala 513:35]
    node _T_472 = bits(cfgRegs[16], 43, 32) @[CGRA.scala 514:52]
    pes_62.io.cfg_addr <= _T_472 @[CGRA.scala 514:35]
    node _T_473 = bits(cfgRegs[16], 31, 0) @[CGRA.scala 515:52]
    pes_62.io.cfg_data <= _T_473 @[CGRA.scala 515:35]
    node _T_474 = bits(cfgRegs[15], 44, 44) @[CGRA.scala 509:55]
    gibs_70.io.cfg_en <= _T_474 @[CGRA.scala 509:38]
    node _T_475 = bits(cfgRegs[15], 43, 32) @[CGRA.scala 510:55]
    gibs_70.io.cfg_addr <= _T_475 @[CGRA.scala 510:38]
    node _T_476 = bits(cfgRegs[15], 31, 0) @[CGRA.scala 511:55]
    gibs_70.io.cfg_data <= _T_476 @[CGRA.scala 511:38]
    node _T_477 = bits(cfgRegs[16], 44, 44) @[CGRA.scala 513:52]
    pes_63.io.cfg_en <= _T_477 @[CGRA.scala 513:35]
    node _T_478 = bits(cfgRegs[16], 43, 32) @[CGRA.scala 514:52]
    pes_63.io.cfg_addr <= _T_478 @[CGRA.scala 514:35]
    node _T_479 = bits(cfgRegs[16], 31, 0) @[CGRA.scala 515:52]
    pes_63.io.cfg_data <= _T_479 @[CGRA.scala 515:35]
    node _T_480 = bits(cfgRegs[15], 44, 44) @[CGRA.scala 509:55]
    gibs_71.io.cfg_en <= _T_480 @[CGRA.scala 509:38]
    node _T_481 = bits(cfgRegs[15], 43, 32) @[CGRA.scala 510:55]
    gibs_71.io.cfg_addr <= _T_481 @[CGRA.scala 510:38]
    node _T_482 = bits(cfgRegs[15], 31, 0) @[CGRA.scala 511:55]
    gibs_71.io.cfg_data <= _T_482 @[CGRA.scala 511:38]
    node _T_483 = bits(cfgRegs[17], 44, 44) @[CGRA.scala 509:55]
    gibs_72.io.cfg_en <= _T_483 @[CGRA.scala 509:38]
    node _T_484 = bits(cfgRegs[17], 43, 32) @[CGRA.scala 510:55]
    gibs_72.io.cfg_addr <= _T_484 @[CGRA.scala 510:38]
    node _T_485 = bits(cfgRegs[17], 31, 0) @[CGRA.scala 511:55]
    gibs_72.io.cfg_data <= _T_485 @[CGRA.scala 511:38]
    node _T_486 = bits(cfgRegs[17], 44, 44) @[CGRA.scala 509:55]
    gibs_73.io.cfg_en <= _T_486 @[CGRA.scala 509:38]
    node _T_487 = bits(cfgRegs[17], 43, 32) @[CGRA.scala 510:55]
    gibs_73.io.cfg_addr <= _T_487 @[CGRA.scala 510:38]
    node _T_488 = bits(cfgRegs[17], 31, 0) @[CGRA.scala 511:55]
    gibs_73.io.cfg_data <= _T_488 @[CGRA.scala 511:38]
    node _T_489 = bits(cfgRegs[17], 44, 44) @[CGRA.scala 509:55]
    gibs_74.io.cfg_en <= _T_489 @[CGRA.scala 509:38]
    node _T_490 = bits(cfgRegs[17], 43, 32) @[CGRA.scala 510:55]
    gibs_74.io.cfg_addr <= _T_490 @[CGRA.scala 510:38]
    node _T_491 = bits(cfgRegs[17], 31, 0) @[CGRA.scala 511:55]
    gibs_74.io.cfg_data <= _T_491 @[CGRA.scala 511:38]
    node _T_492 = bits(cfgRegs[17], 44, 44) @[CGRA.scala 509:55]
    gibs_75.io.cfg_en <= _T_492 @[CGRA.scala 509:38]
    node _T_493 = bits(cfgRegs[17], 43, 32) @[CGRA.scala 510:55]
    gibs_75.io.cfg_addr <= _T_493 @[CGRA.scala 510:38]
    node _T_494 = bits(cfgRegs[17], 31, 0) @[CGRA.scala 511:55]
    gibs_75.io.cfg_data <= _T_494 @[CGRA.scala 511:38]
    node _T_495 = bits(cfgRegs[17], 44, 44) @[CGRA.scala 509:55]
    gibs_76.io.cfg_en <= _T_495 @[CGRA.scala 509:38]
    node _T_496 = bits(cfgRegs[17], 43, 32) @[CGRA.scala 510:55]
    gibs_76.io.cfg_addr <= _T_496 @[CGRA.scala 510:38]
    node _T_497 = bits(cfgRegs[17], 31, 0) @[CGRA.scala 511:55]
    gibs_76.io.cfg_data <= _T_497 @[CGRA.scala 511:38]
    node _T_498 = bits(cfgRegs[17], 44, 44) @[CGRA.scala 509:55]
    gibs_77.io.cfg_en <= _T_498 @[CGRA.scala 509:38]
    node _T_499 = bits(cfgRegs[17], 43, 32) @[CGRA.scala 510:55]
    gibs_77.io.cfg_addr <= _T_499 @[CGRA.scala 510:38]
    node _T_500 = bits(cfgRegs[17], 31, 0) @[CGRA.scala 511:55]
    gibs_77.io.cfg_data <= _T_500 @[CGRA.scala 511:38]
    node _T_501 = bits(cfgRegs[17], 44, 44) @[CGRA.scala 509:55]
    gibs_78.io.cfg_en <= _T_501 @[CGRA.scala 509:38]
    node _T_502 = bits(cfgRegs[17], 43, 32) @[CGRA.scala 510:55]
    gibs_78.io.cfg_addr <= _T_502 @[CGRA.scala 510:38]
    node _T_503 = bits(cfgRegs[17], 31, 0) @[CGRA.scala 511:55]
    gibs_78.io.cfg_data <= _T_503 @[CGRA.scala 511:38]
    node _T_504 = bits(cfgRegs[17], 44, 44) @[CGRA.scala 509:55]
    gibs_79.io.cfg_en <= _T_504 @[CGRA.scala 509:38]
    node _T_505 = bits(cfgRegs[17], 43, 32) @[CGRA.scala 510:55]
    gibs_79.io.cfg_addr <= _T_505 @[CGRA.scala 510:38]
    node _T_506 = bits(cfgRegs[17], 31, 0) @[CGRA.scala 511:55]
    gibs_79.io.cfg_data <= _T_506 @[CGRA.scala 511:38]
    node _T_507 = bits(cfgRegs[17], 44, 44) @[CGRA.scala 509:55]
    gibs_80.io.cfg_en <= _T_507 @[CGRA.scala 509:38]
    node _T_508 = bits(cfgRegs[17], 43, 32) @[CGRA.scala 510:55]
    gibs_80.io.cfg_addr <= _T_508 @[CGRA.scala 510:38]
    node _T_509 = bits(cfgRegs[17], 31, 0) @[CGRA.scala 511:55]
    gibs_80.io.cfg_data <= _T_509 @[CGRA.scala 511:38]
    
